
HVSD 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcbc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800de94  0800de94  0001de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2d8  0800e2d8  000205c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2d8  0800e2d8  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2e0  0800e2e0  000205c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2e0  0800e2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e4  0800e2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c8  20000000  0800e2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  200005c8  0800e8b0  000205c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a04  0800e8b0  00021a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002906f  00000000  00000000  000205f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006305  00000000  00000000  00049667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  0004f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dd8  00000000  00000000  00051a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1ca  00000000  00000000  00053808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002885e  00000000  00000000  000809d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4923  00000000  00000000  000a9230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019db53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086ac  00000000  00000000  0019dba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200005c8 	.word	0x200005c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800de7c 	.word	0x0800de7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200005cc 	.word	0x200005cc
 8000214:	0800de7c 	.word	0x0800de7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <ASPEP_ComputeHeaderCRC>:
  * table because the amount of input data is not a multiple of 8 bits.
  *
  * The resulting CRC is written in bits 28 to 31 of @p header and the whole header is returned.
  */
static void ASPEP_ComputeHeaderCRC(uint32_t *headerPtr)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint8_t crc = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
  uint32_t header = *headerPtr;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60bb      	str	r3, [r7, #8]

#ifndef CRC4_PER_NIBBLE
  header &= 0x0fffffffU;
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000534:	60bb      	str	r3, [r7, #8]

  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	4053      	eors	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <ASPEP_ComputeHeaderCRC+0x84>)
 8000544:	5c9b      	ldrb	r3, [r3, r2]
 8000546:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	b2da      	uxtb	r2, r3
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	4053      	eors	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <ASPEP_ComputeHeaderCRC+0x84>)
 8000558:	5c9b      	ldrb	r3, [r3, r2]
 800055a:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	b2da      	uxtb	r2, r3
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4053      	eors	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <ASPEP_ComputeHeaderCRC+0x84>)
 800056c:	5c9b      	ldrb	r3, [r3, r2]
 800056e:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000570:	7bfa      	ldrb	r2, [r7, #15]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0e1b      	lsrs	r3, r3, #24
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
 800057c:	4053      	eors	r3, r2
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <ASPEP_ComputeHeaderCRC+0x88>)
 8000580:	5cd3      	ldrb	r3, [r2, r3]
 8000582:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 16U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 20U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0xfU)];
#endif /* CRC4_PER_NIBBLE */

  *headerPtr |= (uint32_t)crc << 28;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	071b      	lsls	r3, r3, #28
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
  return;
 8000592:	bf00      	nop
}
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	0800de94 	.word	0x0800de94
 80005a4:	0800df94 	.word	0x0800df94

080005a8 <ASPEP_CheckHeaderCRC>:
  * and true is returned. If the result is not 0, false is returned.
  *
  * @sa ASPEP_ComputeHeaderCRC
  */
static bool ASPEP_CheckHeaderCRC(uint32_t header)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint8_t crc = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]

#ifndef CRC4_PER_NIBBLE
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4053      	eors	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <ASPEP_CheckHeaderCRC+0x74>)
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4053      	eors	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <ASPEP_CheckHeaderCRC+0x74>)
 80005d6:	5c9b      	ldrb	r3, [r3, r2]
 80005d8:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	0c1b      	lsrs	r3, r3, #16
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <ASPEP_CheckHeaderCRC+0x74>)
 80005ea:	5c9b      	ldrb	r3, [r3, r2]
 80005ec:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	0e1b      	lsrs	r3, r3, #24
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4053      	eors	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <ASPEP_CheckHeaderCRC+0x74>)
 80005fe:	5c9b      	ldrb	r3, [r3, r2]
 8000600:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 20U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0xfU)];
  crc = crc ^ (uint8_t)((header >> 28) & 0xf);
#endif /* CRC4_PER_NIBBLE */

  return (crc == 0U);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf0c      	ite	eq
 8000608:	2301      	moveq	r3, #1
 800060a:	2300      	movne	r3, #0
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	0800de94 	.word	0x0800de94

08000620 <ASPEP_start>:

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	6952      	ldr	r2, [r2, #20]
 8000630:	4610      	mov	r0, r2
 8000632:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	6950      	ldr	r0, [r2, #20]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f102 011c 	add.w	r1, r2, #28
 800065a:	2204      	movs	r2, #4
 800065c:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3320      	adds	r3, #32
 8000674:	60fb      	str	r3, [r7, #12]
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	011a      	lsls	r2, r3, #4
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	01db      	lsls	r3, r3, #7
 8000682:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	039b      	lsls	r3, r3, #14
 8000692:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	055b      	lsls	r3, r3, #21
 800069a:	4313      	orrs	r3, r2
 800069c:	f043 0205 	orr.w	r2, r3, #5
    *packet = (BEACON
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	601a      	str	r2, [r3, #0]

    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f103 0220 	add.w	r2, r3, #32
 80006aa:	2304      	movs	r3, #4
 80006ac:	2100      	movs	r1, #0
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f992 	bl	80009d8 <ASPEP_TXframeProcess>
#ifdef NULL_PTR_ASP
  }
#endif
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <ASPEP_sendNack>:

static void ASPEP_sendNack(ASPEP_Handle_t *pHandle, uint8_t errorInfo)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
  uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3320      	adds	r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	021a      	lsls	r2, r3, #8
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	4313      	orrs	r3, r2
 80006d8:	f043 020f 	orr.w	r2, r3, #15
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 0220 	add.w	r2, r3, #32
 80006e6:	2304      	movs	r3, #4
 80006e8:	2100      	movs	r1, #0
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f974 	bl	80009d8 <ASPEP_TXframeProcess>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <ASPEP_sendPing>:

void ASPEP_sendPing(ASPEP_Handle_t *pHandle, uint8_t cBit, uint16_t packetNumber)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3320      	adds	r3, #32
 800070c:	60fb      	str	r3, [r7, #12]
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	72fb      	strb	r3, [r7, #11]
    uint8_t ipID = pHandle->liid & 0xFU;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	72bb      	strb	r3, [r7, #10]
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	011a      	lsls	r2, r3, #4
              | (uint32_t)((uint32_t)cBit << 5U)
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	015b      	lsls	r3, r3, #5
 800072e:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000730:	7afb      	ldrb	r3, [r7, #11]
 8000732:	019b      	lsls	r3, r3, #6
 8000734:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)Nbit << 7U)
 8000736:	7afb      	ldrb	r3, [r7, #11]
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)ipID << 8U)
 800073c:	7abb      	ldrb	r3, [r7, #10]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	431a      	orrs	r2, r3
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000742:	883b      	ldrh	r3, [r7, #0]
 8000744:	031b      	lsls	r3, r3, #12
 8000746:	4313      	orrs	r3, r2
 8000748:	f043 0206 	orr.w	r2, r3, #6
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	601a      	str	r2, [r3, #0]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0220 	add.w	r2, r3, #32
 8000756:	2304      	movs	r3, #4
 8000758:	2100      	movs	r1, #0
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f93c 	bl	80009d8 <ASPEP_TXframeProcess>
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <ASPEP_getBuffer>:

bool ASPEP_getBuffer(MCTL_Handle_t *pSupHandle, void **buffer,  uint8_t syncAsync)
{
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
  bool result = true;
 8000776:	2301      	movs	r3, #1
 8000778:	75fb      	strb	r3, [r7, #23]
    result = false;
  }
  else
  {
#endif
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	613b      	str	r3, [r7, #16]

    if (MCTL_SYNC == syncAsync)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d111      	bne.n	80007a8 <ASPEP_getBuffer+0x40>
    {
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800078a:	2b01      	cmp	r3, #1
 800078c:	d809      	bhi.n	80007a2 <ASPEP_getBuffer+0x3a>
      {
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	601a      	str	r2, [r3, #0]
        pHandle->syncBuffer.state = writeLock;
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2201      	movs	r2, #1
 800079c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80007a0:	e036      	b.n	8000810 <ASPEP_getBuffer+0xa8>
      }
      else
      {
        result = false;
 80007a2:	2300      	movs	r3, #0
 80007a4:	75fb      	strb	r3, [r7, #23]
 80007a6:	e033      	b.n	8000810 <ASPEP_getBuffer+0xa8>
      }
    }
    else /* Asynchronous buffer request */
    {
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d907      	bls.n	80007c2 <ASPEP_getBuffer+0x5a>
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d902      	bls.n	80007c2 <ASPEP_getBuffer+0x5a>
      {
        result = false;
 80007bc:	2300      	movs	r3, #0
 80007be:	75fb      	strb	r3, [r7, #23]
 80007c0:	e026      	b.n	8000810 <ASPEP_getBuffer+0xa8>
      }
      else
      {
        if (pHandle->asyncBufferA.state <= writeLock)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d80e      	bhi.n	80007ea <ASPEP_getBuffer+0x82>
        {
          pHandle->asyncBufferA.state = writeLock;
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	1d1a      	adds	r2, r3, #4
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e012      	b.n	8000810 <ASPEP_getBuffer+0xa8>
#ifdef MCP_DEBUG_METRICS
          pHandle->asyncBufferA.RequestedNumber++;
#endif
        }
        else if (pHandle->asyncBufferB.state <= writeLock)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d80d      	bhi.n	8000810 <ASPEP_getBuffer+0xa8>
        {
          pHandle->asyncBufferB.state = writeLock;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080a:	1d1a      	adds	r2, r3, #4
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	601a      	str	r2, [r3, #0]
      }
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000810:	7dfb      	ldrb	r3, [r7, #23]
}
 8000812:	4618      	mov	r0, r3
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <ASPEP_CheckBeacon>:

bool ASPEP_CheckBeacon (ASPEP_Handle_t * pHandle)
{
 800081e:	b480      	push	{r7}
 8000820:	b087      	sub	sp, #28
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  bool result = true;
 8000826:	2301      	movs	r3, #1
 8000828:	75fb      	strb	r3, [r7, #23]
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	331c      	adds	r3, #28
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	613b      	str	r3, [r7, #16]
  ASPEP_Capabilities_def MasterCapabilities;
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	b2db      	uxtb	r3, r3
 800083e:	733b      	strb	r3, [r7, #12]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7f1b      	ldrb	r3, [r3, #28]
 8000844:	09db      	lsrs	r3, r3, #7
 8000846:	b2db      	uxtb	r3, r3
 8000848:	723b      	strb	r3, [r7, #8]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7f5b      	ldrb	r3, [r3, #29]
 800084e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000852:	b2db      	uxtb	r3, r3
 8000854:	727b      	strb	r3, [r7, #9]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	0b9b      	lsrs	r3, r3, #14
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	b2db      	uxtb	r3, r3
 8000862:	72bb      	strb	r3, [r7, #10]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	0d5b      	lsrs	r3, r3, #21
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800086e:	b2db      	uxtb	r3, r3
 8000870:	72fb      	strb	r3, [r7, #11]

  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000872:	7a3a      	ldrb	r2, [r7, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800087a:	4293      	cmp	r3, r2
 800087c:	bf28      	it	cs
 800087e:	4613      	movcs	r3, r2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000888:	7a7a      	ldrb	r2, [r7, #9]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8000890:	4293      	cmp	r3, r2
 8000892:	bf28      	it	cs
 8000894:	4613      	movcs	r3, r2
 8000896:	b2da      	uxtb	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800089e:	7aba      	ldrb	r2, [r7, #10]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80008a6:	4293      	cmp	r3, r2
 80008a8:	bf28      	it	cs
 80008aa:	4613      	movcs	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80008b4:	7afa      	ldrb	r2, [r7, #11]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80008bc:	4293      	cmp	r3, r2
 80008be:	bf28      	it	cs
 80008c0:	4613      	movcs	r3, r2
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80008ca:	7a3a      	ldrb	r2, [r7, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d117      	bne.n	8000906 <ASPEP_CheckBeacon+0xe8>
   /* Data packet the master can send is bigger than slave can receive */
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80008d6:	7a7a      	ldrb	r2, [r7, #9]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80008de:	429a      	cmp	r2, r3
 80008e0:	d811      	bhi.n	8000906 <ASPEP_CheckBeacon+0xe8>
   /* Sync packet size alignement is required in order for the master to be able to store it, and to not request a
    * response bigger than slave capability */
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d10b      	bne.n	8000906 <ASPEP_CheckBeacon+0xe8>
   /* Async packet the slave can send is bigger than the master can receive (but master must not request a bigger
    * packet than slave can transmit */
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d105      	bne.n	8000906 <ASPEP_CheckBeacon+0xe8>
   /* For the time being, master version has to match slave version */
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80008fa:	7b3a      	ldrb	r2, [r7, #12]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000902:	429a      	cmp	r2, r3
 8000904:	d001      	beq.n	800090a <ASPEP_CheckBeacon+0xec>
  {
    result = false;
 8000906:	2300      	movs	r3, #0
 8000908:	75fb      	strb	r3, [r7, #23]
  }

  return (result);
 800090a:	7dfb      	ldrb	r3, [r7, #23]
}
 800090c:	4618      	mov	r0, r3
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <ASPEP_sendPacket>:
 uint16_t txDataLength Size of useful data in byte

  */

uint8_t ASPEP_sendPacket(MCTL_Handle_t *pSupHandle, void *txBuffer, uint16_t txDataLength, uint8_t syncAsync)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4611      	mov	r1, r2
 8000924:	461a      	mov	r2, r3
 8000926:	460b      	mov	r3, r1
 8000928:	80fb      	strh	r3, [r7, #6]
 800092a:	4613      	mov	r3, r2
 800092c:	717b      	strb	r3, [r7, #5]
  uint8_t result = ASPEP_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t *packet;
    uint32_t *header;
    uint32_t tmpHeader;
    uint16_t txDataLengthTemp;

    txDataLengthTemp = txDataLength;
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	84bb      	strh	r3, [r7, #36]	; 0x24
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	623b      	str	r3, [r7, #32]

    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000942:	2b02      	cmp	r3, #2
 8000944:	d13f      	bne.n	80009c6 <ASPEP_sendPacket+0xae>
    {
      /*We must add packet header on  */
      /* | [0101|0011] | Length 13b | Reserved |CRCH 4b| */
      packet = (uint8_t *)txBuffer; //cstat !MISRAC2012-Rule-11.5
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	61fb      	str	r3, [r7, #28]
      header = (uint32_t *)txBuffer; //cstat !MISRAC2012-Rule-11.5
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	61bb      	str	r3, [r7, #24]
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	3b04      	subs	r3, #4
 8000952:	61bb      	str	r3, [r7, #24]
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000956:	011a      	lsls	r2, r3, #4
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	4313      	orrs	r3, r2
 800095c:	617b      	str	r3, [r7, #20]
      *header = tmpHeader;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	601a      	str	r2, [r3, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10d      	bne.n	800098a <ASPEP_sendPacket+0x72>
      {
        /* TODO : Compute real CRC*/
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800096e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	4413      	add	r3, r2
 8000974:	22ca      	movs	r2, #202	; 0xca
 8000976:	701a      	strb	r2, [r3, #0]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800097a:	3301      	adds	r3, #1
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	4413      	add	r3, r2
 8000980:	22fe      	movs	r2, #254	; 0xfe
 8000982:	701a      	strb	r2, [r3, #0]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000986:	3302      	adds	r3, #2
 8000988:	84bb      	strh	r3, [r7, #36]	; 0x24
      }
      if (MCTL_SYNC == syncAsync)
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	2b0a      	cmp	r3, #10
 800098e:	d10a      	bne.n	80009a6 <ASPEP_sendPacket+0x8e>
      {
        if (pSupHandle->MCP_PacketAvailable)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	7c1b      	ldrb	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <ASPEP_sendPacket+0x88>
        {
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2200      	movs	r2, #0
 800099c:	741a      	strb	r2, [r3, #16]
 800099e:	e002      	b.n	80009a6 <ASPEP_sendPacket+0x8e>
        }
        else
        {
          result = MCTL_SYNC_NOT_EXPECTED;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      if (ASPEP_OK == result) /* Send packet only if no error detected so far*/
 80009a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10e      	bne.n	80009cc <ASPEP_sendPacket+0xb4>
      {
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80009ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009b0:	3304      	adds	r3, #4
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	7979      	ldrb	r1, [r7, #5]
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	6a38      	ldr	r0, [r7, #32]
 80009ba:	f000 f80d 	bl	80009d8 <ASPEP_TXframeProcess>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009c4:	e002      	b.n	80009cc <ASPEP_sendPacket+0xb4>
      }
    }
    else
    {
      result = ASPEP_NOT_CONNECTED;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 80009cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <ASPEP_TXframeProcess>:
dataType can be Synchronous (answer to Master packet), Asynchronous or a CTL packet

  */

uint8_t ASPEP_TXframeProcess(ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	461a      	mov	r2, r3
 80009e4:	460b      	mov	r3, r1
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	4613      	mov	r3, r2
 80009ea:	813b      	strh	r3, [r7, #8]
  uint8_t result = ASPEP_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]
  }
  else
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fd93 	bl	800051c <ASPEP_ComputeHeaderCRC>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f6:	b672      	cpsid	i
}
 80009f8:	bf00      	nop
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d12b      	bne.n	8000a5a <ASPEP_TXframeProcess+0x82>
    {
      if (MCTL_ASYNC == dataType)
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	2b09      	cmp	r3, #9
 8000a06:	d108      	bne.n	8000a1a <ASPEP_TXframeProcess+0x42>
      {
        /* In ASYNC, two flipflop buffers are used, the txBuffer points always to lastRequestedAsyncBuff->buffer */
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	719a      	strb	r2, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	649a      	str	r2, [r3, #72]	; 0x48
 8000a18:	e015      	b.n	8000a46 <ASPEP_TXframeProcess+0x6e>
#ifdef MCP_DEBUG_METRICS
        pHandle->lastRequestedAsyncBuff->SentNumber++;
#endif
      }
      else if (MCTL_SYNC == dataType)
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d109      	bne.n	8000a34 <ASPEP_TXframeProcess+0x5c>
      {
        pHandle->syncBuffer.state = readLock;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2203      	movs	r2, #3
 8000a24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	649a      	str	r2, [r3, #72]	; 0x48
 8000a32:	e008      	b.n	8000a46 <ASPEP_TXframeProcess+0x6e>
      }
      else
      {
        pHandle->ctrlBuffer.state = readLock;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2203      	movs	r2, #3
 8000a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f103 0220 	add.w	r2, r3, #32
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	649a      	str	r2, [r3, #72]	; 0x48
  __ASM volatile ("cpsie i" : : : "memory");
 8000a46:	b662      	cpsie	i
}
 8000a48:	bf00      	nop
      }
      /* Enable HF task It */
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	6950      	ldr	r0, [r2, #20]
 8000a52:	893a      	ldrh	r2, [r7, #8]
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4798      	blx	r3
 8000a58:	e03f      	b.n	8000ada <ASPEP_TXframeProcess+0x102>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a5a:	b662      	cpsie	i
}
 8000a5c:	bf00      	nop
    }
    else /* HW resource busy, saving packet to sent it once resource will be freed*/
    {
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      /* Lock buffer can be freed here */
      if (MCTL_ASYNC == dataType)
 8000a5e:	7afb      	ldrb	r3, [r7, #11]
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d118      	bne.n	8000a96 <ASPEP_TXframeProcess+0xbe>
      {
        /* Check that the buffer received is the one expected - probably useless */
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d001      	beq.n	8000a74 <ASPEP_TXframeProcess+0x9c>
        {
          result = ASPEP_BUFFER_ERROR;
 8000a70:	2303      	movs	r3, #3
 8000a72:	75fb      	strb	r3, [r7, #23]
        }
        if (NULL == pHandle->asyncNextBuffer)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d103      	bne.n	8000a84 <ASPEP_TXframeProcess+0xac>
        {
          /* Required to keep the right sending order */
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44
        }
      else
      {
        /* nothing to do */
      }
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	2202      	movs	r2, #2
 8000a8a:	719a      	strb	r2, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	893a      	ldrh	r2, [r7, #8]
 8000a92:	809a      	strh	r2, [r3, #4]
 8000a94:	e021      	b.n	8000ada <ASPEP_TXframeProcess+0x102>
#ifdef MCP_DEBUG_METRICS
        pHandle->lastRequestedAsyncBuff->PendingNumber++;
#endif
      }
      else if (MCTL_SYNC == dataType)
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	2b0a      	cmp	r3, #10
 8000a9a:	d10f      	bne.n	8000abc <ASPEP_TXframeProcess+0xe4>
      {
        if (pHandle -> syncBuffer.state != writeLock)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d002      	beq.n	8000aac <ASPEP_TXframeProcess+0xd4>
        {
          result = ASPEP_BUFFER_ERROR;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	75fb      	strb	r3, [r7, #23]
 8000aaa:	e016      	b.n	8000ada <ASPEP_TXframeProcess+0x102>
        }
        else
        {
          pHandle->syncBuffer.state = pending;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2202      	movs	r2, #2
 8000ab0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	893a      	ldrh	r2, [r7, #8]
 8000ab8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000aba:	e00e      	b.n	8000ada <ASPEP_TXframeProcess+0x102>
        }
      }
      else if(ASPEP_CTRL == dataType)
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10b      	bne.n	8000ada <ASPEP_TXframeProcess+0x102>
      {
        if (pHandle->ctrlBuffer.state != available)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <ASPEP_TXframeProcess+0xfa>
        {
          result = ASPEP_BUFFER_ERROR;
 8000acc:	2303      	movs	r3, #3
 8000ace:	75fb      	strb	r3, [r7, #23]
 8000ad0:	e003      	b.n	8000ada <ASPEP_TXframeProcess+0x102>
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      }
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d104      	bne.n	8000b00 <ASPEP_HWDataTransmittedIT+0x1c>
    {
      pHandle->ctrlBuffer.state = available;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000afe:	e005      	b.n	8000b0c <ASPEP_HWDataTransmittedIT+0x28>
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b04:	60fb      	str	r3, [r7, #12]
      tempBuff->state = available;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	719a      	strb	r2, [r3, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d112      	bne.n	8000b3c <ASPEP_HWDataTransmittedIT+0x58>
    {
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	649a      	str	r2, [r3, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	6950      	ldr	r0, [r2, #20]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000b30:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b3a:	e051      	b.n	8000be0 <ASPEP_HWDataTransmittedIT+0xfc>
    else if (pHandle->ctrlBuffer.state == pending)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d112      	bne.n	8000b6c <ASPEP_HWDataTransmittedIT+0x88>
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f103 0220 	add.w	r2, r3, #32
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	649a      	str	r2, [r3, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6950      	ldr	r0, [r2, #20]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	f102 0120 	add.w	r1, r2, #32
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2203      	movs	r2, #3
 8000b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000b6a:	e039      	b.n	8000be0 <ASPEP_HWDataTransmittedIT+0xfc>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
      if (pHandle->asyncNextBuffer != NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d02e      	beq.n	8000bd6 <ASPEP_HWDataTransmittedIT+0xf2>
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	649a      	str	r2, [r3, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	2203      	movs	r2, #3
 8000b86:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	6950      	ldr	r0, [r2, #20]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b94:	6811      	ldr	r1, [r2, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b9a:	8892      	ldrh	r2, [r2, #4]
 8000b9c:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d004      	beq.n	8000bb2 <ASPEP_HWDataTransmittedIT+0xce>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d10d      	bne.n	8000bce <ASPEP_HWDataTransmittedIT+0xea>
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3330      	adds	r3, #48	; 0x30
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3338      	adds	r3, #56	; 0x38
 8000bbc:	4413      	add	r3, r2
                          - (uint32_t) pHandle->asyncNextBuffer; //cstat !MISRAC2012-Rule-11.4
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	60bb      	str	r3, [r7, #8]
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	645a      	str	r2, [r3, #68]	; 0x44
        {
 8000bcc:	e006      	b.n	8000bdc <ASPEP_HWDataTransmittedIT+0xf8>
          pHandle->asyncNextBuffer = NULL;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	645a      	str	r2, [r3, #68]	; 0x44
 8000bd4:	e002      	b.n	8000bdc <ASPEP_HWDataTransmittedIT+0xf8>
        pHandle->lockBuffer = NULL;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	649a      	str	r2, [r3, #72]	; 0x48
  __ASM volatile ("cpsie i" : : : "memory");
 8000bdc:	b662      	cpsie	i
}
 8000bde:	bf00      	nop
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint8_t *result = NULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	331c      	adds	r3, #28
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
    uint16_t packetNumber;
    bool validCRCData = true;
 8000c02:	2301      	movs	r3, #1
 8000c04:	72fb      	strb	r3, [r7, #11]

    *packetLength = 0;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	801a      	strh	r2, [r3, #0]
    if (pHandle->NewPacketAvailable)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 80d6 	beq.w	8000dc4 <ASPEP_RXframeProcess+0x1dc>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d070      	beq.n	8000d0c <ASPEP_RXframeProcess+0x124>
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	f300 80b9 	bgt.w	8000da2 <ASPEP_RXframeProcess+0x1ba>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <ASPEP_RXframeProcess+0x52>
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d03f      	beq.n	8000cb8 <ASPEP_RXframeProcess+0xd0>
          }
          break;
        }

        default:
          break;
 8000c38:	e0b3      	b.n	8000da2 <ASPEP_RXframeProcess+0x1ba>
          if (BEACON == pHandle->rxPacketType)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	d12b      	bne.n	8000c9a <ASPEP_RXframeProcess+0xb2>
            if (ASPEP_CheckBeacon(pHandle) == true)
 8000c42:	6938      	ldr	r0, [r7, #16]
 8000c44:	f7ff fdeb 	bl	800081e <ASPEP_CheckBeacon>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01e      	beq.n	8000c8c <ASPEP_RXframeProcess+0xa4>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	819a      	strh	r2, [r3, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	81da      	strh	r2, [r3, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	015b      	lsls	r3, r3, #5
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	336c      	adds	r3, #108	; 0x6c
 8000c90:	4619      	mov	r1, r3
 8000c92:	6938      	ldr	r0, [r7, #16]
 8000c94:	f7ff fce7 	bl	8000666 <ASPEP_sendBeacon>
          break;
 8000c98:	e085      	b.n	8000da6 <ASPEP_RXframeProcess+0x1be>
          else if (PING == pHandle->rxPacketType)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	f040 8081 	bne.w	8000da6 <ASPEP_RXframeProcess+0x1be>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	0b1b      	lsrs	r3, r3, #12
 8000ca8:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000caa:	893b      	ldrh	r3, [r7, #8]
 8000cac:	461a      	mov	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	6938      	ldr	r0, [r7, #16]
 8000cb2:	f7ff fd21 	bl	80006f8 <ASPEP_sendPing>
          break;
 8000cb6:	e076      	b.n	8000da6 <ASPEP_RXframeProcess+0x1be>
          if (BEACON == pHandle->rxPacketType)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d113      	bne.n	8000ce8 <ASPEP_RXframeProcess+0x100>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000cc0:	6938      	ldr	r0, [r7, #16]
 8000cc2:	f7ff fdac 	bl	800081e <ASPEP_CheckBeacon>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <ASPEP_RXframeProcess+0xf2>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	336c      	adds	r3, #108	; 0x6c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	6938      	ldr	r0, [r7, #16]
 8000ce2:	f7ff fcc0 	bl	8000666 <ASPEP_sendBeacon>
          break;
 8000ce6:	e060      	b.n	8000daa <ASPEP_RXframeProcess+0x1c2>
          else if (PING == pHandle->rxPacketType)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d15c      	bne.n	8000daa <ASPEP_RXframeProcess+0x1c2>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	0b1b      	lsrs	r3, r3, #12
 8000cf4:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000cf6:	893b      	ldrh	r3, [r7, #8]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	6938      	ldr	r0, [r7, #16]
 8000cfe:	f7ff fcfb 	bl	80006f8 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	2202      	movs	r2, #2
 8000d06:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
          break;
 8000d0a:	e04e      	b.n	8000daa <ASPEP_RXframeProcess+0x1c2>
          if (BEACON == pHandle->rxPacketType)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d118      	bne.n	8000d46 <ASPEP_RXframeProcess+0x15e>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f7ff fd82 	bl	800081e <ASPEP_CheckBeacon>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <ASPEP_RXframeProcess+0x148>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000d2e:	e003      	b.n	8000d38 <ASPEP_RXframeProcess+0x150>
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	336c      	adds	r3, #108	; 0x6c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6938      	ldr	r0, [r7, #16]
 8000d40:	f7ff fc91 	bl	8000666 <ASPEP_sendBeacon>
          break;
 8000d44:	e033      	b.n	8000dae <ASPEP_RXframeProcess+0x1c6>
          else if (PING == pHandle->rxPacketType)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d109      	bne.n	8000d62 <ASPEP_RXframeProcess+0x17a>
            packetNumber = pHandle->rxHeader[1];
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	7f5b      	ldrb	r3, [r3, #29]
 8000d52:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000d54:	893b      	ldrh	r3, [r7, #8]
 8000d56:	461a      	mov	r2, r3
 8000d58:	2101      	movs	r1, #1
 8000d5a:	6938      	ldr	r0, [r7, #16]
 8000d5c:	f7ff fccc 	bl	80006f8 <ASPEP_sendPing>
          break;
 8000d60:	e025      	b.n	8000dae <ASPEP_RXframeProcess+0x1c6>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d121      	bne.n	8000dae <ASPEP_RXframeProcess+0x1c6>
            if (validCRCData)
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <ASPEP_RXframeProcess+0x1b0>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	741a      	strb	r2, [r3, #16]
              *packetLength = pHandle->rxLength;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	801a      	strh	r2, [r3, #0]
              result = pHandle->rxBuffer;
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	617b      	str	r3, [r7, #20]
          break;
 8000d96:	e00a      	b.n	8000dae <ASPEP_RXframeProcess+0x1c6>
              ASPEP_sendNack (pHandle, ASPEP_BAD_CRC_DATA);
 8000d98:	2105      	movs	r1, #5
 8000d9a:	6938      	ldr	r0, [r7, #16]
 8000d9c:	f7ff fc8e 	bl	80006bc <ASPEP_sendNack>
          break;
 8000da0:	e005      	b.n	8000dae <ASPEP_RXframeProcess+0x1c6>
          break;
 8000da2:	bf00      	nop
 8000da4:	e004      	b.n	8000db0 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000da6:	bf00      	nop
 8000da8:	e002      	b.n	8000db0 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000daa:	bf00      	nop
 8000dac:	e000      	b.n	8000db0 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000dae:	bf00      	nop
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	6950      	ldr	r0, [r2, #20]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	f102 011c 	add.w	r1, r2, #28
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4798      	blx	r3
 8000dc2:	e015      	b.n	8000df0 <ASPEP_RXframeProcess+0x208>
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d010      	beq.n	8000df0 <ASPEP_RXframeProcess+0x208>
    {
      ASPEP_sendNack(pHandle, pHandle->badPacketFlag);
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	f7ff fc70 	bl	80006bc <ASPEP_sendNack>
      /* ASPEP_RXframeProcess can be called before reception of another packet */
      pHandle->badPacketFlag = ASPEP_OK;
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        * DMA will be configured to receive next packet as soon as HW IP RX line is free to receive new packet
        * It is important to note that we will detect only the NEXT free line transition, it means the next packet will
        * be lost but the end of this lost packet will generate the IDLE interrupt
        * the IDLE interrupt will call ASPEP_HWDMAReset (in charge of the IP_aspep driver to call it at the appropriate
        * time)*/
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	6952      	ldr	r2, [r2, #20]
 8000dec:	4610      	mov	r0, r2
 8000dee:	4798      	blx	r3
      /* Nothing to do, no response is due to the master */
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000df0:	697b      	ldr	r3, [r7, #20]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000dfa:	b590      	push	{r4, r7, lr}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <ASPEP_HWDataReceivedIT+0x18>
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d05f      	beq.n	8000ed0 <ASPEP_HWDataReceivedIT+0xd6>
          * processed in ASPEP_RXframeProcess */
        break;
      }

      default:
        break;
 8000e10:	e067      	b.n	8000ee2 <ASPEP_HWDataReceivedIT+0xe8>
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	331c      	adds	r3, #28
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbc5 	bl	80005a8 <ASPEP_CheckHeaderCRC>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d04f      	beq.n	8000ec4 <ASPEP_HWDataReceivedIT+0xca>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7f1b      	ldrb	r3, [r3, #28]
 8000e28:	f003 020f 	and.w	r2, r3, #15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	669a      	str	r2, [r3, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d802      	bhi.n	8000e3e <ASPEP_HWDataReceivedIT+0x44>
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d239      	bcs.n	8000eb0 <ASPEP_HWDataReceivedIT+0xb6>
 8000e3c:	e03d      	b.n	8000eba <ASPEP_HWDataReceivedIT+0xc0>
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	d13b      	bne.n	8000eba <ASPEP_HWDataReceivedIT+0xc0>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	331c      	adds	r3, #28
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <ASPEP_HWDataReceivedIT+0x6c>
                pHandle->NewPacketAvailable = true;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
              break;
 8000e64:	e033      	b.n	8000ece <ASPEP_HWDataReceivedIT+0xd4>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d817      	bhi.n	8000ea6 <ASPEP_HWDataReceivedIT+0xac>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6950      	ldr	r0, [r2, #20]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6994      	ldr	r4, [r2, #24]
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	0052      	lsls	r2, r2, #1
 8000e92:	b292      	uxth	r2, r2
 8000e94:	440a      	add	r2, r1
 8000e96:	b292      	uxth	r2, r2
 8000e98:	4621      	mov	r1, r4
 8000e9a:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
              break;
 8000ea4:	e013      	b.n	8000ece <ASPEP_HWDataReceivedIT+0xd4>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
              break;
 8000eae:	e00e      	b.n	8000ece <ASPEP_HWDataReceivedIT+0xd4>
              pHandle->NewPacketAvailable = true;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
              break;
 8000eb8:	e009      	b.n	8000ece <ASPEP_HWDataReceivedIT+0xd4>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
              break;
 8000ec2:	e004      	b.n	8000ece <ASPEP_HWDataReceivedIT+0xd4>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8000ecc:	e009      	b.n	8000ee2 <ASPEP_HWDataReceivedIT+0xe8>
 8000ece:	e008      	b.n	8000ee2 <ASPEP_HWDataReceivedIT+0xe8>
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        pHandle->NewPacketAvailable = true;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        break;
 8000ee0:	bf00      	nop
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6950      	ldr	r0, [r2, #20]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	f102 011c 	add.w	r1, r2, #28
 8000f08:	2204      	movs	r2, #4
 8000f0a:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001026:	b480      	push	{r7}
 8001028:	b089      	sub	sp, #36	; 0x24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	332c      	adds	r3, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800103e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001042:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	fa92 f2a2 	rbit	r2, r2
 800104a:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	40d3      	lsrs	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	211f      	movs	r1, #31
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 011f 	and.w	r1, r3, #31
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	431a      	orrs	r2, r3
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001086:	bf00      	nop
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b08d      	sub	sp, #52	; 0x34
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	330c      	adds	r3, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	fa92 f2a2 	rbit	r2, r2
 80010dc:	617a      	str	r2, [r7, #20]
  return result;
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	40d3      	lsrs	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010f8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010fc:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	6a39      	ldr	r1, [r7, #32]
 8001100:	fa91 f1a1 	rbit	r1, r1
 8001104:	61f9      	str	r1, [r7, #28]
  return result;
 8001106:	69f9      	ldr	r1, [r7, #28]
 8001108:	fab1 f181 	clz	r1, r1
 800110c:	b2c9      	uxtb	r1, r1
 800110e:	40cb      	lsrs	r3, r1
 8001110:	2107      	movs	r1, #7
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001120:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001124:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	fa91 f1a1 	rbit	r1, r1
 800112c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800112e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001130:	fab1 f181 	clz	r1, r1
 8001134:	b2c9      	uxtb	r1, r1
 8001136:	40cb      	lsrs	r3, r1
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	431a      	orrs	r2, r3
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001144:	bf00      	nop
 8001146:	3734      	adds	r7, #52	; 0x34
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LL_DMA_SetDataTransferDirection+0x44>)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001170:	4908      	ldr	r1, [pc, #32]	; (8001194 <LL_DMA_SetDataTransferDirection+0x44>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	440b      	add	r3, r1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	440b      	add	r3, r1
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	0800dfa4 	.word	0x0800dfa4

08001198 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LL_DMA_SetMode+0x44>)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80011b8:	4908      	ldr	r1, [pc, #32]	; (80011dc <LL_DMA_SetMode+0x44>)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	440b      	add	r3, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	440b      	add	r3, r1
 80011c6:	4619      	mov	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	0800dfa4 	.word	0x0800dfa4

080011e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LL_DMA_SetPeriphIncMode+0x44>)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001200:	4908      	ldr	r1, [pc, #32]	; (8001224 <LL_DMA_SetPeriphIncMode+0x44>)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	440b      	add	r3, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	440b      	add	r3, r1
 800120e:	4619      	mov	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	0800dfa4 	.word	0x0800dfa4

08001228 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LL_DMA_SetMemoryIncMode+0x44>)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4413      	add	r3, r2
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001248:	4908      	ldr	r1, [pc, #32]	; (800126c <LL_DMA_SetMemoryIncMode+0x44>)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	440b      	add	r3, r1
 8001256:	4619      	mov	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	0800dfa4 	.word	0x0800dfa4

08001270 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LL_DMA_SetPeriphSize+0x44>)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001290:	4908      	ldr	r1, [pc, #32]	; (80012b4 <LL_DMA_SetPeriphSize+0x44>)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	440b      	add	r3, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	440b      	add	r3, r1
 800129e:	4619      	mov	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0800dfa4 	.word	0x0800dfa4

080012b8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LL_DMA_SetMemorySize+0x44>)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80012d8:	4908      	ldr	r1, [pc, #32]	; (80012fc <LL_DMA_SetMemorySize+0x44>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	440b      	add	r3, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	440b      	add	r3, r1
 80012e6:	4619      	mov	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	0800dfa4 	.word	0x0800dfa4

08001300 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001320:	4908      	ldr	r1, [pc, #32]	; (8001344 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	440b      	add	r3, r1
 800132e:	4619      	mov	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	0800dfa4 	.word	0x0800dfa4

08001348 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LL_DMA_SetChannelSelection+0x44>)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 52f0 	bic.w	r2, r3, #503316480	; 0x1e000000
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <LL_DMA_SetChannelSelection+0x44>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	440b      	add	r3, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	440b      	add	r3, r1
 8001376:	4619      	mov	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	0800dfa4 	.word	0x0800dfa4

08001390 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <LL_DMA_DisableFifoMode+0x3c>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <LL_DMA_DisableFifoMode+0x3c>)
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	440a      	add	r2, r1
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	4611      	mov	r1, r2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	440a      	add	r2, r1
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6153      	str	r3, [r2, #20]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	0800dfa4 	.word	0x0800dfa4

080013d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_RCC_HSI_Enable+0x1c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <LL_RCC_HSI_Enable+0x1c>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <LL_RCC_HSI_IsReady+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40023800 	.word	0x40023800

08001414 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <LL_RCC_SetSysClkSource+0x24>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 0203 	bic.w	r2, r3, #3
 8001450:	4904      	ldr	r1, [pc, #16]	; (8001464 <LL_RCC_SetSysClkSource+0x24>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023800 	.word	0x40023800

08001468 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <LL_RCC_GetSysClkSource+0x18>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800

080014ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800

080014d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014e4:	4904      	ldr	r1, [pc, #16]	; (80014f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023800 	.word	0x40023800

080014fc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <LL_RCC_SetTIMPrescaler+0x28>)
 8001506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800150a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800150e:	4905      	ldr	r1, [pc, #20]	; (8001524 <LL_RCC_SetTIMPrescaler+0x28>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4313      	orrs	r3, r2
 8001514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40023800 	.word	0x40023800

08001528 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <LL_RCC_PLL_Enable+0x1c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <LL_RCC_PLL_Enable+0x1c>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <LL_RCC_PLL_IsReady+0x24>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001584:	4013      	ands	r3, r2
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4311      	orrs	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	0192      	lsls	r2, r2, #6
 8001590:	430a      	orrs	r2, r1
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40023800 	.word	0x40023800
 80015b8:	ffbf8000 	.word	0xffbf8000

080015bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023800 	.word	0x40023800

080015ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023800 	.word	0x40023800

0800161c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <LL_FLASH_SetLatency+0x24>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0207 	bic.w	r2, r3, #7
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <LL_FLASH_SetLatency+0x24>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40023c00 	.word	0x40023c00

08001644 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <LL_FLASH_GetLatency+0x18>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001670:	4904      	ldr	r1, [pc, #16]	; (8001684 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40007000 	.word	0x40007000

08001688 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <LL_PWR_IsActiveFlag_VOS+0x24>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000

080016b0 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d01c      	beq.n	800171a <LL_TIM_OC_DisableFast+0x4a>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d017      	beq.n	8001716 <LL_TIM_OC_DisableFast+0x46>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d012      	beq.n	8001712 <LL_TIM_OC_DisableFast+0x42>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d00d      	beq.n	800170e <LL_TIM_OC_DisableFast+0x3e>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f8:	d007      	beq.n	800170a <LL_TIM_OC_DisableFast+0x3a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001700:	d101      	bne.n	8001706 <LL_TIM_OC_DisableFast+0x36>
 8001702:	2305      	movs	r3, #5
 8001704:	e00a      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 8001706:	2306      	movs	r3, #6
 8001708:	e008      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_TIM_OC_DisableFast+0x4c>
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3318      	adds	r3, #24
 8001722:	4619      	mov	r1, r3
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LL_TIM_OC_DisableFast+0x84>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	440b      	add	r3, r1
 800172c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4908      	ldr	r1, [pc, #32]	; (8001758 <LL_TIM_OC_DisableFast+0x88>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	4619      	mov	r1, r3
 800173a:	2304      	movs	r3, #4
 800173c:	408b      	lsls	r3, r1
 800173e:	43db      	mvns	r3, r3
 8001740:	401a      	ands	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	601a      	str	r2, [r3, #0]

}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	0800dfac 	.word	0x0800dfac
 8001758:	0800dfb4 	.word	0x0800dfb4

0800175c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d01c      	beq.n	80017a6 <LL_TIM_OC_EnablePreload+0x4a>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b04      	cmp	r3, #4
 8001770:	d017      	beq.n	80017a2 <LL_TIM_OC_EnablePreload+0x46>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b10      	cmp	r3, #16
 8001776:	d012      	beq.n	800179e <LL_TIM_OC_EnablePreload+0x42>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b40      	cmp	r3, #64	; 0x40
 800177c:	d00d      	beq.n	800179a <LL_TIM_OC_EnablePreload+0x3e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001784:	d007      	beq.n	8001796 <LL_TIM_OC_EnablePreload+0x3a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d101      	bne.n	8001792 <LL_TIM_OC_EnablePreload+0x36>
 800178e:	2305      	movs	r3, #5
 8001790:	e00a      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 8001792:	2306      	movs	r3, #6
 8001794:	e008      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_TIM_OC_EnablePreload+0x4c>
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3318      	adds	r3, #24
 80017ae:	4619      	mov	r1, r3
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <LL_TIM_OC_EnablePreload+0x80>)
 80017b4:	5cd3      	ldrb	r3, [r2, r3]
 80017b6:	440b      	add	r3, r1
 80017b8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <LL_TIM_OC_EnablePreload+0x84>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	4619      	mov	r1, r3
 80017c6:	2308      	movs	r3, #8
 80017c8:	408b      	lsls	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	0800dfac 	.word	0x0800dfac
 80017e0:	0800dfb4 	.word	0x0800dfb4

080017e4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_TIM_SetSlaveMode>:
  *         @arg @ref LL_TIM_SLAVEMODE_GATED
  *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 0207 	bic.w	r2, r3, #7
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_TIM_SetTriggerInput>:
  *         @arg @ref LL_TIM_TS_TI2FP2
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60da      	str	r2, [r3, #12]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	615a      	str	r2, [r3, #20]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	041a      	lsls	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001924:	f005 fd2a 	bl	800737c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001928:	f000 f812 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192c:	f000 fbc4 	bl	80020b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001930:	f000 fbaa 	bl	8002088 <MX_DMA_Init>
  MX_ADC1_Init();
 8001934:	f000 f860 	bl	80019f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001938:	f000 fa20 	bl	8001d7c <MX_TIM1_Init>
  MX_DFSDM2_Init();
 800193c:	f000 f8f2 	bl	8001b24 <MX_DFSDM2_Init>
  MX_USART6_UART_Init();
 8001940:	f000 fb50 	bl	8001fe4 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8001944:	f000 f8e6 	bl	8001b14 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_MotorControl_Init();
 8001948:	f002 f8a6 	bl	8003a98 <MX_MotorControl_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800194c:	e7fe      	b.n	800194c <main+0x2c>
	...

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001954:	2003      	movs	r0, #3
 8001956:	f7ff fe61 	bl	800161c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800195a:	bf00      	nop
 800195c:	f7ff fe72 	bl	8001644 <LL_FLASH_GetLatency>
 8001960:	4603      	mov	r3, r0
 8001962:	2b03      	cmp	r3, #3
 8001964:	d1fa      	bne.n	800195c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001966:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800196a:	f7ff fe79 	bl	8001660 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800196e:	2010      	movs	r0, #16
 8001970:	f7ff fd50 	bl	8001414 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001974:	f7ff fd2c 	bl	80013d0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001978:	bf00      	nop
 800197a:	f7ff fd39 	bl	80013f0 <LL_RCC_HSI_IsReady>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d1fa      	bne.n	800197a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 200, LL_RCC_PLLP_DIV_2);
 8001984:	2300      	movs	r3, #0
 8001986:	22c8      	movs	r2, #200	; 0xc8
 8001988:	2110      	movs	r1, #16
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fdf0 	bl	8001570 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001990:	f7ff fdca 	bl	8001528 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001994:	bf00      	nop
 8001996:	f7ff fdd7 	bl	8001548 <LL_RCC_PLL_IsReady>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	d1fa      	bne.n	8001996 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80019a0:	bf00      	nop
 80019a2:	f7ff fe71 	bl	8001688 <LL_PWR_IsActiveFlag_VOS>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0fa      	beq.n	80019a2 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fd69 	bl	8001484 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80019b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019b6:	f7ff fd79 	bl	80014ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fd8a 	bl	80014d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff fd3d 	bl	8001440 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019c6:	bf00      	nop
 80019c8:	f7ff fd4e 	bl	8001468 <LL_RCC_GetSysClkSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d1fa      	bne.n	80019c8 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(100000000);
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <SystemClock_Config+0xa4>)
 80019d4:	f007 fc0c 	bl	80091f0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	200f      	movs	r0, #15
 80019da:	f005 fcf1 	bl	80073c0 <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019e4:	f000 fbec 	bl	80021c0 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fd87 	bl	80014fc <LL_RCC_SetTIMPrescaler>
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	05f5e100 	.word	0x05f5e100

080019f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b090      	sub	sp, #64	; 0x40
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80019fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001a2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a32:	f7ff fddb 	bl	80015ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001a36:	2004      	movs	r0, #4
 8001a38:	f7ff fdc0 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fdbd 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f7ff fdba 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4829      	ldr	r0, [pc, #164]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a5a:	f006 fbd8 	bl	800820e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001a5e:	23ff      	movs	r3, #255	; 0xff
 8001a60:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4825      	ldr	r0, [pc, #148]	; (8001b04 <MX_ADC1_Init+0x10c>)
 8001a70:	f006 fbcd 	bl	800820e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001a74:	2303      	movs	r3, #3
 8001a76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4820      	ldr	r0, [pc, #128]	; (8001b08 <MX_ADC1_Init+0x110>)
 8001a86:	f006 fbc2 	bl	800820e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481b      	ldr	r0, [pc, #108]	; (8001b0c <MX_ADC1_Init+0x114>)
 8001a9e:	f006 fa43 	bl	8007f28 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	4619      	mov	r1, r3
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_ADC1_Init+0x114>)
 8001abe:	f006 fa5f 	bl	8007f80 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac6:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_ADC1_Init+0x114>)
 8001ac8:	f7ff fae3 	bl	8001092 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_ADC1_Init+0x118>)
 8001ada:	f006 fa07 	bl	8007eec <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae6:	4809      	ldr	r0, [pc, #36]	; (8001b0c <MX_ADC1_Init+0x114>)
 8001ae8:	f7ff fa9d 	bl	8001026 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_ADC1_Init+0x114>)
 8001af4:	f7ff fae0 	bl	80010b8 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3740      	adds	r7, #64	; 0x40
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	40012300 	.word	0x40012300

08001b14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8001b18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b1c:	f7ff fd4e 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END CRC_Init 1 */
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_filter0.Instance = DFSDM2_Filter0;
 8001b28:	4b86      	ldr	r3, [pc, #536]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b2a:	4a87      	ldr	r2, [pc, #540]	; (8001d48 <MX_DFSDM2_Init+0x224>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter0.Init.RegularParam.FastMode = DISABLE;
 8001b34:	4b83      	ldr	r3, [pc, #524]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter0.Init.RegularParam.DmaMode = DISABLE;
 8001b3a:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b42:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b46:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter0.Init.FilterParam.Oversampling = 256;
 8001b48:	4b7e      	ldr	r3, [pc, #504]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter0.Init.FilterParam.IntOversampling = 1;
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter0) != HAL_OK)
 8001b56:	487b      	ldr	r0, [pc, #492]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001b58:	f005 fe58 	bl	800780c <HAL_DFSDM_FilterInit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_DFSDM2_Init+0x42>
  {
    Error_Handler();
 8001b62:	f000 fb2d 	bl	80021c0 <Error_Handler>
  }
  hdfsdm2_filter1.Instance = DFSDM2_Filter1;
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b68:	4a79      	ldr	r2, [pc, #484]	; (8001d50 <MX_DFSDM2_Init+0x22c>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001b6c:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter1.Init.RegularParam.FastMode = DISABLE;
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter1.Init.RegularParam.DmaMode = DISABLE;
 8001b78:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b80:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b84:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter1.Init.FilterParam.Oversampling = 256;
 8001b86:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter1.Init.FilterParam.IntOversampling = 1;
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter1) != HAL_OK)
 8001b94:	486d      	ldr	r0, [pc, #436]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001b96:	f005 fe39 	bl	800780c <HAL_DFSDM_FilterInit>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_DFSDM2_Init+0x80>
  {
    Error_Handler();
 8001ba0:	f000 fb0e 	bl	80021c0 <Error_Handler>
  }
  hdfsdm2_filter2.Instance = DFSDM2_Filter2;
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001ba6:	4a6c      	ldr	r2, [pc, #432]	; (8001d58 <MX_DFSDM2_Init+0x234>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001baa:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter2.Init.RegularParam.FastMode = DISABLE;
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter2.Init.RegularParam.DmaMode = DISABLE;
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bbe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001bc2:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter2.Init.FilterParam.Oversampling = 256;
 8001bc4:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bca:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter2.Init.FilterParam.IntOversampling = 1;
 8001bcc:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter2) != HAL_OK)
 8001bd2:	4860      	ldr	r0, [pc, #384]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001bd4:	f005 fe1a 	bl	800780c <HAL_DFSDM_FilterInit>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_DFSDM2_Init+0xbe>
  {
    Error_Handler();
 8001bde:	f000 faef 	bl	80021c0 <Error_Handler>
  }
  hdfsdm2_channel0.Instance = DFSDM2_Channel0;
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <MX_DFSDM2_Init+0x23c>)
 8001be6:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel0.Init.OutputClock.Activation = ENABLE;
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001bee:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel0.Init.OutputClock.Divider = 11;
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001bf6:	220b      	movs	r2, #11
 8001bf8:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001bfa:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c00:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001c06:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001c14:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel0.Init.Awd.Oversampling = 1;
 8001c20:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel0.Init.Offset = 0;
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel0.Init.RightBitShift = 0x00;
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel0) != HAL_OK)
 8001c32:	484a      	ldr	r0, [pc, #296]	; (8001d5c <MX_DFSDM2_Init+0x238>)
 8001c34:	f005 fcfa 	bl	800762c <HAL_DFSDM_ChannelInit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_DFSDM2_Init+0x11e>
  {
    Error_Handler();
 8001c3e:	f000 fabf 	bl	80021c0 <Error_Handler>
  }
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001c42:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c44:	4a48      	ldr	r2, [pc, #288]	; (8001d68 <MX_DFSDM2_Init+0x244>)
 8001c46:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001c48:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 11;
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c56:	220b      	movs	r2, #11
 8001c58:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c76:	2204      	movs	r2, #4
 8001c78:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8001c92:	4834      	ldr	r0, [pc, #208]	; (8001d64 <MX_DFSDM2_Init+0x240>)
 8001c94:	f005 fcca 	bl	800762c <HAL_DFSDM_ChannelInit>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_DFSDM2_Init+0x17e>
  {
    Error_Handler();
 8001c9e:	f000 fa8f 	bl	80021c0 <Error_Handler>
  }
  hdfsdm2_channel2.Instance = DFSDM2_Channel2;
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001ca4:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <MX_DFSDM2_Init+0x24c>)
 8001ca6:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel2.Init.OutputClock.Activation = ENABLE;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel2.Init.OutputClock.Divider = 11;
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cb6:	220b      	movs	r2, #11
 8001cb8:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel2.Init.Awd.Oversampling = 1;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel2.Init.Offset = 0;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel2.Init.RightBitShift = 0x00;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel2) != HAL_OK)
 8001cf2:	481e      	ldr	r0, [pc, #120]	; (8001d6c <MX_DFSDM2_Init+0x248>)
 8001cf4:	f005 fc9a 	bl	800762c <HAL_DFSDM_ChannelInit>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_DFSDM2_Init+0x1de>
  {
    Error_Handler();
 8001cfe:	f000 fa5f 	bl	80021c0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001d02:	2201      	movs	r2, #1
 8001d04:	2101      	movs	r1, #1
 8001d06:	480f      	ldr	r0, [pc, #60]	; (8001d44 <MX_DFSDM2_Init+0x220>)
 8001d08:	f005 fe6c 	bl	80079e4 <HAL_DFSDM_FilterConfigRegChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_DFSDM2_Init+0x1f2>
  {
    Error_Handler();
 8001d12:	f000 fa55 	bl	80021c0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001d16:	2201      	movs	r2, #1
 8001d18:	4916      	ldr	r1, [pc, #88]	; (8001d74 <MX_DFSDM2_Init+0x250>)
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <MX_DFSDM2_Init+0x228>)
 8001d1c:	f005 fe62 	bl	80079e4 <HAL_DFSDM_FilterConfigRegChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_DFSDM2_Init+0x206>
  {
    Error_Handler();
 8001d26:	f000 fa4b 	bl	80021c0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4912      	ldr	r1, [pc, #72]	; (8001d78 <MX_DFSDM2_Init+0x254>)
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <MX_DFSDM2_Init+0x230>)
 8001d30:	f005 fe58 	bl	80079e4 <HAL_DFSDM_FilterConfigRegChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_DFSDM2_Init+0x21a>
  {
    Error_Handler();
 8001d3a:	f000 fa41 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200005e4 	.word	0x200005e4
 8001d48:	40016500 	.word	0x40016500
 8001d4c:	20000638 	.word	0x20000638
 8001d50:	40016580 	.word	0x40016580
 8001d54:	2000068c 	.word	0x2000068c
 8001d58:	40016600 	.word	0x40016600
 8001d5c:	200006e0 	.word	0x200006e0
 8001d60:	40016400 	.word	0x40016400
 8001d64:	20000718 	.word	0x20000718
 8001d68:	40016420 	.word	0x40016420
 8001d6c:	20000750 	.word	0x20000750
 8001d70:	40016440 	.word	0x40016440
 8001d74:	00010002 	.word	0x00010002
 8001d78:	00020004 	.word	0x00020004

08001d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09a      	sub	sp, #104	; 0x68
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	2220      	movs	r2, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00c f866 	bl	800de6c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fc12 	bl	80015ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dc8:	2002      	movs	r0, #2
 8001dca:	f7ff fbf7 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB12   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4879      	ldr	r0, [pc, #484]	; (8001fd4 <MX_TIM1_Init+0x258>)
 8001dee:	f006 fa0e 	bl	800820e <LL_GPIO_Init>

  /* TIM1 DMA Init */

  /* TIM1_CH1_CH2_CH3 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2106      	movs	r1, #6
 8001df6:	4878      	ldr	r0, [pc, #480]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001df8:	f7ff faa6 	bl	8001348 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	2106      	movs	r1, #6
 8001e00:	4875      	ldr	r0, [pc, #468]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e02:	f7ff f9a5 	bl	8001150 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_HIGH);
 8001e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0a:	2106      	movs	r1, #6
 8001e0c:	4872      	ldr	r0, [pc, #456]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e0e:	f7ff fa77 	bl	8001300 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2106      	movs	r1, #6
 8001e16:	4870      	ldr	r0, [pc, #448]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e18:	f7ff f9be 	bl	8001198 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2106      	movs	r1, #6
 8001e20:	486d      	ldr	r0, [pc, #436]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e22:	f7ff f9dd 	bl	80011e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2a:	2106      	movs	r1, #6
 8001e2c:	486a      	ldr	r0, [pc, #424]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e2e:	f7ff f9fb 	bl	8001228 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_HALFWORD);
 8001e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e36:	2106      	movs	r1, #6
 8001e38:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e3a:	f7ff fa19 	bl	8001270 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_HALFWORD);
 8001e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e42:	2106      	movs	r1, #6
 8001e44:	4864      	ldr	r0, [pc, #400]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e46:	f7ff fa37 	bl	80012b8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8001e4a:	2106      	movs	r1, #6
 8001e4c:	4862      	ldr	r0, [pc, #392]	; (8001fd8 <MX_TIM1_Init+0x25c>)
 8001e4e:	f7ff fa9f 	bl	8001390 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6e:	4619      	mov	r1, r3
 8001e70:	485a      	ldr	r0, [pc, #360]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001e72:	f006 fbeb 	bl	800864c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001e76:	4859      	ldr	r0, [pc, #356]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001e78:	f7ff fc1a 	bl	80016b0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4857      	ldr	r0, [pc, #348]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001e80:	f7ff fc6c 	bl	800175c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2101      	movs	r1, #1
 8001eac:	484b      	ldr	r0, [pc, #300]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001eae:	f006 fc67 	bl	8008780 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4849      	ldr	r0, [pc, #292]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001eb6:	f7ff fc0b 	bl	80016d0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8001eba:	2110      	movs	r1, #16
 8001ebc:	4847      	ldr	r0, [pc, #284]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001ebe:	f7ff fc4d 	bl	800175c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4844      	ldr	r0, [pc, #272]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001ecc:	f006 fc58 	bl	8008780 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	4842      	ldr	r0, [pc, #264]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001ed4:	f7ff fbfc 	bl	80016d0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8001ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001edc:	483f      	ldr	r0, [pc, #252]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001ede:	f7ff fc3d 	bl	800175c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eec:	483b      	ldr	r0, [pc, #236]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001eee:	f006 fc47 	bl	8008780 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8001ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef6:	4839      	ldr	r0, [pc, #228]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001ef8:	f7ff fbea 	bl	80016d0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8001efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f00:	4836      	ldr	r0, [pc, #216]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f02:	f7ff fc2b 	bl	800175c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4832      	ldr	r0, [pc, #200]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f12:	f006 fc35 	bl	8008780 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8001f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1a:	4830      	ldr	r0, [pc, #192]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f1c:	f7ff fbd8 	bl	80016d0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8001f20:	2110      	movs	r1, #16
 8001f22:	482e      	ldr	r0, [pc, #184]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f24:	f7ff fc84 	bl	8001830 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8001f28:	2106      	movs	r1, #6
 8001f2a:	482c      	ldr	r0, [pc, #176]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f2c:	f7ff fc6d 	bl	800180a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8001f30:	482a      	ldr	r0, [pc, #168]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f32:	f7ff fca0 	bl	8001876 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8001f36:	4829      	ldr	r0, [pc, #164]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f38:	f7ff fcad 	bl	8001896 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4827      	ldr	r0, [pc, #156]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f40:	f7ff fc50 	bl	80017e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001f44:	4825      	ldr	r0, [pc, #148]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f46:	f7ff fc86 	bl	8001856 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	481a      	ldr	r0, [pc, #104]	; (8001fdc <MX_TIM1_Init+0x260>)
 8001f74:	f006 fc45 	bl	8008802 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff fb1f 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff fb1c 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  PB15   ------> TIM1_CH3N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001f84:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <MX_TIM1_Init+0x258>)
 8001fa4:	f006 f933 	bl	800820e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001fa8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <MX_TIM1_Init+0x264>)
 8001fc8:	f006 f921 	bl	800820e <LL_GPIO_Init>

}
 8001fcc:	bf00      	nop
 8001fce:	3768      	adds	r7, #104	; 0x68
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40026400 	.word	0x40026400
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800200e:	2020      	movs	r0, #32
 8002010:	f7ff faec 	bl	80015ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff fad1 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800201a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800201e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002020:	2302      	movs	r3, #2
 8002022:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002030:	2308      	movs	r3, #8
 8002032:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MX_USART6_UART_Init+0x98>)
 800203a:	f006 f8e8 	bl	800820e <LL_GPIO_Init>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 12500000;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MX_USART6_UART_Init+0x9c>)
 8002040:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800204e:	230c      	movs	r3, #12
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8002056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4808      	ldr	r0, [pc, #32]	; (8002084 <MX_USART6_UART_Init+0xa0>)
 8002064:	f007 f820 	bl	80090a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_USART6_UART_Init+0xa0>)
 800206a:	f7ff fc34 	bl	80018d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART6_UART_Init+0xa0>)
 8002070:	f7ff fc21 	bl	80018b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020000 	.word	0x40020000
 8002080:	00bebc20 	.word	0x00bebc20
 8002084:	40011400 	.word	0x40011400

08002088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800208c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002090:	f7ff fa94 	bl	80015bc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002094:	f7fe ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8002098:	4603      	mov	r3, r0
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4619      	mov	r1, r3
 80020a8:	2045      	movs	r0, #69	; 0x45
 80020aa:	f7fe ff5f 	bl	8000f6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80020ae:	2045      	movs	r0, #69	; 0x45
 80020b0:	f7fe ff3e 	bl	8000f30 <__NVIC_EnableIRQ>

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80020ce:	2004      	movs	r0, #4
 80020d0:	f7ff fa74 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fa71 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020da:	2002      	movs	r0, #2
 80020dc:	f7ff fa6e 	bl	80015bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80020e0:	2008      	movs	r0, #8
 80020e2:	f7ff fa6b 	bl	80015bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_8);
 80020e6:	f242 110c 	movw	r1, #8460	; 0x210c
 80020ea:	4832      	ldr	r0, [pc, #200]	; (80021b4 <MX_GPIO_Init+0xfc>)
 80020ec:	f7ff fc09 	bl	8001902 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_8);
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	4830      	ldr	r0, [pc, #192]	; (80021b8 <MX_GPIO_Init+0x100>)
 80020f6:	f7ff fc04 	bl	8001902 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_8;
 80020fa:	f242 130c 	movw	r3, #8460	; 0x210c
 80020fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002100:	2301      	movs	r3, #1
 8002102:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4827      	ldr	r0, [pc, #156]	; (80021b4 <MX_GPIO_Init+0xfc>)
 8002116:	f006 f87a 	bl	800820e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800211e:	2302      	movs	r3, #2
 8002120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	463b      	mov	r3, r7
 8002134:	4619      	mov	r1, r3
 8002136:	481f      	ldr	r0, [pc, #124]	; (80021b4 <MX_GPIO_Init+0xfc>)
 8002138:	f006 f869 	bl	800820e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800213c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002140:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4819      	ldr	r0, [pc, #100]	; (80021b4 <MX_GPIO_Init+0xfc>)
 8002150:	f006 f85d 	bl	800820e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002154:	2304      	movs	r3, #4
 8002156:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	463b      	mov	r3, r7
 8002162:	4619      	mov	r1, r3
 8002164:	4815      	ldr	r0, [pc, #84]	; (80021bc <MX_GPIO_Init+0x104>)
 8002166:	f006 f852 	bl	800820e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800216a:	2340      	movs	r3, #64	; 0x40
 800216c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800216e:	2302      	movs	r3, #2
 8002170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800217e:	2302      	movs	r3, #2
 8002180:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002182:	463b      	mov	r3, r7
 8002184:	4619      	mov	r1, r3
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <MX_GPIO_Init+0x100>)
 8002188:	f006 f841 	bl	800820e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002190:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002192:	2301      	movs	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_GPIO_Init+0x100>)
 80021a8:	f006 f831 	bl	800820e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>

080021ca <MC_ProfilerCommand>:

/**
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	4603      	mov	r3, r0
 80021d6:	81fb      	strh	r3, [r7, #14]
 80021d8:	4613      	mov	r3, r2
 80021da:	81bb      	strh	r3, [r7, #12]
  return MCP_CMD_UNKNOWN;
 80021dc:	2302      	movs	r3, #2
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <MC_APP_BootHook>:
 *
 *
 *
 */
__weak void MC_APP_BootHook(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <MC_APP_PostMediumFrequencyHook_M1>:
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
   */

/* USER SECTION BEGIN PostMediumFrequencyHookM1 */

/* USER SECTION END PostMediumFrequencyHookM1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWMC_Handle_t *pPWMHandle )
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pSTC = pSTC;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	601a      	str	r2, [r3, #0]
    pHandle->pFOCVars = pFOCVars;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
    pHandle->pPWM = pPWMHandle;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	609a      	str	r2, [r3, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalSpeed = 0;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	81da      	strh	r2, [r3, #14]
    pHandle->hFinalTorque = 0;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	821a      	strh	r2, [r3, #16]
    pHandle->hDurationms = 0;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	779a      	strb	r2, [r3, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	761a      	strb	r2, [r3, #24]
    pHandle->State = IDLE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	765a      	strb	r2, [r3, #25]
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	835a      	strh	r2, [r3, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	839a      	strh	r2, [r3, #28]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	81da      	strh	r2, [r3, #14]
    pHandle->hDurationms = hDurationms;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	883a      	ldrh	r2, [r7, #0]
 8002288:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2203      	movs	r2, #3
 8002294:	77da      	strb	r2, [r3, #31]

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	821a      	strh	r2, [r3, #16]
    pHandle->hDurationms = hDurationms;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	883a      	ldrh	r2, [r7, #0]
 80022c2:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	77da      	strb	r2, [r3, #31]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2203      	movs	r2, #3
 80022ea:	731a      	strb	r2, [r3, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80022ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	825a      	strh	r2, [r3, #18]
    pHandle->Iqdref.d = Iqdref.d;
 80022f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	829a      	strh	r2, [r3, #20]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	77da      	strb	r2, [r3, #31]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  bool RetVal;

  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f8f6 	bl	800250e <MCI_GetSTMState>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <MCI_StartMotor+0x3e>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f8fc 	bl	8002526 <MCI_GetOccurredFaults>
 800232e:	4603      	mov	r3, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10e      	bne.n	8002352 <MCI_StartMotor+0x3e>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f902 	bl	800253e <MCI_GetCurrentFaults>
 800233a:	4603      	mov	r3, r0
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d108      	bne.n	8002352 <MCI_StartMotor+0x3e>
  {
    pHandle->DirectCommand = MCI_START;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	761a      	strb	r2, [r3, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	779a      	strb	r2, [r3, #30]
    RetVal = true;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <MCI_StartMotor+0x42>
  }
  else
  {
    /* reject the command as the condition are not met */
    RetVal = false;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  }

  return (RetVal);
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor(MCI_Handle_t * pHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  bool RetVal;
  bool status;
  MCI_State_t State;

  State = MCI_GetSTMState(pHandle);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f8d0 	bl	800250e <MCI_GetSTMState>
 800236e:	4603      	mov	r3, r0
 8002370:	737b      	strb	r3, [r7, #13]
  if (IDLE == State  || ICLWAIT == State)
 8002372:	7b7b      	ldrb	r3, [r7, #13]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <MCI_StopMotor+0x1e>
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d102      	bne.n	8002384 <MCI_StopMotor+0x24>
  {
    status = false;
 800237e:	2300      	movs	r3, #0
 8002380:	73bb      	strb	r3, [r7, #14]
 8002382:	e001      	b.n	8002388 <MCI_StopMotor+0x28>
  }
  else
  {
    status = true;
 8002384:	2301      	movs	r3, #1
 8002386:	73bb      	strb	r3, [r7, #14]
  }

  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8cc 	bl	8002526 <MCI_GetOccurredFaults>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10e      	bne.n	80023b2 <MCI_StopMotor+0x52>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8d2 	bl	800253e <MCI_GetCurrentFaults>
 800239a:	4603      	mov	r3, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <MCI_StopMotor+0x52>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <MCI_StopMotor+0x52>
       status == true )
  {
    pHandle->DirectCommand = MCI_STOP;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2205      	movs	r2, #5
 80023aa:	761a      	strb	r2, [r3, #24]
    RetVal = true;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <MCI_StopMotor+0x56>
  }
  else
  {
    /* reject the command as the condition are not met */
    RetVal = false;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }

  return (RetVal);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  bool RetVal;

  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8a0 	bl	800250e <MCI_GetSTMState>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b0b      	cmp	r3, #11
 80023d2:	d10e      	bne.n	80023f2 <MCI_FaultAcknowledged+0x32>
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8b2 	bl	800253e <MCI_GetCurrentFaults>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <MCI_FaultAcknowledged+0x32>
  {
    pHandle->PastFaults = MC_NO_FAULTS;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	839a      	strh	r2, [r3, #28]
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	761a      	strb	r2, [r3, #24]
    RetVal = true;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <MCI_FaultAcknowledged+0x36>
  }
  else
  {
    /* reject the command as the conditions are not met */
    RetVal = false;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  }
  return (RetVal);
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <MCI_FaultProcessing>:
 * @param hSetErrors Bit field reporting faults currently present
 * @param hResetErrors Bit field reporting faults to be cleared
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	803b      	strh	r3, [r7, #0]
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	8b5a      	ldrh	r2, [r3, #26]
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	4313      	orrs	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21a      	sxth	r2, r3
 800241c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002420:	43db      	mvns	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	4013      	ands	r3, r2
 8002426:	b21b      	sxth	r3, r3
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	835a      	strh	r2, [r3, #26]
  pHandle->PastFaults |= hSetErrors;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8b9a      	ldrh	r2, [r3, #28]
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	4313      	orrs	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	839a      	strh	r2, [r3, #28]

  return;
 800243c:	bf00      	nop
}
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7f9b      	ldrb	r3, [r3, #30]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d156      	bne.n	8002506 <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
      switch (pHandle->lastCommand)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7b1b      	ldrb	r3, [r3, #12]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d036      	beq.n	80024d2 <MCI_ExecBufferedCommands+0x8a>
 8002464:	2b03      	cmp	r3, #3
 8002466:	dc43      	bgt.n	80024f0 <MCI_ExecBufferedCommands+0xa8>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <MCI_ExecBufferedCommands+0x2a>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d018      	beq.n	80024a2 <MCI_ExecBufferedCommands+0x5a>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
          break;
        }
        default:
          break;
 8002470:	e03e      	b.n	80024f0 <MCI_ExecBufferedCommands+0xa8>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2103      	movs	r1, #3
 8002482:	4618      	mov	r0, r3
 8002484:	f008 fe6c 	bl	800b160 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8adb      	ldrh	r3, [r3, #22]
 8002496:	461a      	mov	r2, r3
 8002498:	f008 fe78 	bl	800b18c <STC_ExecRamp>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
          break;
 80024a0:	e027      	b.n	80024f2 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2104      	movs	r1, #4
 80024b2:	4618      	mov	r0, r3
 80024b4:	f008 fe54 	bl	800b160 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8adb      	ldrh	r3, [r3, #22]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f008 fe60 	bl	800b18c <STC_ExecRamp>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
          break;
 80024d0:	e00f      	b.n	80024f2 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	3310      	adds	r3, #16
 80024e4:	3212      	adds	r2, #18
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
          break;
 80024ee:	e000      	b.n	80024f2 <MCI_ExecBufferedCommands+0xaa>
          break;
 80024f0:	bf00      	nop
      }

      if (commandHasBeenExecuted)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	779a      	strb	r2, [r3, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80024fe:	e002      	b.n	8002506 <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	779a      	strb	r2, [r3, #30]
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  return (pHandle->State);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7e5b      	ldrb	r3, [r3, #25]
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return ((uint16_t)pHandle->PastFaults);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8b9b      	ldrh	r3, [r3, #28]
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  return ((uint16_t)pHandle->CurrentFaults);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8b5b      	ldrh	r3, [r3, #26]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <MCI_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8b9b      	ldrh	r3, [r3, #28]
 8002562:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8b5b      	ldrh	r3, [r3, #26]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

  return (LocalFaultState);
 8002570:	68fb      	ldr	r3, [r7, #12]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
  *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
  */
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7fdb      	ldrb	r3, [r3, #31]
#endif
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	81fb      	strh	r3, [r7, #14]
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d018      	beq.n	80025dc <MCI_GetImposedMotorDirection+0x46>
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	dc1f      	bgt.n	80025ee <MCI_GetImposedMotorDirection+0x58>
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d002      	beq.n	80025b8 <MCI_GetImposedMotorDirection+0x22>
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d009      	beq.n	80025ca <MCI_GetImposedMotorDirection+0x34>
          retVal = -1;
        }
        break;

      default:
        break;
 80025b6:	e01a      	b.n	80025ee <MCI_GetImposedMotorDirection+0x58>
        if (pHandle->hFinalSpeed < 0)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da17      	bge.n	80025f2 <MCI_GetImposedMotorDirection+0x5c>
          retVal = -1;
 80025c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c6:	81fb      	strh	r3, [r7, #14]
        break;
 80025c8:	e013      	b.n	80025f2 <MCI_GetImposedMotorDirection+0x5c>
        if (pHandle->hFinalTorque < 0)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da10      	bge.n	80025f6 <MCI_GetImposedMotorDirection+0x60>
          retVal = -1;
 80025d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d8:	81fb      	strh	r3, [r7, #14]
        break;
 80025da:	e00c      	b.n	80025f6 <MCI_GetImposedMotorDirection+0x60>
        if (pHandle->Iqdref.q < 0)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da09      	bge.n	80025fa <MCI_GetImposedMotorDirection+0x64>
          retVal = -1;
 80025e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ea:	81fb      	strh	r3, [r7, #14]
        break;
 80025ec:	e005      	b.n	80025fa <MCI_GetImposedMotorDirection+0x64>
        break;
 80025ee:	bf00      	nop
 80025f0:	e004      	b.n	80025fc <MCI_GetImposedMotorDirection+0x66>
        break;
 80025f2:	bf00      	nop
 80025f4:	e002      	b.n	80025fc <MCI_GetImposedMotorDirection+0x66>
        break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <MCI_GetImposedMotorDirection+0x66>
        break;
 80025fa:	bf00      	nop
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
 80025fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in
  *         the unit defined by #SPEED_UNIT.
  */
__weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
#endif
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <MCI_GetLastRampFinalTorque>:
  *         digit.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hFinalTorque;
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
#endif
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <MCI_GetLastRampFinalDuration>:
  *         user .
  * @param  pHandle Pointer on the component instance to work on.
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8adb      	ldrh	r3, [r3, #22]
#endif
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f008 fe2b 	bl	800b2c0 <STC_StopRamp>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f008 fd18 	bl	800b0b4 <STC_GetSpeedSensor>
 8002684:	60f8      	str	r0, [r7, #12]
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f008 fe4e 	bl	800b328 <SPD_GetAvrgMecSpeedUnit>
 800268c:	4603      	mov	r3, r0
 800268e:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
 8002690:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f008 fd2e 	bl	800b10a <STC_GetMecSpeedRefUnit>
 80026ae:	4603      	mov	r3, r0
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	6810      	ldr	r0, [r2, #0]
 80026ca:	6018      	str	r0, [r3, #0]
 80026cc:	2300      	movs	r3, #0
 80026ce:	89ba      	ldrh	r2, [r7, #12]
 80026d0:	f362 030f 	bfi	r3, r2, #0, #16
 80026d4:	89fa      	ldrh	r2, [r7, #14]
 80026d6:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	3204      	adds	r2, #4
 80026f8:	6810      	ldr	r0, [r2, #0]
 80026fa:	6018      	str	r0, [r3, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	89ba      	ldrh	r2, [r7, #12]
 8002700:	f362 030f 	bfi	r3, r2, #0, #16
 8002704:	89fa      	ldrh	r2, [r7, #14]
 8002706:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	320c      	adds	r2, #12
 8002728:	6810      	ldr	r0, [r2, #0]
 800272a:	6018      	str	r0, [r3, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	89ba      	ldrh	r2, [r7, #12]
 8002730:	f362 030f 	bfi	r3, r2, #0, #16
 8002734:	89fa      	ldrh	r2, [r7, #14]
 8002736:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	3210      	adds	r2, #16
 8002758:	6810      	ldr	r0, [r2, #0]
 800275a:	6018      	str	r0, [r3, #0]
 800275c:	2300      	movs	r3, #0
 800275e:	89ba      	ldrh	r2, [r7, #12]
 8002760:	f362 030f 	bfi	r3, r2, #0, #16
 8002764:	89fa      	ldrh	r2, [r7, #14]
 8002766:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	3216      	adds	r2, #22
 8002788:	6810      	ldr	r0, [r2, #0]
 800278a:	6018      	str	r0, [r3, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	89ba      	ldrh	r2, [r7, #12]
 8002790:	f362 030f 	bfi	r3, r2, #0, #16
 8002794:	89fa      	ldrh	r2, [r7, #14]
 8002796:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	321a      	adds	r2, #26
 80027b8:	6810      	ldr	r0, [r2, #0]
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	89ba      	ldrh	r2, [r7, #12]
 80027c0:	f362 030f 	bfi	r3, r2, #0, #16
 80027c4:	89fa      	ldrh	r2, [r7, #14]
 80027c6:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
#endif
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685c      	ldr	r4, [r3, #4]
 8002802:	4610      	mov	r0, r2
 8002804:	f008 fe9d 	bl	800b542 <STC_GetDefaultIqdref>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	8222      	strh	r2, [r4, #16]
 800280e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8002812:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}

0800281c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  int32_t b_divSQRT3_tmp;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8002824:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002828:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 800282a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800283a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283e:	461a      	mov	r2, r3
 8002840:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	425a      	negs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad2      	subs	r2, r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	13db      	asrs	r3, r3, #15
 8002858:	613b      	str	r3, [r7, #16]
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002860:	db03      	blt.n	800286a <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8002862:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002866:	83fb      	strh	r3, [r7, #30]
 8002868:	e009      	b.n	800287e <MCM_Clarke+0x62>
  }
  else if (wbeta_tmp < (-32768))
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002870:	da03      	bge.n	800287a <MCM_Clarke+0x5e>
  {
    hbeta_tmp =  ((int16_t)-32768);
 8002872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002876:	83fb      	strh	r3, [r7, #30]
 8002878:	e001      	b.n	800287e <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 800287e:	8bfb      	ldrh	r3, [r7, #30]
 8002880:	817b      	strh	r3, [r7, #10]

  if (((int16_t )-32768) == Output.beta)
 8002882:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002886:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800288a:	d102      	bne.n	8002892 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 800288c:	f248 0301 	movw	r3, #32769	; 0x8001
 8002890:	817b      	strh	r3, [r7, #10]
  }

  return (Output);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	2300      	movs	r3, #0
 8002898:	89ba      	ldrh	r2, [r7, #12]
 800289a:	f362 030f 	bfi	r3, r2, #0, #16
 800289e:	89fa      	ldrh	r2, [r7, #14]
 80028a0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3724      	adds	r7, #36	; 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park(alphabeta_t Input, int16_t Theta)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
  int32_t q_tmp_2;
  int32_t wqd_tmp;
  int16_t hqd_tmp;
  Trig_Components Local_Vector_Components;

  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80028bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f8af 	bl	8002a24 <MCM_Trig_Functions>
 80028c6:	4603      	mov	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80028ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 80028d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  /*Iq component in Q1.15 Format */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80028e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	13db      	asrs	r3, r3, #15
 80028ee:	623b      	str	r3, [r7, #32]
#else
  wqd_tmp = (q_tmp_1 - q_tmp_2) / 32768;
#endif

  /* Check saturation of Iq */
  if (wqd_tmp > INT16_MAX)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f6:	db03      	blt.n	8002900 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 80028f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80028fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80028fe:	e009      	b.n	8002914 <MCM_Park+0x64>
  }
  else if (wqd_tmp < (-32768))
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002906:	da03      	bge.n	8002910 <MCM_Park+0x60>
  {
    hqd_tmp = ((int16_t)-32768);
 8002908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800290e:	e001      	b.n	8002914 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ((int16_t)wqd_tmp);
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8002914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002916:	823b      	strh	r3, [r7, #16]

  if (((int16_t )-32768) == Output.q)
 8002918:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800291c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002920:	d102      	bne.n	8002928 <MCM_Park+0x78>
  {
    Output.q = -32767;
 8002922:	f248 0301 	movw	r3, #32769	; 0x8001
 8002926:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8002928:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800292c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	61bb      	str	r3, [r7, #24]
  /*Id component in Q1.15 Format */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	13db      	asrs	r3, r3, #15
 800294c:	623b      	str	r3, [r7, #32]
#else
  wqd_tmp = (d_tmp_1 + d_tmp_2) / 32768;
#endif

  /* Check saturation of Id */
  if (wqd_tmp > INT16_MAX)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	db03      	blt.n	800295e <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8002956:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800295a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800295c:	e009      	b.n	8002972 <MCM_Park+0xc2>
  }
  else if (wqd_tmp < (-32768))
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002964:	da03      	bge.n	800296e <MCM_Park+0xbe>
  {
    hqd_tmp = ((int16_t)-32768);
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800296c:	e001      	b.n	8002972 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ((int16_t)wqd_tmp);
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8002972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002974:	827b      	strh	r3, [r7, #18]

  if (((int16_t)-32768) == Output.d)
 8002976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800297a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800297e:	d102      	bne.n	8002986 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8002980:	f248 0301 	movw	r3, #32769	; 0x8001
 8002984:	827b      	strh	r3, [r7, #18]
  }

  return (Output);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	2300      	movs	r3, #0
 800298c:	8aba      	ldrh	r2, [r7, #20]
 800298e:	f362 030f 	bfi	r3, r2, #0, #16
 8002992:	8afa      	ldrh	r2, [r7, #22]
 8002994:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002998:	4618      	mov	r0, r3
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  int32_t beta_tmp1;
  int32_t beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80029ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f837 	bl	8002a24 <MCM_Trig_Functions>
 80029b6:	4603      	mov	r3, r0
 80029b8:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 80029ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80029c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	623b      	str	r3, [r7, #32]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	4413      	add	r3, r2
 80029dc:	13db      	asrs	r3, r3, #15
 80029de:	b21b      	sxth	r3, r3
 80029e0:	81bb      	strh	r3, [r7, #12]
#else
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) / 32768);
#endif

  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 80029e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80029f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	61bb      	str	r3, [r7, #24]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	13db      	asrs	r3, r3, #15
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	81fb      	strh	r3, [r7, #14]
#else
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) / 32768);
#endif

  return (Output);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	8aba      	ldrh	r2, [r7, #20]
 8002a12:	f362 030f 	bfi	r3, r2, #0, #16
 8002a16:	8afa      	ldrh	r2, [r7, #22]
 8002a18:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions(int16_t hAngle)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a36:	617b      	str	r3, [r7, #20]
  uhindex = (uint16_t)shindex;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	827b      	strh	r3, [r7, #18]
  uhindex /= ((uint16_t)64);
 8002a3c:	8a7b      	ldrh	r3, [r7, #18]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	827b      	strh	r3, [r7, #18]

  switch (((uint16_t)uhindex) & SIN_MASK)
 8002a42:	8a7b      	ldrh	r3, [r7, #18]
 8002a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4c:	d01f      	beq.n	8002a8e <MCM_Trig_Functions+0x6a>
 8002a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a52:	d85f      	bhi.n	8002b14 <MCM_Trig_Functions+0xf0>
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a58:	d008      	beq.n	8002a6c <MCM_Trig_Functions+0x48>
 8002a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5e:	d859      	bhi.n	8002b14 <MCM_Trig_Functions+0xf0>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d029      	beq.n	8002ab8 <MCM_Trig_Functions+0x94>
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d03f      	beq.n	8002aea <MCM_Trig_Functions+0xc6>
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    }

    default:
      break;
 8002a6a:	e053      	b.n	8002b14 <MCM_Trig_Functions+0xf0>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002a6c:	8a7b      	ldrh	r3, [r7, #18]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002a74:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002a78:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002a7a:	8a7b      	ldrh	r3, [r7, #18]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002a86:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002a8a:	813b      	strh	r3, [r7, #8]
      break;
 8002a8c:	e043      	b.n	8002b16 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002a8e:	8a7b      	ldrh	r3, [r7, #18]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002a9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002a9e:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002aa0:	8a7b      	ldrh	r3, [r7, #18]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002aa8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	425b      	negs	r3, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	813b      	strh	r3, [r7, #8]
      break;
 8002ab6:	e02e      	b.n	8002b16 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002ab8:	8a7b      	ldrh	r3, [r7, #18]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002ac0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	425b      	negs	r3, r3
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b21b      	sxth	r3, r3
 8002acc:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002ace:	8a7b      	ldrh	r3, [r7, #18]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002ada:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	813b      	strh	r3, [r7, #8]
      break;
 8002ae8:	e015      	b.n	8002b16 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002aea:	8a7b      	ldrh	r3, [r7, #18]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002af6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	425b      	negs	r3, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b04:	8a7b      	ldrh	r3, [r7, #18]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <MCM_Trig_Functions+0x110>)
 8002b0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b10:	813b      	strh	r3, [r7, #8]
      break;
 8002b12:	e000      	b.n	8002b16 <MCM_Trig_Functions+0xf2>
      break;
 8002b14:	bf00      	nop
  }
  return (Local_Components);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	89ba      	ldrh	r2, [r7, #12]
 8002b1e:	f362 030f 	bfi	r3, r2, #0, #16
 8002b22:	89fa      	ldrh	r2, [r7, #14]
 8002b24:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	0800e058 	.word	0x0800e058

08002b38 <MCM_Sqrt>:
  *         for negative int32_t.
  * @param  Input int32_t number
  * @retval int32_t Square root of Input (0 if Input<0)
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  int32_t wtemprootnew;

  if (wInput > 0)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dd28      	ble.n	8002b98 <MCM_Sqrt+0x60>
  {
  uint8_t biter = 0u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	74fb      	strb	r3, [r7, #19]
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b50:	dc02      	bgt.n	8002b58 <MCM_Sqrt+0x20>
    {
      wtemproot = ((int32_t)128);
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e002      	b.n	8002b5e <MCM_Sqrt+0x26>
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8002b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5c:	60fb      	str	r3, [r7, #12]
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	0fda      	lsrs	r2, r3, #31
 8002b6c:	4413      	add	r3, r2
 8002b6e:	105b      	asrs	r3, r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d002      	beq.n	8002b80 <MCM_Sqrt+0x48>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <MCM_Sqrt+0x4e>
      {
        biter = 6U;
 8002b80:	2306      	movs	r3, #6
 8002b82:	74fb      	strb	r3, [r7, #19]
 8002b84:	e004      	b.n	8002b90 <MCM_Sqrt+0x58>
      }
      else
      {
        biter ++;
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	74fb      	strb	r3, [r7, #19]
        wtemproot = wtemprootnew;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	60fb      	str	r3, [r7, #12]
      }
    }
    while (biter < 6U);
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d9e3      	bls.n	8002b5e <MCM_Sqrt+0x26>
 8002b96:	e001      	b.n	8002b9c <MCM_Sqrt+0x64>

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  }

  return (wtemprootnew);
 8002b9c:	697b      	ldr	r3, [r7, #20]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_GPIO_LockPin>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 808d 	beq.w	8002d0e <MCboot+0x12a>
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8002bf4:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <MCboot+0x134>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]

    /**********************************************************/
    /*    PWM and current sensing component initialization    */
    /**********************************************************/
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <MCboot+0x138>)
 8002bfc:	4a48      	ldr	r2, [pc, #288]	; (8002d20 <MCboot+0x13c>)
 8002bfe:	601a      	str	r2, [r3, #0]
    R3_1_Init(&PWM_Handle_M1);
 8002c00:	4847      	ldr	r0, [pc, #284]	; (8002d20 <MCboot+0x13c>)
 8002c02:	f00a f8a1 	bl	800cd48 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8002c06:	4847      	ldr	r0, [pc, #284]	; (8002d24 <MCboot+0x140>)
 8002c08:	f7fd fd0a 	bl	8000620 <ASPEP_start>

    /* USER CODE END MCboot 1 */
    /**************************************/
    /*    Start timers synchronously      */
    /**************************************/
    startTimers();
 8002c0c:	f007 fdcc 	bl	800a7a8 <startTimers>

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002c10:	4845      	ldr	r0, [pc, #276]	; (8002d28 <MCboot+0x144>)
 8002c12:	f007 fb1d 	bl	800a250 <PID_HandleInit>

    /******************************************************/
    /*   Main speed sensor component initialization       */
    /******************************************************/
    STO_PLL_Init (&STO_PLL_M1);
 8002c16:	4845      	ldr	r0, [pc, #276]	; (8002d2c <MCboot+0x148>)
 8002c18:	f008 fcae 	bl	800b578 <STO_PLL_Init>

    /******************************************************/
    /*   Speed & torque component initialization          */
    /******************************************************/
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002c1c:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <MCboot+0x14c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a42      	ldr	r2, [pc, #264]	; (8002d2c <MCboot+0x148>)
 8002c22:	4941      	ldr	r1, [pc, #260]	; (8002d28 <MCboot+0x144>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f008 fa06 	bl	800b036 <STC_Init>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8002c2a:	4842      	ldr	r0, [pc, #264]	; (8002d34 <MCboot+0x150>)
 8002c2c:	f009 fb6c 	bl	800c308 <VSS_Init>

    /**************************************/
    /*   Rev-up component initialization  */
    /**************************************/
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <MCboot+0x14c>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <MCboot+0x138>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <MCboot+0x154>)
 8002c3c:	4a3d      	ldr	r2, [pc, #244]	; (8002d34 <MCboot+0x150>)
 8002c3e:	483f      	ldr	r0, [pc, #252]	; (8002d3c <MCboot+0x158>)
 8002c40:	f008 f82c 	bl	800ac9c <RUC_Init>

    /********************************************************/
    /*   PID component initialization: current regulation   */
    /********************************************************/
    PID_HandleInit(&PIDIqHandle_M1);
 8002c44:	483e      	ldr	r0, [pc, #248]	; (8002d40 <MCboot+0x15c>)
 8002c46:	f007 fb03 	bl	800a250 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002c4a:	483e      	ldr	r0, [pc, #248]	; (8002d44 <MCboot+0x160>)
 8002c4c:	f007 fb00 	bl	800a250 <PID_HandleInit>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    RVBS_Init(&BusVoltageSensor_M1);
 8002c50:	483d      	ldr	r0, [pc, #244]	; (8002d48 <MCboot+0x164>)
 8002c52:	f007 fe0d 	bl	800a870 <RVBS_Init>

    /*************************************************/
    /*   Power measurement component initialization  */
    /*************************************************/
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002c56:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <MCboot+0x168>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <MCboot+0x164>)
 8002c5c:	60da      	str	r2, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <MCboot+0x168>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <MCboot+0x16c>)
 8002c64:	609a      	str	r2, [r3, #8]

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    NTC_Init(&TempSensor_M1);
 8002c66:	483b      	ldr	r0, [pc, #236]	; (8002d54 <MCboot+0x170>)
 8002c68:	f007 fa55 	bl	800a116 <NTC_Init>

    /*******************************************************/
    /*   Feed forward component initialization             */
    /*******************************************************/
    FF_Init(pFF[M1],&(BusVoltageSensor_M1._Super),pPIDId[M1],pPIDIq[M1]);
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <MCboot+0x174>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <MCboot+0x178>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <MCboot+0x17c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4933      	ldr	r1, [pc, #204]	; (8002d48 <MCboot+0x164>)
 8002c7a:	f006 fbc1 	bl	8009400 <FF_Init>

    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <MCboot+0x180>)
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <MCboot+0x184>)
 8002c82:	601a      	str	r2, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <MCboot+0x180>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f007 feec 	bl	800aa66 <REMNG_Init>

    FOC_Clear(M1);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f000 fb80 	bl	8003394 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <MCboot+0x16c>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <MCboot+0x14c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4c2b      	ldr	r4, [pc, #172]	; (8002d50 <MCboot+0x16c>)
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f008 fc4d 	bl	800b542 <STC_GetDefaultIqdref>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	6123      	str	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MCboot+0x14c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f008 fc46 	bl	800b542 <STC_GetDefaultIqdref>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <MCboot+0x16c>)
 8002cc0:	829a      	strh	r2, [r3, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MCboot+0x14c>)
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MCboot+0x138>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <MCboot+0x16c>)
 8002ccc:	4827      	ldr	r0, [pc, #156]	; (8002d6c <MCboot+0x188>)
 8002cce:	f7ff fa9a 	bl	8002206 <MCI_Init>
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MCboot+0x14c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f008 fc33 	bl	800b542 <STC_GetDefaultIqdref>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4820      	ldr	r0, [pc, #128]	; (8002d6c <MCboot+0x188>)
 8002cea:	f7ff fada 	bl	80022a2 <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <MCboot+0x188>)
 8002cf2:	601a      	str	r2, [r3, #0]

    ICL_Init(&ICL_M1, &(BusVoltageSensor_M1._Super), &ICLDOUTParamsM1);
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <MCboot+0x18c>)
 8002cf6:	4914      	ldr	r1, [pc, #80]	; (8002d48 <MCboot+0x164>)
 8002cf8:	481e      	ldr	r0, [pc, #120]	; (8002d74 <MCboot+0x190>)
 8002cfa:	f006 fd15 	bl	8009728 <ICL_Init>
    Mci[M1].State = ICLWAIT;
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MCboot+0x188>)
 8002d00:	220c      	movs	r2, #12
 8002d02:	765a      	strb	r2, [r3, #25]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002d04:	f7ff fa71 	bl	80021ea <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <MCboot+0x134>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200007f2 	.word	0x200007f2
 8002d1c:	200007e4 	.word	0x200007e4
 8002d20:	20000178 	.word	0x20000178
 8002d24:	200004fc 	.word	0x200004fc
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	20000240 	.word	0x20000240
 8002d30:	200004bc 	.word	0x200004bc
 8002d34:	20000208 	.word	0x20000208
 8002d38:	20000368 	.word	0x20000368
 8002d3c:	20000100 	.word	0x20000100
 8002d40:	2000003c 	.word	0x2000003c
 8002d44:	20000068 	.word	0x20000068
 8002d48:	200003b8 	.word	0x200003b8
 8002d4c:	200004cc 	.word	0x200004cc
 8002d50:	200007bc 	.word	0x200007bc
 8002d54:	20000390 	.word	0x20000390
 8002d58:	200004d0 	.word	0x200004d0
 8002d5c:	200004c8 	.word	0x200004c8
 8002d60:	200004c4 	.word	0x200004c4
 8002d64:	200007e8 	.word	0x200007e8
 8002d68:	200003e4 	.word	0x200003e4
 8002d6c:	2000079c 	.word	0x2000079c
 8002d70:	200004b0 	.word	0x200004b0
 8002d74:	2000037c 	.word	0x2000037c

08002d78 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  if (0U == bMCBootCompleted)
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <MC_RunMotorControlTasks+0x1c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <MC_RunMotorControlTasks+0x16>
    /* Nothing to do */
  }
  else
  {
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8002d86:	f000 f835 	bl	8002df4 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8002d8a:	f000 fd8f 	bl	80038ac <TSK_SafetyTask>

  }
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200007f2 	.word	0x200007f2

08002d98 <TSK_MF_StopProcessing>:
/**
 * @brief Performs stop process and update the state machine.This function
 *        shall be called only during medium frequency task
 */
void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <TSK_MF_StopProcessing+0x50>)
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f00a fbcd 	bl	800d54c <R3_1_SwitchOffPWM>

  FOC_Clear(motor);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 faed 	bl	8003394 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <TSK_MF_StopProcessing+0x54>)
 8002dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 fc37 	bl	800a636 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002dc8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002dcc:	f000 fc22 	bl	8003614 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <TSK_MF_StopProcessing+0x58>)
 8002dd4:	015b      	lsls	r3, r3, #5
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3319      	adds	r3, #25
 8002dda:	2208      	movs	r2, #8
 8002ddc:	701a      	strb	r2, [r3, #0]
  return;
 8002dde:	bf00      	nop
}
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200007e4 	.word	0x200007e4
 8002dec:	200004cc 	.word	0x200004cc
 8002df0:	2000079c 	.word	0x2000079c

08002df4 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8002df4:	b598      	push	{r3, r4, r7, lr}
 8002df6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (((uint8_t)1) == bMCBootCompleted)
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <MC_Scheduler+0xbc>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d154      	bne.n	8002eac <MC_Scheduler+0xb8>
  {
    if(hMFTaskCounterM1 > 0u)
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <MC_Scheduler+0xc0>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <MC_Scheduler+0x24>
    {
      hMFTaskCounterM1--;
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <MC_Scheduler+0xc0>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <MC_Scheduler+0xc0>)
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e031      	b.n	8002e7c <MC_Scheduler+0x88>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 8002e18:	f000 f858 	bl	8002ecc <TSK_MediumFrequencyTaskM1>

      /* Applicative hook at end of Medium Frequency for Motor 1 */
      MC_APP_PostMediumFrequencyHook_M1();
 8002e1c:	f7ff f9ec 	bl	80021f8 <MC_APP_PostMediumFrequencyHook_M1>

      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4924      	ldr	r1, [pc, #144]	; (8002ebc <MC_Scheduler+0xc8>)
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
 8002e30:	4603      	mov	r3, r0
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e34:	6053      	str	r3, [r2, #4]
                                                                                &MCP_Over_UartA.rxLength);
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01b      	beq.n	8002e76 <MC_Scheduler+0x82>
        /* Nothing to do */
      }
      else
      {
        /* Synchronous answer */
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e46:	6810      	ldr	r0, [r2, #0]
 8002e48:	220a      	movs	r2, #10
 8002e4a:	491d      	ldr	r1, [pc, #116]	; (8002ec0 <MC_Scheduler+0xcc>)
 8002e4c:	4798      	blx	r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <MC_Scheduler+0x82>
        {
          /* no buffer available to build the answer ... should not occur */
        }
        else
        {
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002e5a:	4817      	ldr	r0, [pc, #92]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e5c:	f006 fcf4 	bl	8009848 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685c      	ldr	r4, [r3, #4]
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <MC_Scheduler+0xc4>)
 8002e70:	89da      	ldrh	r2, [r3, #14]
 8002e72:	230a      	movs	r3, #10
 8002e74:	47a0      	blx	r4
      }

      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <MC_Scheduler+0xc0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0U)
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MC_Scheduler+0xd0>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <MC_Scheduler+0xa0>
    {
      hBootCapDelayCounterM1--;
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MC_Scheduler+0xd0>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MC_Scheduler+0xd0>)
 8002e92:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0U)
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MC_Scheduler+0xd4>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <MC_Scheduler+0xb8>
    {
      hStopPermanencyCounterM1--;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MC_Scheduler+0xd4>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MC_Scheduler+0xd4>)
 8002eaa:	801a      	strh	r2, [r3, #0]
    /* Nothing to do */
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8002eac:	bf00      	nop
 8002eae:	bd98      	pop	{r3, r4, r7, pc}
 8002eb0:	200007f2 	.word	0x200007f2
 8002eb4:	200007ec 	.word	0x200007ec
 8002eb8:	20000570 	.word	0x20000570
 8002ebc:	2000057c 	.word	0x2000057c
 8002ec0:	20000578 	.word	0x20000578
 8002ec4:	200007ee 	.word	0x200007ee
 8002ec8:	200007f0 	.word	0x200007f0

08002ecc <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  int16_t wAux = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	823b      	strh	r3, [r7, #16]
  ICL_State_t ICLstate = ICL_Exec(&ICL_M1);
 8002ed6:	4891      	ldr	r0, [pc, #580]	; (800311c <TSK_MediumFrequencyTaskM1+0x250>)
 8002ed8:	f006 fc3a 	bl	8009750 <ICL_Exec>
 8002edc:	4603      	mov	r3, r0
 8002ede:	75bb      	strb	r3, [r7, #22]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	488e      	ldr	r0, [pc, #568]	; (8003120 <TSK_MediumFrequencyTaskM1+0x254>)
 8002ee8:	f008 fdb5 	bl	800ba56 <STO_PLL_CalcAvrgMecSpeedUnit>
 8002eec:	4603      	mov	r3, r0
 8002eee:	757b      	strb	r3, [r7, #21]
  PQD_CalcElMotorPower(pMPM[M1]);
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <TSK_MediumFrequencyTaskM1+0x258>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f007 fb5f 	bl	800a5b8 <PQD_CalcElMotorPower>

  if ( !ICLFaultTreatedM1 && (ICLstate == ICL_ACTIVE)){
 8002efa:	4b8b      	ldr	r3, [pc, #556]	; (8003128 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <TSK_MediumFrequencyTaskM1+0x4a>
 8002f0a:	7dbb      	ldrb	r3, [r7, #22]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d102      	bne.n	8002f16 <TSK_MediumFrequencyTaskM1+0x4a>
    ICLFaultTreatedM1 = true;
 8002f10:	4b85      	ldr	r3, [pc, #532]	; (8003128 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
  }

  if ((MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS) && ICLFaultTreatedM1)
 8002f16:	4885      	ldr	r0, [pc, #532]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002f18:	f7ff fb11 	bl	800253e <MCI_GetCurrentFaults>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 821f 	bne.w	8003362 <TSK_MediumFrequencyTaskM1+0x496>
 8002f24:	4b80      	ldr	r3, [pc, #512]	; (8003128 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8219 	beq.w	8003362 <TSK_MediumFrequencyTaskM1+0x496>
  {
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002f30:	487e      	ldr	r0, [pc, #504]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002f32:	f7ff faf8 	bl	8002526 <MCI_GetOccurredFaults>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 81fa 	bne.w	8003332 <TSK_MediumFrequencyTaskM1+0x466>
    {
      switch (Mci[M1].State)
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002f40:	7e5b      	ldrb	r3, [r3, #25]
 8002f42:	2b13      	cmp	r3, #19
 8002f44:	f200 81f9 	bhi.w	800333a <TSK_MediumFrequencyTaskM1+0x46e>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <TSK_MediumFrequencyTaskM1+0x84>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002fb1 	.word	0x08002fb1
 8002f54:	0800333b 	.word	0x0800333b
 8002f58:	0800333b 	.word	0x0800333b
 8002f5c:	0800333b 	.word	0x0800333b
 8002f60:	080030e9 	.word	0x080030e9
 8002f64:	0800333b 	.word	0x0800333b
 8002f68:	080032b5 	.word	0x080032b5
 8002f6c:	0800333b 	.word	0x0800333b
 8002f70:	080032eb 	.word	0x080032eb
 8002f74:	0800333b 	.word	0x0800333b
 8002f78:	0800332b 	.word	0x0800332b
 8002f7c:	08003315 	.word	0x08003315
 8002f80:	08002fa1 	.word	0x08002fa1
 8002f84:	0800333b 	.word	0x0800333b
 8002f88:	0800333b 	.word	0x0800333b
 8002f8c:	0800333b 	.word	0x0800333b
 8002f90:	0800308f 	.word	0x0800308f
 8002f94:	08003029 	.word	0x08003029
 8002f98:	0800333b 	.word	0x0800333b
 8002f9c:	080031fd 	.word	0x080031fd
      {
        case ICLWAIT:
        {
          if (ICL_INACTIVE == ICLstate)
 8002fa0:	7dbb      	ldrb	r3, [r7, #22]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	f040 81cb 	bne.w	800333e <TSK_MediumFrequencyTaskM1+0x472>
          {
            /* If ICL is Inactive, move to IDLE */
            Mci[M1].State = IDLE;
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	765a      	strb	r2, [r3, #25]
          }
          break;
 8002fae:	e1c6      	b.n	800333e <TSK_MediumFrequencyTaskM1+0x472>
        }

        case IDLE:
        {
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002fb0:	4b5e      	ldr	r3, [pc, #376]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d004      	beq.n	8002fc2 <TSK_MediumFrequencyTaskM1+0xf6>
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	f040 81c0 	bne.w	8003342 <TSK_MediumFrequencyTaskM1+0x476>
          {
            {
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002fc2:	485a      	ldr	r0, [pc, #360]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002fc4:	f7ff fae7 	bl	8002596 <MCI_GetImposedMotorDirection>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4858      	ldr	r0, [pc, #352]	; (8003130 <TSK_MediumFrequencyTaskM1+0x264>)
 8002fce:	f007 febb 	bl	800ad48 <RUC_Clear>
            }

           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002fd2:	4b58      	ldr	r3, [pc, #352]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <TSK_MediumFrequencyTaskM1+0x12c>
           {
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 ffcc 	bl	8003f88 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8002ff2:	2211      	movs	r2, #17
 8002ff4:	765a      	strb	r2, [r3, #25]
          }
          else
          {
            /* nothing to be done, FW stays in IDLE state */
          }
          break;
 8002ff6:	e1a4      	b.n	8003342 <TSK_MediumFrequencyTaskM1+0x476>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8003002:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 ffbd 	bl	8003f88 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f00a f994 	bl	800d342 <R3_1_TurnOnLowSides>
             TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 800301a:	2014      	movs	r0, #20
 800301c:	f000 fad4 	bl	80035c8 <TSK_SetChargeBootCapDelayM1>
             Mci[M1].State = CHARGE_BOOT_CAP;
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003022:	2210      	movs	r2, #16
 8003024:	765a      	strb	r2, [r3, #25]
          break;
 8003026:	e18c      	b.n	8003342 <TSK_MediumFrequencyTaskM1+0x476>
        }

        case OFFSET_CALIB:
          {
            if (MCI_STOP == Mci[M1].DirectCommand)
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 800302a:	7e1b      	ldrb	r3, [r3, #24]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d104      	bne.n	800303a <TSK_MediumFrequencyTaskM1+0x16e>
            {
              TSK_MF_StopProcessing(&Mci[M1], M1);
 8003030:	2100      	movs	r1, #0
 8003032:	483e      	ldr	r0, [pc, #248]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003034:	f7ff feb0 	bl	8002d98 <TSK_MF_StopProcessing>
              else
              {
                /* nothing to be done, FW waits for offset calibration to finish */
              }
            }
            break;
 8003038:	e185      	b.n	8003346 <TSK_MediumFrequencyTaskM1+0x47a>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f000 ffa1 	bl	8003f88 <PWMC_CurrentReadingCalibr>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 817c 	beq.w	8003346 <TSK_MediumFrequencyTaskM1+0x47a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003050:	7e1b      	ldrb	r3, [r3, #24]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d10e      	bne.n	8003074 <TSK_MediumFrequencyTaskM1+0x1a8>
                  FOC_Clear(M1);
 8003056:	2000      	movs	r0, #0
 8003058:	f000 f99c 	bl	8003394 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <TSK_MediumFrequencyTaskM1+0x258>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f007 fae8 	bl	800a636 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003068:	2200      	movs	r2, #0
 800306a:	761a      	strb	r2, [r3, #24]
                  Mci[M1].State = IDLE;
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 800306e:	2200      	movs	r2, #0
 8003070:	765a      	strb	r2, [r3, #25]
            break;
 8003072:	e168      	b.n	8003346 <TSK_MediumFrequencyTaskM1+0x47a>
                  R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f00a f961 	bl	800d342 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8003080:	2014      	movs	r0, #20
 8003082:	f000 faa1 	bl	80035c8 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8003086:	4b29      	ldr	r3, [pc, #164]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003088:	2210      	movs	r2, #16
 800308a:	765a      	strb	r2, [r3, #25]
            break;
 800308c:	e15b      	b.n	8003346 <TSK_MediumFrequencyTaskM1+0x47a>
          }

        case CHARGE_BOOT_CAP:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003090:	7e1b      	ldrb	r3, [r3, #24]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d104      	bne.n	80030a0 <TSK_MediumFrequencyTaskM1+0x1d4>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 8003096:	2100      	movs	r1, #0
 8003098:	4824      	ldr	r0, [pc, #144]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 800309a:	f7ff fe7d 	bl	8002d98 <TSK_MF_StopProcessing>
            else
            {
              /* nothing to be done, FW waits for bootstrap capacitor to charge */
            }
          }
          break;
 800309e:	e154      	b.n	800334a <TSK_MediumFrequencyTaskM1+0x47e>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80030a0:	f000 faa2 	bl	80035e8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 814f 	beq.w	800334a <TSK_MediumFrequencyTaskM1+0x47e>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80030ac:	4b21      	ldr	r3, [pc, #132]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00a fa4b 	bl	800d54c <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <TSK_MediumFrequencyTaskM1+0x26c>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <TSK_MediumFrequencyTaskM1+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	491f      	ldr	r1, [pc, #124]	; (8003140 <TSK_MediumFrequencyTaskM1+0x274>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f007 ffe4 	bl	800b092 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 80030ca:	4815      	ldr	r0, [pc, #84]	; (8003120 <TSK_MediumFrequencyTaskM1+0x254>)
 80030cc:	f008 feb3 	bl	800be36 <STO_PLL_Clear>
              FOC_Clear( M1 );
 80030d0:	2000      	movs	r0, #0
 80030d2:	f000 f95f 	bl	8003394 <FOC_Clear>
                Mci[M1].State = START;
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 80030d8:	2204      	movs	r2, #4
 80030da:	765a      	strb	r2, [r3, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <TSK_MediumFrequencyTaskM1+0x268>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 ff45 	bl	8003f70 <PWMC_SwitchOnPWM>
          break;
 80030e6:	e130      	b.n	800334a <TSK_MediumFrequencyTaskM1+0x47e>
        }

        case START:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 80030ea:	7e1b      	ldrb	r3, [r3, #24]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d104      	bne.n	80030fa <TSK_MediumFrequencyTaskM1+0x22e>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 80030f0:	2100      	movs	r1, #0
 80030f2:	480e      	ldr	r0, [pc, #56]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 80030f4:	f7ff fe50 	bl	8002d98 <TSK_MF_StopProcessing>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
              Mci[M1].State = SWITCH_OVER;
            }
          }
          break;
 80030f8:	e129      	b.n	800334e <TSK_MediumFrequencyTaskM1+0x482>
            bool ObserverConverged = false;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]
            if(! RUC_Exec(&RevUpControlM1))
 80030fe:	480c      	ldr	r0, [pc, #48]	; (8003130 <TSK_MediumFrequencyTaskM1+0x264>)
 8003100:	f007 fe9e 	bl	800ae40 <RUC_Exec>
 8003104:	4603      	mov	r3, r0
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d019      	beq.n	8003144 <TSK_MediumFrequencyTaskM1+0x278>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2110      	movs	r1, #16
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <TSK_MediumFrequencyTaskM1+0x260>)
 8003116:	f7ff f973 	bl	8002400 <MCI_FaultProcessing>
 800311a:	e021      	b.n	8003160 <TSK_MediumFrequencyTaskM1+0x294>
 800311c:	2000037c 	.word	0x2000037c
 8003120:	20000240 	.word	0x20000240
 8003124:	200004cc 	.word	0x200004cc
 8003128:	200004e4 	.word	0x200004e4
 800312c:	2000079c 	.word	0x2000079c
 8003130:	20000100 	.word	0x20000100
 8003134:	200007e4 	.word	0x200007e4
 8003138:	200007bc 	.word	0x200007bc
 800313c:	200004bc 	.word	0x200004bc
 8003140:	20000208 	.word	0x20000208
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8003144:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <TSK_MediumFrequencyTaskM1+0x4a8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f008 f99e 	bl	800b48a <STC_CalcTorqueReference>
 800314e:	4603      	mov	r3, r0
 8003150:	813b      	strh	r3, [r7, #8]
             IqdRef.d = FOCVars[M1].UserIdref;
 8003152:	4b89      	ldr	r3, [pc, #548]	; (8003378 <TSK_MediumFrequencyTaskM1+0x4ac>)
 8003154:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003158:	817b      	strh	r3, [r7, #10]
             FOCVars[M1].Iqdref = IqdRef;
 800315a:	4a87      	ldr	r2, [pc, #540]	; (8003378 <TSK_MediumFrequencyTaskM1+0x4ac>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6113      	str	r3, [r2, #16]
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8003160:	f107 030e 	add.w	r3, r7, #14
 8003164:	4619      	mov	r1, r3
 8003166:	4885      	ldr	r0, [pc, #532]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003168:	f009 f9cf 	bl	800c50a <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 800316c:	4884      	ldr	r0, [pc, #528]	; (8003380 <TSK_MediumFrequencyTaskM1+0x4b4>)
 800316e:	f007 fed5 	bl	800af1c <RUC_FirstAccelerationStageReached>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <TSK_MediumFrequencyTaskM1+0x2d8>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8003178:	f107 030e 	add.w	r3, r7, #14
 800317c:	4619      	mov	r1, r3
 800317e:	4881      	ldr	r0, [pc, #516]	; (8003384 <TSK_MediumFrequencyTaskM1+0x4b8>)
 8003180:	f008 ff2e 	bl	800bfe0 <STO_PLL_IsObserverConverged>
 8003184:	4603      	mov	r3, r0
 8003186:	75fb      	strb	r3, [r7, #23]
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8003188:	487f      	ldr	r0, [pc, #508]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800318a:	f7ff fa04 	bl	8002596 <MCI_GetImposedMotorDirection>
 800318e:	4603      	mov	r3, r0
 8003190:	b25b      	sxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	487b      	ldr	r0, [pc, #492]	; (8003384 <TSK_MediumFrequencyTaskM1+0x4b8>)
 8003196:	f009 f8a7 	bl	800c2e8 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	4619      	mov	r1, r3
 800319e:	4877      	ldr	r0, [pc, #476]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 80031a0:	f009 faea 	bl	800c778 <VSS_SetStartTransition>
            if (ObserverConverged)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80d1 	beq.w	800334e <TSK_MediumFrequencyTaskM1+0x482>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80031ac:	4875      	ldr	r0, [pc, #468]	; (8003384 <TSK_MediumFrequencyTaskM1+0x4b8>)
 80031ae:	f008 f8ae 	bl	800b30e <SPD_GetElAngle>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b70      	ldr	r3, [pc, #448]	; (8003378 <TSK_MediumFrequencyTaskM1+0x4ac>)
 80031b8:	4611      	mov	r1, r2
 80031ba:	6858      	ldr	r0, [r3, #4]
 80031bc:	f7ff fb78 	bl	80028b0 <MCM_Park>
 80031c0:	4603      	mov	r3, r0
 80031c2:	607b      	str	r3, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 80031c4:	4b71      	ldr	r3, [pc, #452]	; (800338c <TSK_MediumFrequencyTaskM1+0x4c0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f007 fc4c 	bl	800aa66 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 80031ce:	4b6f      	ldr	r3, [pc, #444]	; (800338c <TSK_MediumFrequencyTaskM1+0x4c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <TSK_MediumFrequencyTaskM1+0x4ac>)
 80031d4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80031d8:	4611      	mov	r1, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f007 fc91 	bl	800ab04 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 80031e2:	4b6a      	ldr	r3, [pc, #424]	; (800338c <TSK_MediumFrequencyTaskM1+0x4c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80031ea:	4611      	mov	r1, r2
 80031ec:	2219      	movs	r2, #25
 80031ee:	4618      	mov	r0, r3
 80031f0:	f007 fc88 	bl	800ab04 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 80031f4:	4b64      	ldr	r3, [pc, #400]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80031f6:	2213      	movs	r2, #19
 80031f8:	765a      	strb	r2, [r3, #25]
          break;
 80031fa:	e0a8      	b.n	800334e <TSK_MediumFrequencyTaskM1+0x482>
        }

        case SWITCH_OVER:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 80031fc:	4b62      	ldr	r3, [pc, #392]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d104      	bne.n	800320e <TSK_MediumFrequencyTaskM1+0x342>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 8003204:	2100      	movs	r1, #0
 8003206:	4860      	ldr	r0, [pc, #384]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003208:	f7ff fdc6 	bl	8002d98 <TSK_MF_StopProcessing>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
                Mci[M1].State = RUN;
              }
            }
          }
          break;
 800320c:	e0a1      	b.n	8003352 <TSK_MediumFrequencyTaskM1+0x486>
            if(! RUC_Exec(&RevUpControlM1))
 800320e:	485c      	ldr	r0, [pc, #368]	; (8003380 <TSK_MediumFrequencyTaskM1+0x4b4>)
 8003210:	f007 fe16 	bl	800ae40 <RUC_Exec>
 8003214:	4603      	mov	r3, r0
 8003216:	f083 0301 	eor.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <TSK_MediumFrequencyTaskM1+0x360>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2110      	movs	r1, #16
 8003224:	4858      	ldr	r0, [pc, #352]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003226:	f7ff f8eb 	bl	8002400 <MCI_FaultProcessing>
          break;
 800322a:	e092      	b.n	8003352 <TSK_MediumFrequencyTaskM1+0x486>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800322c:	1cbb      	adds	r3, r7, #2
 800322e:	4619      	mov	r1, r3
 8003230:	4852      	ldr	r0, [pc, #328]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003232:	f009 f96a 	bl	800c50a <VSS_CalcAvrgMecSpeedUnit>
 8003236:	4603      	mov	r3, r0
 8003238:	753b      	strb	r3, [r7, #20]
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 800323a:	4850      	ldr	r0, [pc, #320]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 800323c:	f009 fac0 	bl	800c7c0 <VSS_TransitionEnded>
 8003240:	4603      	mov	r3, r0
 8003242:	74fb      	strb	r3, [r7, #19]
              LoopClosed = LoopClosed || tempBool;
 8003244:	7d3b      	ldrb	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <TSK_MediumFrequencyTaskM1+0x384>
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <TSK_MediumFrequencyTaskM1+0x388>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <TSK_MediumFrequencyTaskM1+0x38a>
 8003254:	2300      	movs	r3, #0
 8003256:	753b      	strb	r3, [r7, #20]
 8003258:	7d3b      	ldrb	r3, [r7, #20]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	753b      	strb	r3, [r7, #20]
              if (true ==  LoopClosed)
 8003260:	7d3b      	ldrb	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d075      	beq.n	8003352 <TSK_MediumFrequencyTaskM1+0x486>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <TSK_MediumFrequencyTaskM1+0x4ac>)
 8003268:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800326c:	461c      	mov	r4, r3
 800326e:	4848      	ldr	r0, [pc, #288]	; (8003390 <TSK_MediumFrequencyTaskM1+0x4c4>)
 8003270:	f007 f875 	bl	800a35e <PID_GetKIDivisor>
 8003274:	4603      	mov	r3, r0
 8003276:	b21b      	sxth	r3, r3
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8003278:	fb04 f303 	mul.w	r3, r4, r3
 800327c:	4619      	mov	r1, r3
 800327e:	4844      	ldr	r0, [pc, #272]	; (8003390 <TSK_MediumFrequencyTaskM1+0x4c4>)
 8003280:	f007 f83d 	bl	800a2fe <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <TSK_MediumFrequencyTaskM1+0x4a8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	493e      	ldr	r1, [pc, #248]	; (8003384 <TSK_MediumFrequencyTaskM1+0x4b8>)
 800328a:	4618      	mov	r0, r3
 800328c:	f007 ff01 	bl	800b092 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8003290:	2000      	movs	r0, #0
 8003292:	f000 f925 	bl	80034e0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f93e 	bl	8003518 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <TSK_MediumFrequencyTaskM1+0x4a8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f008 f820 	bl	800b2e6 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80032a6:	4838      	ldr	r0, [pc, #224]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032a8:	f7ff f8ce 	bl	8002448 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032ae:	2206      	movs	r2, #6
 80032b0:	765a      	strb	r2, [r3, #25]
          break;
 80032b2:	e04e      	b.n	8003352 <TSK_MediumFrequencyTaskM1+0x486>
        }

        case RUN:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032b6:	7e1b      	ldrb	r3, [r3, #24]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d104      	bne.n	80032c6 <TSK_MediumFrequencyTaskM1+0x3fa>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 80032bc:	2100      	movs	r1, #0
 80032be:	4832      	ldr	r0, [pc, #200]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032c0:	f7ff fd6a 	bl	8002d98 <TSK_MF_StopProcessing>
              {
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
              }

          }
          break;
 80032c4:	e047      	b.n	8003356 <TSK_MediumFrequencyTaskM1+0x48a>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80032c6:	4830      	ldr	r0, [pc, #192]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032c8:	f7ff f8be 	bl	8002448 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f000 f923 	bl	8003518 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03b      	beq.n	8003356 <TSK_MediumFrequencyTaskM1+0x48a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2120      	movs	r1, #32
 80032e2:	4829      	ldr	r0, [pc, #164]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032e4:	f7ff f88c 	bl	8002400 <MCI_FaultProcessing>
          break;
 80032e8:	e035      	b.n	8003356 <TSK_MediumFrequencyTaskM1+0x48a>
        }

        case STOP:
        {
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80032ea:	f000 f9a3 	bl	8003634 <TSK_StopPermanencyTimeHasElapsedM1>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d032      	beq.n	800335a <TSK_MediumFrequencyTaskM1+0x48e>
          {

            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <TSK_MediumFrequencyTaskM1+0x4a8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4920      	ldr	r1, [pc, #128]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f007 fec9 	bl	800b092 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8003300:	481e      	ldr	r0, [pc, #120]	; (800337c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003302:	f009 f80c 	bl	800c31e <VSS_Clear>

            /* USER CODE BEGIN MediumFrequencyTask M1 5 */

            /* USER CODE END MediumFrequencyTask M1 5 */
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003308:	2200      	movs	r2, #0
 800330a:	761a      	strb	r2, [r3, #24]
            Mci[M1].State = IDLE;
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800330e:	2200      	movs	r2, #0
 8003310:	765a      	strb	r2, [r3, #25]
          }
          else
          {
            /* nothing to do, FW waits for to stop */
          }
          break;
 8003312:	e022      	b.n	800335a <TSK_MediumFrequencyTaskM1+0x48e>
        }

        case FAULT_OVER:
        {
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003316:	7e1b      	ldrb	r3, [r3, #24]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d120      	bne.n	800335e <TSK_MediumFrequencyTaskM1+0x492>
          {
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800331e:	2200      	movs	r2, #0
 8003320:	761a      	strb	r2, [r3, #24]
            Mci[M1].State = IDLE;
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003324:	2200      	movs	r2, #0
 8003326:	765a      	strb	r2, [r3, #25]
          else
          {
            /* nothing to do, FW stays in FAULT_OVER state until acknowledgement */
          }
        }
        break;
 8003328:	e019      	b.n	800335e <TSK_MediumFrequencyTaskM1+0x492>

        case FAULT_NOW:
        {
          Mci[M1].State = FAULT_OVER;
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800332c:	220b      	movs	r2, #11
 800332e:	765a      	strb	r2, [r3, #25]
        }
        break;
 8003330:	e016      	b.n	8003360 <TSK_MediumFrequencyTaskM1+0x494>
          break;
       }
    }
    else
    {
      Mci[M1].State = FAULT_OVER;
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003334:	220b      	movs	r2, #11
 8003336:	765a      	strb	r2, [r3, #25]
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003338:	e017      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800333a:	bf00      	nop
 800333c:	e015      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800333e:	bf00      	nop
 8003340:	e013      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003342:	bf00      	nop
 8003344:	e011      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
            break;
 8003346:	bf00      	nop
 8003348:	e00f      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800334a:	bf00      	nop
 800334c:	e00d      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800334e:	bf00      	nop
 8003350:	e00b      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003352:	bf00      	nop
 8003354:	e009      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003356:	bf00      	nop
 8003358:	e007      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800335a:	bf00      	nop
 800335c:	e005      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
        break;
 800335e:	bf00      	nop
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003360:	e003      	b.n	800336a <TSK_MediumFrequencyTaskM1+0x49e>
    }
  }
  else
  {
    Mci[M1].State = FAULT_NOW;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003364:	220a      	movs	r2, #10
 8003366:	765a      	strb	r2, [r3, #25]
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	bf00      	nop
 8003374:	200004bc 	.word	0x200004bc
 8003378:	200007bc 	.word	0x200007bc
 800337c:	20000208 	.word	0x20000208
 8003380:	20000100 	.word	0x20000100
 8003384:	20000240 	.word	0x20000240
 8003388:	2000079c 	.word	0x2000079c
 800338c:	200007e8 	.word	0x200007e8
 8003390:	20000010 	.word	0x20000010

08003394 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
 800339e:	2300      	movs	r3, #0
 80033a0:	82bb      	strh	r3, [r7, #20]
 80033a2:	2300      	movs	r3, #0
 80033a4:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
 80033a6:	2300      	movs	r3, #0
 80033a8:	823b      	strh	r3, [r7, #16]
 80033aa:	2300      	movs	r3, #0
 80033ac:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
 80033ae:	2300      	movs	r3, #0
 80033b0:	81bb      	strh	r3, [r7, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4a43      	ldr	r2, [pc, #268]	; (80034c8 <FOC_Clear+0x134>)
 80033ba:	2126      	movs	r1, #38	; 0x26
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	461a      	mov	r2, r3
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <FOC_Clear+0x134>)
 80033d0:	2126      	movs	r1, #38	; 0x26
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	461a      	mov	r2, r3
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <FOC_Clear+0x134>)
 80033e8:	2126      	movs	r1, #38	; 0x26
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	330c      	adds	r3, #12
 80033f2:	461a      	mov	r2, r3
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	6010      	str	r0, [r2, #0]
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <FOC_Clear+0x134>)
 8003400:	2126      	movs	r1, #38	; 0x26
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3310      	adds	r3, #16
 800340a:	461a      	mov	r2, r3
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	6010      	str	r0, [r2, #0]
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <FOC_Clear+0x134>)
 8003418:	2126      	movs	r1, #38	; 0x26
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	331e      	adds	r3, #30
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <FOC_Clear+0x134>)
 800342a:	2126      	movs	r1, #38	; 0x26
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3310      	adds	r3, #16
 8003434:	3306      	adds	r3, #6
 8003436:	f107 0210 	add.w	r2, r7, #16
 800343a:	6810      	ldr	r0, [r2, #0]
 800343c:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <FOC_Clear+0x134>)
 8003442:	2126      	movs	r1, #38	; 0x26
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3318      	adds	r3, #24
 800344c:	3302      	adds	r3, #2
 800344e:	f107 020c 	add.w	r2, r7, #12
 8003452:	6810      	ldr	r0, [r2, #0]
 8003454:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <FOC_Clear+0x134>)
 800345a:	2126      	movs	r1, #38	; 0x26
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3320      	adds	r3, #32
 8003464:	2200      	movs	r2, #0
 8003466:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <FOC_Clear+0x138>)
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f006 ff43 	bl	800a2fe <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <FOC_Clear+0x13c>)
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f006 ff3b 	bl	800a2fe <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <FOC_Clear+0x140>)
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	4618      	mov	r0, r3
 8003492:	f007 fe20 	bl	800b0d6 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <FOC_Clear+0x144>)
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd5a 	bl	8003f58 <PWMC_SwitchOffPWM>

  if (NULL == pFF[bMotor])
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <FOC_Clear+0x148>)
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <FOC_Clear+0x12a>
  {
    /* Nothing to do */
  }
  else
  {
    FF_Clear(pFF[bMotor]);
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <FOC_Clear+0x148>)
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 ffc3 	bl	8009444 <FF_Clear>
  }

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200007bc 	.word	0x200007bc
 80034cc:	200004c4 	.word	0x200004c4
 80034d0:	200004c8 	.word	0x200004c8
 80034d4:	200004bc 	.word	0x200004bc
 80034d8:	200007e4 	.word	0x200007e4
 80034dc:	200004d0 	.word	0x200004d0

080034e0 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
    if (M_NONE == bMotor)
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2bff      	cmp	r3, #255	; 0xff
 80034ee:	d00c      	beq.n	800350a <FOC_InitAdditionalMethods+0x2a>
    {
      /* Nothing to do */
    }
    else
    {
      if (NULL == pFF[bMotor])
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <FOC_InitAdditionalMethods+0x34>)
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <FOC_InitAdditionalMethods+0x2a>
      {
        /* Nothing to do */
      }
      else
      {
        FF_InitFOCAdditionalMethods(pFF[bMotor]);
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <FOC_InitAdditionalMethods+0x34>)
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	4618      	mov	r0, r3
 8003506:	f006 f8cd 	bl	80096a4 <FF_InitFOCAdditionalMethods>
      }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200004d0 	.word	0x200004d0

08003518 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a25      	ldr	r2, [pc, #148]	; (80035bc <FOC_CalcCurrRef+0xa4>)
 8003526:	2126      	movs	r1, #38	; 0x26
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13d      	bne.n	80035b2 <FOC_CalcCurrRef+0x9a>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <FOC_CalcCurrRef+0xa8>)
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	79fc      	ldrb	r4, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f007 ffa2 	bl	800b48a <STC_CalcTorqueReference>
 8003546:	4603      	mov	r3, r0
 8003548:	4619      	mov	r1, r3
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <FOC_CalcCurrRef+0xa4>)
 800354c:	2326      	movs	r3, #38	; 0x26
 800354e:	fb04 f303 	mul.w	r3, r4, r3
 8003552:	4413      	add	r3, r2
 8003554:	331e      	adds	r3, #30
 8003556:	460a      	mov	r2, r1
 8003558:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800355a:	79fa      	ldrb	r2, [r7, #7]
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	4917      	ldr	r1, [pc, #92]	; (80035bc <FOC_CalcCurrRef+0xa4>)
 8003560:	2026      	movs	r0, #38	; 0x26
 8003562:	fb00 f202 	mul.w	r2, r0, r2
 8003566:	440a      	add	r2, r1
 8003568:	321e      	adds	r2, #30
 800356a:	f9b2 0000 	ldrsh.w	r0, [r2]
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <FOC_CalcCurrRef+0xa4>)
 8003570:	2126      	movs	r1, #38	; 0x26
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3310      	adds	r3, #16
 800357a:	4602      	mov	r2, r0
 800357c:	801a      	strh	r2, [r3, #0]

    if (NULL == pFF[bMotor])
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <FOC_CalcCurrRef+0xac>)
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d013      	beq.n	80035b2 <FOC_CalcCurrRef+0x9a>
    {
      /* Nothing to do */
    }
    else
    {
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <FOC_CalcCurrRef+0xac>)
 800358e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	79fa      	ldrb	r2, [r7, #7]
 8003596:	490a      	ldr	r1, [pc, #40]	; (80035c0 <FOC_CalcCurrRef+0xa8>)
 8003598:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800359c:	4907      	ldr	r1, [pc, #28]	; (80035bc <FOC_CalcCurrRef+0xa4>)
 800359e:	2426      	movs	r4, #38	; 0x26
 80035a0:	fb04 f303 	mul.w	r3, r4, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	3310      	adds	r3, #16
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	460b      	mov	r3, r1
 80035ac:	4619      	mov	r1, r3
 80035ae:	f005 ff59 	bl	8009464 <FF_VqdffComputation>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200007bc 	.word	0x200007bc
 80035c0:	200004bc 	.word	0x200004bc
 80035c4:	200004d0 	.word	0x200004d0

080035c8 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <TSK_SetChargeBootCapDelayM1+0x1c>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	8013      	strh	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	200007ee 	.word	0x200007ee

080035e8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
  bool retVal = false;
 80035ee:	2300      	movs	r3, #0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 80035fc:	2301      	movs	r3, #1
 80035fe:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8003600:	79fb      	ldrb	r3, [r7, #7]
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	200007ee 	.word	0x200007ee

08003614 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <TSK_SetStopPermanencyTimeM1+0x1c>)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	8013      	strh	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	200007f0 	.word	0x200007f0

08003634 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
  bool retVal = false;
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8003648:	2301      	movs	r3, #1
 800364a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 800364c:	79fb      	ldrb	r3, [r7, #7]
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200007f0 	.word	0x200007f0

08003660 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800366a:	4a37      	ldr	r2, [pc, #220]	; (8003748 <TSK_HighFrequencyTask+0xe8>)
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	321a      	adds	r2, #26
 8003672:	6810      	ldr	r0, [r2, #0]
 8003674:	6018      	str	r0, [r3, #0]
  if (SWITCH_OVER == Mci[M1].State)
 8003676:	4b35      	ldr	r3, [pc, #212]	; (800374c <TSK_HighFrequencyTask+0xec>)
 8003678:	7e5b      	ldrb	r3, [r3, #25]
 800367a:	2b13      	cmp	r3, #19
 800367c:	d113      	bne.n	80036a6 <TSK_HighFrequencyTask+0x46>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <TSK_HighFrequencyTask+0xf0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f007 fac8 	bl	800ac18 <REMNG_RampCompleted>
 8003688:	4603      	mov	r3, r0
 800368a:	f083 0301 	eor.w	r3, r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <TSK_HighFrequencyTask+0x46>
    {
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <TSK_HighFrequencyTask+0xf0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f007 f9fd 	bl	800aa98 <REMNG_Calc>
 800369e:	4603      	mov	r3, r0
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <TSK_HighFrequencyTask+0xe8>)
 80036a4:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 80036a6:	f000 f861 	bl	800376c <FOC_CurrControllerM1>
 80036aa:	4603      	mov	r3, r0
 80036ac:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_DURATION)
 80036ae:	8abb      	ldrh	r3, [r7, #20]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <TSK_HighFrequencyTask+0x60>
  {
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2101      	movs	r1, #1
 80036b8:	4824      	ldr	r0, [pc, #144]	; (800374c <TSK_HighFrequencyTask+0xec>)
 80036ba:	f7fe fea1 	bl	8002400 <MCI_FaultProcessing>
 80036be:	e030      	b.n	8003722 <TSK_HighFrequencyTask+0xc2>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80036c0:	4824      	ldr	r0, [pc, #144]	; (8003754 <TSK_HighFrequencyTask+0xf4>)
 80036c2:	f007 fc2b 	bl	800af1c <RUC_FirstAccelerationStageReached>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <TSK_HighFrequencyTask+0xe8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80036d0:	4821      	ldr	r0, [pc, #132]	; (8003758 <TSK_HighFrequencyTask+0xf8>)
 80036d2:	f005 fd9d 	bl	8009210 <VBS_GetAvBusVoltage_d>
 80036d6:	4603      	mov	r3, r0
 80036d8:	823b      	strh	r3, [r7, #16]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80036da:	f107 0308 	add.w	r3, r7, #8
 80036de:	4619      	mov	r1, r3
 80036e0:	481e      	ldr	r0, [pc, #120]	; (800375c <TSK_HighFrequencyTask+0xfc>)
 80036e2:	f007 ffa3 	bl	800b62c <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 80036e6:	481d      	ldr	r0, [pc, #116]	; (800375c <TSK_HighFrequencyTask+0xfc>)
 80036e8:	f008 fb3a 	bl	800bd60 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <TSK_HighFrequencyTask+0x9e>
    {
      STO_ResetPLL(&STO_PLL_M1);
 80036f8:	4818      	ldr	r0, [pc, #96]	; (800375c <TSK_HighFrequencyTask+0xfc>)
 80036fa:	f008 fd99 	bl	800c230 <STO_ResetPLL>
    }
    /*  only for sensor-less */
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <TSK_HighFrequencyTask+0xec>)
 8003700:	7e5b      	ldrb	r3, [r3, #25]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <TSK_HighFrequencyTask+0xae>
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <TSK_HighFrequencyTask+0xec>)
 8003708:	7e5b      	ldrb	r3, [r3, #25]
 800370a:	2b13      	cmp	r3, #19
 800370c:	d109      	bne.n	8003722 <TSK_HighFrequencyTask+0xc2>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800370e:	4813      	ldr	r0, [pc, #76]	; (800375c <TSK_HighFrequencyTask+0xfc>)
 8003710:	f007 fdfd 	bl	800b30e <SPD_GetElAngle>
 8003714:	4603      	mov	r3, r0
 8003716:	80fb      	strh	r3, [r7, #6]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8003718:	1dbb      	adds	r3, r7, #6
 800371a:	4619      	mov	r1, r3
 800371c:	4810      	ldr	r0, [pc, #64]	; (8003760 <TSK_HighFrequencyTask+0x100>)
 800371e:	f008 fe3e 	bl	800c39e <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <TSK_HighFrequencyTask+0x104>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <TSK_HighFrequencyTask+0x104>)
 800372a:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <TSK_HighFrequencyTask+0x108>)
 800372e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <TSK_HighFrequencyTask+0xdc>
  {
    /* Nothing to do */
  }
  else
  {
    MCPA_dataLog (&MCPA_UART_A);
 8003736:	480c      	ldr	r0, [pc, #48]	; (8003768 <TSK_HighFrequencyTask+0x108>)
 8003738:	f006 fa42 	bl	8009bc0 <MCPA_dataLog>
  }

  return (bMotorNbr);
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200007bc 	.word	0x200007bc
 800374c:	2000079c 	.word	0x2000079c
 8003750:	200007e8 	.word	0x200007e8
 8003754:	20000100 	.word	0x20000100
 8003758:	200003b8 	.word	0x200003b8
 800375c:	20000240 	.word	0x20000240
 8003760:	20000208 	.word	0x20000208
 8003764:	20001a00 	.word	0x20001a00
 8003768:	20000580 	.word	0x20000580

0800376c <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <FOC_CurrControllerM1+0x124>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f007 fc9c 	bl	800b0b4 <STC_GetSpeedSensor>
 800377c:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 800377e:	69f8      	ldr	r0, [r7, #28]
 8003780:	f007 fdc5 	bl	800b30e <SPD_GetElAngle>
 8003784:	4603      	mov	r3, r0
 8003786:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8003788:	69f8      	ldr	r0, [r7, #28]
 800378a:	f007 fde7 	bl	800b35c <SPD_GetInstElSpeedDpp>
 800378e:	2300      	movs	r3, #0
 8003790:	b29a      	uxth	r2, r3
 8003792:	8b7b      	ldrh	r3, [r7, #26]
 8003794:	4413      	add	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <FOC_CurrControllerM1+0x128>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f107 020c 	add.w	r2, r7, #12
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f999 	bl	8003adc <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff f836 	bl	800281c <MCM_Clarke>
 80037b0:	4603      	mov	r3, r0
 80037b2:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80037b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037b8:	4619      	mov	r1, r3
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f7ff f878 	bl	80028b0 <MCM_Park>
 80037c0:	4603      	mov	r3, r0
 80037c2:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80037c4:	4b34      	ldr	r3, [pc, #208]	; (8003898 <FOC_CurrControllerM1+0x12c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a34      	ldr	r2, [pc, #208]	; (800389c <FOC_CurrControllerM1+0x130>)
 80037ca:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80037ce:	4611      	mov	r1, r2
 80037d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80037d4:	1a8a      	subs	r2, r1, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f006 fe59 	bl	800a490 <PI_Controller>
 80037de:	4603      	mov	r3, r0
 80037e0:	823b      	strh	r3, [r7, #16]
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <FOC_CurrControllerM1+0x134>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <FOC_CurrControllerM1+0x130>)
 80037e8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80037ec:	4611      	mov	r1, r2
 80037ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037f2:	1a8a      	subs	r2, r1, r2
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f006 fe4a 	bl	800a490 <PI_Controller>
 80037fc:	4603      	mov	r3, r0
 80037fe:	827b      	strh	r3, [r7, #18]
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <FOC_CurrControllerM1+0x138>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6939      	ldr	r1, [r7, #16]
 8003806:	4618      	mov	r0, r3
 8003808:	f005 fec4 	bl	8009594 <FF_VqdConditioning>
 800380c:	4603      	mov	r3, r0
 800380e:	613b      	str	r3, [r7, #16]
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8003810:	6939      	ldr	r1, [r7, #16]
 8003812:	4825      	ldr	r0, [pc, #148]	; (80038a8 <FOC_CurrControllerM1+0x13c>)
 8003814:	f005 fd2d 	bl	8009272 <Circle_Limitation>
 8003818:	4603      	mov	r3, r0
 800381a:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800381c:	69f8      	ldr	r0, [r7, #28]
 800381e:	f007 fd9d 	bl	800b35c <SPD_GetInstElSpeedDpp>
 8003822:	2300      	movs	r3, #0
 8003824:	b29a      	uxth	r2, r3
 8003826:	8b7b      	ldrh	r3, [r7, #26]
 8003828:	4413      	add	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800382e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003832:	4619      	mov	r1, r3
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f7ff f8b3 	bl	80029a0 <MCM_Rev_Park>
 800383a:	4603      	mov	r3, r0
 800383c:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <FOC_CurrControllerM1+0x128>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f957 	bl	8003af8 <PWMC_SetPhaseVoltage>
 800384a:	4603      	mov	r3, r0
 800384c:	833b      	strh	r3, [r7, #24]

  FOCVars[M1].Vqd = Vqd;
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <FOC_CurrControllerM1+0x130>)
 8003850:	3316      	adds	r3, #22
 8003852:	f107 0210 	add.w	r2, r7, #16
 8003856:	6810      	ldr	r0, [r2, #0]
 8003858:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <FOC_CurrControllerM1+0x130>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6013      	str	r3, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <FOC_CurrControllerM1+0x130>)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6053      	str	r3, [r2, #4]
  FOCVars[M1].Iqd = Iqd;
 8003866:	4a0d      	ldr	r2, [pc, #52]	; (800389c <FOC_CurrControllerM1+0x130>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	60d3      	str	r3, [r2, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <FOC_CurrControllerM1+0x130>)
 800386e:	331a      	adds	r3, #26
 8003870:	1d3a      	adds	r2, r7, #4
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <FOC_CurrControllerM1+0x130>)
 8003878:	8b7b      	ldrh	r3, [r7, #26]
 800387a:	8413      	strh	r3, [r2, #32]

  FF_DataProcess(pFF[M1]);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <FOC_CurrControllerM1+0x138>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f005 fed3 	bl	800962c <FF_DataProcess>
  return(hCodeError);
 8003886:	8b3b      	ldrh	r3, [r7, #24]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	200004bc 	.word	0x200004bc
 8003894:	200007e4 	.word	0x200007e4
 8003898:	200004c4 	.word	0x200004c4
 800389c:	200007bc 	.word	0x200007bc
 80038a0:	200004c8 	.word	0x200004c8
 80038a4:	200004d0 	.word	0x200004d0
 80038a8:	200003fc 	.word	0x200003fc

080038ac <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (1U == bMCBootCompleted)
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <TSK_SafetyTask+0x1c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d104      	bne.n	80038c4 <TSK_SafetyTask+0x18>
  {
    TSK_SafetyTask_PWMOFF(M1);
 80038ba:	2000      	movs	r0, #0
 80038bc:	f000 f806 	bl	80038cc <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv();
 80038c0:	f002 fd1a 	bl	80062f8 <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200007f2 	.word	0x200007f2

080038cc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
 80038d6:	2300      	movs	r3, #0
 80038d8:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 80038da:	230e      	movs	r3, #14
 80038dc:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	3310      	adds	r3, #16
 80038e4:	443b      	add	r3, r7
 80038e6:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4a39      	ldr	r2, [pc, #228]	; (80039d4 <TSK_SafetyTask_PWMOFF+0x108>)
 80038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f006 fc3d 	bl	800a172 <NTC_CalcAvTemp>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4023      	ands	r3, r4
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b21a      	sxth	r2, r3
 8003900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003904:	4313      	orrs	r3, r2
 8003906:	b21b      	sxth	r3, r3
 8003908:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <TSK_SafetyTask_PWMOFF+0x10c>)
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb70 	bl	8003ff8 <PWMC_CheckOverCurrent>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	4313      	orrs	r3, r2
 8003920:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	3310      	adds	r3, #16
 800392e:	443b      	add	r3, r7
 8003930:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8003934:	4829      	ldr	r0, [pc, #164]	; (80039dc <TSK_SafetyTask_PWMOFF+0x110>)
 8003936:	f006 ffde 	bl	800a8f6 <RVBS_CalcAvVbus>
 800393a:	4603      	mov	r3, r0
 800393c:	4023      	ands	r3, r4
 800393e:	b29b      	uxth	r3, r3
 8003940:	b21a      	sxth	r2, r3
 8003942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003946:	4313      	orrs	r3, r2
 8003948:	b21b      	sxth	r3, r3
 800394a:	81fb      	strh	r3, [r7, #14]
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	015b      	lsls	r3, r3, #5
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TSK_SafetyTask_PWMOFF+0x114>)
 8003952:	1898      	adds	r0, r3, r2
 8003954:	89fb      	ldrh	r3, [r7, #14]
 8003956:	43db      	mvns	r3, r3
 8003958:	b29a      	uxth	r2, r3
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	4619      	mov	r1, r3
 800395e:	f7fe fd4f 	bl	8002400 <MCI_FaultProcessing>

  if ((M1 == bMotor) && (MC_UNDER_VOLT == (CodeReturn & MC_UNDER_VOLT)) && ICLFaultTreatedM1){
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <TSK_SafetyTask_PWMOFF+0xb6>
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <TSK_SafetyTask_PWMOFF+0xb6>
 8003972:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <TSK_SafetyTask_PWMOFF+0x118>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <TSK_SafetyTask_PWMOFF+0xb6>
    ICLFaultTreatedM1 = false;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <TSK_SafetyTask_PWMOFF+0x118>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
  }

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	015b      	lsls	r3, r3, #5
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <TSK_SafetyTask_PWMOFF+0x114>)
 8003988:	4413      	add	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fde3 	bl	8002556 <MCI_GetFaultState>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d019      	beq.n	80039ca <TSK_SafetyTask_PWMOFF+0xfe>
  {
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <TSK_SafetyTask_PWMOFF+0x10c>)
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fada 	bl	8003f58 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <TSK_SafetyTask_PWMOFF+0x11c>)
 80039a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <TSK_SafetyTask_PWMOFF+0xe8>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
 80039ae:	480e      	ldr	r0, [pc, #56]	; (80039e8 <TSK_SafetyTask_PWMOFF+0x11c>)
 80039b0:	f006 fa58 	bl	8009e64 <MCPA_flushDataLog>
    }
    FOC_Clear(bMotor);
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fcec 	bl	8003394 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <TSK_SafetyTask_PWMOFF+0x120>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 fe36 	bl	800a636 <PQD_Clear>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200004c0 	.word	0x200004c0
 80039d8:	200007e4 	.word	0x200007e4
 80039dc:	200003b8 	.word	0x200003b8
 80039e0:	2000079c 	.word	0x2000079c
 80039e4:	200004e4 	.word	0x200004e4
 80039e8:	20000580 	.word	0x20000580
 80039ec:	200004cc 	.word	0x200004cc

080039f0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <TSK_HardwareFaultTask+0x1c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f009 fda7 	bl	800d54c <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	4803      	ldr	r0, [pc, #12]	; (8003a10 <TSK_HardwareFaultTask+0x20>)
 8003a04:	f7fe fcfc 	bl	8002400 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200007e4 	.word	0x200007e4
 8003a10:	2000079c 	.word	0x2000079c

08003a14 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 8003a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a1c:	481b      	ldr	r0, [pc, #108]	; (8003a8c <mc_lock_pins+0x78>)
 8003a1e:	f7ff f8c4 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8003a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a26:	4819      	ldr	r0, [pc, #100]	; (8003a8c <mc_lock_pins+0x78>)
 8003a28:	f7ff f8bf 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
 8003a2c:	2140      	movs	r1, #64	; 0x40
 8003a2e:	4817      	ldr	r0, [pc, #92]	; (8003a8c <mc_lock_pins+0x78>)
 8003a30:	f7ff f8bb 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8003a34:	2101      	movs	r1, #1
 8003a36:	4816      	ldr	r0, [pc, #88]	; (8003a90 <mc_lock_pins+0x7c>)
 8003a38:	f7ff f8b7 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 8003a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a40:	4812      	ldr	r0, [pc, #72]	; (8003a8c <mc_lock_pins+0x78>)
 8003a42:	f7ff f8b2 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8003a46:	2102      	movs	r1, #2
 8003a48:	4811      	ldr	r0, [pc, #68]	; (8003a90 <mc_lock_pins+0x7c>)
 8003a4a:	f7ff f8ae 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	480e      	ldr	r0, [pc, #56]	; (8003a8c <mc_lock_pins+0x78>)
 8003a52:	f7ff f8aa 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ICL_SHUT_OUT_GPIO_Port, M1_ICL_SHUT_OUT_Pin);
 8003a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a5a:	480e      	ldr	r0, [pc, #56]	; (8003a94 <mc_lock_pins+0x80>)
 8003a5c:	f7ff f8a5 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8003a60:	2101      	movs	r1, #1
 8003a62:	480a      	ldr	r0, [pc, #40]	; (8003a8c <mc_lock_pins+0x78>)
 8003a64:	f7ff f8a1 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4808      	ldr	r0, [pc, #32]	; (8003a8c <mc_lock_pins+0x78>)
 8003a6c:	f7ff f89d 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8003a70:	2102      	movs	r1, #2
 8003a72:	4808      	ldr	r0, [pc, #32]	; (8003a94 <mc_lock_pins+0x80>)
 8003a74:	f7ff f899 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4806      	ldr	r0, [pc, #24]	; (8003a94 <mc_lock_pins+0x80>)
 8003a7c:	f7ff f895 	bl	8002baa <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8003a80:	2101      	movs	r1, #1
 8003a82:	4804      	ldr	r0, [pc, #16]	; (8003a94 <mc_lock_pins+0x80>)
 8003a84:	f7ff f891 	bl	8002baa <LL_GPIO_LockPin>
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40020400 	.word	0x40020400
 8003a94:	40020800 	.word	0x40020800

08003a98 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8003a9c:	f004 f9e0 	bl	8007e60 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <MX_MotorControl_Init+0x38>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	09db      	lsrs	r3, r3, #7
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fda5 	bl	80075fa <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <MX_MotorControl_Init+0x3c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f003 fd81 	bl	80075c2 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <MX_MotorControl_Init+0x40>)
 8003ac2:	f7ff f88f 	bl	8002be4 <MCboot>
  mc_lock_pins();
 8003ac6:	f7ff ffa5 	bl	8003a14 <mc_lock_pins>
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	10624dd3 	.word	0x10624dd3
 8003ad4:	200005c0 	.word	0x200005c0
 8003ad8:	20001980 	.word	0x20001980

08003adc <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003b02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	623b      	str	r3, [r7, #32]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003b12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b1e:	fb03 f202 	mul.w	r2, r3, r2
 8003b22:	4613      	mov	r3, r2
 8003b24:	07db      	lsls	r3, r3, #31
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]

    wX = wUBeta;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
    wY = (wUBeta + wUAlpha) / 2;
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	4413      	add	r3, r2
 8003b36:	0fda      	lsrs	r2, r3, #31
 8003b38:	4413      	add	r3, r2
 8003b3a:	105b      	asrs	r3, r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
    wZ = (wUBeta - wUAlpha) / 2;
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	0fda      	lsrs	r2, r3, #31
 8003b46:	4413      	add	r3, r2
 8003b48:	105b      	asrs	r3, r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f280 80c3 	bge.w	8003cda <PWMC_SetPhaseVoltage+0x1e2>
    {
      if (wZ < 0)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da3e      	bge.n	8003bd8 <PWMC_SetPhaseVoltage+0xe0>
      {
        pHandle->Sector = SECTOR_5;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da03      	bge.n	8003b80 <PWMC_SetPhaseVoltage+0x88>
 8003b78:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003b7c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003b80:	149b      	asrs	r3, r3, #18
 8003b82:	440b      	add	r3, r1
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        wTimePhB = wTimePhA + (wZ / 131072);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da03      	bge.n	8003b94 <PWMC_SetPhaseVoltage+0x9c>
 8003b8c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003b90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b94:	145b      	asrs	r3, r3, #17
 8003b96:	461a      	mov	r2, r3
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	4413      	add	r3, r2
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da03      	bge.n	8003bac <PWMC_SetPhaseVoltage+0xb4>
 8003ba4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003ba8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bac:	145b      	asrs	r3, r3, #17
 8003bae:	425b      	negs	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	4413      	add	r3, r2
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24

        pHandle->lowDuty = (uint16_t)wTimePhC;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003bd6:	e142      	b.n	8003e5e <PWMC_SetPhaseVoltage+0x366>
      }
      else /* wZ >= 0 */
        if (wX <= 0)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dc3e      	bgt.n	8003c5c <PWMC_SetPhaseVoltage+0x164>
        {
          pHandle->Sector = SECTOR_4;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	da03      	bge.n	8003c04 <PWMC_SetPhaseVoltage+0x10c>
 8003bfc:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003c00:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003c04:	149b      	asrs	r3, r3, #18
 8003c06:	440b      	add	r3, r1
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhB = wTimePhA + (wZ / 131072);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	da03      	bge.n	8003c18 <PWMC_SetPhaseVoltage+0x120>
 8003c10:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003c14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c18:	145b      	asrs	r3, r3, #17
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	4413      	add	r3, r2
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
          wTimePhC = wTimePhB - (wX / 131072);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da03      	bge.n	8003c30 <PWMC_SetPhaseVoltage+0x138>
 8003c28:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003c2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c30:	145b      	asrs	r3, r3, #17
 8003c32:	425b      	negs	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	4413      	add	r3, r2
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24

          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003c5a:	e100      	b.n	8003e5e <PWMC_SetPhaseVoltage+0x366>
        }
        else /* wX > 0 */
        {
          pHandle->Sector = SECTOR_3;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da03      	bge.n	8003c82 <PWMC_SetPhaseVoltage+0x18a>
 8003c7a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003c7e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003c82:	149b      	asrs	r3, r3, #18
 8003c84:	440b      	add	r3, r1
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhC = wTimePhA - (wY / 131072);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da03      	bge.n	8003c96 <PWMC_SetPhaseVoltage+0x19e>
 8003c8e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003c92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c96:	145b      	asrs	r3, r3, #17
 8003c98:	425b      	negs	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	4413      	add	r3, r2
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
          wTimePhB = wTimePhC + (wX / 131072);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da03      	bge.n	8003cb0 <PWMC_SetPhaseVoltage+0x1b8>
 8003ca8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003cac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003cb0:	145b      	asrs	r3, r3, #17
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	4413      	add	r3, r2
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28

          pHandle->lowDuty = (uint16_t)wTimePhB;
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003cd8:	e0c1      	b.n	8003e5e <PWMC_SetPhaseVoltage+0x366>
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db3e      	blt.n	8003d5e <PWMC_SetPhaseVoltage+0x266>
      {
        pHandle->Sector = SECTOR_2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da03      	bge.n	8003d06 <PWMC_SetPhaseVoltage+0x20e>
 8003cfe:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003d02:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003d06:	149b      	asrs	r3, r3, #18
 8003d08:	440b      	add	r3, r1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        wTimePhB = wTimePhA + (wZ / 131072);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da03      	bge.n	8003d1a <PWMC_SetPhaseVoltage+0x222>
 8003d12:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d1a:	145b      	asrs	r3, r3, #17
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	4413      	add	r3, r2
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
        wTimePhC = wTimePhA - (wY / 131072);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da03      	bge.n	8003d32 <PWMC_SetPhaseVoltage+0x23a>
 8003d2a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d32:	145b      	asrs	r3, r3, #17
 8003d34:	425b      	negs	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	4413      	add	r3, r2
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003d5c:	e07f      	b.n	8003e5e <PWMC_SetPhaseVoltage+0x366>
      }
      else /* wZ < 0 */
        if ( wX <= 0 )
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dc3e      	bgt.n	8003de2 <PWMC_SetPhaseVoltage+0x2ea>
        {
          pHandle->Sector = SECTOR_6;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2205      	movs	r2, #5
 8003d68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da03      	bge.n	8003d8a <PWMC_SetPhaseVoltage+0x292>
 8003d82:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003d86:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003d8a:	149b      	asrs	r3, r3, #18
 8003d8c:	440b      	add	r3, r1
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhC = wTimePhA - (wY / 131072);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da03      	bge.n	8003d9e <PWMC_SetPhaseVoltage+0x2a6>
 8003d96:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d9e:	145b      	asrs	r3, r3, #17
 8003da0:	425b      	negs	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	4413      	add	r3, r2
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
          wTimePhB = wTimePhC + (wX / 131072);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da03      	bge.n	8003db8 <PWMC_SetPhaseVoltage+0x2c0>
 8003db0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003db4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003db8:	145b      	asrs	r3, r3, #17
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	4413      	add	r3, r2
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28

          pHandle->lowDuty = (uint16_t)wTimePhA;
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003de0:	e03d      	b.n	8003e5e <PWMC_SetPhaseVoltage+0x366>
        }
        else /* wX > 0 */
        {
          pHandle->Sector = SECTOR_1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da03      	bge.n	8003e08 <PWMC_SetPhaseVoltage+0x310>
 8003e00:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003e04:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003e08:	149b      	asrs	r3, r3, #18
 8003e0a:	440b      	add	r3, r1
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhB = wTimePhA + (wZ / 131072);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da03      	bge.n	8003e1c <PWMC_SetPhaseVoltage+0x324>
 8003e14:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003e18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e1c:	145b      	asrs	r3, r3, #17
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	4413      	add	r3, r2
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
          wTimePhC = wTimePhB - (wX / 131072);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da03      	bge.n	8003e34 <PWMC_SetPhaseVoltage+0x33c>
 8003e2c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003e30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e34:	145b      	asrs	r3, r3, #17
 8003e36:	425b      	negs	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	4413      	add	r3, r2
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24

          pHandle->lowDuty = (uint16_t)wTimePhA;
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dd02      	ble.n	8003e6a <PWMC_SetPhaseVoltage+0x372>
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	e000      	b.n	8003e6c <PWMC_SetPhaseVoltage+0x374>
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dd02      	ble.n	8003e7c <PWMC_SetPhaseVoltage+0x384>
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	e000      	b.n	8003e7e <PWMC_SetPhaseVoltage+0x386>
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dd02      	ble.n	8003e90 <PWMC_SetPhaseVoltage+0x398>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	e000      	b.n	8003e92 <PWMC_SetPhaseVoltage+0x39a>
 8003e90:	2200      	movs	r2, #0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

    if (1U == pHandle->DTTest)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d14f      	bne.n	8003f42 <PWMC_SetPhaseVoltage+0x44a>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	dd09      	ble.n	8003ec0 <PWMC_SetPhaseVoltage+0x3c8>
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ebe:	e008      	b.n	8003ed2 <PWMC_SetPhaseVoltage+0x3da>
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dd0b      	ble.n	8003ef4 <PWMC_SetPhaseVoltage+0x3fc>
      {
        pHandle->CntPhB += pHandle->DTCompCnt;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ee8:	4413      	add	r3, r2
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003ef2:	e00a      	b.n	8003f0a <PWMC_SetPhaseVoltage+0x412>
      }
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }

      if (pHandle->Ic > 0)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dd0b      	ble.n	8003f2c <PWMC_SetPhaseVoltage+0x434>
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f20:	4413      	add	r3, r2
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003f2a:	e00a      	b.n	8003f42 <PWMC_SetPhaseVoltage+0x44a>
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
 8003f4e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffda 	bl	8003f58 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      retVal = true;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e01d      	b.n	8003fee <PWMC_CurrentReadingCalibr+0x66>
    }
    else if (CRC_EXEC == action)
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d11a      	bne.n	8003fee <PWMC_CurrentReadingCalibr+0x66>
    {
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d013      	beq.n	8003fea <PWMC_CurrentReadingCalibr+0x62>
      {
        pHandle->OffCalibrWaitTimeCounter--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <PWMC_CurrentReadingCalibr+0x66>
        {
          pHandle->pFctCurrReadingCalib(pHandle);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
          retVal = true;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e001      	b.n	8003fee <PWMC_CurrentReadingCalibr+0x66>
        }
      }
      else
      {
        retVal = true;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
      /* Nothing to do */
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <PWMC_CheckOverCurrent>:
  *	@param  pHandle: Handler of the current instance of the PWM component.
  * @retval #MC_BREAK_IN if an overcurrent has occurred since last call,
  *         and #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
 8004008:	4603      	mov	r3, r0
#endif
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	77fb      	strb	r3, [r7, #31]
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61bb      	str	r3, [r7, #24]
    uint8_t * txData = pHandle->txBuffer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]
    int16_t rxLength = pHandle->rxLength;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	899b      	ldrh	r3, [r3, #12]
 8004032:	827b      	strh	r3, [r7, #18]
    uint16_t size = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	813b      	strh	r3, [r7, #8]
    uint8_t number_of_item =0;
 8004038:	2300      	movs	r3, #0
 800403a:	747b      	strb	r3, [r7, #17]
    pHandle->txLength = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	81da      	strh	r2, [r3, #14]
    uint8_t accessResult;
    while (rxLength > 0)
 8004042:	e050      	b.n	80040e6 <RI_SetRegCommandParser+0xd4>
    {
       number_of_item++;
 8004044:	7c7b      	ldrb	r3, [r7, #17]
 8004046:	3301      	adds	r3, #1
 8004048:	747b      	strb	r3, [r7, #17]
      dataElementID = (uint16_t *) rxData;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	60fb      	str	r3, [r7, #12]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	3b02      	subs	r3, #2
 8004052:	b29b      	uxth	r3, r3
 8004054:	827b      	strh	r3, [r7, #18]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3302      	adds	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8818      	ldrh	r0, [r3, #0]
 8004060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004064:	f107 0208 	add.w	r2, r7, #8
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	f000 f897 	bl	800419c <RI_SetReg>
 800406e:	4603      	mov	r3, r0
 8004070:	72fb      	strb	r3, [r7, #11]

      /* Prepare next data*/
      rxLength = (int16_t) (rxLength - size);
 8004072:	8a7a      	ldrh	r2, [r7, #18]
 8004074:	893b      	ldrh	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	b29b      	uxth	r3, r3
 800407a:	827b      	strh	r3, [r7, #18]
      rxData = rxData+size;
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	461a      	mov	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	4413      	add	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
      /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8004086:	7c7b      	ldrb	r3, [r7, #17]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <RI_SetRegCommandParser+0x88>
 800408c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <RI_SetRegCommandParser+0x88>
      {
        retVal = accessResult;
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e025      	b.n	80040e6 <RI_SetRegCommandParser+0xd4>
      }
      else
      {/* Store the result for each access to be able to report failling access */
        if (txSyncFreeSpace !=0 )
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01e      	beq.n	80040de <RI_SetRegCommandParser+0xcc>
        {
          *txData = accessResult;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	7afa      	ldrb	r2, [r7, #11]
 80040a4:	701a      	strb	r2, [r3, #0]
          txData = txData+1;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3301      	adds	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
          pHandle->txLength++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	89db      	ldrh	r3, [r3, #14]
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	81da      	strh	r2, [r3, #14]
          txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	807b      	strh	r3, [r7, #2]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <RI_SetRegCommandParser+0xb6>
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
 80040c6:	e000      	b.n	80040ca <RI_SetRegCommandParser+0xb8>
 80040c8:	2301      	movs	r3, #1
 80040ca:	77fb      	strb	r3, [r7, #31]
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80040cc:	7afb      	ldrb	r3, [r7, #11]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d002      	beq.n	80040d8 <RI_SetRegCommandParser+0xc6>
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	2b0a      	cmp	r3, #10
 80040d6:	d106      	bne.n	80040e6 <RI_SetRegCommandParser+0xd4>
          { /* From this point we are not able to continue to decode CMD buffer*/
            /* We stop the parsing */
            rxLength = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	827b      	strh	r3, [r7, #18]
 80040dc:	e003      	b.n	80040e6 <RI_SetRegCommandParser+0xd4>
        }
        else
        {
          /* Stop parsing the cmd buffer as no space to answer */
          /* If we reach this state, chances are high the command was badly formated or received */
          rxLength = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	827b      	strh	r3, [r7, #18]
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
    while (rxLength > 0)
 80040e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	dcaa      	bgt.n	8004044 <RI_SetRegCommandParser+0x32>
        }
      }
    }
    /* If all accesses are fine, just one global MCP_CMD_OK is required*/
      if (MCP_CMD_OK == retVal)
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <RI_SetRegCommandParser+0xe8>
    {
      pHandle->txLength = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	81da      	strh	r2, [r3, #14]
      /* Nothing to do */
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <RI_GetRegCommandParser>:

__weak uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_NOK;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	61bb      	str	r3, [r7, #24]
    uint8_t * txData = pHandle->txBuffer;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	617b      	str	r3, [r7, #20]
    uint16_t size = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	817b      	strh	r3, [r7, #10]
    uint16_t rxLength = pHandle->rxLength;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	899b      	ldrh	r3, [r3, #12]
 8004128:	827b      	strh	r3, [r7, #18]
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	823b      	strh	r3, [r7, #16]

    pHandle->txLength = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	81da      	strh	r2, [r3, #14]

    while (rxLength > 0U)
 8004134:	e029      	b.n	800418a <RI_GetRegCommandParser+0x86>
    {
      dataElementID = (uint16_t *) rxData;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	60fb      	str	r3, [r7, #12]
      rxLength = rxLength-MCP_ID_SIZE;
 800413a:	8a7b      	ldrh	r3, [r7, #18]
 800413c:	3b02      	subs	r3, #2
 800413e:	827b      	strh	r3, [r7, #18]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	3302      	adds	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8818      	ldrh	r0, [r3, #0]
 800414a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800414e:	f107 020a 	add.w	r2, r7, #10
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	f000 fd58 	bl	8004c08 <RI_GetReg>
 8004158:	4603      	mov	r3, r0
 800415a:	77fb      	strb	r3, [r7, #31]
      if (retVal == MCP_CMD_OK )
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d111      	bne.n	8004186 <RI_GetRegCommandParser+0x82>
      {
        txData = txData+size;
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	461a      	mov	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
        pHandle->txLength += size;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	89da      	ldrh	r2, [r3, #14]
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	4413      	add	r3, r2
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	81da      	strh	r2, [r3, #14]
        freeSpaceS16 = freeSpaceS16-size;
 800417a:	8a3a      	ldrh	r2, [r7, #16]
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	823b      	strh	r3, [r7, #16]
 8004184:	e001      	b.n	800418a <RI_GetRegCommandParser+0x86>
      }
      else
      {
        rxLength = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	827b      	strh	r3, [r7, #18]
    while (rxLength > 0U)
 800418a:	8a7b      	ldrh	r3, [r7, #18]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1d2      	bne.n	8004136 <RI_GetRegCommandParser+0x32>
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8004190:	7ffb      	ldrb	r3, [r7, #31]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <RI_SetReg>:

uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b09c      	sub	sp, #112	; 0x70
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	81fb      	strh	r3, [r7, #14]
 80041ac:	4613      	mov	r3, r2
 80041ae:	81bb      	strh	r3, [r7, #12]
  uint8_t retVal = MCP_CMD_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 80041b6:	89fb      	ldrh	r3, [r7, #14]
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    uint8_t motorID;
    uint8_t typeID;

    typeID = (uint8_t)dataID & TYPE_MASK;
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    motorID = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    MCI_Handle_t *pMCIN = &Mci[motorID];
 80041d2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	4a44      	ldr	r2, [pc, #272]	; (80042ec <RI_SetReg+0x150>)
 80041da:	4413      	add	r3, r2
 80041dc:	667b      	str	r3, [r7, #100]	; 0x64

    switch (typeID)
 80041de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80041e2:	3b08      	subs	r3, #8
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	f200 84fa 	bhi.w	8004bde <RI_SetReg+0xa42>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <RI_SetReg+0x54>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004275 	.word	0x08004275
 80041f4:	08004bdf 	.word	0x08004bdf
 80041f8:	08004bdf 	.word	0x08004bdf
 80041fc:	08004bdf 	.word	0x08004bdf
 8004200:	08004bdf 	.word	0x08004bdf
 8004204:	08004bdf 	.word	0x08004bdf
 8004208:	08004bdf 	.word	0x08004bdf
 800420c:	08004bdf 	.word	0x08004bdf
 8004210:	080042f1 	.word	0x080042f1
 8004214:	08004bdf 	.word	0x08004bdf
 8004218:	08004bdf 	.word	0x08004bdf
 800421c:	08004bdf 	.word	0x08004bdf
 8004220:	08004bdf 	.word	0x08004bdf
 8004224:	08004bdf 	.word	0x08004bdf
 8004228:	08004bdf 	.word	0x08004bdf
 800422c:	08004bdf 	.word	0x08004bdf
 8004230:	0800492d 	.word	0x0800492d
 8004234:	08004bdf 	.word	0x08004bdf
 8004238:	08004bdf 	.word	0x08004bdf
 800423c:	08004bdf 	.word	0x08004bdf
 8004240:	08004bdf 	.word	0x08004bdf
 8004244:	08004bdf 	.word	0x08004bdf
 8004248:	08004bdf 	.word	0x08004bdf
 800424c:	08004bdf 	.word	0x08004bdf
 8004250:	080049eb 	.word	0x080049eb
 8004254:	08004bdf 	.word	0x08004bdf
 8004258:	08004bdf 	.word	0x08004bdf
 800425c:	08004bdf 	.word	0x08004bdf
 8004260:	08004bdf 	.word	0x08004bdf
 8004264:	08004bdf 	.word	0x08004bdf
 8004268:	08004bdf 	.word	0x08004bdf
 800426c:	08004bdf 	.word	0x08004bdf
 8004270:	08004a09 	.word	0x08004a09
    { //cstat !MISRAC2012-Rule-16.1
      case TYPE_DATA_8BIT:
      {
        switch (regID)
 8004274:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004278:	2bc8      	cmp	r3, #200	; 0xc8
 800427a:	d029      	beq.n	80042d0 <RI_SetReg+0x134>
 800427c:	2bc8      	cmp	r3, #200	; 0xc8
 800427e:	dc2b      	bgt.n	80042d8 <RI_SetReg+0x13c>
 8004280:	2b48      	cmp	r3, #72	; 0x48
 8004282:	d002      	beq.n	800428a <RI_SetReg+0xee>
 8004284:	2b88      	cmp	r3, #136	; 0x88
 8004286:	d004      	beq.n	8004292 <RI_SetReg+0xf6>
 8004288:	e026      	b.n	80042d8 <RI_SetReg+0x13c>
        {
          case MC_REG_STATUS:
          {
            retVal = MCP_ERROR_RO_REG;
 800428a:	2304      	movs	r3, #4
 800428c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004290:	e027      	b.n	80042e2 <RI_SetReg+0x146>
          }

          case MC_REG_CONTROL_MODE:
          {
            uint8_t regdata8 = *data;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800429a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d108      	bne.n	80042b4 <RI_SetReg+0x118>
            {
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80042a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042a4:	f7fe fa97 	bl	80027d6 <MCI_GetTeref>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2200      	movs	r2, #0
 80042ac:	4619      	mov	r1, r3
 80042ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042b0:	f7fd fff7 	bl	80022a2 <MCI_ExecTorqueRamp>
            else
            {
              /* Nothing to do */
            }

            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80042b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d111      	bne.n	80042e0 <RI_SetReg+0x144>
            {
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80042bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042be:	f7fe f9ed 	bl	800269c <MCI_GetMecSpeedRefUnit>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2200      	movs	r2, #0
 80042c6:	4619      	mov	r1, r3
 80042c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042ca:	f7fd ffcd 	bl	8002268 <MCI_ExecSpeedRamp>
            else
            {
              /* Nothing to do */
            }

            break;
 80042ce:	e007      	b.n	80042e0 <RI_SetReg+0x144>
          }

          case MC_REG_RUC_STAGE_NBR:
          {
            retVal = MCP_ERROR_RO_REG;
 80042d0:	2304      	movs	r3, #4
 80042d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80042d6:	e004      	b.n	80042e2 <RI_SetReg+0x146>
          }
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 80042d8:	2305      	movs	r3, #5
 80042da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80042de:	e000      	b.n	80042e2 <RI_SetReg+0x146>
            break;
 80042e0:	bf00      	nop
          }
        }
        *size = 1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	801a      	strh	r2, [r3, #0]
        break;
 80042e8:	f000 bc80 	b.w	8004bec <RI_SetReg+0xa50>
 80042ec:	2000079c 	.word	0x2000079c
      }

      case TYPE_DATA_16BIT:
      {
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        switch (regID)
 80042f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042fa:	f641 3258 	movw	r2, #7000	; 0x1b58
 80042fe:	4293      	cmp	r3, r2
 8004300:	f000 8212 	beq.w	8004728 <RI_SetReg+0x58c>
 8004304:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004308:	4293      	cmp	r3, r2
 800430a:	f300 82fe 	bgt.w	800490a <RI_SetReg+0x76e>
 800430e:	f641 1210 	movw	r2, #6416	; 0x1910
 8004312:	4293      	cmp	r3, r2
 8004314:	f000 82ed 	beq.w	80048f2 <RI_SetReg+0x756>
 8004318:	f641 1210 	movw	r2, #6416	; 0x1910
 800431c:	4293      	cmp	r3, r2
 800431e:	f300 82f4 	bgt.w	800490a <RI_SetReg+0x76e>
 8004322:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004326:	4293      	cmp	r3, r2
 8004328:	f000 82d7 	beq.w	80048da <RI_SetReg+0x73e>
 800432c:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004330:	4293      	cmp	r3, r2
 8004332:	f300 82ea 	bgt.w	800490a <RI_SetReg+0x76e>
 8004336:	f241 6250 	movw	r2, #5712	; 0x1650
 800433a:	4293      	cmp	r3, r2
 800433c:	f000 82c2 	beq.w	80048c4 <RI_SetReg+0x728>
 8004340:	f241 6250 	movw	r2, #5712	; 0x1650
 8004344:	4293      	cmp	r3, r2
 8004346:	f300 82e0 	bgt.w	800490a <RI_SetReg+0x76e>
 800434a:	f241 6210 	movw	r2, #5648	; 0x1610
 800434e:	4293      	cmp	r3, r2
 8004350:	f000 82ad 	beq.w	80048ae <RI_SetReg+0x712>
 8004354:	f241 6210 	movw	r2, #5648	; 0x1610
 8004358:	4293      	cmp	r3, r2
 800435a:	f300 82d6 	bgt.w	800490a <RI_SetReg+0x76e>
 800435e:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 8298 	beq.w	8004898 <RI_SetReg+0x6fc>
 8004368:	f241 52d0 	movw	r2, #5584	; 0x15d0
 800436c:	4293      	cmp	r3, r2
 800436e:	f300 82cc 	bgt.w	800490a <RI_SetReg+0x76e>
 8004372:	f241 5290 	movw	r2, #5520	; 0x1590
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 8283 	beq.w	8004882 <RI_SetReg+0x6e6>
 800437c:	f241 5290 	movw	r2, #5520	; 0x1590
 8004380:	4293      	cmp	r3, r2
 8004382:	f300 82c2 	bgt.w	800490a <RI_SetReg+0x76e>
 8004386:	f241 5250 	movw	r2, #5456	; 0x1550
 800438a:	4293      	cmp	r3, r2
 800438c:	f000 826e 	beq.w	800486c <RI_SetReg+0x6d0>
 8004390:	f241 5250 	movw	r2, #5456	; 0x1550
 8004394:	4293      	cmp	r3, r2
 8004396:	f300 82b8 	bgt.w	800490a <RI_SetReg+0x76e>
 800439a:	f241 5210 	movw	r2, #5392	; 0x1510
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 8259 	beq.w	8004856 <RI_SetReg+0x6ba>
 80043a4:	f241 5210 	movw	r2, #5392	; 0x1510
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f300 82ae 	bgt.w	800490a <RI_SetReg+0x76e>
 80043ae:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f000 8244 	beq.w	8004840 <RI_SetReg+0x6a4>
 80043b8:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80043bc:	4293      	cmp	r3, r2
 80043be:	f300 82a4 	bgt.w	800490a <RI_SetReg+0x76e>
 80043c2:	f241 4290 	movw	r2, #5264	; 0x1490
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f000 822f 	beq.w	800482a <RI_SetReg+0x68e>
 80043cc:	f241 4290 	movw	r2, #5264	; 0x1490
 80043d0:	4293      	cmp	r3, r2
 80043d2:	f300 829a 	bgt.w	800490a <RI_SetReg+0x76e>
 80043d6:	f241 4250 	movw	r2, #5200	; 0x1450
 80043da:	4293      	cmp	r3, r2
 80043dc:	f000 821a 	beq.w	8004814 <RI_SetReg+0x678>
 80043e0:	f241 4250 	movw	r2, #5200	; 0x1450
 80043e4:	4293      	cmp	r3, r2
 80043e6:	f300 8290 	bgt.w	800490a <RI_SetReg+0x76e>
 80043ea:	f241 0250 	movw	r2, #4176	; 0x1050
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f000 820c 	beq.w	800480c <RI_SetReg+0x670>
 80043f4:	f241 0250 	movw	r2, #4176	; 0x1050
 80043f8:	4293      	cmp	r3, r2
 80043fa:	f300 8286 	bgt.w	800490a <RI_SetReg+0x76e>
 80043fe:	f241 0210 	movw	r2, #4112	; 0x1010
 8004402:	4293      	cmp	r3, r2
 8004404:	f000 8202 	beq.w	800480c <RI_SetReg+0x670>
 8004408:	f241 0210 	movw	r2, #4112	; 0x1010
 800440c:	4293      	cmp	r3, r2
 800440e:	f300 827c 	bgt.w	800490a <RI_SetReg+0x76e>
 8004412:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8004416:	f000 81f9 	beq.w	800480c <RI_SetReg+0x670>
 800441a:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 800441e:	f300 8274 	bgt.w	800490a <RI_SetReg+0x76e>
 8004422:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 8004426:	f000 81f1 	beq.w	800480c <RI_SetReg+0x670>
 800442a:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 800442e:	f300 826c 	bgt.w	800490a <RI_SetReg+0x76e>
 8004432:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004436:	f000 826c 	beq.w	8004912 <RI_SetReg+0x776>
 800443a:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 800443e:	f300 8264 	bgt.w	800490a <RI_SetReg+0x76e>
 8004442:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004446:	f000 8264 	beq.w	8004912 <RI_SetReg+0x776>
 800444a:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 800444e:	f300 825c 	bgt.w	800490a <RI_SetReg+0x76e>
 8004452:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004456:	f000 81d5 	beq.w	8004804 <RI_SetReg+0x668>
 800445a:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 800445e:	f300 8254 	bgt.w	800490a <RI_SetReg+0x76e>
 8004462:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004466:	f000 81cd 	beq.w	8004804 <RI_SetReg+0x668>
 800446a:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 800446e:	f300 824c 	bgt.w	800490a <RI_SetReg+0x76e>
 8004472:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004476:	f000 81c5 	beq.w	8004804 <RI_SetReg+0x668>
 800447a:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 800447e:	f300 8244 	bgt.w	800490a <RI_SetReg+0x76e>
 8004482:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004486:	f000 81bd 	beq.w	8004804 <RI_SetReg+0x668>
 800448a:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 800448e:	f300 823c 	bgt.w	800490a <RI_SetReg+0x76e>
 8004492:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004496:	f000 81b5 	beq.w	8004804 <RI_SetReg+0x668>
 800449a:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 800449e:	f300 8234 	bgt.w	800490a <RI_SetReg+0x76e>
 80044a2:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 80044a6:	f000 81ad 	beq.w	8004804 <RI_SetReg+0x668>
 80044aa:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 80044ae:	f300 822c 	bgt.w	800490a <RI_SetReg+0x76e>
 80044b2:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80044b6:	f000 8159 	beq.w	800476c <RI_SetReg+0x5d0>
 80044ba:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80044be:	f300 8224 	bgt.w	800490a <RI_SetReg+0x76e>
 80044c2:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80044c6:	f000 8151 	beq.w	800476c <RI_SetReg+0x5d0>
 80044ca:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80044ce:	f300 821c 	bgt.w	800490a <RI_SetReg+0x76e>
 80044d2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80044d6:	f000 8149 	beq.w	800476c <RI_SetReg+0x5d0>
 80044da:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80044de:	f300 8214 	bgt.w	800490a <RI_SetReg+0x76e>
 80044e2:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80044e6:	f000 8141 	beq.w	800476c <RI_SetReg+0x5d0>
 80044ea:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80044ee:	f300 820c 	bgt.w	800490a <RI_SetReg+0x76e>
 80044f2:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80044f6:	f000 812c 	beq.w	8004752 <RI_SetReg+0x5b6>
 80044fa:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80044fe:	f300 8204 	bgt.w	800490a <RI_SetReg+0x76e>
 8004502:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8004506:	f000 8117 	beq.w	8004738 <RI_SetReg+0x59c>
 800450a:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 800450e:	f300 81fc 	bgt.w	800490a <RI_SetReg+0x76e>
 8004512:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004516:	f000 810b 	beq.w	8004730 <RI_SetReg+0x594>
 800451a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800451e:	f300 81f4 	bgt.w	800490a <RI_SetReg+0x76e>
 8004522:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8004526:	f000 8103 	beq.w	8004730 <RI_SetReg+0x594>
 800452a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800452e:	f300 81ec 	bgt.w	800490a <RI_SetReg+0x76e>
 8004532:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004536:	f000 80fb 	beq.w	8004730 <RI_SetReg+0x594>
 800453a:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800453e:	f300 81e4 	bgt.w	800490a <RI_SetReg+0x76e>
 8004542:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004546:	f000 80f3 	beq.w	8004730 <RI_SetReg+0x594>
 800454a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800454e:	f300 81dc 	bgt.w	800490a <RI_SetReg+0x76e>
 8004552:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004556:	f000 80eb 	beq.w	8004730 <RI_SetReg+0x594>
 800455a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800455e:	f300 81d4 	bgt.w	800490a <RI_SetReg+0x76e>
 8004562:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004566:	f000 80e3 	beq.w	8004730 <RI_SetReg+0x594>
 800456a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800456e:	f300 81cc 	bgt.w	800490a <RI_SetReg+0x76e>
 8004572:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8004576:	f000 80db 	beq.w	8004730 <RI_SetReg+0x594>
 800457a:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800457e:	f300 81c4 	bgt.w	800490a <RI_SetReg+0x76e>
 8004582:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8004586:	f000 80cf 	beq.w	8004728 <RI_SetReg+0x58c>
 800458a:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800458e:	f300 81bc 	bgt.w	800490a <RI_SetReg+0x76e>
 8004592:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8004596:	f000 80c7 	beq.w	8004728 <RI_SetReg+0x58c>
 800459a:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 800459e:	f300 81b4 	bgt.w	800490a <RI_SetReg+0x76e>
 80045a2:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80045a6:	f000 8120 	beq.w	80047ea <RI_SetReg+0x64e>
 80045aa:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80045ae:	f300 81ac 	bgt.w	800490a <RI_SetReg+0x76e>
 80045b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80045b6:	f000 810b 	beq.w	80047d0 <RI_SetReg+0x634>
 80045ba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80045be:	f300 81a4 	bgt.w	800490a <RI_SetReg+0x76e>
 80045c2:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 80045c6:	f000 80ea 	beq.w	800479e <RI_SetReg+0x602>
 80045ca:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 80045ce:	f300 819c 	bgt.w	800490a <RI_SetReg+0x76e>
 80045d2:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80045d6:	f000 80c9 	beq.w	800476c <RI_SetReg+0x5d0>
 80045da:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80045de:	f300 8194 	bgt.w	800490a <RI_SetReg+0x76e>
 80045e2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80045e6:	f000 8093 	beq.w	8004710 <RI_SetReg+0x574>
 80045ea:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80045ee:	f300 818c 	bgt.w	800490a <RI_SetReg+0x76e>
 80045f2:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80045f6:	d07f      	beq.n	80046f8 <RI_SetReg+0x55c>
 80045f8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80045fc:	f300 8185 	bgt.w	800490a <RI_SetReg+0x76e>
 8004600:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8004604:	d06c      	beq.n	80046e0 <RI_SetReg+0x544>
 8004606:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800460a:	f300 817e 	bgt.w	800490a <RI_SetReg+0x76e>
 800460e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8004612:	d059      	beq.n	80046c8 <RI_SetReg+0x52c>
 8004614:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8004618:	f300 8177 	bgt.w	800490a <RI_SetReg+0x76e>
 800461c:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8004620:	d046      	beq.n	80046b0 <RI_SetReg+0x514>
 8004622:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8004626:	f300 8170 	bgt.w	800490a <RI_SetReg+0x76e>
 800462a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800462e:	d033      	beq.n	8004698 <RI_SetReg+0x4fc>
 8004630:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004634:	f300 8169 	bgt.w	800490a <RI_SetReg+0x76e>
 8004638:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800463c:	d020      	beq.n	8004680 <RI_SetReg+0x4e4>
 800463e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004642:	f300 8162 	bgt.w	800490a <RI_SetReg+0x76e>
 8004646:	2b90      	cmp	r3, #144	; 0x90
 8004648:	d002      	beq.n	8004650 <RI_SetReg+0x4b4>
 800464a:	2bd0      	cmp	r3, #208	; 0xd0
 800464c:	d00c      	beq.n	8004668 <RI_SetReg+0x4cc>
 800464e:	e15c      	b.n	800490a <RI_SetReg+0x76e>
        {
          case MC_REG_SPEED_KP:
          {
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8004650:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004654:	4ab1      	ldr	r2, [pc, #708]	; (800491c <RI_SetReg+0x780>)
 8004656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f005 fe14 	bl	800a28e <PID_SetKP>
            break;
 8004666:	e155      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KI:
          {
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8004668:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800466c:	4aab      	ldr	r2, [pc, #684]	; (800491c <RI_SetReg+0x780>)
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f005 fe17 	bl	800a2ac <PID_SetKI>
            break;
 800467e:	e149      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KD:
          {
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8004680:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004684:	4aa5      	ldr	r2, [pc, #660]	; (800491c <RI_SetReg+0x780>)
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f005 febe 	bl	800a412 <PID_SetKD>
            break;
 8004696:	e13d      	b.n	8004914 <RI_SetReg+0x778>
          }
          case MC_REG_I_Q_KP:
          {
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8004698:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800469c:	4aa0      	ldr	r2, [pc, #640]	; (8004920 <RI_SetReg+0x784>)
 800469e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f005 fdf0 	bl	800a28e <PID_SetKP>
            break;
 80046ae:	e131      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KI:
          {
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 80046b0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80046b4:	4a9a      	ldr	r2, [pc, #616]	; (8004920 <RI_SetReg+0x784>)
 80046b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f005 fdf3 	bl	800a2ac <PID_SetKI>
            break;
 80046c6:	e125      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KD:
          {
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 80046c8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80046cc:	4a94      	ldr	r2, [pc, #592]	; (8004920 <RI_SetReg+0x784>)
 80046ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f005 fe9a 	bl	800a412 <PID_SetKD>
            break;
 80046de:	e119      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KP:
          {
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80046e0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80046e4:	4a8f      	ldr	r2, [pc, #572]	; (8004924 <RI_SetReg+0x788>)
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f005 fdcc 	bl	800a28e <PID_SetKP>
            break;
 80046f6:	e10d      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KI:
          {
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80046f8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80046fc:	4a89      	ldr	r2, [pc, #548]	; (8004924 <RI_SetReg+0x788>)
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fdcf 	bl	800a2ac <PID_SetKI>
            break;
 800470e:	e101      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KD:
          {
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8004710:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004714:	4a83      	ldr	r2, [pc, #524]	; (8004924 <RI_SetReg+0x788>)
 8004716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f005 fe76 	bl	800a412 <PID_SetKD>
            break;
 8004726:	e0f5      	b.n	8004914 <RI_SetReg+0x778>

          case MC_REG_BUS_VOLTAGE:
          case MC_REG_HEATS_TEMP:
          case MC_REG_MOTOR_POWER:
          {
            retVal = MCP_ERROR_RO_REG;
 8004728:	2304      	movs	r3, #4
 800472a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 800472e:	e0f1      	b.n	8004914 <RI_SetReg+0x778>
          case MC_REG_I_Q_MEAS:
          case MC_REG_I_D_MEAS:

          case MC_REG_FLUXWK_BUS_MEAS:
          {
            retVal = MCP_ERROR_RO_REG;
 8004730:	2304      	movs	r3, #4
 8004732:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004736:	e0ed      	b.n	8004914 <RI_SetReg+0x778>
          }
          case MC_REG_I_Q_REF:
          {
            qd_t currComp;
            currComp = MCI_GetIqdref(pMCIN);
 8004738:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800473a:	f7fe f804 	bl	8002746 <MCI_GetIqdref>
 800473e:	4603      	mov	r3, r0
 8004740:	633b      	str	r3, [r7, #48]	; 0x30
            currComp.q = (int16_t)regdata16;
 8004742:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004746:	863b      	strh	r3, [r7, #48]	; 0x30
            MCI_SetCurrentReferences(pMCIN,currComp);
 8004748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800474c:	f7fd fdc6 	bl	80022dc <MCI_SetCurrentReferences>
            break;
 8004750:	e0e0      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_REF:
          {
            qd_t currComp;
            currComp = MCI_GetIqdref(pMCIN);
 8004752:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004754:	f7fd fff7 	bl	8002746 <MCI_GetIqdref>
 8004758:	4603      	mov	r3, r0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
            currComp.d = (int16_t)regdata16;
 800475c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004760:	85fb      	strh	r3, [r7, #46]	; 0x2e
            MCI_SetCurrentReferences(pMCIN,currComp);
 8004762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004764:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004766:	f7fd fdb9 	bl	80022dc <MCI_SetCurrentReferences>
            break;
 800476a:	e0d3      	b.n	8004914 <RI_SetReg+0x778>

          case MC_REG_STOPLL_C1:
          {
            int16_t hC1;
            int16_t hC2;
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800476c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004770:	4a6d      	ldr	r2, [pc, #436]	; (8004928 <RI_SetReg+0x78c>)
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800477a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800477e:	4618      	mov	r0, r3
 8004780:	f007 fd1b 	bl	800c1ba <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8004784:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004788:	4a67      	ldr	r2, [pc, #412]	; (8004928 <RI_SetReg+0x78c>)
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8004792:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004796:	4618      	mov	r0, r3
 8004798:	f007 fd25 	bl	800c1e6 <STO_PLL_SetObserverGains>
            break;
 800479c:	e0ba      	b.n	8004914 <RI_SetReg+0x778>

          case MC_REG_STOPLL_C2:
          {
            int16_t hC1;
            int16_t hC2;
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800479e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047a2:	4a61      	ldr	r2, [pc, #388]	; (8004928 <RI_SetReg+0x78c>)
 80047a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80047ac:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80047b0:	4618      	mov	r0, r3
 80047b2:	f007 fd02 	bl	800c1ba <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 80047b6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047ba:	4a5b      	ldr	r2, [pc, #364]	; (8004928 <RI_SetReg+0x78c>)
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 80047c4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047c8:	4618      	mov	r0, r3
 80047ca:	f007 fd0c 	bl	800c1e6 <STO_PLL_SetObserverGains>
            break;
 80047ce:	e0a1      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KI:
          {
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80047d0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047d4:	4a54      	ldr	r2, [pc, #336]	; (8004928 <RI_SetReg+0x78c>)
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	3334      	adds	r3, #52	; 0x34
 80047dc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f005 fd62 	bl	800a2ac <PID_SetKI>
            break;
 80047e8:	e094      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KP:
          {
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80047ea:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047ee:	4a4e      	ldr	r2, [pc, #312]	; (8004928 <RI_SetReg+0x78c>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	3334      	adds	r3, #52	; 0x34
 80047f6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f005 fd46 	bl	800a28e <PID_SetKP>
            break;
 8004802:	e087      	b.n	8004914 <RI_SetReg+0x778>
          case MC_REG_STOPLL_I_ALPHA:
          case MC_REG_STOPLL_I_BETA:
          case MC_REG_STOPLL_BEMF_ALPHA:
          case MC_REG_STOPLL_BEMF_BETA:
          {
            retVal = MCP_ERROR_RO_REG;
 8004804:	2304      	movs	r3, #4
 8004806:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 800480a:	e083      	b.n	8004914 <RI_SetReg+0x778>
          case MC_REG_FF_VQ:
          case MC_REG_FF_VD:
          case MC_REG_FF_VQ_PIOUT:
          case MC_REG_FF_VD_PIOUT:
          {
            retVal = MCP_ERROR_RO_REG;
 800480c:	2304      	movs	r3, #4
 800480e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004812:	e07f      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8004814:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004818:	4a40      	ldr	r2, [pc, #256]	; (800491c <RI_SetReg+0x780>)
 800481a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f005 fd85 	bl	800a332 <PID_SetKPDivisorPOW2>
            break;
 8004828:	e074      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800482a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800482e:	4a3b      	ldr	r2, [pc, #236]	; (800491c <RI_SetReg+0x780>)
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f005 fda8 	bl	800a38e <PID_SetKIDivisorPOW2>
            break;
 800483e:	e069      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8004840:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004844:	4a35      	ldr	r2, [pc, #212]	; (800491c <RI_SetReg+0x780>)
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f005 fe07 	bl	800a462 <PID_SetKDDivisorPOW2>
            break;
 8004854:	e05e      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8004856:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800485a:	4a32      	ldr	r2, [pc, #200]	; (8004924 <RI_SetReg+0x788>)
 800485c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004860:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f005 fd64 	bl	800a332 <PID_SetKPDivisorPOW2>
            break;
 800486a:	e053      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 800486c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004870:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <RI_SetReg+0x788>)
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f005 fd87 	bl	800a38e <PID_SetKIDivisorPOW2>
            break;
 8004880:	e048      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8004882:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004886:	4a27      	ldr	r2, [pc, #156]	; (8004924 <RI_SetReg+0x788>)
 8004888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f005 fde6 	bl	800a462 <PID_SetKDDivisorPOW2>
            break;
 8004896:	e03d      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8004898:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <RI_SetReg+0x784>)
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f005 fd43 	bl	800a332 <PID_SetKPDivisorPOW2>
            break;
 80048ac:	e032      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80048ae:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <RI_SetReg+0x784>)
 80048b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fd66 	bl	800a38e <PID_SetKIDivisorPOW2>
            break;
 80048c2:	e027      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80048c4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <RI_SetReg+0x784>)
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f005 fdc5 	bl	800a462 <PID_SetKDDivisorPOW2>
            break;
 80048d8:	e01c      	b.n	8004914 <RI_SetReg+0x778>
          }
          case MC_REG_STOPLL_KI_DIV:
          {
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80048da:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <RI_SetReg+0x78c>)
 80048e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e4:	3334      	adds	r3, #52	; 0x34
 80048e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 fd4f 	bl	800a38e <PID_SetKIDivisorPOW2>
            break;
 80048f0:	e010      	b.n	8004914 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KP_DIV:
          {
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80048f2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048f6:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <RI_SetReg+0x78c>)
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	3334      	adds	r3, #52	; 0x34
 80048fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f005 fd15 	bl	800a332 <PID_SetKPDivisorPOW2>
            break;
 8004908:	e004      	b.n	8004914 <RI_SetReg+0x778>
          }

          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 800490a:	2305      	movs	r3, #5
 800490c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004910:	e000      	b.n	8004914 <RI_SetReg+0x778>
            break;
 8004912:	bf00      	nop
          }
        }
        *size = 2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	801a      	strh	r2, [r3, #0]
        break;
 800491a:	e167      	b.n	8004bec <RI_SetReg+0xa50>
 800491c:	200005b4 	.word	0x200005b4
 8004920:	200004c4 	.word	0x200004c4
 8004924:	200004c8 	.word	0x200004c8
 8004928:	200005b0 	.word	0x200005b0
      }

      case TYPE_DATA_32BIT:
      {
        uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38

        switch (regID)
 8004932:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004936:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800493a:	d046      	beq.n	80049ca <RI_SetReg+0x82e>
 800493c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004940:	dc4b      	bgt.n	80049da <RI_SetReg+0x83e>
 8004942:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004946:	d038      	beq.n	80049ba <RI_SetReg+0x81e>
 8004948:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800494c:	dc45      	bgt.n	80049da <RI_SetReg+0x83e>
 800494e:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8004952:	d02a      	beq.n	80049aa <RI_SetReg+0x80e>
 8004954:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8004958:	dc3f      	bgt.n	80049da <RI_SetReg+0x83e>
 800495a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800495e:	d020      	beq.n	80049a2 <RI_SetReg+0x806>
 8004960:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004964:	dc39      	bgt.n	80049da <RI_SetReg+0x83e>
 8004966:	2bd8      	cmp	r3, #216	; 0xd8
 8004968:	d01b      	beq.n	80049a2 <RI_SetReg+0x806>
 800496a:	2bd8      	cmp	r3, #216	; 0xd8
 800496c:	dc35      	bgt.n	80049da <RI_SetReg+0x83e>
 800496e:	2b98      	cmp	r3, #152	; 0x98
 8004970:	d009      	beq.n	8004986 <RI_SetReg+0x7ea>
 8004972:	2b98      	cmp	r3, #152	; 0x98
 8004974:	dc31      	bgt.n	80049da <RI_SetReg+0x83e>
 8004976:	2b18      	cmp	r3, #24
 8004978:	d001      	beq.n	800497e <RI_SetReg+0x7e2>
 800497a:	2b58      	cmp	r3, #88	; 0x58
 800497c:	d12d      	bne.n	80049da <RI_SetReg+0x83e>
        {

          case MC_REG_FAULTS_FLAGS:
          case MC_REG_SPEED_MEAS:
          {
            retVal = MCP_ERROR_RO_REG;
 800497e:	2304      	movs	r3, #4
 8004980:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004984:	e02d      	b.n	80049e2 <RI_SetReg+0x846>
          }

          case MC_REG_SPEED_REF:
          {
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	b21b      	sxth	r3, r3
 800498a:	4a9b      	ldr	r2, [pc, #620]	; (8004bf8 <RI_SetReg+0xa5c>)
 800498c:	fb82 1203 	smull	r1, r2, r2, r3
 8004990:	17db      	asrs	r3, r3, #31
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	b21b      	sxth	r3, r3
 8004996:	2200      	movs	r2, #0
 8004998:	4619      	mov	r1, r3
 800499a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800499c:	f7fd fc64 	bl	8002268 <MCI_ExecSpeedRamp>
            break;
 80049a0:	e01f      	b.n	80049e2 <RI_SetReg+0x846>
          }
          case MC_REG_STOPLL_EST_BEMF:
          case MC_REG_STOPLL_OBS_BEMF:
          {
            retVal = MCP_ERROR_RO_REG;
 80049a2:	2304      	movs	r3, #4
 80049a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80049a8:	e01b      	b.n	80049e2 <RI_SetReg+0x846>
          }
          case MC_REG_FF_1Q:
          {
            pFF[motorID]->wConstant_1Q = (int32_t)regdata32;
 80049aa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80049ae:	4a93      	ldr	r2, [pc, #588]	; (8004bfc <RI_SetReg+0xa60>)
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b6:	611a      	str	r2, [r3, #16]
            break;
 80049b8:	e013      	b.n	80049e2 <RI_SetReg+0x846>
          }

          case MC_REG_FF_1D:
          {
            pFF[motorID]->wConstant_1D = (int32_t)regdata32;
 80049ba:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80049be:	4a8f      	ldr	r2, [pc, #572]	; (8004bfc <RI_SetReg+0xa60>)
 80049c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c6:	60da      	str	r2, [r3, #12]
            break;
 80049c8:	e00b      	b.n	80049e2 <RI_SetReg+0x846>
          }

          case MC_REG_FF_2:
          {
            pFF[motorID]->wConstant_2 = (int32_t)regdata32;
 80049ca:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80049ce:	4a8b      	ldr	r2, [pc, #556]	; (8004bfc <RI_SetReg+0xa60>)
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d6:	615a      	str	r2, [r3, #20]
            break;
 80049d8:	e003      	b.n	80049e2 <RI_SetReg+0x846>
          }

          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 80049da:	2305      	movs	r3, #5
 80049dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80049e0:	bf00      	nop
          }
        }
        *size = 4;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	801a      	strh	r2, [r3, #0]
        break;
 80049e8:	e100      	b.n	8004bec <RI_SetReg+0xa50>
      }
      case TYPE_DATA_STRING:
      {
        const char_t *charData = (const char_t *)data;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
        char_t *dummy = (char_t *)data ;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        retVal = MCP_ERROR_RO_REG;
 80049f2:	2304      	movs	r3, #4
 80049f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        /* Used to compute String length stored in RXBUFF even if Reg does not exist*/
        /* It allows to jump to the next command in the buffer */
        (void)RI_MovString (charData, dummy, size, dataAvailable);
 80049f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a02:	f001 f8dd 	bl	8005bc0 <RI_MovString>
        break;
 8004a06:	e0f1      	b.n	8004bec <RI_SetReg+0xa50>
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8004a10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a14:	3302      	adds	r3, #2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	801a      	strh	r2, [r3, #0]
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        rawData++;
 8004a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a22:	3301      	adds	r3, #1
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
        rawData++;
 8004a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a28:	3301      	adds	r3, #1
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (*size > dataAvailable )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	dd06      	ble.n	8004a48 <RI_SetReg+0x8ac>
        { /* The decoded size of the raw structure can not match with transmitted buffer, error in buffer construction*/
          *size = 0;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	801a      	strh	r2, [r3, #0]
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8004a40:	230a      	movs	r3, #10
 8004a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              retVal = MCP_ERROR_UNKNOWN_REG;
              break;
            }
          }
        }
        break;
 8004a46:	e0d1      	b.n	8004bec <RI_SetReg+0xa50>
          switch (regID)
 8004a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a4c:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8004a50:	f000 80ab 	beq.w	8004baa <RI_SetReg+0xa0e>
 8004a54:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8004a58:	f300 80bc 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004a5c:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8004a60:	f000 80ab 	beq.w	8004bba <RI_SetReg+0xa1e>
 8004a64:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8004a68:	f300 80b4 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004a6c:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8004a70:	d049      	beq.n	8004b06 <RI_SetReg+0x96a>
 8004a72:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8004a76:	f300 80ad 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004a7a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8004a7e:	d032      	beq.n	8004ae6 <RI_SetReg+0x94a>
 8004a80:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8004a84:	f300 80a6 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004a88:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8004a8c:	d016      	beq.n	8004abc <RI_SetReg+0x920>
 8004a8e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8004a92:	f300 809f 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004a96:	2be8      	cmp	r3, #232	; 0xe8
 8004a98:	d00c      	beq.n	8004ab4 <RI_SetReg+0x918>
 8004a9a:	2be8      	cmp	r3, #232	; 0xe8
 8004a9c:	f300 809a 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004aa0:	2ba8      	cmp	r3, #168	; 0xa8
 8004aa2:	d007      	beq.n	8004ab4 <RI_SetReg+0x918>
 8004aa4:	2ba8      	cmp	r3, #168	; 0xa8
 8004aa6:	f300 8095 	bgt.w	8004bd4 <RI_SetReg+0xa38>
 8004aaa:	2b28      	cmp	r3, #40	; 0x28
 8004aac:	d002      	beq.n	8004ab4 <RI_SetReg+0x918>
 8004aae:	2b68      	cmp	r3, #104	; 0x68
 8004ab0:	f040 8090 	bne.w	8004bd4 <RI_SetReg+0xa38>
              retVal = MCP_ERROR_RO_REG;
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004aba:	e08f      	b.n	8004bdc <RI_SetReg+0xa40>
              rpm = *(int32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	889b      	ldrh	r3, [r3, #4]
 8004ac6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8004aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004acc:	4a4a      	ldr	r2, [pc, #296]	; (8004bf8 <RI_SetReg+0xa5c>)
 8004ace:	fb82 1203 	smull	r1, r2, r2, r3
 8004ad2:	17db      	asrs	r3, r3, #31
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004adc:	4619      	mov	r1, r3
 8004ade:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004ae0:	f7fd fbc2 	bl	8002268 <MCI_ExecSpeedRamp>
              break;
 8004ae4:	e07a      	b.n	8004bdc <RI_SetReg+0xa40>
              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	653b      	str	r3, [r7, #80]	; 0x50
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8004aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aee:	889b      	ldrh	r3, [r3, #4]
 8004af0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8004af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004afc:	4619      	mov	r1, r3
 8004afe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004b00:	f7fd fbcf 	bl	80022a2 <MCI_ExecTorqueRamp>
              break;
 8004b04:	e06a      	b.n	8004bdc <RI_SetReg+0xa40>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8004b06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8004b12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <RI_SetReg+0x98c>
 8004b20:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d903      	bls.n	8004b30 <RI_SetReg+0x994>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8004b28:	230a      	movs	r3, #10
 8004b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004b2e:	e055      	b.n	8004bdc <RI_SetReg+0xa40>
                for (i = 0; i <nbrOfPhase; i++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8004b36:	e031      	b.n	8004b9c <RI_SetReg+0xa00>
                rpm = *(int32_t *) &rawData[i * 8U]; //cstat !MISRAC2012-Rule-11.3
 8004b38:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	657b      	str	r3, [r7, #84]	; 0x54
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8004b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <RI_SetReg+0xa5c>)
 8004b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8004b50:	17db      	asrs	r3, r3, #31
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	837b      	strh	r3, [r7, #26]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8004b58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	3304      	adds	r3, #4
 8004b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b62:	4413      	add	r3, r2
 8004b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b68:	83bb      	strh	r3, [r7, #28]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8004b6a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3306      	adds	r3, #6
 8004b72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	833b      	strh	r3, [r7, #24]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8004b7a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004b7e:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <RI_SetReg+0xa64>)
 8004b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b84:	f107 0218 	add.w	r2, r7, #24
 8004b88:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f006 f9dc 	bl	800af4a <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8004b92:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004b96:	3301      	adds	r3, #1
 8004b98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8004b9c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8004ba0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d3c7      	bcc.n	8004b38 <RI_SetReg+0x99c>
              break;
 8004ba8:	e018      	b.n	8004bdc <RI_SetReg+0xa40>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8004baa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004bac:	4815      	ldr	r0, [pc, #84]	; (8004c04 <RI_SetReg+0xa68>)
 8004bae:	f005 f9eb 	bl	8009f88 <MCPA_cfgLog>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004bb8:	e010      	b.n	8004bdc <RI_SetReg+0xa40>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8004bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc0:	82bb      	strh	r3, [r7, #20]
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
 8004bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bc8:	82fb      	strh	r3, [r7, #22]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bce:	f7fd fb85 	bl	80022dc <MCI_SetCurrentReferences>
              break;
 8004bd2:	e003      	b.n	8004bdc <RI_SetReg+0xa40>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8004bd4:	2305      	movs	r3, #5
 8004bd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004bda:	bf00      	nop
        break;
 8004bdc:	e006      	b.n	8004bec <RI_SetReg+0xa50>
      }

      default:
      {
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 8004bde:	2307      	movs	r3, #7
 8004be0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        *size =0; /* From this point we are not able anymore to decode the RX buffer*/
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	801a      	strh	r2, [r3, #0]
        break;
 8004bea:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8004bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3770      	adds	r7, #112	; 0x70
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2aaaaaab 	.word	0x2aaaaaab
 8004bfc:	200004d0 	.word	0x200004d0
 8004c00:	200005ac 	.word	0x200005ac
 8004c04:	20000580 	.word	0x20000580

08004c08 <RI_GetReg>:

uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t freeSpace)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0b6      	sub	sp, #216	; 0xd8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4603      	mov	r3, r0
 8004c16:	81fb      	strh	r3, [r7, #14]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	81bb      	strh	r3, [r7, #12]
  uint8_t retVal = MCP_CMD_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	f023 0307 	bic.w	r3, r3, #7
 8004c28:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c34:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    BusVoltageSensor_Handle_t* BusVoltageSensor[NBR_OF_MOTORS]={ &BusVoltageSensor_M1._Super};
 8004c38:	4b4e      	ldr	r3, [pc, #312]	; (8004d74 <RI_GetReg+0x16c>)
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t motorID = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

    MCI_Handle_t *pMCIN = &Mci[motorID];
 8004c42:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004c46:	015b      	lsls	r3, r3, #5
 8004c48:	4a4b      	ldr	r2, [pc, #300]	; (8004d78 <RI_GetReg+0x170>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    switch (typeID)
 8004c50:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004c54:	3b08      	subs	r3, #8
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	f200 87a6 	bhi.w	8005ba8 <RI_GetReg+0xfa0>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <RI_GetReg+0x5c>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004ce9 	.word	0x08004ce9
 8004c68:	08005ba9 	.word	0x08005ba9
 8004c6c:	08005ba9 	.word	0x08005ba9
 8004c70:	08005ba9 	.word	0x08005ba9
 8004c74:	08005ba9 	.word	0x08005ba9
 8004c78:	08005ba9 	.word	0x08005ba9
 8004c7c:	08005ba9 	.word	0x08005ba9
 8004c80:	08005ba9 	.word	0x08005ba9
 8004c84:	08004d81 	.word	0x08004d81
 8004c88:	08005ba9 	.word	0x08005ba9
 8004c8c:	08005ba9 	.word	0x08005ba9
 8004c90:	08005ba9 	.word	0x08005ba9
 8004c94:	08005ba9 	.word	0x08005ba9
 8004c98:	08005ba9 	.word	0x08005ba9
 8004c9c:	08005ba9 	.word	0x08005ba9
 8004ca0:	08005ba9 	.word	0x08005ba9
 8004ca4:	08005647 	.word	0x08005647
 8004ca8:	08005ba9 	.word	0x08005ba9
 8004cac:	08005ba9 	.word	0x08005ba9
 8004cb0:	08005ba9 	.word	0x08005ba9
 8004cb4:	08005ba9 	.word	0x08005ba9
 8004cb8:	08005ba9 	.word	0x08005ba9
 8004cbc:	08005ba9 	.word	0x08005ba9
 8004cc0:	08005ba9 	.word	0x08005ba9
 8004cc4:	080057cf 	.word	0x080057cf
 8004cc8:	08005ba9 	.word	0x08005ba9
 8004ccc:	08005ba9 	.word	0x08005ba9
 8004cd0:	08005ba9 	.word	0x08005ba9
 8004cd4:	08005ba9 	.word	0x08005ba9
 8004cd8:	08005ba9 	.word	0x08005ba9
 8004cdc:	08005ba9 	.word	0x08005ba9
 8004ce0:	08005ba9 	.word	0x08005ba9
 8004ce4:	08005877 	.word	0x08005877
    {
      case TYPE_DATA_8BIT:
      {
        if (freeSpace > 0U)
 8004ce8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03b      	beq.n	8004d68 <RI_GetReg+0x160>
        {
          switch (regID)
 8004cf0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004cf4:	2bc8      	cmp	r3, #200	; 0xc8
 8004cf6:	d018      	beq.n	8004d2a <RI_GetReg+0x122>
 8004cf8:	2bc8      	cmp	r3, #200	; 0xc8
 8004cfa:	dc2c      	bgt.n	8004d56 <RI_GetReg+0x14e>
 8004cfc:	2b48      	cmp	r3, #72	; 0x48
 8004cfe:	d002      	beq.n	8004d06 <RI_GetReg+0xfe>
 8004d00:	2b88      	cmp	r3, #136	; 0x88
 8004d02:	d009      	beq.n	8004d18 <RI_GetReg+0x110>
 8004d04:	e027      	b.n	8004d56 <RI_GetReg+0x14e>
          {
            case MC_REG_STATUS:
            {
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004d06:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004d0a:	f7fd fc00 	bl	800250e <MCI_GetSTMState>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	701a      	strb	r2, [r3, #0]
              break;
 8004d16:	e022      	b.n	8004d5e <RI_GetReg+0x156>
            }

            case MC_REG_CONTROL_MODE:
            {
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004d18:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004d1c:	f7fd fc2f 	bl	800257e <MCI_GetControlMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	701a      	strb	r2, [r3, #0]
              break;
 8004d28:	e019      	b.n	8004d5e <RI_GetReg+0x156>
            }

            case MC_REG_RUC_STAGE_NBR:
            {
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8004d2a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <RI_GetReg+0x174>)
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <RI_GetReg+0x146>
 8004d38:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <RI_GetReg+0x174>)
 8004d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f006 f937 	bl	800afb6 <RUC_GetNumberOfPhases>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	e000      	b.n	8004d50 <RI_GetReg+0x148>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	701a      	strb	r2, [r3, #0]
              break;
 8004d54:	e003      	b.n	8004d5e <RI_GetReg+0x156>
            }

            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 8004d56:	2305      	movs	r3, #5
 8004d58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 8004d5c:	bf00      	nop
            }
          }
          *size = 1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 8004d64:	f000 bf24 	b.w	8005bb0 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8004d6e:	f000 bf1f 	b.w	8005bb0 <RI_GetReg+0xfa8>
 8004d72:	bf00      	nop
 8004d74:	200003b8 	.word	0x200003b8
 8004d78:	2000079c 	.word	0x2000079c
 8004d7c:	200005ac 	.word	0x200005ac
      }
      case TYPE_DATA_16BIT:
      {
        uint16_t *regdataU16 = (uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int16_t *regdata16 = (int16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        if (freeSpace >= 2U)
 8004d8c:	89bb      	ldrh	r3, [r7, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f240 8455 	bls.w	800563e <RI_GetReg+0xa36>
        {
          switch (regID)
 8004d94:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004d98:	f641 1210 	movw	r2, #6416	; 0x1910
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	f000 8436 	beq.w	800560e <RI_GetReg+0xa06>
 8004da2:	f641 1210 	movw	r2, #6416	; 0x1910
 8004da6:	4293      	cmp	r3, r2
 8004da8:	f300 8440 	bgt.w	800562c <RI_GetReg+0xa24>
 8004dac:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f000 841d 	beq.w	80055f0 <RI_GetReg+0x9e8>
 8004db6:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f300 8436 	bgt.w	800562c <RI_GetReg+0xa24>
 8004dc0:	f241 6250 	movw	r2, #5712	; 0x1650
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f000 8405 	beq.w	80055d4 <RI_GetReg+0x9cc>
 8004dca:	f241 6250 	movw	r2, #5712	; 0x1650
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f300 842c 	bgt.w	800562c <RI_GetReg+0xa24>
 8004dd4:	f241 6210 	movw	r2, #5648	; 0x1610
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	f000 83ed 	beq.w	80055b8 <RI_GetReg+0x9b0>
 8004dde:	f241 6210 	movw	r2, #5648	; 0x1610
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f300 8422 	bgt.w	800562c <RI_GetReg+0xa24>
 8004de8:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	f000 83d5 	beq.w	800559c <RI_GetReg+0x994>
 8004df2:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004df6:	4293      	cmp	r3, r2
 8004df8:	f300 8418 	bgt.w	800562c <RI_GetReg+0xa24>
 8004dfc:	f241 5290 	movw	r2, #5520	; 0x1590
 8004e00:	4293      	cmp	r3, r2
 8004e02:	f000 83bd 	beq.w	8005580 <RI_GetReg+0x978>
 8004e06:	f241 5290 	movw	r2, #5520	; 0x1590
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	f300 840e 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e10:	f241 5250 	movw	r2, #5456	; 0x1550
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f000 83a5 	beq.w	8005564 <RI_GetReg+0x95c>
 8004e1a:	f241 5250 	movw	r2, #5456	; 0x1550
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	f300 8404 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e24:	f241 5210 	movw	r2, #5392	; 0x1510
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f000 838d 	beq.w	8005548 <RI_GetReg+0x940>
 8004e2e:	f241 5210 	movw	r2, #5392	; 0x1510
 8004e32:	4293      	cmp	r3, r2
 8004e34:	f300 83fa 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e38:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	f000 8375 	beq.w	800552c <RI_GetReg+0x924>
 8004e42:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f300 83f0 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e4c:	f241 4290 	movw	r2, #5264	; 0x1490
 8004e50:	4293      	cmp	r3, r2
 8004e52:	f000 835d 	beq.w	8005510 <RI_GetReg+0x908>
 8004e56:	f241 4290 	movw	r2, #5264	; 0x1490
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	f300 83e6 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e60:	f241 4250 	movw	r2, #5200	; 0x1450
 8004e64:	4293      	cmp	r3, r2
 8004e66:	f000 8345 	beq.w	80054f4 <RI_GetReg+0x8ec>
 8004e6a:	f241 4250 	movw	r2, #5200	; 0x1450
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f300 83dc 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e74:	f241 0250 	movw	r2, #4176	; 0x1050
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	f000 832b 	beq.w	80054d4 <RI_GetReg+0x8cc>
 8004e7e:	f241 0250 	movw	r2, #4176	; 0x1050
 8004e82:	4293      	cmp	r3, r2
 8004e84:	f300 83d2 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e88:	f241 0210 	movw	r2, #4112	; 0x1010
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	f000 8311 	beq.w	80054b4 <RI_GetReg+0x8ac>
 8004e92:	f241 0210 	movw	r2, #4112	; 0x1010
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f300 83c8 	bgt.w	800562c <RI_GetReg+0xa24>
 8004e9c:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8004ea0:	f000 82f8 	beq.w	8005494 <RI_GetReg+0x88c>
 8004ea4:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8004ea8:	f300 83c0 	bgt.w	800562c <RI_GetReg+0xa24>
 8004eac:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 8004eb0:	f000 82e0 	beq.w	8005474 <RI_GetReg+0x86c>
 8004eb4:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 8004eb8:	f300 83b8 	bgt.w	800562c <RI_GetReg+0xa24>
 8004ebc:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004ec0:	f000 83b8 	beq.w	8005634 <RI_GetReg+0xa2c>
 8004ec4:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004ec8:	f300 83b0 	bgt.w	800562c <RI_GetReg+0xa24>
 8004ecc:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004ed0:	f000 83b0 	beq.w	8005634 <RI_GetReg+0xa2c>
 8004ed4:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004ed8:	f300 83a8 	bgt.w	800562c <RI_GetReg+0xa24>
 8004edc:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004ee0:	f000 826c 	beq.w	80053bc <RI_GetReg+0x7b4>
 8004ee4:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004ee8:	f300 83a0 	bgt.w	800562c <RI_GetReg+0xa24>
 8004eec:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004ef0:	f000 8254 	beq.w	800539c <RI_GetReg+0x794>
 8004ef4:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004ef8:	f300 8398 	bgt.w	800562c <RI_GetReg+0xa24>
 8004efc:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004f00:	f000 823c 	beq.w	800537c <RI_GetReg+0x774>
 8004f04:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004f08:	f300 8390 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f0c:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004f10:	f000 8224 	beq.w	800535c <RI_GetReg+0x754>
 8004f14:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004f18:	f300 8388 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f1c:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004f20:	f000 820e 	beq.w	8005340 <RI_GetReg+0x738>
 8004f24:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004f28:	f300 8380 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f2c:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8004f30:	f000 81f8 	beq.w	8005324 <RI_GetReg+0x71c>
 8004f34:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8004f38:	f300 8378 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f3c:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8004f40:	f000 81e4 	beq.w	800530c <RI_GetReg+0x704>
 8004f44:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8004f48:	f300 8370 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f4c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8004f50:	f000 81d0 	beq.w	80052f4 <RI_GetReg+0x6ec>
 8004f54:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8004f58:	f300 8368 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f5c:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8004f60:	f000 81bc 	beq.w	80052dc <RI_GetReg+0x6d4>
 8004f64:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8004f68:	f300 8360 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f6c:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8004f70:	f000 81a8 	beq.w	80052c4 <RI_GetReg+0x6bc>
 8004f74:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8004f78:	f300 8358 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f7c:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8004f80:	f000 8194 	beq.w	80052ac <RI_GetReg+0x6a4>
 8004f84:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8004f88:	f300 8350 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f8c:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8004f90:	f000 8180 	beq.w	8005294 <RI_GetReg+0x68c>
 8004f94:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8004f98:	f300 8348 	bgt.w	800562c <RI_GetReg+0xa24>
 8004f9c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004fa0:	f000 816c 	beq.w	800527c <RI_GetReg+0x674>
 8004fa4:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004fa8:	f300 8340 	bgt.w	800562c <RI_GetReg+0xa24>
 8004fac:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8004fb0:	f000 8158 	beq.w	8005264 <RI_GetReg+0x65c>
 8004fb4:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8004fb8:	f300 8338 	bgt.w	800562c <RI_GetReg+0xa24>
 8004fbc:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004fc0:	f000 8144 	beq.w	800524c <RI_GetReg+0x644>
 8004fc4:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004fc8:	f300 8330 	bgt.w	800562c <RI_GetReg+0xa24>
 8004fcc:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004fd0:	f000 8130 	beq.w	8005234 <RI_GetReg+0x62c>
 8004fd4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004fd8:	f300 8328 	bgt.w	800562c <RI_GetReg+0xa24>
 8004fdc:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004fe0:	f000 811c 	beq.w	800521c <RI_GetReg+0x614>
 8004fe4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004fe8:	f300 8320 	bgt.w	800562c <RI_GetReg+0xa24>
 8004fec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ff0:	f000 8108 	beq.w	8005204 <RI_GetReg+0x5fc>
 8004ff4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ff8:	f300 8318 	bgt.w	800562c <RI_GetReg+0xa24>
 8004ffc:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8005000:	f000 80f2 	beq.w	80051e8 <RI_GetReg+0x5e0>
 8005004:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8005008:	f300 8310 	bgt.w	800562c <RI_GetReg+0xa24>
 800500c:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8005010:	f000 80da 	beq.w	80051c8 <RI_GetReg+0x5c0>
 8005014:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8005018:	f300 8308 	bgt.w	800562c <RI_GetReg+0xa24>
 800501c:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8005020:	f000 8219 	beq.w	8005456 <RI_GetReg+0x84e>
 8005024:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8005028:	f300 8300 	bgt.w	800562c <RI_GetReg+0xa24>
 800502c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005030:	f000 8202 	beq.w	8005438 <RI_GetReg+0x830>
 8005034:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005038:	f300 82f8 	bgt.w	800562c <RI_GetReg+0xa24>
 800503c:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8005040:	f000 81e8 	beq.w	8005414 <RI_GetReg+0x80c>
 8005044:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8005048:	f300 82f0 	bgt.w	800562c <RI_GetReg+0xa24>
 800504c:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8005050:	f000 81c4 	beq.w	80053dc <RI_GetReg+0x7d4>
 8005054:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8005058:	f300 82e8 	bgt.w	800562c <RI_GetReg+0xa24>
 800505c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8005060:	f000 80a4 	beq.w	80051ac <RI_GetReg+0x5a4>
 8005064:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8005068:	f300 82e0 	bgt.w	800562c <RI_GetReg+0xa24>
 800506c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8005070:	f000 808e 	beq.w	8005190 <RI_GetReg+0x588>
 8005074:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8005078:	f300 82d8 	bgt.w	800562c <RI_GetReg+0xa24>
 800507c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8005080:	d078      	beq.n	8005174 <RI_GetReg+0x56c>
 8005082:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8005086:	f300 82d1 	bgt.w	800562c <RI_GetReg+0xa24>
 800508a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800508e:	d063      	beq.n	8005158 <RI_GetReg+0x550>
 8005090:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005094:	f300 82ca 	bgt.w	800562c <RI_GetReg+0xa24>
 8005098:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800509c:	d04e      	beq.n	800513c <RI_GetReg+0x534>
 800509e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80050a2:	f300 82c3 	bgt.w	800562c <RI_GetReg+0xa24>
 80050a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050aa:	d039      	beq.n	8005120 <RI_GetReg+0x518>
 80050ac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050b0:	f300 82bc 	bgt.w	800562c <RI_GetReg+0xa24>
 80050b4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80050b8:	d024      	beq.n	8005104 <RI_GetReg+0x4fc>
 80050ba:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80050be:	f300 82b5 	bgt.w	800562c <RI_GetReg+0xa24>
 80050c2:	2b90      	cmp	r3, #144	; 0x90
 80050c4:	d002      	beq.n	80050cc <RI_GetReg+0x4c4>
 80050c6:	2bd0      	cmp	r3, #208	; 0xd0
 80050c8:	d00e      	beq.n	80050e8 <RI_GetReg+0x4e0>
 80050ca:	e2af      	b.n	800562c <RI_GetReg+0xa24>
          {
            case MC_REG_SPEED_KP:
            {
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80050cc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80050d0:	4acb      	ldr	r2, [pc, #812]	; (8005400 <RI_GetReg+0x7f8>)
 80050d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 f8f7 	bl	800a2ca <PID_GetKP>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050e4:	801a      	strh	r2, [r3, #0]
              break;
 80050e6:	e2a6      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KI:
            {
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80050e8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80050ec:	4ac4      	ldr	r2, [pc, #784]	; (8005400 <RI_GetReg+0x7f8>)
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f005 f8f6 	bl	800a2e4 <PID_GetKI>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005100:	801a      	strh	r2, [r3, #0]
              break;
 8005102:	e298      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KD:
            {
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8005104:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005108:	4abd      	ldr	r2, [pc, #756]	; (8005400 <RI_GetReg+0x7f8>)
 800510a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510e:	4618      	mov	r0, r3
 8005110:	f005 f98e 	bl	800a430 <PID_GetKD>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800511c:	801a      	strh	r2, [r3, #0]
              break;
 800511e:	e28a      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KP:
            {
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8005120:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005124:	4ab7      	ldr	r2, [pc, #732]	; (8005404 <RI_GetReg+0x7fc>)
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	4618      	mov	r0, r3
 800512c:	f005 f8cd 	bl	800a2ca <PID_GetKP>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005138:	801a      	strh	r2, [r3, #0]
              break;
 800513a:	e27c      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KI:
            {
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800513c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005140:	4ab0      	ldr	r2, [pc, #704]	; (8005404 <RI_GetReg+0x7fc>)
 8005142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005146:	4618      	mov	r0, r3
 8005148:	f005 f8cc 	bl	800a2e4 <PID_GetKI>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005154:	801a      	strh	r2, [r3, #0]
              break;
 8005156:	e26e      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KD:
            {
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8005158:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800515c:	4aa9      	ldr	r2, [pc, #676]	; (8005404 <RI_GetReg+0x7fc>)
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	4618      	mov	r0, r3
 8005164:	f005 f964 	bl	800a430 <PID_GetKD>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005170:	801a      	strh	r2, [r3, #0]
              break;
 8005172:	e260      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KP:
            {
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8005174:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005178:	4aa3      	ldr	r2, [pc, #652]	; (8005408 <RI_GetReg+0x800>)
 800517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517e:	4618      	mov	r0, r3
 8005180:	f005 f8a3 	bl	800a2ca <PID_GetKP>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518c:	801a      	strh	r2, [r3, #0]
              break;
 800518e:	e252      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KI:
            {
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8005190:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005194:	4a9c      	ldr	r2, [pc, #624]	; (8005408 <RI_GetReg+0x800>)
 8005196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519a:	4618      	mov	r0, r3
 800519c:	f005 f8a2 	bl	800a2e4 <PID_GetKI>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a8:	801a      	strh	r2, [r3, #0]
              break;
 80051aa:	e244      	b.n	8005636 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KD:
            {
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80051ac:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051b0:	4a95      	ldr	r2, [pc, #596]	; (8005408 <RI_GetReg+0x800>)
 80051b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 f93a 	bl	800a430 <PID_GetKD>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c4:	801a      	strh	r2, [r3, #0]
              break;
 80051c6:	e236      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_BUS_VOLTAGE:
            {
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80051c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	33d8      	adds	r3, #216	; 0xd8
 80051d0:	443b      	add	r3, r7
 80051d2:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 f826 	bl	8009228 <VBS_GetAvBusVoltage_V>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	801a      	strh	r2, [r3, #0]
              break;
 80051e6:	e226      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_HEATS_TEMP:
            {
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80051e8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051ec:	4a87      	ldr	r2, [pc, #540]	; (800540c <RI_GetReg+0x804>)
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f004 ffff 	bl	800a1f6 <NTC_GetAvTemp_C>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005200:	801a      	strh	r2, [r3, #0]
              break;
 8005202:	e218      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_A:
            {
              *regdata16 = MCI_GetIab(pMCIN).a;
 8005204:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005208:	f7fd fa56 	bl	80026b8 <MCI_GetIab>
 800520c:	4603      	mov	r3, r0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005218:	801a      	strh	r2, [r3, #0]
              break;
 800521a:	e20c      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_B:
            {
              *regdata16 = MCI_GetIab(pMCIN).b;
 800521c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005220:	f7fd fa4a 	bl	80026b8 <MCI_GetIab>
 8005224:	4603      	mov	r3, r0
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
 8005228:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800522c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005230:	801a      	strh	r2, [r3, #0]
              break;
 8005232:	e200      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_ALPHA_MEAS:
            {
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8005234:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005238:	f7fd fa55 	bl	80026e6 <MCI_GetIalphabeta>
 800523c:	4603      	mov	r3, r0
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005248:	801a      	strh	r2, [r3, #0]
              break;
 800524a:	e1f4      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_BETA_MEAS:
            {
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800524c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005250:	f7fd fa49 	bl	80026e6 <MCI_GetIalphabeta>
 8005254:	4603      	mov	r3, r0
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
 8005258:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800525c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005260:	801a      	strh	r2, [r3, #0]
              break;
 8005262:	e1e8      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_MEAS:
            {
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8005264:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005268:	f7fd fa55 	bl	8002716 <MCI_GetIqd>
 800526c:	4603      	mov	r3, r0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8005274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005278:	801a      	strh	r2, [r3, #0]
              break;
 800527a:	e1dc      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_MEAS:
            {
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800527c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005280:	f7fd fa49 	bl	8002716 <MCI_GetIqd>
 8005284:	4603      	mov	r3, r0
 8005286:	643b      	str	r3, [r7, #64]	; 0x40
 8005288:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800528c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005290:	801a      	strh	r2, [r3, #0]
              break;
 8005292:	e1d0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_REF:
            {
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8005294:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005298:	f7fd fa55 	bl	8002746 <MCI_GetIqdref>
 800529c:	4603      	mov	r3, r0
 800529e:	647b      	str	r3, [r7, #68]	; 0x44
 80052a0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80052a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a8:	801a      	strh	r2, [r3, #0]
              break;
 80052aa:	e1c4      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_REF:
            {
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80052ac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052b0:	f7fd fa49 	bl	8002746 <MCI_GetIqdref>
 80052b4:	4603      	mov	r3, r0
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b8:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80052bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c0:	801a      	strh	r2, [r3, #0]
              break;
 80052c2:	e1b8      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_V_Q:
            {
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80052c4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052c8:	f7fd fa55 	bl	8002776 <MCI_GetVqd>
 80052cc:	4603      	mov	r3, r0
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80052d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d8:	801a      	strh	r2, [r3, #0]
              break;
 80052da:	e1ac      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_D:
            {
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80052dc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052e0:	f7fd fa49 	bl	8002776 <MCI_GetVqd>
 80052e4:	4603      	mov	r3, r0
 80052e6:	653b      	str	r3, [r7, #80]	; 0x50
 80052e8:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80052ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f0:	801a      	strh	r2, [r3, #0]
              break;
 80052f2:	e1a0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_ALPHA:
            {
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80052f4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052f8:	f7fd fa55 	bl	80027a6 <MCI_GetValphabeta>
 80052fc:	4603      	mov	r3, r0
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005300:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8005304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005308:	801a      	strh	r2, [r3, #0]
              break;
 800530a:	e194      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_BETA:
            {
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800530c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005310:	f7fd fa49 	bl	80027a6 <MCI_GetValphabeta>
 8005314:	4603      	mov	r3, r0
 8005316:	65bb      	str	r3, [r7, #88]	; 0x58
 8005318:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800531c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005320:	801a      	strh	r2, [r3, #0]
              break;
 8005322:	e188      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_EL_ANGLE:
            {
              //cstat !MISRAC2012-Rule-11.3
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8005324:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005328:	4a39      	ldr	r2, [pc, #228]	; (8005410 <RI_GetReg+0x808>)
 800532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532e:	4618      	mov	r0, r3
 8005330:	f005 ffed 	bl	800b30e <SPD_GetElAngle>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800533c:	801a      	strh	r2, [r3, #0]
              break;
 800533e:	e17a      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_ROT_SPEED:
            {
              //cstat !MISRAC2012-Rule-11.3
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8005340:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005344:	4a32      	ldr	r2, [pc, #200]	; (8005410 <RI_GetReg+0x808>)
 8005346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534a:	4618      	mov	r0, r3
 800534c:	f006 f87e 	bl	800b44c <SPD_GetS16Speed>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005358:	801a      	strh	r2, [r3, #0]
              break;
 800535a:	e16c      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_I_ALPHA:
            {
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800535c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005360:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <RI_GetReg+0x808>)
 8005362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005366:	4618      	mov	r0, r3
 8005368:	f006 ff04 	bl	800c174 <STO_PLL_GetEstimatedCurrent>
 800536c:	4603      	mov	r3, r0
 800536e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005370:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005378:	801a      	strh	r2, [r3, #0]
              break;
 800537a:	e15c      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_I_BETA:
            {
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 800537c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005380:	4a23      	ldr	r2, [pc, #140]	; (8005410 <RI_GetReg+0x808>)
 8005382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005386:	4618      	mov	r0, r3
 8005388:	f006 fef4 	bl	800c174 <STO_PLL_GetEstimatedCurrent>
 800538c:	4603      	mov	r3, r0
 800538e:	663b      	str	r3, [r7, #96]	; 0x60
 8005390:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8005394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005398:	801a      	strh	r2, [r3, #0]
              break;
 800539a:	e14c      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_BEMF_ALPHA:
            {
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800539c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <RI_GetReg+0x808>)
 80053a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f006 fec9 	bl	800c13e <STO_PLL_GetEstimatedBemf>
 80053ac:	4603      	mov	r3, r0
 80053ae:	667b      	str	r3, [r7, #100]	; 0x64
 80053b0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80053b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b8:	801a      	strh	r2, [r3, #0]
              break;
 80053ba:	e13c      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_BEMF_BETA:
            {
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80053bc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <RI_GetReg+0x808>)
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 feb9 	bl	800c13e <STO_PLL_GetEstimatedBemf>
 80053cc:	4603      	mov	r3, r0
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80053d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d8:	801a      	strh	r2, [r3, #0]
              break;
 80053da:	e12c      	b.n	8005636 <RI_GetReg+0xa2e>

            case MC_REG_STOPLL_C1:
            {
              int16_t hC1;
              int16_t hC2;
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80053dc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80053e0:	4a0b      	ldr	r2, [pc, #44]	; (8005410 <RI_GetReg+0x808>)
 80053e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80053ea:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80053ee:	4618      	mov	r0, r3
 80053f0:	f006 fee3 	bl	800c1ba <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80053f4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80053f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053fc:	801a      	strh	r2, [r3, #0]
              break;
 80053fe:	e11a      	b.n	8005636 <RI_GetReg+0xa2e>
 8005400:	200005b4 	.word	0x200005b4
 8005404:	200004c4 	.word	0x200004c4
 8005408:	200004c8 	.word	0x200004c8
 800540c:	200004c0 	.word	0x200004c0
 8005410:	200005b0 	.word	0x200005b0

            case MC_REG_STOPLL_C2:
            {
              int16_t hC1;
              int16_t hC2;
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8005414:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005418:	4ac5      	ldr	r2, [pc, #788]	; (8005730 <RI_GetReg+0xb28>)
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	f107 0220 	add.w	r2, r7, #32
 8005422:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8005426:	4618      	mov	r0, r3
 8005428:	f006 fec7 	bl	800c1ba <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800542c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005434:	801a      	strh	r2, [r3, #0]
              break;
 8005436:	e0fe      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KI:
            {
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8005438:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800543c:	4abc      	ldr	r2, [pc, #752]	; (8005730 <RI_GetReg+0xb28>)
 800543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005442:	3334      	adds	r3, #52	; 0x34
 8005444:	4618      	mov	r0, r3
 8005446:	f004 ff4d 	bl	800a2e4 <PID_GetKI>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005452:	801a      	strh	r2, [r3, #0]
              break;
 8005454:	e0ef      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KP:
            {
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8005456:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800545a:	4ab5      	ldr	r2, [pc, #724]	; (8005730 <RI_GetReg+0xb28>)
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	3334      	adds	r3, #52	; 0x34
 8005462:	4618      	mov	r0, r3
 8005464:	f004 ff31 	bl	800a2ca <PID_GetKP>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005470:	801a      	strh	r2, [r3, #0]
              break;
 8005472:	e0e0      	b.n	8005636 <RI_GetReg+0xa2e>
            case MC_REG_DAC_USER2:
              break;

            case MC_REG_FF_VQ:
            {
              *regdata16 = FF_GetVqdff(pFF[motorID]).q;
 8005474:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005478:	4aae      	ldr	r2, [pc, #696]	; (8005734 <RI_GetReg+0xb2c>)
 800547a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547e:	4618      	mov	r0, r3
 8005480:	f004 f92a 	bl	80096d8 <FF_GetVqdff>
 8005484:	4603      	mov	r3, r0
 8005486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005488:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800548c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005490:	801a      	strh	r2, [r3, #0]
              break;
 8005492:	e0d0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VD:
            {
              *regdata16 = FF_GetVqdff(pFF[motorID]).d;
 8005494:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005498:	4aa6      	ldr	r2, [pc, #664]	; (8005734 <RI_GetReg+0xb2c>)
 800549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 f91a 	bl	80096d8 <FF_GetVqdff>
 80054a4:	4603      	mov	r3, r0
 80054a6:	673b      	str	r3, [r7, #112]	; 0x70
 80054a8:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 80054ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054b0:	801a      	strh	r2, [r3, #0]
              break;
 80054b2:	e0c0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VQ_PIOUT:
            {
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).q;
 80054b4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80054b8:	4a9e      	ldr	r2, [pc, #632]	; (8005734 <RI_GetReg+0xb2c>)
 80054ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054be:	4618      	mov	r0, r3
 80054c0:	f004 f91e 	bl	8009700 <FF_GetVqdAvPIout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	677b      	str	r3, [r7, #116]	; 0x74
 80054c8:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 80054cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d0:	801a      	strh	r2, [r3, #0]
              break;
 80054d2:	e0b0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VD_PIOUT:
            {
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).d;
 80054d4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80054d8:	4a96      	ldr	r2, [pc, #600]	; (8005734 <RI_GetReg+0xb2c>)
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 f90e 	bl	8009700 <FF_GetVqdAvPIout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054e8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 80054ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f0:	801a      	strh	r2, [r3, #0]
              break;
 80054f2:	e0a0      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KP_DIV:
            {
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80054f4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80054f8:	4a8f      	ldr	r2, [pc, #572]	; (8005738 <RI_GetReg+0xb30>)
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 ff0b 	bl	800a31a <PID_GetKPDivisorPOW2>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800550c:	801a      	strh	r2, [r3, #0]
              break;
 800550e:	e092      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KI_DIV:
            {
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8005510:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005514:	4a88      	ldr	r2, [pc, #544]	; (8005738 <RI_GetReg+0xb30>)
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	4618      	mov	r0, r3
 800551c:	f004 ff2b 	bl	800a376 <PID_GetKIDivisorPOW2>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	801a      	strh	r2, [r3, #0]
              break;
 800552a:	e084      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 800552c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005530:	4a81      	ldr	r2, [pc, #516]	; (8005738 <RI_GetReg+0xb30>)
 8005532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005536:	4618      	mov	r0, r3
 8005538:	f004 ff87 	bl	800a44a <PID_GetKDDivisorPOW2>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005544:	801a      	strh	r2, [r3, #0]
              break;
 8005546:	e076      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            case MC_REG_I_D_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8005548:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800554c:	4a7b      	ldr	r2, [pc, #492]	; (800573c <RI_GetReg+0xb34>)
 800554e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fee1 	bl	800a31a <PID_GetKPDivisorPOW2>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005560:	801a      	strh	r2, [r3, #0]
              break;
 8005562:	e068      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8005564:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005568:	4a74      	ldr	r2, [pc, #464]	; (800573c <RI_GetReg+0xb34>)
 800556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556e:	4618      	mov	r0, r3
 8005570:	f004 ff01 	bl	800a376 <PID_GetKIDivisorPOW2>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800557c:	801a      	strh	r2, [r3, #0]
              break;
 800557e:	e05a      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8005580:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005584:	4a6d      	ldr	r2, [pc, #436]	; (800573c <RI_GetReg+0xb34>)
 8005586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558a:	4618      	mov	r0, r3
 800558c:	f004 ff5d 	bl	800a44a <PID_GetKDDivisorPOW2>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005598:	801a      	strh	r2, [r3, #0]
              break;
 800559a:	e04c      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800559c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055a0:	4a67      	ldr	r2, [pc, #412]	; (8005740 <RI_GetReg+0xb38>)
 80055a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 feb7 	bl	800a31a <PID_GetKPDivisorPOW2>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b4:	801a      	strh	r2, [r3, #0]
              break;
 80055b6:	e03e      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80055b8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055bc:	4a60      	ldr	r2, [pc, #384]	; (8005740 <RI_GetReg+0xb38>)
 80055be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f004 fed7 	bl	800a376 <PID_GetKIDivisorPOW2>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055d0:	801a      	strh	r2, [r3, #0]
              break;
 80055d2:	e030      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80055d4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055d8:	4a59      	ldr	r2, [pc, #356]	; (8005740 <RI_GetReg+0xb38>)
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 ff33 	bl	800a44a <PID_GetKDDivisorPOW2>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055ec:	801a      	strh	r2, [r3, #0]
              break;
 80055ee:	e022      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80055f0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055f4:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <RI_GetReg+0xb28>)
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	3334      	adds	r3, #52	; 0x34
 80055fc:	4618      	mov	r0, r3
 80055fe:	f004 feba 	bl	800a376 <PID_GetKIDivisorPOW2>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800560a:	801a      	strh	r2, [r3, #0]
              break;
 800560c:	e013      	b.n	8005636 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800560e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005612:	4a47      	ldr	r2, [pc, #284]	; (8005730 <RI_GetReg+0xb28>)
 8005614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005618:	3334      	adds	r3, #52	; 0x34
 800561a:	4618      	mov	r0, r3
 800561c:	f004 fe7d 	bl	800a31a <PID_GetKPDivisorPOW2>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005628:	801a      	strh	r2, [r3, #0]
              break;
 800562a:	e004      	b.n	8005636 <RI_GetReg+0xa2e>
            }
            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 800562c:	2305      	movs	r3, #5
 800562e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 8005632:	e000      	b.n	8005636 <RI_GetReg+0xa2e>
              break;
 8005634:	bf00      	nop
            }
          }
          *size = 2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 800563c:	e2b8      	b.n	8005bb0 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800563e:	2308      	movs	r3, #8
 8005640:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8005644:	e2b4      	b.n	8005bb0 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_32BIT:
      {
        uint32_t *regdataU32 = (uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t *regdata32 = (int32_t *)data; //cstat !MISRAC2012-Rule-11.3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if (freeSpace >= 4U)
 8005652:	89bb      	ldrh	r3, [r7, #12]
 8005654:	2b03      	cmp	r3, #3
 8005656:	f240 80b6 	bls.w	80057c6 <RI_GetReg+0xbbe>
        {
          switch (regID)
 800565a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800565e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005662:	4293      	cmp	r3, r2
 8005664:	f000 8099 	beq.w	800579a <RI_GetReg+0xb92>
 8005668:	f641 3258 	movw	r2, #7000	; 0x1b58
 800566c:	4293      	cmp	r3, r2
 800566e:	f300 80a2 	bgt.w	80057b6 <RI_GetReg+0xbae>
 8005672:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005676:	f000 8086 	beq.w	8005786 <RI_GetReg+0xb7e>
 800567a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800567e:	f300 809a 	bgt.w	80057b6 <RI_GetReg+0xbae>
 8005682:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005686:	d074      	beq.n	8005772 <RI_GetReg+0xb6a>
 8005688:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800568c:	f300 8093 	bgt.w	80057b6 <RI_GetReg+0xbae>
 8005690:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8005694:	d063      	beq.n	800575e <RI_GetReg+0xb56>
 8005696:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800569a:	f300 808c 	bgt.w	80057b6 <RI_GetReg+0xbae>
 800569e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80056a2:	d04f      	beq.n	8005744 <RI_GetReg+0xb3c>
 80056a4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80056a8:	f300 8085 	bgt.w	80057b6 <RI_GetReg+0xbae>
 80056ac:	2bd8      	cmp	r3, #216	; 0xd8
 80056ae:	d032      	beq.n	8005716 <RI_GetReg+0xb0e>
 80056b0:	2bd8      	cmp	r3, #216	; 0xd8
 80056b2:	f300 8080 	bgt.w	80057b6 <RI_GetReg+0xbae>
 80056b6:	2b98      	cmp	r3, #152	; 0x98
 80056b8:	d01e      	beq.n	80056f8 <RI_GetReg+0xaf0>
 80056ba:	2b98      	cmp	r3, #152	; 0x98
 80056bc:	dc7b      	bgt.n	80057b6 <RI_GetReg+0xbae>
 80056be:	2b18      	cmp	r3, #24
 80056c0:	d002      	beq.n	80056c8 <RI_GetReg+0xac0>
 80056c2:	2b58      	cmp	r3, #88	; 0x58
 80056c4:	d009      	beq.n	80056da <RI_GetReg+0xad2>
 80056c6:	e076      	b.n	80057b6 <RI_GetReg+0xbae>
          {

            case MC_REG_FAULTS_FLAGS:
            {
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80056c8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80056cc:	f7fc ff43 	bl	8002556 <MCI_GetFaultState>
 80056d0:	4602      	mov	r2, r0
 80056d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056d6:	601a      	str	r2, [r3, #0]
              break;
 80056d8:	e071      	b.n	80057be <RI_GetReg+0xbb6>
            }

            case MC_REG_SPEED_MEAS:
            {
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80056da:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80056de:	f7fc ffc8 	bl	8002672 <MCI_GetAvrgMecSpeedUnit>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f4:	601a      	str	r2, [r3, #0]
              break;
 80056f6:	e062      	b.n	80057be <RI_GetReg+0xbb6>
            }

            case MC_REG_SPEED_REF:
            {
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80056f8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80056fc:	f7fc ffce 	bl	800269c <MCI_GetMecSpeedRefUnit>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	461a      	mov	r2, r3
 800570e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005712:	601a      	str	r2, [r3, #0]
              break;
 8005714:	e053      	b.n	80057be <RI_GetReg+0xbb6>
            }
            case MC_REG_STOPLL_EST_BEMF:
            {
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8005716:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <RI_GetReg+0xb28>)
 800571c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005720:	4618      	mov	r0, r3
 8005722:	f006 fd93 	bl	800c24c <STO_PLL_GetEstimatedBemfLevel>
 8005726:	4602      	mov	r2, r0
 8005728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800572c:	601a      	str	r2, [r3, #0]
              break;
 800572e:	e046      	b.n	80057be <RI_GetReg+0xbb6>
 8005730:	200005b0 	.word	0x200005b0
 8005734:	200004d0 	.word	0x200004d0
 8005738:	200005b4 	.word	0x200005b4
 800573c:	200004c8 	.word	0x200004c8
 8005740:	200004c4 	.word	0x200004c4
            }

            case MC_REG_STOPLL_OBS_BEMF:
            {
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8005744:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005748:	4ab8      	ldr	r2, [pc, #736]	; (8005a2c <RI_GetReg+0xe24>)
 800574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574e:	4618      	mov	r0, r3
 8005750:	f006 fd89 	bl	800c266 <STO_PLL_GetObservedBemfLevel>
 8005754:	4602      	mov	r2, r0
 8005756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800575a:	601a      	str	r2, [r3, #0]
              break;
 800575c:	e02f      	b.n	80057be <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_1Q:
            {
              *regdata32 = pFF[motorID]->wConstant_1Q;
 800575e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005762:	4ab3      	ldr	r2, [pc, #716]	; (8005a30 <RI_GetReg+0xe28>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576e:	601a      	str	r2, [r3, #0]
              break;
 8005770:	e025      	b.n	80057be <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_1D:
            {
              *regdata32 = pFF[motorID]->wConstant_1D;
 8005772:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005776:	4aae      	ldr	r2, [pc, #696]	; (8005a30 <RI_GetReg+0xe28>)
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005782:	601a      	str	r2, [r3, #0]
              break;
 8005784:	e01b      	b.n	80057be <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_2:
            {
              *regdata32 = pFF[motorID]->wConstant_2;
 8005786:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800578a:	4aa9      	ldr	r2, [pc, #676]	; (8005a30 <RI_GetReg+0xe28>)
 800578c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005796:	601a      	str	r2, [r3, #0]
              break;
 8005798:	e011      	b.n	80057be <RI_GetReg+0xbb6>
            }
            case MC_REG_MOTOR_POWER:
            {
              FloatToU32 ReadVal;
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800579a:	4ba6      	ldr	r3, [pc, #664]	; (8005a34 <RI_GetReg+0xe2c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f004 ff56 	bl	800a650 <PQD_GetAvrgElMotorPowerW>
 80057a4:	eef0 7a40 	vmov.f32	s15, s0
 80057a8:	edc7 7a07 	vstr	s15, [r7, #28]
              *regdataU32 = ReadVal.U32_Val;
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057b2:	601a      	str	r2, [r3, #0]
              break;
 80057b4:	e003      	b.n	80057be <RI_GetReg+0xbb6>
            }
            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 80057b6:	2305      	movs	r3, #5
 80057b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 80057bc:	bf00      	nop
            }
          }
          *size = 4;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2204      	movs	r2, #4
 80057c2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 80057c4:	e1f4      	b.n	8005bb0 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80057c6:	2308      	movs	r3, #8
 80057c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 80057cc:	e1f0      	b.n	8005bb0 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_STRING:
      {
        char_t *charData = (char_t *)data;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        switch (regID)
 80057d4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80057d8:	2be0      	cmp	r3, #224	; 0xe0
 80057da:	d032      	beq.n	8005842 <RI_GetReg+0xc3a>
 80057dc:	2be0      	cmp	r3, #224	; 0xe0
 80057de:	dc42      	bgt.n	8005866 <RI_GetReg+0xc5e>
 80057e0:	2ba0      	cmp	r3, #160	; 0xa0
 80057e2:	d01e      	beq.n	8005822 <RI_GetReg+0xc1a>
 80057e4:	2ba0      	cmp	r3, #160	; 0xa0
 80057e6:	dc3e      	bgt.n	8005866 <RI_GetReg+0xc5e>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d002      	beq.n	80057f2 <RI_GetReg+0xbea>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d00c      	beq.n	800580a <RI_GetReg+0xc02>
 80057f0:	e039      	b.n	8005866 <RI_GetReg+0xc5e>
        {
          case MC_REG_FW_NAME:
            retVal = RI_MovString (FIRMWARE_NAME ,charData, size, freeSpace);
 80057f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80057fc:	488e      	ldr	r0, [pc, #568]	; (8005a38 <RI_GetReg+0xe30>)
 80057fe:	f000 f9df 	bl	8005bc0 <RI_MovString>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005808:	e034      	b.n	8005874 <RI_GetReg+0xc6c>

          case MC_REG_CTRL_STAGE_NAME:
          {
            retVal = RI_MovString (CTL_BOARD ,charData, size, freeSpace);
 800580a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005814:	4889      	ldr	r0, [pc, #548]	; (8005a3c <RI_GetReg+0xe34>)
 8005816:	f000 f9d3 	bl	8005bc0 <RI_MovString>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005820:	e028      	b.n	8005874 <RI_GetReg+0xc6c>
          }

          case MC_REG_PWR_STAGE_NAME:
          {
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8005822:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005826:	4a86      	ldr	r2, [pc, #536]	; (8005a40 <RI_GetReg+0xe38>)
 8005828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800582c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005836:	f000 f9c3 	bl	8005bc0 <RI_MovString>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005840:	e018      	b.n	8005874 <RI_GetReg+0xc6c>
          }

          case MC_REG_MOTOR_NAME:
          {
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8005842:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005846:	4a7f      	ldr	r2, [pc, #508]	; (8005a44 <RI_GetReg+0xe3c>)
 8005848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005850:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800585a:	f000 f9b1 	bl	8005bc0 <RI_MovString>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005864:	e006      	b.n	8005874 <RI_GetReg+0xc6c>
          }
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005866:	2305      	movs	r3, #5
 8005868:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            *size= 0 ; /* */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	801a      	strh	r2, [r3, #0]
            break;
 8005872:	bf00      	nop
          }
        }
        break;
 8005874:	e19c      	b.n	8005bb0 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_RAW:
      {
        /* First 2 bytes of the answer is reserved to the size */
        uint16_t *rawSize = (uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        uint8_t * rawData = data;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        rawData++;
 8005882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005886:	3301      	adds	r3, #1
 8005888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        rawData++;
 800588c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005890:	3301      	adds	r3, #1
 8005892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        switch (regID)
 8005896:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800589a:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 800589e:	f000 8150 	beq.w	8005b42 <RI_GetReg+0xf3a>
 80058a2:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80058a6:	f300 8173 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058aa:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 80058ae:	f000 80f1 	beq.w	8005a94 <RI_GetReg+0xe8c>
 80058b2:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 80058b6:	f300 816b 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058ba:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80058be:	f000 80c9 	beq.w	8005a54 <RI_GetReg+0xe4c>
 80058c2:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80058c6:	f300 8163 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058ca:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80058ce:	f000 8087 	beq.w	80059e0 <RI_GetReg+0xdd8>
 80058d2:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80058d6:	f300 815b 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058da:	2be8      	cmp	r3, #232	; 0xe8
 80058dc:	d061      	beq.n	80059a2 <RI_GetReg+0xd9a>
 80058de:	2be8      	cmp	r3, #232	; 0xe8
 80058e0:	f300 8156 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058e4:	2ba8      	cmp	r3, #168	; 0xa8
 80058e6:	d040      	beq.n	800596a <RI_GetReg+0xd62>
 80058e8:	2ba8      	cmp	r3, #168	; 0xa8
 80058ea:	f300 8151 	bgt.w	8005b90 <RI_GetReg+0xf88>
 80058ee:	2b28      	cmp	r3, #40	; 0x28
 80058f0:	d002      	beq.n	80058f8 <RI_GetReg+0xcf0>
 80058f2:	2b68      	cmp	r3, #104	; 0x68
 80058f4:	d01a      	beq.n	800592c <RI_GetReg+0xd24>
 80058f6:	e14b      	b.n	8005b90 <RI_GetReg+0xf88>
        {
          case MC_REG_GLOBAL_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80058f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058fc:	220a      	movs	r2, #10
 80058fe:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800590c:	429a      	cmp	r2, r3
 800590e:	d903      	bls.n	8005918 <RI_GetReg+0xd10>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005910:	2308      	movs	r3, #8
 8005912:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            }
            else
            {
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
            }
            break;
 8005916:	e13f      	b.n	8005b98 <RI_GetReg+0xf90>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8005918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800591c:	4a4a      	ldr	r2, [pc, #296]	; (8005a48 <RI_GetReg+0xe40>)
 800591e:	6810      	ldr	r0, [r2, #0]
 8005920:	6851      	ldr	r1, [r2, #4]
 8005922:	6018      	str	r0, [r3, #0]
 8005924:	6059      	str	r1, [r3, #4]
 8005926:	8912      	ldrh	r2, [r2, #8]
 8005928:	811a      	strh	r2, [r3, #8]
            break;
 800592a:	e135      	b.n	8005b98 <RI_GetReg+0xf90>
          }

          case MC_REG_MOTOR_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800592c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005930:	223c      	movs	r2, #60	; 0x3c
 8005932:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005940:	429a      	cmp	r2, r3
 8005942:	d903      	bls.n	800594c <RI_GetReg+0xd44>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005944:	2308      	movs	r3, #8
 8005946:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            else
            {
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
            }
            break;
 800594a:	e125      	b.n	8005b98 <RI_GetReg+0xf90>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800594c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005950:	4a3c      	ldr	r2, [pc, #240]	; (8005a44 <RI_GetReg+0xe3c>)
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800595a:	223c      	movs	r2, #60	; 0x3c
 800595c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005960:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005964:	f008 fa74 	bl	800de50 <memcpy>
            break;
 8005968:	e116      	b.n	8005b98 <RI_GetReg+0xf90>
          }
          case MC_REG_APPLICATION_CONFIG:
          {
            *rawSize = sizeof(ApplicationConfig_reg_t);
 800596a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800596e:	220e      	movs	r2, #14
 8005970:	801a      	strh	r2, [r3, #0]
            if ((*rawSize) +2  > freeSpace)
 8005972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800597e:	429a      	cmp	r2, r3
 8005980:	db03      	blt.n	800598a <RI_GetReg+0xd82>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005982:	2308      	movs	r3, #8
 8005984:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            }
            else
            {
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
            }
            break;
 8005988:	e106      	b.n	8005b98 <RI_GetReg+0xf90>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 800598a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800598e:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <RI_GetReg+0xe44>)
 8005990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005994:	220e      	movs	r2, #14
 8005996:	4619      	mov	r1, r3
 8005998:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800599c:	f008 fa58 	bl	800de50 <memcpy>
            break;
 80059a0:	e0fa      	b.n	8005b98 <RI_GetReg+0xf90>
          }
          case MC_REG_FOCFW_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80059a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059a6:	220e      	movs	r2, #14
 80059a8:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80059aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d903      	bls.n	80059c2 <RI_GetReg+0xdba>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80059ba:	2308      	movs	r3, #8
 80059bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            else
            {
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
            }
            break;
 80059c0:	e0ea      	b.n	8005b98 <RI_GetReg+0xf90>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80059c2:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80059c6:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <RI_GetReg+0xe48>)
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80059d0:	220e      	movs	r2, #14
 80059d2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80059d6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80059da:	f008 fa39 	bl	800de50 <memcpy>
            break;
 80059de:	e0db      	b.n	8005b98 <RI_GetReg+0xf90>
          }
          case MC_REG_SPEED_RAMP:
          {
            int32_t *rpm = (int32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 80059e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint16_t *duration = (uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ec:	3304      	adds	r3, #4
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80059f2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80059f6:	f7fc fe09 	bl	800260c <MCI_GetLastRampFinalSpeed>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a0c:	601a      	str	r2, [r3, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8005a0e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005a12:	f7fc fe15 	bl	8002640 <MCI_GetLastRampFinalDuration>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1e:	801a      	strh	r2, [r3, #0]
            *rawSize = 6;
 8005a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a24:	2206      	movs	r2, #6
 8005a26:	801a      	strh	r2, [r3, #0]
            break;
 8005a28:	e0b6      	b.n	8005b98 <RI_GetReg+0xf90>
 8005a2a:	bf00      	nop
 8005a2c:	200005b0 	.word	0x200005b0
 8005a30:	200004d0 	.word	0x200004d0
 8005a34:	200004cc 	.word	0x200004cc
 8005a38:	0800dfdc 	.word	0x0800dfdc
 8005a3c:	0800dfbc 	.word	0x0800dfbc
 8005a40:	200004d4 	.word	0x200004d4
 8005a44:	200004dc 	.word	0x200004dc
 8005a48:	0800dff0 	.word	0x0800dff0
 8005a4c:	200004e0 	.word	0x200004e0
 8005a50:	200004d8 	.word	0x200004d8
          }
          case MC_REG_TORQUE_RAMP:
          {
            int16_t *torque = (int16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8005a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            uint16_t *duration = (uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8005a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a60:	3302      	adds	r3, #2
 8005a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

            *rawSize = 4;
 8005a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	801a      	strh	r2, [r3, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8005a6e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005a72:	f7fc fdd8 	bl	8002626 <MCI_GetLastRampFinalTorque>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a7e:	801a      	strh	r2, [r3, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8005a80:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005a84:	f7fc fddc 	bl	8002640 <MCI_GetLastRampFinalDuration>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a90:	801a      	strh	r2, [r3, #0]
            break;
 8005a92:	e081      	b.n	8005b98 <RI_GetReg+0xf90>
            uint16_t *finalTorque;
            uint16_t *durationms;
            RevUpCtrl_PhaseParams_t revUpPhase;
            uint8_t i;

            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8005a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a98:	2228      	movs	r2, #40	; 0x28
 8005a9a:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d903      	bls.n	8005ab4 <RI_GetReg+0xeac>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
                durationms  = (uint16_t *)&data[8U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
                *durationms  = revUpPhase.hDurationms;
              }
            }
            break;
 8005ab2:	e071      	b.n	8005b98 <RI_GetReg+0xf90>
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005aba:	e03d      	b.n	8005b38 <RI_GetReg+0xf30>
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8005abc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005ac0:	4a3e      	ldr	r2, [pc, #248]	; (8005bbc <RI_GetReg+0xfb4>)
 8005ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac6:	f107 0210 	add.w	r2, r7, #16
 8005aca:	f897 10d6 	ldrb.w	r1, [r7, #214]	; 0xd6
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f005 fa7e 	bl	800afd0 <RUC_GetPhase>
                rpm = (int32_t *) &data[2U + (i*8U)];  //cstat !MISRAC2012-Rule-11.3
 8005ad4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	3302      	adds	r3, #2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8005ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005af8:	601a      	str	r2, [r3, #0]
                finalTorque = (uint16_t *)&data[6U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
 8005afa:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	3306      	adds	r3, #6
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8005b0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b14:	801a      	strh	r2, [r3, #0]
                durationms  = (uint16_t *)&data[8U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
 8005b16:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                *durationms  = revUpPhase.hDurationms;
 8005b26:	8a3a      	ldrh	r2, [r7, #16]
 8005b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b2c:	801a      	strh	r2, [r3, #0]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8005b2e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005b32:	3301      	adds	r3, #1
 8005b34:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005b38:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d9bd      	bls.n	8005abc <RI_GetReg+0xeb4>
            break;
 8005b40:	e02a      	b.n	8005b98 <RI_GetReg+0xf90>
          }

          case MC_REG_CURRENT_REF:
          {
            uint16_t *iqref = (uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8005b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            uint16_t *idref = (uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8005b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b4e:	3302      	adds	r3, #2
 8005b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            *rawSize = 4;
 8005b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b58:	2204      	movs	r2, #4
 8005b5a:	801a      	strh	r2, [r3, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8005b5c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005b60:	f7fc fdf1 	bl	8002746 <MCI_GetIqdref>
 8005b64:	4603      	mov	r3, r0
 8005b66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b68:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b72:	801a      	strh	r2, [r3, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005b74:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005b78:	f7fc fde5 	bl	8002746 <MCI_GetIqdref>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b82:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b8c:	801a      	strh	r2, [r3, #0]
            break;
 8005b8e:	e003      	b.n	8005b98 <RI_GetReg+0xf90>
          case MC_REG_ASYNC_UARTA:
          case MC_REG_ASYNC_UARTB:
          case MC_REG_ASYNC_STLNK:
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005b90:	2305      	movs	r3, #5
 8005b92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005b96:	bf00      	nop
          }
        }

        /* Size of the answer is size of the data + 2 bytes containing data size*/
        *size = (*rawSize) + 2U;
 8005b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	801a      	strh	r2, [r3, #0]
        break;
 8005ba6:	e003      	b.n	8005bb0 <RI_GetReg+0xfa8>
      }

      default:
      {
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 8005ba8:	2307      	movs	r3, #7
 8005baa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8005bae:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8005bb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	37d8      	adds	r7, #216	; 0xd8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200005ac 	.word	0x200005ac

08005bc0 <RI_MovString>:
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	77fb      	strb	r3, [r7, #31]

  const char_t *tempsrcString = srcString;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	61bb      	str	r3, [r7, #24]
  char_t *tempdestString = destString;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	617b      	str	r3, [r7, #20]
  *size= 1U ; /* /0 is the min String size */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	801a      	strh	r2, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8005be0:	e010      	b.n	8005c04 <RI_MovString+0x44>
  {
    *tempdestString = *tempsrcString;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f993 2000 	ldrsb.w	r2, [r3]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	701a      	strb	r2, [r3, #0]
    tempdestString++;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
    tempsrcString++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61bb      	str	r3, [r7, #24]
    *size = *size + 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	801a      	strh	r2, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f993 3000 	ldrsb.w	r3, [r3]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <RI_MovString+0x5c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	dbe2      	blt.n	8005be2 <RI_MovString+0x22>
  }

  if (*tempsrcString != (char_t)0)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <RI_MovString+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
 8005c26:	2306      	movs	r3, #6
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e002      	b.n	8005c32 <RI_MovString+0x72>
  }
  else
  {
    *tempdestString = (int8_t)0;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
  }

  return (retVal);
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3724      	adds	r7, #36	; 0x24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <RI_GetIDSize>:
uint8_t RI_GetIDSize(uint16_t dataID)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	80fb      	strh	r3, [r7, #6]
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c52:	73bb      	strb	r3, [r7, #14]
  uint8_t result;
  switch (typeID)
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	2b18      	cmp	r3, #24
 8005c58:	d00c      	beq.n	8005c74 <RI_GetIDSize+0x34>
 8005c5a:	2b18      	cmp	r3, #24
 8005c5c:	dc0d      	bgt.n	8005c7a <RI_GetIDSize+0x3a>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d002      	beq.n	8005c68 <RI_GetIDSize+0x28>
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d003      	beq.n	8005c6e <RI_GetIDSize+0x2e>
 8005c66:	e008      	b.n	8005c7a <RI_GetIDSize+0x3a>
  {
    case TYPE_DATA_8BIT:
    {
      result = 1;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6c:	e008      	b.n	8005c80 <RI_GetIDSize+0x40>
    }

    case TYPE_DATA_16BIT:
    {
      result = 2;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	73fb      	strb	r3, [r7, #15]
      break;
 8005c72:	e005      	b.n	8005c80 <RI_GetIDSize+0x40>
    }

    case TYPE_DATA_32BIT:
    {
      result = 4;
 8005c74:	2304      	movs	r3, #4
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e002      	b.n	8005c80 <RI_GetIDSize+0x40>
    }

    default:
    {
      result=0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7e:	bf00      	nop
    }
  }

  return (result);
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <RI_GetPtrReg>:

__weak uint8_t RI_GetPtrReg(uint16_t dataID, void **dataPtr)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	80fb      	strh	r3, [r7, #6]
  uint8_t retVal = MCP_CMD_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }
  else
  {
#endif

    uint8_t vmotorID = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75bb      	strb	r3, [r7, #22]

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
 8005ca4:	7dbb      	ldrb	r3, [r7, #22]
 8005ca6:	015b      	lsls	r3, r3, #5
 8005ca8:	4a82      	ldr	r2, [pc, #520]	; (8005eb4 <RI_GetPtrReg+0x224>)
 8005caa:	4413      	add	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
    uint16_t regID = dataID & REG_MASK;
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	81fb      	strh	r3, [r7, #14]
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cbe:	737b      	strb	r3, [r7, #13]

    switch (typeID)
 8005cc0:	7b7b      	ldrb	r3, [r7, #13]
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	f040 80e8 	bne.w	8005e98 <RI_GetPtrReg+0x208>
    {
      case TYPE_DATA_16BIT:
      {
        switch (regID)
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
 8005cca:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8005cce:	f000 80d3 	beq.w	8005e78 <RI_GetPtrReg+0x1e8>
 8005cd2:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8005cd6:	f300 80d8 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005cda:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8005cde:	f000 80c2 	beq.w	8005e66 <RI_GetPtrReg+0x1d6>
 8005ce2:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8005ce6:	f300 80d0 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005cea:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8005cee:	f000 80a9 	beq.w	8005e44 <RI_GetPtrReg+0x1b4>
 8005cf2:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8005cf6:	f300 80c8 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005cfa:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005cfe:	f000 80aa 	beq.w	8005e56 <RI_GetPtrReg+0x1c6>
 8005d02:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005d06:	f300 80c0 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d0a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005d0e:	f000 8092 	beq.w	8005e36 <RI_GetPtrReg+0x1a6>
 8005d12:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005d16:	f300 80b8 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d1a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005d1e:	f000 8083 	beq.w	8005e28 <RI_GetPtrReg+0x198>
 8005d22:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005d26:	f300 80b0 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d2a:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005d2e:	d074      	beq.n	8005e1a <RI_GetPtrReg+0x18a>
 8005d30:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005d34:	f300 80a9 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d38:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005d3c:	d066      	beq.n	8005e0c <RI_GetPtrReg+0x17c>
 8005d3e:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005d42:	f300 80a2 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d46:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005d4a:	d058      	beq.n	8005dfe <RI_GetPtrReg+0x16e>
 8005d4c:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005d50:	f300 809b 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d54:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005d58:	d04a      	beq.n	8005df0 <RI_GetPtrReg+0x160>
 8005d5a:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005d5e:	f300 8094 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d62:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005d66:	d03c      	beq.n	8005de2 <RI_GetPtrReg+0x152>
 8005d68:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005d6c:	f300 808d 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d70:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005d74:	d02e      	beq.n	8005dd4 <RI_GetPtrReg+0x144>
 8005d76:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005d7a:	f300 8086 	bgt.w	8005e8a <RI_GetPtrReg+0x1fa>
 8005d7e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005d82:	d021      	beq.n	8005dc8 <RI_GetPtrReg+0x138>
 8005d84:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005d88:	dc7f      	bgt.n	8005e8a <RI_GetPtrReg+0x1fa>
 8005d8a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8005d8e:	d015      	beq.n	8005dbc <RI_GetPtrReg+0x12c>
 8005d90:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8005d94:	dc79      	bgt.n	8005e8a <RI_GetPtrReg+0x1fa>
 8005d96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d9a:	d003      	beq.n	8005da4 <RI_GetPtrReg+0x114>
 8005d9c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8005da0:	d006      	beq.n	8005db0 <RI_GetPtrReg+0x120>
 8005da2:	e072      	b.n	8005e8a <RI_GetPtrReg+0x1fa>
        {
          case MC_REG_I_A:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	461a      	mov	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
             break;
 8005dae:	e072      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_B:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	601a      	str	r2, [r3, #0]
            break;
 8005dba:	e06c      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_ALPHA_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
            break;
 8005dc6:	e066      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_BETA_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	1d9a      	adds	r2, r3, #6
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	601a      	str	r2, [r3, #0]
            break;
 8005dd2:	e060      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_Q_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f103 020c 	add.w	r2, r3, #12
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]
            break;
 8005de0:	e059      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_D_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f103 020e 	add.w	r2, r3, #14
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	601a      	str	r2, [r3, #0]
            break;
 8005dee:	e052      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_Q_REF:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f103 0210 	add.w	r2, r3, #16
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	601a      	str	r2, [r3, #0]
            break;
 8005dfc:	e04b      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_D_REF:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f103 0212 	add.w	r2, r3, #18
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
            break;
 8005e0a:	e044      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }
          case MC_REG_V_Q:
          {
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f103 0216 	add.w	r2, r3, #22
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	601a      	str	r2, [r3, #0]
            break;
 8005e18:	e03d      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_D:
          {
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f103 0218 	add.w	r2, r3, #24
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
            break;
 8005e26:	e036      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_ALPHA:
          {
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f103 021a 	add.w	r2, r3, #26
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	601a      	str	r2, [r3, #0]
            break;
 8005e34:	e02f      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_BETA:
          {
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f103 021c 	add.w	r2, r3, #28
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	601a      	str	r2, [r3, #0]
            break;
 8005e42:	e028      	b.n	8005e96 <RI_GetPtrReg+0x206>
#ifdef NOT_IMPLEMENTED  /* Not yet Implemented */
         stoPLLSensor[vmotorID];
#endif
          case MC_REG_STOPLL_ROT_SPEED:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8005e44:	7dbb      	ldrb	r3, [r7, #22]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <RI_GetPtrReg+0x228>)
 8005e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4c:	f103 020c 	add.w	r2, r3, #12
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	601a      	str	r2, [r3, #0]
            break;
 8005e54:	e01f      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_STOPLL_EL_ANGLE:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hElAngle);
 8005e56:	7dbb      	ldrb	r3, [r7, #22]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <RI_GetPtrReg+0x228>)
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	601a      	str	r2, [r3, #0]
            break;
 8005e64:	e017      	b.n	8005e96 <RI_GetPtrReg+0x206>
          case MC_REG_STOPLL_I_BETA:
            break;
#endif
          case MC_REG_STOPLL_BEMF_ALPHA:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_alfa_est);
 8005e66:	7dbb      	ldrb	r3, [r7, #22]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <RI_GetPtrReg+0x228>)
 8005e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	601a      	str	r2, [r3, #0]
            break;
 8005e76:	e00e      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }

          case MC_REG_STOPLL_BEMF_BETA:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
 8005e78:	7dbb      	ldrb	r3, [r7, #22]
 8005e7a:	4a0f      	ldr	r2, [pc, #60]	; (8005eb8 <RI_GetPtrReg+0x228>)
 8005e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e80:	f103 0272 	add.w	r2, r3, #114	; 0x72
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	601a      	str	r2, [r3, #0]
            break;
 8005e88:	e005      	b.n	8005e96 <RI_GetPtrReg+0x206>
          }
          default:
          {
            *dataPtr = &nullData16;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <RI_GetPtrReg+0x22c>)
 8005e8e:	601a      	str	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005e90:	2305      	movs	r3, #5
 8005e92:	75fb      	strb	r3, [r7, #23]
            break;
 8005e94:	bf00      	nop
          }
        }
        break;
 8005e96:	e005      	b.n	8005ea4 <RI_GetPtrReg+0x214>
      }

      default:
      {
        *dataPtr = &nullData16;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <RI_GetPtrReg+0x22c>)
 8005e9c:	601a      	str	r2, [r3, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8005e9e:	2305      	movs	r3, #5
 8005ea0:	75fb      	strb	r3, [r7, #23]
        break;
 8005ea2:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2000079c 	.word	0x2000079c
 8005eb8:	200005b0 	.word	0x200005b0
 8005ebc:	20001984 	.word	0x20001984

08005ec0 <LL_ADC_REG_SetSequencerLength>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <LL_ADC_REG_SetSequencerRanks>:
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b089      	sub	sp, #36	; 0x24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	332c      	adds	r3, #44	; 0x2c
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	fa92 f2a2 	rbit	r2, r2
 8005f0a:	617a      	str	r2, [r7, #20]
  return result;
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	fab2 f282 	clz	r2, r2
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	40d3      	lsrs	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	211f      	movs	r1, #31
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 011f 	and.w	r1, r3, #31
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	431a      	orrs	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	bf00      	nop
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <LL_ADC_SetChannelSamplingTime>:
{
 8005f52:	b480      	push	{r7}
 8005f54:	b08d      	sub	sp, #52	; 0x34
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	330c      	adds	r3, #12
 8005f62:	4619      	mov	r1, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	fa92 f2a2 	rbit	r2, r2
 8005f76:	617a      	str	r2, [r7, #20]
  return result;
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	fab2 f282 	clz	r2, r2
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	40d3      	lsrs	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8005f92:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8005f96:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	fa91 f1a1 	rbit	r1, r1
 8005f9e:	61f9      	str	r1, [r7, #28]
  return result;
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	fab1 f181 	clz	r1, r1
 8005fa6:	b2c9      	uxtb	r1, r1
 8005fa8:	40cb      	lsrs	r3, r1
 8005faa:	2107      	movs	r1, #7
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8005fba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8005fbe:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	fa91 f1a1 	rbit	r1, r1
 8005fc6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8005fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fca:	fab1 f181 	clz	r1, r1
 8005fce:	b2c9      	uxtb	r1, r1
 8005fd0:	40cb      	lsrs	r3, r1
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	3734      	adds	r7, #52	; 0x34
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603c:	b29b      	uxth	r3, r3
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b02      	cmp	r3, #2
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f06f 0202 	mvn.w	r2, #2
 800607e:	601a      	str	r2, [r3, #0]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f06f 0204 	mvn.w	r2, #4
 800609a:	601a      	str	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 0220 	bic.w	r2, r3, #32
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	605a      	str	r2, [r3, #4]
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	605a      	str	r2, [r3, #4]
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint8_t handle = 255U;
 80060f0:	23ff      	movs	r3, #255	; 0xff
 80060f2:	73fb      	strb	r3, [r7, #15]
    handle = 0U;
  }
  else
  {
#endif
    uint8_t i = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 80060f8:	e029      	b.n	800614e <RCM_RegisterRegConv+0x66>
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	4a44      	ldr	r2, [pc, #272]	; (8006210 <RCM_RegisterRegConv+0x128>)
 80060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <RCM_RegisterRegConv+0x28>
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d901      	bls.n	8006110 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	73fb      	strb	r3, [r7, #15]
      else
      {
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	4a3f      	ldr	r2, [pc, #252]	; (8006210 <RCM_RegisterRegConv+0x128>)
 8006114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <RCM_RegisterRegConv+0x128>)
 8006120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006124:	791a      	ldrb	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d10c      	bne.n	8006148 <RCM_RegisterRegConv+0x60>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4a37      	ldr	r2, [pc, #220]	; (8006210 <RCM_RegisterRegConv+0x128>)
 8006132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d103      	bne.n	8006148 <RCM_RegisterRegConv+0x60>
        {
          handle = i; /* Reuse the same handle */
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	73fb      	strb	r3, [r7, #15]
          i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8006144:	2304      	movs	r3, #4
 8006146:	73bb      	strb	r3, [r7, #14]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	3301      	adds	r3, #1
 800614c:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d9d2      	bls.n	80060fa <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d855      	bhi.n	8006206 <RCM_RegisterRegConv+0x11e>
    {
      RCM_handle_array [handle] = regConv;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	492c      	ldr	r1, [pc, #176]	; (8006210 <RCM_RegisterRegConv+0x128>)
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <RCM_RegisterRegConv+0x12c>)
 8006168:	2100      	movs	r1, #0
 800616a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff ff49 	bl	800600a <LL_ADC_IsEnabled>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d118      	bne.n	80061b0 <RCM_RegisterRegConv+0xc8>
      {
        LL_ADC_DisableIT_EOCS(regConv->regADC);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ff90 	bl	80060a8 <LL_ADC_DisableIT_EOCS>
        LL_ADC_ClearFlag_EOCS(regConv->regADC);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff ff6f 	bl	8006070 <LL_ADC_ClearFlag_EOCS>
        LL_ADC_DisableIT_JEOS(regConv->regADC);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff ff96 	bl	80060c8 <LL_ADC_DisableIT_JEOS>
        LL_ADC_ClearFlag_JEOS(regConv->regADC);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff ff73 	bl	800608c <LL_ADC_ClearFlag_JEOS>

        LL_ADC_Enable(regConv->regADC);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff ff1d 	bl	8005fea <LL_ADC_Enable>
      else
      {
        /* Nothing to do */
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fe82 	bl	8005ec0 <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	791b      	ldrb	r3, [r3, #4]
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d80d      	bhi.n	80061e4 <RCM_RegisterRegConv+0xfc>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	791b      	ldrb	r3, [r3, #4]
 80061cc:	4619      	mov	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	791b      	ldrb	r3, [r3, #4]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	051b      	lsls	r3, r3, #20
 80061dc:	430b      	orrs	r3, r1
 80061de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061e2:	e00b      	b.n	80061fc <RCM_RegisterRegConv+0x114>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	791b      	ldrb	r3, [r3, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	791b      	ldrb	r3, [r3, #4]
 80061ee:	461a      	mov	r2, r3
 80061f0:	4613      	mov	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4413      	add	r3, r2
 80061f6:	3b1e      	subs	r3, #30
 80061f8:	051b      	lsls	r3, r3, #20
 80061fa:	430b      	orrs	r3, r1
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6892      	ldr	r2, [r2, #8]
 8006200:	4619      	mov	r1, r3
 8006202:	f7ff fea6 	bl	8005f52 <LL_ADC_SetChannelSamplingTime>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20001988 	.word	0x20001988
 8006214:	20001998 	.word	0x20001998

08006218 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	4a33      	ldr	r2, [pc, #204]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 8006226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622a:	6818      	ldr	r0, [r3, #0]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	4a31      	ldr	r2, [pc, #196]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 8006230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006234:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006236:	2b09      	cmp	r3, #9
 8006238:	d813      	bhi.n	8006262 <RCM_ExecRegularConv+0x4a>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 800623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	4619      	mov	r1, r3
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	4a2a      	ldr	r2, [pc, #168]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 800624a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624e:	791b      	ldrb	r3, [r3, #4]
 8006250:	461a      	mov	r2, r3
 8006252:	4613      	mov	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	430b      	orrs	r3, r1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800625c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006260:	e011      	b.n	8006286 <RCM_ExecRegularConv+0x6e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 8006266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	4619      	mov	r1, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 8006272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006276:	791b      	ldrb	r3, [r3, #4]
 8006278:	461a      	mov	r2, r3
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	3b1e      	subs	r3, #30
 8006282:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006284:	430b      	orrs	r3, r1
 8006286:	461a      	mov	r2, r3
 8006288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800628c:	f7ff fe2b 	bl	8005ee6 <LL_ADC_REG_SetSequencerRanks>

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 8006294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fec8 	bl	8006030 <LL_ADC_REG_ReadConversionData12>

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 80062a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3308      	adds	r3, #8
 80062ac:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80062b0:	015b      	lsls	r3, r3, #5
 80062b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80062b6:	3378      	adds	r3, #120	; 0x78
 80062b8:	461a      	mov	r2, r3
 80062ba:	2301      	movs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 80062be:	bf00      	nop
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 80062c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff febd 	bl	800604a <LL_ADC_IsActiveFlag_EOCS>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f4      	beq.n	80062c0 <RCM_ExecRegularConv+0xa8>
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	4a06      	ldr	r2, [pc, #24]	; (80062f4 <RCM_ExecRegularConv+0xdc>)
 80062da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fea5 	bl	8006030 <LL_ADC_REG_ReadConversionData12>
 80062e6:	4603      	mov	r3, r0
 80062e8:	81fb      	strh	r3, [r7, #14]
  return retVal;
 80062ea:	89fb      	ldrh	r3, [r7, #14]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20001988 	.word	0x20001988

080062f8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80062f8:	b598      	push	{r3, r4, r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80062fc:	4b17      	ldr	r3, [pc, #92]	; (800635c <RCM_ExecUserConv+0x64>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d128      	bne.n	8006356 <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8006304:	4b16      	ldr	r3, [pc, #88]	; (8006360 <RCM_ExecUserConv+0x68>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff ff85 	bl	8006218 <RCM_ExecRegularConv>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	4b14      	ldr	r3, [pc, #80]	; (8006364 <RCM_ExecUserConv+0x6c>)
 8006314:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <RCM_ExecUserConv+0x64>)
 8006318:	2202      	movs	r2, #2
 800631a:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <RCM_ExecUserConv+0x68>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <RCM_ExecUserConv+0x70>)
 8006324:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d014      	beq.n	8006356 <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <RCM_ExecUserConv+0x64>)
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <RCM_ExecUserConv+0x68>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <RCM_ExecUserConv+0x70>)
 800633a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <RCM_ExecUserConv+0x68>)
 8006340:	7818      	ldrb	r0, [r3, #0]
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <RCM_ExecUserConv+0x6c>)
 8006344:	8819      	ldrh	r1, [r3, #0]
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <RCM_ExecUserConv+0x68>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	4a07      	ldr	r2, [pc, #28]	; (8006368 <RCM_ExecUserConv+0x70>)
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4413      	add	r3, r2
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	461a      	mov	r2, r3
 8006354:	47a0      	blx	r4
    else
    {
      /* Nothing to do */
    }
  }
}
 8006356:	bf00      	nop
 8006358:	bd98      	pop	{r3, r4, r7, pc}
 800635a:	bf00      	nop
 800635c:	200019ba 	.word	0x200019ba
 8006360:	200019bb 	.word	0x200019bb
 8006364:	200019b8 	.word	0x200019b8
 8006368:	20001998 	.word	0x20001998

0800636c <LL_RCC_SetDFSDMClockSource>:
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_CKDFSDM1SEL, Source);
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <LL_RCC_SetDFSDMClockSource+0x28>)
 8006376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800637e:	4905      	ldr	r1, [pc, #20]	; (8006394 <LL_RCC_SetDFSDMClockSource+0x28>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40023800 	.word	0x40023800

08006398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_MspInit+0x4c>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_MspInit+0x4c>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800

080063e8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f0:	f107 0314 	add.w	r3, r7, #20
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	611a      	str	r2, [r3, #16]
  if(!(IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM2_Init == 0))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a47      	ldr	r2, [pc, #284]	; (8006524 <HAL_DFSDM_FilterMspInit+0x13c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f000 8088 	beq.w	800651c <HAL_DFSDM_FilterMspInit+0x134>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a45      	ldr	r2, [pc, #276]	; (8006528 <HAL_DFSDM_FilterMspInit+0x140>)
 8006412:	4293      	cmp	r3, r2
 8006414:	f000 8082 	beq.w	800651c <HAL_DFSDM_FilterMspInit+0x134>
 8006418:	4b44      	ldr	r3, [pc, #272]	; (800652c <HAL_DFSDM_FilterMspInit+0x144>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d17d      	bne.n	800651c <HAL_DFSDM_FilterMspInit+0x134>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    LL_RCC_SetDFSDMClockSource(LL_RCC_DFSDM2_CLKSOURCE_PCLK2);
 8006420:	2000      	movs	r0, #0
 8006422:	f7ff ffa3 	bl	800636c <LL_RCC_SetDFSDMClockSource>

    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8006426:	4b42      	ldr	r3, [pc, #264]	; (8006530 <HAL_DFSDM_FilterMspInit+0x148>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a40      	ldr	r2, [pc, #256]	; (8006530 <HAL_DFSDM_FilterMspInit+0x148>)
 800642e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 8006430:	4b3f      	ldr	r3, [pc, #252]	; (8006530 <HAL_DFSDM_FilterMspInit+0x148>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10d      	bne.n	8006454 <HAL_DFSDM_FilterMspInit+0x6c>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	4b3d      	ldr	r3, [pc, #244]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	4a3c      	ldr	r2, [pc, #240]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006446:	6453      	str	r3, [r2, #68]	; 0x44
 8006448:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	4b36      	ldr	r3, [pc, #216]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	4a35      	ldr	r2, [pc, #212]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 800645e:	f043 0304 	orr.w	r3, r3, #4
 8006462:	6313      	str	r3, [r2, #48]	; 0x30
 8006464:	4b33      	ldr	r3, [pc, #204]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 800647a:	f043 0302 	orr.w	r3, r3, #2
 800647e:	6313      	str	r3, [r2, #48]	; 0x30
 8006480:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> DFSDM2_DATIN2
    PB10     ------> DFSDM2_CKOUT
    PC9     ------> DFSDM2_DATIN3
    PB9     ------> DFSDM2_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800648c:	2320      	movs	r3, #32
 800648e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006490:	2302      	movs	r3, #2
 8006492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006498:	2300      	movs	r3, #0
 800649a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800649c:	2303      	movs	r3, #3
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4619      	mov	r1, r3
 80064a6:	4824      	ldr	r0, [pc, #144]	; (8006538 <HAL_DFSDM_FilterMspInit+0x150>)
 80064a8:	f001 fb46 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80064ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b2:	2302      	movs	r3, #2
 80064b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM2;
 80064be:	230a      	movs	r3, #10
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c2:	f107 0314 	add.w	r3, r7, #20
 80064c6:	4619      	mov	r1, r3
 80064c8:	481c      	ldr	r0, [pc, #112]	; (800653c <HAL_DFSDM_FilterMspInit+0x154>)
 80064ca:	f001 fb35 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80064ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d4:	2302      	movs	r3, #2
 80064d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80064e0:	2307      	movs	r3, #7
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	4619      	mov	r1, r3
 80064ea:	4813      	ldr	r0, [pc, #76]	; (8006538 <HAL_DFSDM_FilterMspInit+0x150>)
 80064ec:	f001 fb24 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80064f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f6:	2302      	movs	r3, #2
 80064f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fe:	2300      	movs	r3, #0
 8006500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8006502:	2306      	movs	r3, #6
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	4619      	mov	r1, r3
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <HAL_DFSDM_FilterMspInit+0x154>)
 800650e:	f001 fb13 	bl	8007b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_DFSDM_FilterMspInit+0x144>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_DFSDM_FilterMspInit+0x144>)
 800651a:	6013      	str	r3, [r2, #0]
  }

}
 800651c:	bf00      	nop
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40016100 	.word	0x40016100
 8006528:	40016180 	.word	0x40016180
 800652c:	200019c0 	.word	0x200019c0
 8006530:	200019bc 	.word	0x200019bc
 8006534:	40023800 	.word	0x40023800
 8006538:	40020800 	.word	0x40020800
 800653c:	40020400 	.word	0x40020400

08006540 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	611a      	str	r2, [r3, #16]
  if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a4d      	ldr	r2, [pc, #308]	; (8006694 <HAL_DFSDM_ChannelMspInit+0x154>)
 800655e:	4293      	cmp	r3, r2
 8006560:	f000 8094 	beq.w	800668c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a4b      	ldr	r2, [pc, #300]	; (8006698 <HAL_DFSDM_ChannelMspInit+0x158>)
 800656a:	4293      	cmp	r3, r2
 800656c:	f000 808e 	beq.w	800668c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a49      	ldr	r2, [pc, #292]	; (800669c <HAL_DFSDM_ChannelMspInit+0x15c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f000 8088 	beq.w	800668c <HAL_DFSDM_ChannelMspInit+0x14c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a47      	ldr	r2, [pc, #284]	; (80066a0 <HAL_DFSDM_ChannelMspInit+0x160>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f000 8082 	beq.w	800668c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006588:	4b46      	ldr	r3, [pc, #280]	; (80066a4 <HAL_DFSDM_ChannelMspInit+0x164>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d17d      	bne.n	800668c <HAL_DFSDM_ChannelMspInit+0x14c>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    LL_RCC_SetDFSDMClockSource(LL_RCC_DFSDM2_CLKSOURCE_PCLK2);
 8006590:	2000      	movs	r0, #0
 8006592:	f7ff feeb 	bl	800636c <LL_RCC_SetDFSDMClockSource>

    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8006596:	4b44      	ldr	r3, [pc, #272]	; (80066a8 <HAL_DFSDM_ChannelMspInit+0x168>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	4a42      	ldr	r2, [pc, #264]	; (80066a8 <HAL_DFSDM_ChannelMspInit+0x168>)
 800659e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 80065a0:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <HAL_DFSDM_ChannelMspInit+0x168>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10d      	bne.n	80065c4 <HAL_DFSDM_ChannelMspInit+0x84>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	4a3e      	ldr	r2, [pc, #248]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065b6:	6453      	str	r3, [r2, #68]	; 0x44
 80065b8:	4b3c      	ldr	r3, [pc, #240]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	4b38      	ldr	r3, [pc, #224]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	4a37      	ldr	r2, [pc, #220]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6313      	str	r3, [r2, #48]	; 0x30
 80065d4:	4b35      	ldr	r3, [pc, #212]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	4a30      	ldr	r2, [pc, #192]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065ea:	f043 0302 	orr.w	r3, r3, #2
 80065ee:	6313      	str	r3, [r2, #48]	; 0x30
 80065f0:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <HAL_DFSDM_ChannelMspInit+0x16c>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> DFSDM2_DATIN2
    PB10     ------> DFSDM2_CKOUT
    PC9     ------> DFSDM2_DATIN3
    PB9     ------> DFSDM2_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80065fc:	2320      	movs	r3, #32
 80065fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006600:	2302      	movs	r3, #2
 8006602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006608:	2300      	movs	r3, #0
 800660a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800660c:	2303      	movs	r3, #3
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	4619      	mov	r1, r3
 8006616:	4826      	ldr	r0, [pc, #152]	; (80066b0 <HAL_DFSDM_ChannelMspInit+0x170>)
 8006618:	f001 fa8e 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800661c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006622:	2302      	movs	r3, #2
 8006624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM2;
 800662e:	230a      	movs	r3, #10
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	4619      	mov	r1, r3
 8006638:	481e      	ldr	r0, [pc, #120]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0x174>)
 800663a:	f001 fa7d 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800663e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006644:	2302      	movs	r3, #2
 8006646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006648:	2300      	movs	r3, #0
 800664a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800664c:	2300      	movs	r3, #0
 800664e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8006650:	2307      	movs	r3, #7
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4619      	mov	r1, r3
 800665a:	4815      	ldr	r0, [pc, #84]	; (80066b0 <HAL_DFSDM_ChannelMspInit+0x170>)
 800665c:	f001 fa6c 	bl	8007b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006666:	2302      	movs	r3, #2
 8006668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800666e:	2300      	movs	r3, #0
 8006670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8006672:	2306      	movs	r3, #6
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006676:	f107 0314 	add.w	r3, r7, #20
 800667a:	4619      	mov	r1, r3
 800667c:	480d      	ldr	r0, [pc, #52]	; (80066b4 <HAL_DFSDM_ChannelMspInit+0x174>)
 800667e:	f001 fa5b 	bl	8007b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_DFSDM_ChannelMspInit+0x164>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <HAL_DFSDM_ChannelMspInit+0x164>)
 800668a:	6013      	str	r3, [r2, #0]
  }

}
 800668c:	bf00      	nop
 800668e:	3728      	adds	r7, #40	; 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40016000 	.word	0x40016000
 8006698:	40016020 	.word	0x40016020
 800669c:	40016040 	.word	0x40016040
 80066a0:	40016060 	.word	0x40016060
 80066a4:	200019c0 	.word	0x200019c0
 80066a8:	200019bc 	.word	0x200019bc
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40020800 	.word	0x40020800
 80066b4:	40020400 	.word	0x40020400

080066b8 <LL_ADC_IsActiveFlag_JEOS>:
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <LL_TIM_ClearFlag_UPDATE>:
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f06f 0201 	mvn.w	r2, #1
 80066ec:	611a      	str	r2, [r3, #16]
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LL_TIM_ClearFlag_BRK>:
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006708:	611a      	str	r2, [r3, #16]
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <LL_TIM_IsActiveFlag_BRK>:
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d101      	bne.n	800672e <LL_TIM_IsActiveFlag_BRK+0x18>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <LL_TIM_IsActiveFlag_BRK+0x1a>
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b02      	cmp	r3, #2
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b04      	cmp	r3, #4
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b10      	cmp	r3, #16
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006808:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006810:	68fb      	ldr	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800682c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006834:	68fb      	ldr	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006850:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8006882:	b480      	push	{r7}
 8006884:	b089      	sub	sp, #36	; 0x24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	330c      	adds	r3, #12
 800688e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	60bb      	str	r3, [r7, #8]
   return(result);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f043 0310 	orr.w	r3, r3, #16
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	330c      	adds	r3, #12
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	61ba      	str	r2, [r7, #24]
 80068a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6979      	ldr	r1, [r7, #20]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e7      	bne.n	800688a <LL_USART_EnableIT_IDLE+0x8>
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3724      	adds	r7, #36	; 0x24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	; 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3314      	adds	r3, #20
 80068d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3314      	adds	r3, #20
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	61ba      	str	r2, [r7, #24]
 80068ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e7      	bne.n	80068d0 <LL_USART_EnableIT_ERROR+0x8>
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	; 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 800690e:	b480      	push	{r7}
 8006910:	b089      	sub	sp, #36	; 0x24
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	330c      	adds	r3, #12
 800691a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
   return(result);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	330c      	adds	r3, #12
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	61ba      	str	r2, [r7, #24]
 8006934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6979      	ldr	r1, [r7, #20]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	613b      	str	r3, [r7, #16]
   return(result);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e7      	bne.n	8006916 <LL_USART_DisableIT_IDLE+0x8>
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3724      	adds	r7, #36	; 0x24
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <LL_USART_DisableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3314      	adds	r3, #20
 8006960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	60bb      	str	r3, [r7, #8]
   return(result);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3314      	adds	r3, #20
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	61ba      	str	r2, [r7, #24]
 800697a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6979      	ldr	r1, [r7, #20]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	613b      	str	r3, [r7, #16]
   return(result);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e7      	bne.n	800695c <LL_USART_DisableIT_ERROR+0x8>
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	3724      	adds	r7, #36	; 0x24
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_USART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b089      	sub	sp, #36	; 0x24
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3314      	adds	r3, #20
 80069f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3314      	adds	r3, #20
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	61ba      	str	r2, [r7, #24]
 8006a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	613b      	str	r3, [r7, #16]
   return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e7      	bne.n	80069ee <LL_USART_EnableDMAReq_RX+0x8>
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	3724      	adds	r7, #36	; 0x24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <LL_USART_DisableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3314      	adds	r3, #20
 8006a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	61ba      	str	r2, [r7, #24]
 8006a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e7      	bne.n	8006a34 <LL_USART_DisableDMAReq_RX+0x8>
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	3724      	adds	r7, #36	; 0x24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	b2db      	uxtb	r3, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_DMA_DisableStream>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8006a96:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <LL_DMA_DisableStream+0x3c>)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4908      	ldr	r1, [pc, #32]	; (8006ac8 <LL_DMA_DisableStream+0x3c>)
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	440a      	add	r2, r1
 8006aac:	7812      	ldrb	r2, [r2, #0]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	0800e2a0 	.word	0x0800e2a0

08006acc <LL_DMA_ClearFlag_TC>:
  (((__STREAM_NB__&0x3) == 0U) ? 3 : \
   ((__STREAM_NB__&0x3) == 1U) ? 9 :\
   ((__STREAM_NB__&0x3) == 2U) ? 19 : 25)

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006acc:	b490      	push	{r4, r7}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d024      	beq.n	8006b26 <LL_DMA_ClearFlag_TC+0x5a>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Stream".      */
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d901      	bls.n	8006aec <LL_DMA_ClearFlag_TC+0x20>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	e000      	b.n	8006aee <LL_DMA_ClearFlag_TC+0x22>
 8006aec:	2300      	movs	r3, #0
 8006aee:	4413      	add	r3, r2
 8006af0:	461c      	mov	r4, r3

    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d012      	beq.n	8006b22 <LL_DMA_ClearFlag_TC+0x56>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d00a      	beq.n	8006b1c <LL_DMA_ClearFlag_TC+0x50>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f003 0303 	and.w	r3, r3, #3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d102      	bne.n	8006b16 <LL_DMA_ClearFlag_TC+0x4a>
 8006b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b14:	e006      	b.n	8006b24 <LL_DMA_ClearFlag_TC+0x58>
 8006b16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b1a:	e003      	b.n	8006b24 <LL_DMA_ClearFlag_TC+0x58>
 8006b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b20:	e000      	b.n	8006b24 <LL_DMA_ClearFlag_TC+0x58>
 8006b22:	2320      	movs	r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
  }
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc90      	pop	{r4, r7}
 8006b2e:	4770      	bx	lr

08006b30 <LL_DMA_ClearFlag_TE>:

__STATIC_INLINE void LL_DMA_ClearFlag_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006b30:	b490      	push	{r4, r7}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d024      	beq.n	8006b8a <LL_DMA_ClearFlag_TE+0x5a>
    /* Nothing to do */
  }
  else
  {
    /* Clear TE bits with bits position depending on parameter "Stream".      */
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3308      	adds	r3, #8
 8006b44:	461a      	mov	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d901      	bls.n	8006b50 <LL_DMA_ClearFlag_TE+0x20>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	e000      	b.n	8006b52 <LL_DMA_ClearFlag_TE+0x22>
 8006b50:	2300      	movs	r3, #0
 8006b52:	4413      	add	r3, r2
 8006b54:	461c      	mov	r4, r3

    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d012      	beq.n	8006b86 <LL_DMA_ClearFlag_TE+0x56>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d00a      	beq.n	8006b80 <LL_DMA_ClearFlag_TE+0x50>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d102      	bne.n	8006b7a <LL_DMA_ClearFlag_TE+0x4a>
 8006b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b78:	e006      	b.n	8006b88 <LL_DMA_ClearFlag_TE+0x58>
 8006b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b7e:	e003      	b.n	8006b88 <LL_DMA_ClearFlag_TE+0x58>
 8006b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b84:	e000      	b.n	8006b88 <LL_DMA_ClearFlag_TE+0x58>
 8006b86:	2308      	movs	r3, #8
 8006b88:	6023      	str	r3, [r4, #0]
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc90      	pop	{r4, r7}
 8006b92:	4770      	bx	lr

08006b94 <LL_DMA_IsActiveFlag_TC>:

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream )
{
 8006b94:	b490      	push	{r4, r7}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t retVal;
  if (NULL == DMAx)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <LL_DMA_IsActiveFlag_TC+0x16>
  {
    retVal = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e043      	b.n	8006c32 <LL_DMA_IsActiveFlag_TC+0x9e>
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	461a      	mov	r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d901      	bls.n	8006bb8 <LL_DMA_IsActiveFlag_TC+0x24>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	e000      	b.n	8006bba <LL_DMA_IsActiveFlag_TC+0x26>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4413      	add	r3, r2
 8006bbc:	461c      	mov	r4, r3
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d012      	beq.n	8006bf0 <LL_DMA_IsActiveFlag_TC+0x5c>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d00a      	beq.n	8006bea <LL_DMA_IsActiveFlag_TC+0x56>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d102      	bne.n	8006be4 <LL_DMA_IsActiveFlag_TC+0x50>
 8006bde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006be2:	e006      	b.n	8006bf2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be8:	e003      	b.n	8006bf2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bee:	e000      	b.n	8006bf2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d012      	beq.n	8006c24 <LL_DMA_IsActiveFlag_TC+0x90>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d00a      	beq.n	8006c1e <LL_DMA_IsActiveFlag_TC+0x8a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d102      	bne.n	8006c18 <LL_DMA_IsActiveFlag_TC+0x84>
 8006c12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c16:	e006      	b.n	8006c26 <LL_DMA_IsActiveFlag_TC+0x92>
 8006c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c1c:	e003      	b.n	8006c26 <LL_DMA_IsActiveFlag_TC+0x92>
 8006c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c22:	e000      	b.n	8006c26 <LL_DMA_IsActiveFlag_TC+0x92>
 8006c24:	2320      	movs	r3, #32
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d101      	bne.n	8006c2e <LL_DMA_IsActiveFlag_TC+0x9a>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_DMA_IsActiveFlag_TC+0x9c>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  }
  return (retVal);
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc90      	pop	{r4, r7}
 8006c3c:	4770      	bx	lr
	...

08006c40 <ADC_IRQHandler>:
  * @param  None
  * @retval None
  */

void ADC_IRQHandler(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8006c44:	4807      	ldr	r0, [pc, #28]	; (8006c64 <ADC_IRQHandler+0x24>)
 8006c46:	f7ff fd37 	bl	80066b8 <LL_ADC_IsActiveFlag_JEOS>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <ADC_IRQHandler+0x20>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <ADC_IRQHandler+0x24>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a03      	ldr	r2, [pc, #12]	; (8006c64 <ADC_IRQHandler+0x24>)
 8006c56:	f023 030c 	bic.w	r3, r3, #12
 8006c5a:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8006c5c:	f7fc fd00 	bl	8003660 <TSK_HighFrequencyTask>
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40012000 	.word	0x40012000

08006c68 <TIM1_UP_TIM10_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fd32 	bl	80066de <LL_TIM_ClearFlag_UPDATE>
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8006c7a:	4802      	ldr	r0, [pc, #8]	; (8006c84 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006c7c:	f006 fd78 	bl	800d770 <R3_1_TIMx_UP_IRQHandler>
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_M1_IRQn 1 */
}
 8006c80:	bf00      	nop
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000178 	.word	0x20000178

08006c88 <TIM1_BRK_TIM9_IRQHandler>:
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  * @retval None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fd3e 	bl	8006716 <LL_TIM_IsActiveFlag_BRK>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <TIM1_BRK_TIM9_IRQHandler+0x2c>
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fd26 	bl	80066fa <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8006cae:	4803      	ldr	r0, [pc, #12]	; (8006cbc <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006cb0:	f006 fd91 	bl	800d7d6 <R3_1_BRK_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8006cb4:	f7fc f89e 	bl	8002df4 <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8006cb8:	bf00      	nop
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000178 	.word	0x20000178

08006cc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA_RX_A channel DMACH_RX_A global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 0 */

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
 8006cc4:	2105      	movs	r1, #5
 8006cc6:	4807      	ldr	r0, [pc, #28]	; (8006ce4 <DMA1_Stream5_IRQHandler+0x24>)
 8006cc8:	f7ff ff64 	bl	8006b94 <LL_DMA_IsActiveFlag_TC>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <DMA1_Stream5_IRQHandler+0x20>
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
 8006cd2:	2105      	movs	r1, #5
 8006cd4:	4803      	ldr	r0, [pc, #12]	; (8006ce4 <DMA1_Stream5_IRQHandler+0x24>)
 8006cd6:	f7ff fef9 	bl	8006acc <LL_DMA_ClearFlag_TC>
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8006cda:	4803      	ldr	r0, [pc, #12]	; (8006ce8 <DMA1_Stream5_IRQHandler+0x28>)
 8006cdc:	f7fa f88d 	bl	8000dfa <ASPEP_HWDataReceivedIT>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8006ce0:	bf00      	nop
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40026000 	.word	0x40026000
 8006ce8:	200004fc 	.word	0x200004fc

08006cec <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8006cf0:	482d      	ldr	r0, [pc, #180]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006cf2:	f7ff fd6f 	bl	80067d4 <LL_USART_IsActiveFlag_TC>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <USART2_IRQHandler+0x24>
  {
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableStream( DMA_TX_A, DMACH_TX_A );
 8006cfc:	2106      	movs	r1, #6
 8006cfe:	482b      	ldr	r0, [pc, #172]	; (8006dac <USART2_IRQHandler+0xc0>)
 8006d00:	f7ff fec4 	bl	8006a8c <LL_DMA_DisableStream>
    LL_USART_ClearFlag_TC (USARTA);
 8006d04:	4828      	ldr	r0, [pc, #160]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d06:	f7ff fdae 	bl	8006866 <LL_USART_ClearFlag_TC>
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8006d0a:	4829      	ldr	r0, [pc, #164]	; (8006db0 <USART2_IRQHandler+0xc4>)
 8006d0c:	f7f9 feea 	bl	8000ae4 <ASPEP_HWDataTransmittedIT>
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8006d10:	4825      	ldr	r0, [pc, #148]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d12:	f7ff fd39 	bl	8006788 <LL_USART_IsActiveFlag_ORE>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <USART2_IRQHandler+0x48>
 8006d1c:	4822      	ldr	r0, [pc, #136]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d1e:	f7ff fd0d 	bl	800673c <LL_USART_IsActiveFlag_FE>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <USART2_IRQHandler+0x48>
 8006d28:	481f      	ldr	r0, [pc, #124]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d2a:	f7ff fd1a 	bl	8006762 <LL_USART_IsActiveFlag_NE>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d014      	beq.n	8006d5e <USART2_IRQHandler+0x72>
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8006d34:	481c      	ldr	r0, [pc, #112]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d36:	f7ff fe43 	bl	80069c0 <LL_USART_IsEnabledIT_ERROR>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <USART2_IRQHandler+0x72>
  { /* Stopping the debugger will generate an OverRun error*/
    LL_USART_ClearFlag_FE(USARTA);
 8006d40:	4819      	ldr	r0, [pc, #100]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d42:	f7ff fd5a 	bl	80067fa <LL_USART_ClearFlag_FE>
    LL_USART_ClearFlag_ORE(USARTA);
 8006d46:	4818      	ldr	r0, [pc, #96]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d48:	f7ff fd7b 	bl	8006842 <LL_USART_ClearFlag_ORE>
    LL_USART_ClearFlag_NE(USARTA);
 8006d4c:	4816      	ldr	r0, [pc, #88]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d4e:	f7ff fd66 	bl	800681e <LL_USART_ClearFlag_NE>
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
 8006d52:	4815      	ldr	r0, [pc, #84]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d54:	f7ff fdfe 	bl	8006954 <LL_USART_DisableIT_ERROR>
    LL_USART_EnableIT_IDLE (USARTA);
 8006d58:	4813      	ldr	r0, [pc, #76]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d5a:	f7ff fd92 	bl	8006882 <LL_USART_EnableIT_IDLE>
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8006d5e:	4812      	ldr	r0, [pc, #72]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d60:	f7ff fd25 	bl	80067ae <LL_USART_IsActiveFlag_IDLE>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01b      	beq.n	8006da2 <USART2_IRQHandler+0xb6>
 8006d6a:	480f      	ldr	r0, [pc, #60]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d6c:	f7ff fe15 	bl	800699a <LL_USART_IsEnabledIT_IDLE>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d015      	beq.n	8006da2 <USART2_IRQHandler+0xb6>
  { /* Stopping the debugger will generate an OverRun error*/
    LL_USART_DisableIT_IDLE (USARTA);
 8006d76:	480c      	ldr	r0, [pc, #48]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d78:	f7ff fdc9 	bl	800690e <LL_USART_DisableIT_IDLE>
    /* Once the complete unexpected data are received, we enable back the error IT*/
    LL_USART_EnableIT_ERROR (USARTA);
 8006d7c:	480a      	ldr	r0, [pc, #40]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d7e:	f7ff fda3 	bl	80068c8 <LL_USART_EnableIT_ERROR>
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
 8006d82:	4809      	ldr	r0, [pc, #36]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d84:	f7ff fe52 	bl	8006a2c <LL_USART_DisableDMAReq_RX>
    LL_USART_ReceiveData8(USARTA);
 8006d88:	4807      	ldr	r0, [pc, #28]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d8a:	f7ff fe72 	bl	8006a72 <LL_USART_ReceiveData8>
    LL_USART_EnableDMAReq_RX (USARTA);
 8006d8e:	4806      	ldr	r0, [pc, #24]	; (8006da8 <USART2_IRQHandler+0xbc>)
 8006d90:	f7ff fe29 	bl	80069e6 <LL_USART_EnableDMAReq_RX>
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
 8006d94:	2105      	movs	r1, #5
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <USART2_IRQHandler+0xc0>)
 8006d98:	f7ff feca 	bl	8006b30 <LL_DMA_ClearFlag_TE>
    ASPEP_HWDMAReset (&aspepOverUartA);
 8006d9c:	4804      	ldr	r0, [pc, #16]	; (8006db0 <USART2_IRQHandler+0xc4>)
 8006d9e:	f7fa f8a4 	bl	8000eea <ASPEP_HWDMAReset>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40004400 	.word	0x40004400
 8006dac:	40026000 	.word	0x40026000
 8006db0:	200004fc 	.word	0x200004fc

08006db4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8006db8:	f7fc fe1a 	bl	80039f0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006dbc:	e7fe      	b.n	8006dbc <HardFault_Handler+0x8>
	...

08006dc0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <SysTick_Handler+0x30>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d106      	bne.n	8006dda <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 8006dcc:	f000 fb28 	bl	8007420 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8006dd0:	f000 fc1f 	bl	8007612 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <SysTick_Handler+0x30>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <SysTick_Handler+0x30>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <SysTick_Handler+0x30>)
 8006de4:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8006de6:	f7fb ffc7 	bl	8002d78 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8006dea:	bf00      	nop
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200005b8 	.word	0x200005b8

08006df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <SystemInit+0x20>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	4a05      	ldr	r2, [pc, #20]	; (8006e14 <SystemInit+0x20>)
 8006e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <LL_USART_ClearFlag_IDLE>:
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006e26:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_USART_ClearFlag_TC>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e4a:	601a      	str	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <LL_USART_EnableIT_IDLE>:
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	330c      	adds	r3, #12
 8006e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f043 0310 	orr.w	r3, r3, #16
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	61ba      	str	r2, [r7, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6979      	ldr	r1, [r7, #20]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e7      	bne.n	8006e60 <LL_USART_EnableIT_IDLE+0x8>
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	3724      	adds	r7, #36	; 0x24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <LL_USART_EnableIT_TC>:
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b089      	sub	sp, #36	; 0x24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	61ba      	str	r2, [r7, #24]
 8006ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e7      	bne.n	8006ea6 <LL_USART_EnableIT_TC+0x8>
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	3724      	adds	r7, #36	; 0x24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <LL_USART_EnableIT_ERROR>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b089      	sub	sp, #36	; 0x24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3314      	adds	r3, #20
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	61ba      	str	r2, [r7, #24]
 8006f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e7      	bne.n	8006eec <LL_USART_EnableIT_ERROR+0x8>
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3724      	adds	r7, #36	; 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <LL_USART_EnableDMAReq_RX>:
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b089      	sub	sp, #36	; 0x24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3314      	adds	r3, #20
 8006f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3314      	adds	r3, #20
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	61ba      	str	r2, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e7      	bne.n	8006f32 <LL_USART_EnableDMAReq_RX+0x8>
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	3724      	adds	r7, #36	; 0x24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_USART_EnableDMAReq_TX>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	b089      	sub	sp, #36	; 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3314      	adds	r3, #20
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	61ba      	str	r2, [r7, #24]
 8006f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e7      	bne.n	8006f78 <LL_USART_EnableDMAReq_TX+0x8>
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3724      	adds	r7, #36	; 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <LL_DMA_EnableStream>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8006fc2:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <LL_DMA_EnableStream+0x3c>)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4908      	ldr	r1, [pc, #32]	; (8006ff4 <LL_DMA_EnableStream+0x3c>)
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	6013      	str	r3, [r2, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	0800e2c0 	.word	0x0800e2c0

08006ff8 <LL_DMA_IsEnabledStream>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <LL_DMA_IsEnabledStream+0x34>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4413      	add	r3, r2
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b01      	cmp	r3, #1
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	0800e2c0 	.word	0x0800e2c0

08007030 <LL_DMA_SetDataLength>:
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800703c:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <LL_DMA_SetDataLength+0x44>)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	4908      	ldr	r1, [pc, #32]	; (8007074 <LL_DMA_SetDataLength+0x44>)
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	440a      	add	r2, r1
 8007056:	7812      	ldrb	r2, [r2, #0]
 8007058:	4611      	mov	r1, r2
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	440a      	add	r2, r1
 800705e:	4611      	mov	r1, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4313      	orrs	r3, r2
 8007064:	604b      	str	r3, [r1, #4]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	0800e2c0 	.word	0x0800e2c0

08007078 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <LL_DMA_SetMemoryAddress+0x2c>)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60d3      	str	r3, [r2, #12]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	0800e2c0 	.word	0x0800e2c0

080070a8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80070b4:	4a07      	ldr	r2, [pc, #28]	; (80070d4 <LL_DMA_SetPeriphAddress+0x2c>)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6093      	str	r3, [r2, #8]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	0800e2c0 	.word	0x0800e2c0

080070d8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <LL_DMA_EnableIT_TC+0x3c>)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	4413      	add	r3, r2
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4413      	add	r3, r2
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <LL_DMA_EnableIT_TC+0x3c>)
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	440a      	add	r2, r1
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	4611      	mov	r1, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	440a      	add	r2, r1
 8007100:	f043 0310 	orr.w	r3, r3, #16
 8007104:	6013      	str	r3, [r2, #0]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	0800e2c0 	.word	0x0800e2c0

08007118 <LL_DMA_ClearFlag_TC>:
{
 8007118:	b490      	push	{r4, r7}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d024      	beq.n	8007172 <LL_DMA_ClearFlag_TC+0x5a>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3308      	adds	r3, #8
 800712c:	461a      	mov	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d901      	bls.n	8007138 <LL_DMA_ClearFlag_TC+0x20>
 8007134:	2304      	movs	r3, #4
 8007136:	e000      	b.n	800713a <LL_DMA_ClearFlag_TC+0x22>
 8007138:	2300      	movs	r3, #0
 800713a:	4413      	add	r3, r2
 800713c:	461c      	mov	r4, r3
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d012      	beq.n	800716e <LL_DMA_ClearFlag_TC+0x56>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d00a      	beq.n	8007168 <LL_DMA_ClearFlag_TC+0x50>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d102      	bne.n	8007162 <LL_DMA_ClearFlag_TC+0x4a>
 800715c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007160:	e006      	b.n	8007170 <LL_DMA_ClearFlag_TC+0x58>
 8007162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007166:	e003      	b.n	8007170 <LL_DMA_ClearFlag_TC+0x58>
 8007168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800716c:	e000      	b.n	8007170 <LL_DMA_ClearFlag_TC+0x58>
 800716e:	2320      	movs	r3, #32
 8007170:	6023      	str	r3, [r4, #0]
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bc90      	pop	{r4, r7}
 800717a:	4770      	bx	lr

0800717c <UASPEP_INIT>:

void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle);
void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle);

void UASPEP_INIT(void *pHWHandle)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]
  UASPEP_DAMCONFIG_TX(pHandle);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f807 	bl	800719c <UASPEP_DAMCONFIG_TX>
  UASPEP_DAMCONFIG_RX(pHandle);
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f82a 	bl	80071e8 <UASPEP_DAMCONFIG_RX>
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <UASPEP_DAMCONFIG_TX>:

void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fe47 	bl	8006e3c <LL_USART_ClearFlag_TC>
    LL_USART_EnableIT_TC(pHandle->USARTx);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff fe73 	bl	8006e9e <LL_USART_EnableIT_TC>

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fed7 	bl	8006f70 <LL_USART_EnableDMAReq_TX>

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6898      	ldr	r0, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6919      	ldr	r1, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3304      	adds	r3, #4
 80071d0:	461a      	mov	r2, r3
 80071d2:	f7ff ff69 	bl	80070a8 <LL_DMA_SetPeriphAddress>
    /* Clear UART ISR */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fe2e 	bl	8006e3c <LL_USART_ClearFlag_TC>
    /* DMA end of transfer on UART TX channel completion is not activated*/
    /* we prefer to activate UART TC itself to avoid to trig IT while queued data are still to be transmitted */
#ifdef NULL_PTR_USA_ASP_DRV
  }
#endif
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <UASPEP_DAMCONFIG_RX>:

void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Enable DMA end of transfer on UART RX channel completion */
    LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7ff ff6c 	bl	80070d8 <LL_DMA_EnableIT_TC>
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fe6d 	bl	8006ee4 <LL_USART_EnableIT_ERROR>

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6858      	ldr	r0, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68d9      	ldr	r1, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3304      	adds	r3, #4
 8007218:	461a      	mov	r2, r3
 800721a:	f7ff ff45 	bl	80070a8 <LL_DMA_SetPeriphAddress>

    /* Clear UART ISR */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fe0a 	bl	8006e3c <LL_USART_ClearFlag_TC>

    LL_USART_EnableDMAReq_RX(pHandle->USARTx);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fe7c 	bl	8006f2a <LL_USART_EnableDMAReq_RX>
#ifdef NULL_PTR_USA_ASP_DRV
  }
#endif
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <UASPEP_SEND_PACKET>:

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	4613      	mov	r3, r2
 8007246:	80fb      	strh	r3, [r7, #6]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	613b      	str	r3, [r7, #16]
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7ff fece 	bl	8006ff8 <LL_DMA_IsEnabledStream>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d122      	bne.n	80072a8 <UASPEP_SEND_PACKET+0x6e>
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6898      	ldr	r0, [r3, #8]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4619      	mov	r1, r3
 800726e:	f7ff ff03 	bl	8007078 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6898      	ldr	r0, [r3, #8]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	4619      	mov	r1, r3
 800727e:	f7ff fed7 	bl	8007030 <LL_DMA_SetDataLength>
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f7ff ff43 	bl	8007118 <LL_DMA_ClearFlag_TC>
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7ff fe8b 	bl	8006fb8 <LL_DMA_EnableStream>
    result = true;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
 80072a6:	e001      	b.n	80072ac <UASPEP_SEND_PACKET+0x72>
  }
  else
  {
    result = false;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
  }
  return result;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b086      	sub	sp, #24
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	4613      	mov	r3, r2
 80072c2:	80fb      	strh	r3, [r7, #6]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	617b      	str	r3, [r7, #20]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6858      	ldr	r0, [r3, #4]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4619      	mov	r1, r3
 80072d4:	f7ff fed0 	bl	8007078 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6858      	ldr	r0, [r3, #4]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	4619      	mov	r1, r3
 80072e4:	f7ff fea4 	bl	8007030 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7ff fe60 	bl	8006fb8 <LL_DMA_EnableStream>
}
 80072f8:	bf00      	nop
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff fd81 	bl	8006e18 <LL_USART_ClearFlag_IDLE>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fd9c 	bl	8006e58 <LL_USART_EnableIT_IDLE>
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8007328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800732c:	480d      	ldr	r0, [pc, #52]	; (8007364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800732e:	490e      	ldr	r1, [pc, #56]	; (8007368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007330:	4a0e      	ldr	r2, [pc, #56]	; (800736c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007334:	e002      	b.n	800733c <LoopCopyDataInit>

08007336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800733a:	3304      	adds	r3, #4

0800733c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800733c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800733e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007340:	d3f9      	bcc.n	8007336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007342:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007344:	4c0b      	ldr	r4, [pc, #44]	; (8007374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007348:	e001      	b.n	800734e <LoopFillZerobss>

0800734a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800734a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800734c:	3204      	adds	r2, #4

0800734e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800734e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007350:	d3fb      	bcc.n	800734a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007352:	f7ff fd4f 	bl	8006df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007356:	f006 fd57 	bl	800de08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800735a:	f7fa fae1 	bl	8001920 <main>
  bx  lr    
 800735e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007360:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007368:	200005c8 	.word	0x200005c8
  ldr r2, =_sidata
 800736c:	0800e2e8 	.word	0x0800e2e8
  ldr r2, =_sbss
 8007370:	200005c8 	.word	0x200005c8
  ldr r4, =_ebss
 8007374:	20001a04 	.word	0x20001a04

08007378 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007378:	e7fe      	b.n	8007378 <BusFault_Handler>
	...

0800737c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007380:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <HAL_Init+0x40>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <HAL_Init+0x40>)
 8007386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800738a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <HAL_Init+0x40>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <HAL_Init+0x40>)
 8007392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007398:	4b08      	ldr	r3, [pc, #32]	; (80073bc <HAL_Init+0x40>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a07      	ldr	r2, [pc, #28]	; (80073bc <HAL_Init+0x40>)
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073a4:	2003      	movs	r0, #3
 80073a6:	f000 f901 	bl	80075ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80073aa:	200f      	movs	r0, #15
 80073ac:	f000 f808 	bl	80073c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80073b0:	f7fe fff2 	bl	8006398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40023c00 	.word	0x40023c00

080073c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073c8:	4b12      	ldr	r3, [pc, #72]	; (8007414 <HAL_InitTick+0x54>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <HAL_InitTick+0x58>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f90b 	bl	80075fa <HAL_SYSTICK_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e00e      	b.n	800740c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b0f      	cmp	r3, #15
 80073f2:	d80a      	bhi.n	800740a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073f4:	2200      	movs	r2, #0
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	f000 f8e1 	bl	80075c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007400:	4a06      	ldr	r2, [pc, #24]	; (800741c <HAL_InitTick+0x5c>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e000      	b.n	800740c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200005bc 	.word	0x200005bc
 8007418:	200005c4 	.word	0x200005c4
 800741c:	200005c0 	.word	0x200005c0

08007420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <HAL_IncTick+0x20>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_IncTick+0x24>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4413      	add	r3, r2
 8007430:	4a04      	ldr	r2, [pc, #16]	; (8007444 <HAL_IncTick+0x24>)
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	bf00      	nop
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	200005c4 	.word	0x200005c4
 8007444:	200019c4 	.word	0x200019c4

08007448 <__NVIC_SetPriorityGrouping>:
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <__NVIC_SetPriorityGrouping+0x44>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007464:	4013      	ands	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800747a:	4a04      	ldr	r2, [pc, #16]	; (800748c <__NVIC_SetPriorityGrouping+0x44>)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	60d3      	str	r3, [r2, #12]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	e000ed00 	.word	0xe000ed00

08007490 <__NVIC_GetPriorityGrouping>:
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <__NVIC_GetPriorityGrouping+0x18>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	f003 0307 	and.w	r3, r3, #7
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	e000ed00 	.word	0xe000ed00

080074ac <__NVIC_SetPriority>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	db0a      	blt.n	80074d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	490c      	ldr	r1, [pc, #48]	; (80074f8 <__NVIC_SetPriority+0x4c>)
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	440b      	add	r3, r1
 80074d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074d4:	e00a      	b.n	80074ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4908      	ldr	r1, [pc, #32]	; (80074fc <__NVIC_SetPriority+0x50>)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	3b04      	subs	r3, #4
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	440b      	add	r3, r1
 80074ea:	761a      	strb	r2, [r3, #24]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	e000e100 	.word	0xe000e100
 80074fc:	e000ed00 	.word	0xe000ed00

08007500 <NVIC_EncodePriority>:
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f1c3 0307 	rsb	r3, r3, #7
 800751a:	2b04      	cmp	r3, #4
 800751c:	bf28      	it	cs
 800751e:	2304      	movcs	r3, #4
 8007520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	3304      	adds	r3, #4
 8007526:	2b06      	cmp	r3, #6
 8007528:	d902      	bls.n	8007530 <NVIC_EncodePriority+0x30>
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3b03      	subs	r3, #3
 800752e:	e000      	b.n	8007532 <NVIC_EncodePriority+0x32>
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43da      	mvns	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	401a      	ands	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007548:	f04f 31ff 	mov.w	r1, #4294967295
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	fa01 f303 	lsl.w	r3, r1, r3
 8007552:	43d9      	mvns	r1, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007558:	4313      	orrs	r3, r2
}
 800755a:	4618      	mov	r0, r3
 800755c:	3724      	adds	r7, #36	; 0x24
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3b01      	subs	r3, #1
 8007574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007578:	d301      	bcc.n	800757e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800757a:	2301      	movs	r3, #1
 800757c:	e00f      	b.n	800759e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <SysTick_Config+0x40>)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007586:	210f      	movs	r1, #15
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	f7ff ff8e 	bl	80074ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <SysTick_Config+0x40>)
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007596:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <SysTick_Config+0x40>)
 8007598:	2207      	movs	r2, #7
 800759a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	e000e010 	.word	0xe000e010

080075ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff47 	bl	8007448 <__NVIC_SetPriorityGrouping>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	4603      	mov	r3, r0
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075d4:	f7ff ff5c 	bl	8007490 <__NVIC_GetPriorityGrouping>
 80075d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f7ff ff8e 	bl	8007500 <NVIC_EncodePriority>
 80075e4:	4602      	mov	r2, r0
 80075e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff ff5d 	bl	80074ac <__NVIC_SetPriority>
}
 80075f2:	bf00      	nop
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff ffb0 	bl	8007568 <SysTick_Config>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007616:	f000 f802 	bl	800761e <HAL_SYSTICK_Callback>
}
 800761a:	bf00      	nop
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800761e:	b480      	push	{r7}
 8007620:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e0cf      	b.n	80077de <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a69      	ldr	r2, [pc, #420]	; (80077e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00e      	beq.n	8007666 <HAL_DFSDM_ChannelInit+0x3a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a67      	ldr	r2, [pc, #412]	; (80077ec <HAL_DFSDM_ChannelInit+0x1c0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d009      	beq.n	8007666 <HAL_DFSDM_ChannelInit+0x3a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a66      	ldr	r2, [pc, #408]	; (80077f0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_DFSDM_ChannelInit+0x3a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a64      	ldr	r2, [pc, #400]	; (80077f4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d106      	bne.n	8007674 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8007666:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8007668:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800766a:	4b64      	ldr	r3, [pc, #400]	; (80077fc <HAL_DFSDM_ChannelInit+0x1d0>)
 800766c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800766e:	4b5e      	ldr	r3, [pc, #376]	; (80077e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e005      	b.n	8007680 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8007674:	4b62      	ldr	r3, [pc, #392]	; (8007800 <HAL_DFSDM_ChannelInit+0x1d4>)
 8007676:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8007678:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_DFSDM_ChannelInit+0x1d8>)
 800767a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800767c:	4b62      	ldr	r3, [pc, #392]	; (8007808 <HAL_DFSDM_ChannelInit+0x1dc>)
 800767e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f9f3 	bl	8007a70 <DFSDM_GetChannelFromInstance>
 800768a:	4603      	mov	r3, r0
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0a0      	b.n	80077de <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7fe ff4f 	bl	8006540 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d125      	bne.n	8007700 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d108      	bne.n	80076f4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800770e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800771e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8007724:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 020f 	bic.w	r2, r2, #15
 800773c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007764:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	3b01      	subs	r3, #1
 8007776:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f002 0207 	and.w	r2, r2, #7
 8007790:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077bc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f950 	bl	8007a70 <DFSDM_GetChannelFromInstance>
 80077d0:	4603      	mov	r3, r0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40016000 	.word	0x40016000
 80077ec:	40016020 	.word	0x40016020
 80077f0:	40016040 	.word	0x40016040
 80077f4:	40016060 	.word	0x40016060
 80077f8:	200019c8 	.word	0x200019c8
 80077fc:	200019cc 	.word	0x200019cc
 8007800:	200019dc 	.word	0x200019dc
 8007804:	200019e0 	.word	0x200019e0
 8007808:	40016400 	.word	0x40016400

0800780c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e0d9      	b.n	80079d2 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a6e      	ldr	r2, [pc, #440]	; (80079dc <HAL_DFSDM_FilterInit+0x1d0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d109      	bne.n	800783c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800782c:	2b01      	cmp	r3, #1
 800782e:	d003      	beq.n	8007838 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0ca      	b.n	80079d2 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a67      	ldr	r2, [pc, #412]	; (80079e0 <HAL_DFSDM_FilterInit+0x1d4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d109      	bne.n	800785a <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 800784a:	2b01      	cmp	r3, #1
 800784c:	d003      	beq.n	8007856 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e0bb      	b.n	80079d2 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fe fdb8 	bl	80063e8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8007886:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7a1b      	ldrb	r3, [r3, #8]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d108      	bne.n	80078a2 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e007      	b.n	80078b2 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80078b0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7a5b      	ldrb	r3, [r3, #9]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d108      	bne.n	80078cc <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e007      	b.n	80078dc <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80078da:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80078ea:	f023 0308 	bic.w	r3, r3, #8
 80078ee:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d108      	bne.n	800790a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d108      	bne.n	8007924 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0210 	orr.w	r2, r2, #16
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e007      	b.n	8007934 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0210 	bic.w	r2, r2, #16
 8007932:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c5b      	ldrb	r3, [r3, #17]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d108      	bne.n	800794e <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0220 	orr.w	r2, r2, #32
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e007      	b.n	800795e <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0220 	bic.w	r2, r2, #32
 800795c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800796c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8007970:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6959      	ldr	r1, [r3, #20]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	3b01      	subs	r3, #1
 8007982:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007984:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800798c:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7c1a      	ldrb	r2, [r3, #16]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40016100 	.word	0x40016100
 80079e0:	40016500 	.word	0x40016500

080079e4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02e      	beq.n	8007a5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8007a04:	2bff      	cmp	r3, #255	; 0xff
 8007a06:	d029      	beq.n	8007a5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a1a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10d      	bne.n	8007a3e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00a      	b.n	8007a54 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
 8007a5a:	e001      	b.n	8007a60 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a24      	ldr	r2, [pc, #144]	; (8007b0c <DFSDM_GetChannelFromInstance+0x9c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <DFSDM_GetChannelFromInstance+0x18>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a23      	ldr	r2, [pc, #140]	; (8007b10 <DFSDM_GetChannelFromInstance+0xa0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d102      	bne.n	8007a8e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e037      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <DFSDM_GetChannelFromInstance+0xa4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <DFSDM_GetChannelFromInstance+0x2e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1f      	ldr	r2, [pc, #124]	; (8007b18 <DFSDM_GetChannelFromInstance+0xa8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d102      	bne.n	8007aa4 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	e02c      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a1d      	ldr	r2, [pc, #116]	; (8007b1c <DFSDM_GetChannelFromInstance+0xac>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <DFSDM_GetChannelFromInstance+0x44>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1c      	ldr	r2, [pc, #112]	; (8007b20 <DFSDM_GetChannelFromInstance+0xb0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d102      	bne.n	8007aba <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e021      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <DFSDM_GetChannelFromInstance+0xb4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <DFSDM_GetChannelFromInstance+0x5a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <DFSDM_GetChannelFromInstance+0xb8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d102      	bne.n	8007ad0 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8007aca:	2303      	movs	r3, #3
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e016      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <DFSDM_GetChannelFromInstance+0xbc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d102      	bne.n	8007ade <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8007ad8:	2304      	movs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e00f      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <DFSDM_GetChannelFromInstance+0xc0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d102      	bne.n	8007aec <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8007ae6:	2305      	movs	r3, #5
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e008      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a11      	ldr	r2, [pc, #68]	; (8007b34 <DFSDM_GetChannelFromInstance+0xc4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d102      	bne.n	8007afa <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8007af4:	2306      	movs	r3, #6
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e001      	b.n	8007afe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8007afa:	2307      	movs	r3, #7
 8007afc:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40016000 	.word	0x40016000
 8007b10:	40016400 	.word	0x40016400
 8007b14:	40016020 	.word	0x40016020
 8007b18:	40016420 	.word	0x40016420
 8007b1c:	40016040 	.word	0x40016040
 8007b20:	40016440 	.word	0x40016440
 8007b24:	40016060 	.word	0x40016060
 8007b28:	40016460 	.word	0x40016460
 8007b2c:	40016480 	.word	0x40016480
 8007b30:	400164a0 	.word	0x400164a0
 8007b34:	400164c0 	.word	0x400164c0

08007b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b089      	sub	sp, #36	; 0x24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e165      	b.n	8007e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b54:	2201      	movs	r2, #1
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4013      	ands	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	f040 8154 	bne.w	8007e1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d005      	beq.n	8007b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d130      	bne.n	8007bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	2203      	movs	r2, #3
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	091b      	lsrs	r3, r3, #4
 8007bd6:	f003 0201 	and.w	r2, r3, #1
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d017      	beq.n	8007c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	2203      	movs	r2, #3
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d123      	bne.n	8007c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	08da      	lsrs	r2, r3, #3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3208      	adds	r2, #8
 8007c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	220f      	movs	r2, #15
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4013      	ands	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	08da      	lsrs	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3208      	adds	r2, #8
 8007c76:	69b9      	ldr	r1, [r7, #24]
 8007c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	2203      	movs	r2, #3
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f003 0203 	and.w	r2, r3, #3
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80ae 	beq.w	8007e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	4b5d      	ldr	r3, [pc, #372]	; (8007e38 <HAL_GPIO_Init+0x300>)
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc6:	4a5c      	ldr	r2, [pc, #368]	; (8007e38 <HAL_GPIO_Init+0x300>)
 8007cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8007cce:	4b5a      	ldr	r3, [pc, #360]	; (8007e38 <HAL_GPIO_Init+0x300>)
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cda:	4a58      	ldr	r2, [pc, #352]	; (8007e3c <HAL_GPIO_Init+0x304>)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	089b      	lsrs	r3, r3, #2
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	220f      	movs	r2, #15
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a4f      	ldr	r2, [pc, #316]	; (8007e40 <HAL_GPIO_Init+0x308>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d025      	beq.n	8007d52 <HAL_GPIO_Init+0x21a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a4e      	ldr	r2, [pc, #312]	; (8007e44 <HAL_GPIO_Init+0x30c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <HAL_GPIO_Init+0x216>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a4d      	ldr	r2, [pc, #308]	; (8007e48 <HAL_GPIO_Init+0x310>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d019      	beq.n	8007d4a <HAL_GPIO_Init+0x212>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a4c      	ldr	r2, [pc, #304]	; (8007e4c <HAL_GPIO_Init+0x314>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d013      	beq.n	8007d46 <HAL_GPIO_Init+0x20e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a4b      	ldr	r2, [pc, #300]	; (8007e50 <HAL_GPIO_Init+0x318>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00d      	beq.n	8007d42 <HAL_GPIO_Init+0x20a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a4a      	ldr	r2, [pc, #296]	; (8007e54 <HAL_GPIO_Init+0x31c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d007      	beq.n	8007d3e <HAL_GPIO_Init+0x206>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a49      	ldr	r2, [pc, #292]	; (8007e58 <HAL_GPIO_Init+0x320>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d101      	bne.n	8007d3a <HAL_GPIO_Init+0x202>
 8007d36:	2306      	movs	r3, #6
 8007d38:	e00c      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d3a:	2307      	movs	r3, #7
 8007d3c:	e00a      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d3e:	2305      	movs	r3, #5
 8007d40:	e008      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d42:	2304      	movs	r3, #4
 8007d44:	e006      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d46:	2303      	movs	r3, #3
 8007d48:	e004      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e002      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <HAL_GPIO_Init+0x21c>
 8007d52:	2300      	movs	r3, #0
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	f002 0203 	and.w	r2, r2, #3
 8007d5a:	0092      	lsls	r2, r2, #2
 8007d5c:	4093      	lsls	r3, r2
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d64:	4935      	ldr	r1, [pc, #212]	; (8007e3c <HAL_GPIO_Init+0x304>)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	089b      	lsrs	r3, r3, #2
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d72:	4b3a      	ldr	r3, [pc, #232]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d96:	4a31      	ldr	r2, [pc, #196]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d9c:	4b2f      	ldr	r3, [pc, #188]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	43db      	mvns	r3, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4013      	ands	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dc0:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dc6:	4b25      	ldr	r3, [pc, #148]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007df0:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	43db      	mvns	r3, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e14:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <HAL_GPIO_Init+0x324>)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	f67f ae96 	bls.w	8007b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	3724      	adds	r7, #36	; 0x24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	40013800 	.word	0x40013800
 8007e40:	40020000 	.word	0x40020000
 8007e44:	40020400 	.word	0x40020400
 8007e48:	40020800 	.word	0x40020800
 8007e4c:	40020c00 	.word	0x40020c00
 8007e50:	40021000 	.word	0x40021000
 8007e54:	40021400 	.word	0x40021400
 8007e58:	40021800 	.word	0x40021800
 8007e5c:	40013c00 	.word	0x40013c00

08007e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e64:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e66:	681b      	ldr	r3, [r3, #0]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200005bc 	.word	0x200005bc

08007e78 <LL_ADC_SetCommonClock>:
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	605a      	str	r2, [r3, #4]
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <LL_ADC_REG_SetSequencerLength>:
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <LL_ADC_IsEnabled>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8007efa:	480a      	ldr	r0, [pc, #40]	; (8007f24 <LL_ADC_CommonInit+0x38>)
 8007efc:	f7ff ffe2 	bl	8007ec4 <LL_ADC_IsEnabled>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ffb3 	bl	8007e78 <LL_ADC_SetCommonClock>
 8007f12:	e001      	b.n	8007f18 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40012000 	.word	0x40012000

08007f28 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ffc4 	bl	8007ec4 <LL_ADC_IsEnabled>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d117      	bne.n	8007f72 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	6811      	ldr	r1, [r2, #0]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	6892      	ldr	r2, [r2, #8]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	e001      	b.n	8007f76 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff ff98 	bl	8007ec4 <LL_ADC_IsEnabled>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d12b      	bne.n	8007ff2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	e005      	b.n	8007fc2 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <LL_ADC_REG_Init+0x80>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	4311      	orrs	r1, r2
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	6912      	ldr	r2, [r2, #16]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff ff57 	bl	8007e9e <LL_ADC_REG_SetSequencerLength>
 8007ff0:	e001      	b.n	8007ff6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	c0fffcfd 	.word	0xc0fffcfd

08008004 <LL_GPIO_SetPinMode>:
{
 8008004:	b480      	push	{r7}
 8008006:	b089      	sub	sp, #36	; 0x24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	fa93 f3a3 	rbit	r3, r3
 800801e:	613b      	str	r3, [r7, #16]
  return result;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	fab3 f383 	clz	r3, r3
 8008026:	b2db      	uxtb	r3, r3
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	2103      	movs	r1, #3
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	43db      	mvns	r3, r3
 8008032:	401a      	ands	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	fa93 f3a3 	rbit	r3, r3
 800803e:	61bb      	str	r3, [r7, #24]
  return result;
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	fab3 f383 	clz	r3, r3
 8008046:	b2db      	uxtb	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	601a      	str	r2, [r3, #0]
}
 8008056:	bf00      	nop
 8008058:	3724      	adds	r7, #36	; 0x24
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <LL_GPIO_SetPinOutputType>:
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	43db      	mvns	r3, r3
 8008076:	401a      	ands	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	fb01 f303 	mul.w	r3, r1, r3
 8008080:	431a      	orrs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <LL_GPIO_SetPinSpeed>:
{
 8008092:	b480      	push	{r7}
 8008094:	b089      	sub	sp, #36	; 0x24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	fa93 f3a3 	rbit	r3, r3
 80080ac:	613b      	str	r3, [r7, #16]
  return result;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	fab3 f383 	clz	r3, r3
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	2103      	movs	r1, #3
 80080ba:	fa01 f303 	lsl.w	r3, r1, r3
 80080be:	43db      	mvns	r3, r3
 80080c0:	401a      	ands	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	fa93 f3a3 	rbit	r3, r3
 80080cc:	61bb      	str	r3, [r7, #24]
  return result;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	fab3 f383 	clz	r3, r3
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	fa01 f303 	lsl.w	r3, r1, r3
 80080de:	431a      	orrs	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	609a      	str	r2, [r3, #8]
}
 80080e4:	bf00      	nop
 80080e6:	3724      	adds	r7, #36	; 0x24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <LL_GPIO_SetPinPull>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	; 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	fa93 f3a3 	rbit	r3, r3
 800810a:	613b      	str	r3, [r7, #16]
  return result;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	fab3 f383 	clz	r3, r3
 8008112:	b2db      	uxtb	r3, r3
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	2103      	movs	r1, #3
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	43db      	mvns	r3, r3
 800811e:	401a      	ands	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	fa93 f3a3 	rbit	r3, r3
 800812a:	61bb      	str	r3, [r7, #24]
  return result;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	fab3 f383 	clz	r3, r3
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	fa01 f303 	lsl.w	r3, r1, r3
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	60da      	str	r2, [r3, #12]
}
 8008142:	bf00      	nop
 8008144:	3724      	adds	r7, #36	; 0x24
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <LL_GPIO_SetAFPin_0_7>:
{
 800814e:	b480      	push	{r7}
 8008150:	b089      	sub	sp, #36	; 0x24
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1a      	ldr	r2, [r3, #32]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	fa93 f3a3 	rbit	r3, r3
 8008168:	613b      	str	r3, [r7, #16]
  return result;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	fab3 f383 	clz	r3, r3
 8008170:	b2db      	uxtb	r3, r3
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	210f      	movs	r1, #15
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	43db      	mvns	r3, r3
 800817c:	401a      	ands	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	fa93 f3a3 	rbit	r3, r3
 8008188:	61bb      	str	r3, [r7, #24]
  return result;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	fab3 f383 	clz	r3, r3
 8008190:	b2db      	uxtb	r3, r3
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	fa01 f303 	lsl.w	r3, r1, r3
 800819a:	431a      	orrs	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	3724      	adds	r7, #36	; 0x24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <LL_GPIO_SetAFPin_8_15>:
{
 80081ac:	b480      	push	{r7}
 80081ae:	b089      	sub	sp, #36	; 0x24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	fa93 f3a3 	rbit	r3, r3
 80081c8:	613b      	str	r3, [r7, #16]
  return result;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	fab3 f383 	clz	r3, r3
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	210f      	movs	r1, #15
 80081d6:	fa01 f303 	lsl.w	r3, r1, r3
 80081da:	43db      	mvns	r3, r3
 80081dc:	401a      	ands	r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	fa93 f3a3 	rbit	r3, r3
 80081ea:	61bb      	str	r3, [r7, #24]
  return result;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	fab3 f383 	clz	r3, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	fa01 f303 	lsl.w	r3, r1, r3
 80081fc:	431a      	orrs	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008202:	bf00      	nop
 8008204:	3724      	adds	r7, #36	; 0x24
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b088      	sub	sp, #32
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008218:	2300      	movs	r3, #0
 800821a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800821c:	2300      	movs	r3, #0
 800821e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	fa93 f3a3 	rbit	r3, r3
 800822c:	613b      	str	r3, [r7, #16]
  return result;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	fab3 f383 	clz	r3, r3
 8008234:	b2db      	uxtb	r3, r3
 8008236:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008238:	e050      	b.n	80082dc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	2101      	movs	r1, #1
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	fa01 f303 	lsl.w	r3, r1, r3
 8008246:	4013      	ands	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d042      	beq.n	80082d6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d003      	beq.n	8008260 <LL_GPIO_Init+0x52>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d10d      	bne.n	800827c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	461a      	mov	r2, r3
 8008266:	69b9      	ldr	r1, [r7, #24]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff ff12 	bl	8008092 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	461a      	mov	r2, r3
 8008274:	69b9      	ldr	r1, [r7, #24]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fef3 	bl	8008062 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	461a      	mov	r2, r3
 8008282:	69b9      	ldr	r1, [r7, #24]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ff33 	bl	80080f0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d11a      	bne.n	80082c8 <LL_GPIO_Init+0xba>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	fa93 f3a3 	rbit	r3, r3
 800829c:	60bb      	str	r3, [r7, #8]
  return result;
 800829e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80082a0:	fab3 f383 	clz	r3, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b07      	cmp	r3, #7
 80082a8:	d807      	bhi.n	80082ba <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	461a      	mov	r2, r3
 80082b0:	69b9      	ldr	r1, [r7, #24]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff ff4b 	bl	800814e <LL_GPIO_SetAFPin_0_7>
 80082b8:	e006      	b.n	80082c8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	461a      	mov	r2, r3
 80082c0:	69b9      	ldr	r1, [r7, #24]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff ff72 	bl	80081ac <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	461a      	mov	r2, r3
 80082ce:	69b9      	ldr	r1, [r7, #24]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fe97 	bl	8008004 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	3301      	adds	r3, #1
 80082da:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	fa22 f303 	lsr.w	r3, r2, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1a7      	bne.n	800823a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <LL_RCC_GetSysClkSource>:
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <LL_RCC_GetSysClkSource+0x18>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 030c 	and.w	r3, r3, #12
}
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40023800 	.word	0x40023800

08008310 <LL_RCC_GetAHBPrescaler>:
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <LL_RCC_GetAHBPrescaler+0x18>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40023800 	.word	0x40023800

0800832c <LL_RCC_GetAPB1Prescaler>:
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8008338:	4618      	mov	r0, r3
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40023800 	.word	0x40023800

08008348 <LL_RCC_GetAPB2Prescaler>:
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <LL_RCC_GetAPB2Prescaler+0x18>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800

08008364 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <LL_RCC_PLL_GetMainSource+0x18>)
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8008370:	4618      	mov	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40023800 	.word	0x40023800

08008380 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008384:	4b04      	ldr	r3, [pc, #16]	; (8008398 <LL_RCC_PLL_GetN+0x18>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	099b      	lsrs	r3, r3, #6
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800838e:	4618      	mov	r0, r3
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	40023800 	.word	0x40023800

0800839c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <LL_RCC_PLL_GetP+0x18>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40023800 	.word	0x40023800

080083b8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80083bc:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <LL_RCC_PLL_GetDivider+0x18>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40023800 	.word	0x40023800

080083d4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80083dc:	f000 f820 	bl	8008420 <RCC_GetSystemClockFreq>
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f840 	bl	8008470 <RCC_GetHCLKClockFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f84e 	bl	800849c <RCC_GetPCLK1ClockFreq>
 8008400:	4602      	mov	r2, r0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f85a 	bl	80084c4 <RCC_GetPCLK2ClockFreq>
 8008410:	4602      	mov	r2, r0
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800842a:	f7ff ff63 	bl	80082f4 <LL_RCC_GetSysClkSource>
 800842e:	4603      	mov	r3, r0
 8008430:	2b08      	cmp	r3, #8
 8008432:	d00c      	beq.n	800844e <RCC_GetSystemClockFreq+0x2e>
 8008434:	2b08      	cmp	r3, #8
 8008436:	d80f      	bhi.n	8008458 <RCC_GetSystemClockFreq+0x38>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <RCC_GetSystemClockFreq+0x22>
 800843c:	2b04      	cmp	r3, #4
 800843e:	d003      	beq.n	8008448 <RCC_GetSystemClockFreq+0x28>
 8008440:	e00a      	b.n	8008458 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <RCC_GetSystemClockFreq+0x48>)
 8008444:	607b      	str	r3, [r7, #4]
      break;
 8008446:	e00a      	b.n	800845e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8008448:	4b08      	ldr	r3, [pc, #32]	; (800846c <RCC_GetSystemClockFreq+0x4c>)
 800844a:	607b      	str	r3, [r7, #4]
      break;
 800844c:	e007      	b.n	800845e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800844e:	2008      	movs	r0, #8
 8008450:	f000 f84c 	bl	80084ec <RCC_PLL_GetFreqDomain_SYS>
 8008454:	6078      	str	r0, [r7, #4]
      break;
 8008456:	e002      	b.n	800845e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <RCC_GetSystemClockFreq+0x48>)
 800845a:	607b      	str	r3, [r7, #4]
      break;
 800845c:	bf00      	nop
  }

  return frequency;
 800845e:	687b      	ldr	r3, [r7, #4]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	00f42400 	.word	0x00f42400
 800846c:	017d7840 	.word	0x017d7840

08008470 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008478:	f7ff ff4a 	bl	8008310 <LL_RCC_GetAHBPrescaler>
 800847c:	4603      	mov	r3, r0
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	4a04      	ldr	r2, [pc, #16]	; (8008498 <RCC_GetHCLKClockFreq+0x28>)
 8008486:	5cd3      	ldrb	r3, [r2, r3]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	40d3      	lsrs	r3, r2
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	0800e2a8 	.word	0x0800e2a8

0800849c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80084a4:	f7ff ff42 	bl	800832c <LL_RCC_GetAPB1Prescaler>
 80084a8:	4603      	mov	r3, r0
 80084aa:	0a9b      	lsrs	r3, r3, #10
 80084ac:	4a04      	ldr	r2, [pc, #16]	; (80084c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80084ae:	5cd3      	ldrb	r3, [r2, r3]
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	40d3      	lsrs	r3, r2
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	0800e2b8 	.word	0x0800e2b8

080084c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80084cc:	f7ff ff3c 	bl	8008348 <LL_RCC_GetAPB2Prescaler>
 80084d0:	4603      	mov	r3, r0
 80084d2:	0b5b      	lsrs	r3, r3, #13
 80084d4:	4a04      	ldr	r2, [pc, #16]	; (80084e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	40d3      	lsrs	r3, r2
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0800e2b8 	.word	0x0800e2b8

080084ec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	2300      	movs	r3, #0
 80084fe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008500:	f7ff ff30 	bl	8008364 <LL_RCC_PLL_GetMainSource>
 8008504:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008512:	d003      	beq.n	800851c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8008514:	e005      	b.n	8008522 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008516:	4b12      	ldr	r3, [pc, #72]	; (8008560 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8008518:	617b      	str	r3, [r7, #20]
      break;
 800851a:	e005      	b.n	8008528 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800851e:	617b      	str	r3, [r7, #20]
      break;
 8008520:	e002      	b.n	8008528 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8008524:	617b      	str	r3, [r7, #20]
      break;
 8008526:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d113      	bne.n	8008556 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800852e:	f7ff ff43 	bl	80083b8 <LL_RCC_PLL_GetDivider>
 8008532:	4602      	mov	r2, r0
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	fbb3 f4f2 	udiv	r4, r3, r2
 800853a:	f7ff ff21 	bl	8008380 <LL_RCC_PLL_GetN>
 800853e:	4603      	mov	r3, r0
 8008540:	fb03 f404 	mul.w	r4, r3, r4
 8008544:	f7ff ff2a 	bl	800839c <LL_RCC_PLL_GetP>
 8008548:	4603      	mov	r3, r0
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	3301      	adds	r3, #1
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	fbb4 f3f3 	udiv	r3, r4, r3
 8008554:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8008556:	693b      	ldr	r3, [r7, #16]
}
 8008558:	4618      	mov	r0, r3
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}
 8008560:	00f42400 	.word	0x00f42400
 8008564:	017d7840 	.word	0x017d7840

08008568 <LL_TIM_SetPrescaler>:
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <LL_TIM_SetAutoReload>:
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <LL_TIM_SetRepetitionCounter>:
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <LL_TIM_OC_SetCompareCH1>:
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <LL_TIM_OC_SetCompareCH2>:
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <LL_TIM_OC_SetCompareCH3>:
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <LL_TIM_OC_SetCompareCH4>:
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f043 0201 	orr.w	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	615a      	str	r2, [r3, #20]
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a3d      	ldr	r2, [pc, #244]	; (8008754 <LL_TIM_Init+0x108>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d013      	beq.n	800868c <LL_TIM_Init+0x40>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866a:	d00f      	beq.n	800868c <LL_TIM_Init+0x40>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a3a      	ldr	r2, [pc, #232]	; (8008758 <LL_TIM_Init+0x10c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00b      	beq.n	800868c <LL_TIM_Init+0x40>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a39      	ldr	r2, [pc, #228]	; (800875c <LL_TIM_Init+0x110>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <LL_TIM_Init+0x40>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a38      	ldr	r2, [pc, #224]	; (8008760 <LL_TIM_Init+0x114>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <LL_TIM_Init+0x40>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a37      	ldr	r2, [pc, #220]	; (8008764 <LL_TIM_Init+0x118>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d106      	bne.n	800869a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <LL_TIM_Init+0x108>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d02b      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d027      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <LL_TIM_Init+0x10c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d023      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a29      	ldr	r2, [pc, #164]	; (800875c <LL_TIM_Init+0x110>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01f      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <LL_TIM_Init+0x114>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d01b      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a27      	ldr	r2, [pc, #156]	; (8008764 <LL_TIM_Init+0x118>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d017      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a26      	ldr	r2, [pc, #152]	; (8008768 <LL_TIM_Init+0x11c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a25      	ldr	r2, [pc, #148]	; (800876c <LL_TIM_Init+0x120>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00f      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a24      	ldr	r2, [pc, #144]	; (8008770 <LL_TIM_Init+0x124>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00b      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a23      	ldr	r2, [pc, #140]	; (8008774 <LL_TIM_Init+0x128>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d007      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a22      	ldr	r2, [pc, #136]	; (8008778 <LL_TIM_Init+0x12c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <LL_TIM_Init+0xae>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a21      	ldr	r2, [pc, #132]	; (800877c <LL_TIM_Init+0x130>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d106      	bne.n	8008708 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff35 	bl	8008584 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ff21 	bl	8008568 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <LL_TIM_Init+0x108>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <LL_TIM_Init+0xea>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <LL_TIM_Init+0x118>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d105      	bne.n	8008742 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff2f 	bl	80085a0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff ff72 	bl	800862c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40010000 	.word	0x40010000
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40010400 	.word	0x40010400
 8008768:	40014000 	.word	0x40014000
 800876c:	40014400 	.word	0x40014400
 8008770:	40014800 	.word	0x40014800
 8008774:	40001800 	.word	0x40001800
 8008778:	40001c00 	.word	0x40001c00
 800877c:	40002000 	.word	0x40002000

08008780 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008796:	d027      	beq.n	80087e8 <LL_TIM_OC_Init+0x68>
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879e:	d82a      	bhi.n	80087f6 <LL_TIM_OC_Init+0x76>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a6:	d018      	beq.n	80087da <LL_TIM_OC_Init+0x5a>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ae:	d822      	bhi.n	80087f6 <LL_TIM_OC_Init+0x76>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d003      	beq.n	80087be <LL_TIM_OC_Init+0x3e>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d007      	beq.n	80087cc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80087bc:	e01b      	b.n	80087f6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f867 	bl	8008894 <OC1Config>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]
      break;
 80087ca:	e015      	b.n	80087f8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 f8cc 	bl	800896c <OC2Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]
      break;
 80087d8:	e00e      	b.n	80087f8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f935 	bl	8008a4c <OC3Config>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]
      break;
 80087e6:	e007      	b.n	80087f8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f99e 	bl	8008b2c <OC4Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75fb      	strb	r3, [r7, #23]
      break;
 80087f4:	e000      	b.n	80087f8 <LL_TIM_OC_Init+0x78>
      break;
 80087f6:	bf00      	nop
  }

  return result;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	7b12      	ldrb	r2, [r2, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	89d2      	ldrh	r2, [r2, #14]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0303 	bic.w	r3, r3, #3
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 0202 	bic.w	r2, r3, #2
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0201 	bic.w	r2, r3, #1
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1c      	ldr	r2, [pc, #112]	; (8008964 <OC1Config+0xd0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d003      	beq.n	80088fe <OC1Config+0x6a>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <OC1Config+0xd4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d11e      	bne.n	800893c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f023 0208 	bic.w	r2, r3, #8
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0204 	bic.w	r2, r3, #4
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fe34 	bl	80085bc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40010000 	.word	0x40010000
 8008968:	40010400 	.word	0x40010400

0800896c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0210 	bic.w	r2, r3, #16
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0220 	bic.w	r2, r3, #32
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f023 0210 	bic.w	r2, r3, #16
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1d      	ldr	r2, [pc, #116]	; (8008a44 <OC2Config+0xd8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <OC2Config+0x70>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a1c      	ldr	r2, [pc, #112]	; (8008a48 <OC2Config+0xdc>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d11f      	bne.n	8008a1c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	019b      	lsls	r3, r3, #6
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	019b      	lsls	r3, r3, #6
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fdd2 	bl	80085d8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40010400 	.word	0x40010400

08008a4c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <OC3Config+0xd8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <OC3Config+0x6e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <OC3Config+0xdc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d11f      	bne.n	8008afa <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	029b      	lsls	r3, r3, #10
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	015b      	lsls	r3, r3, #5
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff fd71 	bl	80085f4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40010400 	.word	0x40010400

08008b2c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	031b      	lsls	r3, r3, #12
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	031b      	lsls	r3, r3, #12
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a11      	ldr	r2, [pc, #68]	; (8008bd4 <OC4Config+0xa8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d003      	beq.n	8008b9c <OC4Config+0x70>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <OC4Config+0xac>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d107      	bne.n	8008bac <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	019b      	lsls	r3, r3, #6
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff fd26 	bl	8008610 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40010000 	.word	0x40010000
 8008bd8:	40010400 	.word	0x40010400

08008bdc <LL_USART_IsEnabled>:
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf0:	bf0c      	ite	eq
 8008bf2:	2301      	moveq	r3, #1
 8008bf4:	2300      	movne	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <LL_USART_SetStopBitsLength>:
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	611a      	str	r2, [r3, #16]
}
 8008c1e:	bf00      	nop
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <LL_USART_SetHWFlowCtrl>:
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	615a      	str	r2, [r3, #20]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <LL_USART_SetBaudRate>:
{
 8008c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c54:	b0c0      	sub	sp, #256	; 0x100
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c5c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8008c60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008c64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c70:	f040 810c 	bne.w	8008e8c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c86:	4622      	mov	r2, r4
 8008c88:	462b      	mov	r3, r5
 8008c8a:	1891      	adds	r1, r2, r2
 8008c8c:	6639      	str	r1, [r7, #96]	; 0x60
 8008c8e:	415b      	adcs	r3, r3
 8008c90:	667b      	str	r3, [r7, #100]	; 0x64
 8008c92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008c96:	4621      	mov	r1, r4
 8008c98:	eb12 0801 	adds.w	r8, r2, r1
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	eb43 0901 	adc.w	r9, r3, r1
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cb6:	4690      	mov	r8, r2
 8008cb8:	4699      	mov	r9, r3
 8008cba:	4623      	mov	r3, r4
 8008cbc:	eb18 0303 	adds.w	r3, r8, r3
 8008cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	eb49 0303 	adc.w	r3, r9, r3
 8008cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	4693      	mov	fp, r2
 8008cd8:	eb1a 030a 	adds.w	r3, sl, sl
 8008cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cde:	eb4b 030b 	adc.w	r3, fp, fp
 8008ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ce4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cec:	f7f7 fa94 	bl	8000218 <__aeabi_uldivmod>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4b64      	ldr	r3, [pc, #400]	; (8008e88 <LL_USART_SetBaudRate+0x238>)
 8008cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfa:	095b      	lsrs	r3, r3, #5
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	b29c      	uxth	r4, r3
 8008d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d0c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d10:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	1891      	adds	r1, r2, r2
 8008d1a:	6539      	str	r1, [r7, #80]	; 0x50
 8008d1c:	415b      	adcs	r3, r3
 8008d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d24:	4641      	mov	r1, r8
 8008d26:	1851      	adds	r1, r2, r1
 8008d28:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	414b      	adcs	r3, r1
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	00cb      	lsls	r3, r1, #3
 8008d40:	4651      	mov	r1, sl
 8008d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d46:	4651      	mov	r1, sl
 8008d48:	00ca      	lsls	r2, r1, #3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4642      	mov	r2, r8
 8008d52:	189b      	adds	r3, r3, r2
 8008d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d58:	464b      	mov	r3, r9
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	eb42 0303 	adc.w	r3, r2, r3
 8008d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d6e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008d72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008d76:	460b      	mov	r3, r1
 8008d78:	18db      	adds	r3, r3, r3
 8008d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	eb42 0303 	adc.w	r3, r2, r3
 8008d82:	647b      	str	r3, [r7, #68]	; 0x44
 8008d84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d88:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008d8c:	f7f7 fa44 	bl	8000218 <__aeabi_uldivmod>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4611      	mov	r1, r2
 8008d96:	4b3c      	ldr	r3, [pc, #240]	; (8008e88 <LL_USART_SetBaudRate+0x238>)
 8008d98:	fba3 2301 	umull	r2, r3, r3, r1
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	2264      	movs	r2, #100	; 0x64
 8008da0:	fb02 f303 	mul.w	r3, r2, r3
 8008da4:	1acb      	subs	r3, r1, r3
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <LL_USART_SetBaudRate+0x238>)
 8008dae:	fba3 2302 	umull	r2, r3, r3, r2
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4423      	add	r3, r4
 8008dc2:	b29c      	uxth	r4, r3
 8008dc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008dd2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	464b      	mov	r3, r9
 8008dda:	1891      	adds	r1, r2, r2
 8008ddc:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dde:	415b      	adcs	r3, r3
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de6:	4641      	mov	r1, r8
 8008de8:	1851      	adds	r1, r2, r1
 8008dea:	6339      	str	r1, [r7, #48]	; 0x30
 8008dec:	4649      	mov	r1, r9
 8008dee:	414b      	adcs	r3, r1
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008dfe:	4659      	mov	r1, fp
 8008e00:	00cb      	lsls	r3, r1, #3
 8008e02:	4651      	mov	r1, sl
 8008e04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e08:	4651      	mov	r1, sl
 8008e0a:	00ca      	lsls	r2, r1, #3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4603      	mov	r3, r0
 8008e12:	4642      	mov	r2, r8
 8008e14:	189b      	adds	r3, r3, r2
 8008e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	460a      	mov	r2, r1
 8008e1e:	eb42 0303 	adc.w	r3, r2, r3
 8008e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e30:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008e34:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	18db      	adds	r3, r3, r3
 8008e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e3e:	4613      	mov	r3, r2
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008e4e:	f7f7 f9e3 	bl	8000218 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <LL_USART_SetBaudRate+0x238>)
 8008e58:	fba3 1302 	umull	r1, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	2164      	movs	r1, #100	; 0x64
 8008e60:	fb01 f303 	mul.w	r3, r1, r3
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	3332      	adds	r3, #50	; 0x32
 8008e6a:	4a07      	ldr	r2, [pc, #28]	; (8008e88 <LL_USART_SetBaudRate+0x238>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4423      	add	r3, r4
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e84:	609a      	str	r2, [r3, #8]
}
 8008e86:	e107      	b.n	8009098 <LL_USART_SetBaudRate+0x448>
 8008e88:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008e8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e96:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e9a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	1891      	adds	r1, r2, r2
 8008ea4:	6239      	str	r1, [r7, #32]
 8008ea6:	415b      	adcs	r3, r3
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eae:	4641      	mov	r1, r8
 8008eb0:	1854      	adds	r4, r2, r1
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	eb43 0501 	adc.w	r5, r3, r1
 8008eb8:	f04f 0200 	mov.w	r2, #0
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	00eb      	lsls	r3, r5, #3
 8008ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ec6:	00e2      	lsls	r2, r4, #3
 8008ec8:	4614      	mov	r4, r2
 8008eca:	461d      	mov	r5, r3
 8008ecc:	4643      	mov	r3, r8
 8008ece:	18e3      	adds	r3, r4, r3
 8008ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	eb45 0303 	adc.w	r3, r5, r3
 8008eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ede:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ee8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8008ef8:	4629      	mov	r1, r5
 8008efa:	008b      	lsls	r3, r1, #2
 8008efc:	4621      	mov	r1, r4
 8008efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f02:	4621      	mov	r1, r4
 8008f04:	008a      	lsls	r2, r1, #2
 8008f06:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008f0a:	f7f7 f985 	bl	8000218 <__aeabi_uldivmod>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4b64      	ldr	r3, [pc, #400]	; (80090a4 <LL_USART_SetBaudRate+0x454>)
 8008f14:	fba3 2302 	umull	r2, r3, r3, r2
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	b29c      	uxth	r4, r3
 8008f20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f2e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8008f32:	4642      	mov	r2, r8
 8008f34:	464b      	mov	r3, r9
 8008f36:	1891      	adds	r1, r2, r2
 8008f38:	61b9      	str	r1, [r7, #24]
 8008f3a:	415b      	adcs	r3, r3
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f42:	4641      	mov	r1, r8
 8008f44:	1851      	adds	r1, r2, r1
 8008f46:	6139      	str	r1, [r7, #16]
 8008f48:	4649      	mov	r1, r9
 8008f4a:	414b      	adcs	r3, r1
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	00cb      	lsls	r3, r1, #3
 8008f5e:	4651      	mov	r1, sl
 8008f60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f64:	4651      	mov	r1, sl
 8008f66:	00ca      	lsls	r2, r1, #3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4642      	mov	r2, r8
 8008f70:	189b      	adds	r3, r3, r2
 8008f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f76:	464b      	mov	r3, r9
 8008f78:	460a      	mov	r2, r1
 8008f7a:	eb42 0303 	adc.w	r3, r2, r3
 8008f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	008b      	lsls	r3, r1, #2
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	008a      	lsls	r2, r1, #2
 8008faa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008fae:	f7f7 f933 	bl	8000218 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b3b      	ldr	r3, [pc, #236]	; (80090a4 <LL_USART_SetBaudRate+0x454>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	; 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	3332      	adds	r3, #50	; 0x32
 8008fca:	4a36      	ldr	r2, [pc, #216]	; (80090a4 <LL_USART_SetBaudRate+0x454>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	4423      	add	r3, r4
 8008fdc:	b29c      	uxth	r4, r3
 8008fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fec:	4642      	mov	r2, r8
 8008fee:	464b      	mov	r3, r9
 8008ff0:	1891      	adds	r1, r2, r2
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	415b      	adcs	r3, r3
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ffc:	4641      	mov	r1, r8
 8008ffe:	1851      	adds	r1, r2, r1
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	4649      	mov	r1, r9
 8009004:	414b      	adcs	r3, r1
 8009006:	607b      	str	r3, [r7, #4]
 8009008:	f04f 0200 	mov.w	r2, #0
 800900c:	f04f 0300 	mov.w	r3, #0
 8009010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009014:	4659      	mov	r1, fp
 8009016:	00cb      	lsls	r3, r1, #3
 8009018:	4651      	mov	r1, sl
 800901a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800901e:	4651      	mov	r1, sl
 8009020:	00ca      	lsls	r2, r1, #3
 8009022:	4610      	mov	r0, r2
 8009024:	4619      	mov	r1, r3
 8009026:	4603      	mov	r3, r0
 8009028:	4642      	mov	r2, r8
 800902a:	189b      	adds	r3, r3, r2
 800902c:	673b      	str	r3, [r7, #112]	; 0x70
 800902e:	464b      	mov	r3, r9
 8009030:	460a      	mov	r2, r1
 8009032:	eb42 0303 	adc.w	r3, r2, r3
 8009036:	677b      	str	r3, [r7, #116]	; 0x74
 8009038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800903c:	2200      	movs	r2, #0
 800903e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009040:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800904e:	4649      	mov	r1, r9
 8009050:	008b      	lsls	r3, r1, #2
 8009052:	4641      	mov	r1, r8
 8009054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009058:	4641      	mov	r1, r8
 800905a:	008a      	lsls	r2, r1, #2
 800905c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009060:	f7f7 f8da 	bl	8000218 <__aeabi_uldivmod>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4b0e      	ldr	r3, [pc, #56]	; (80090a4 <LL_USART_SetBaudRate+0x454>)
 800906a:	fba3 1302 	umull	r1, r3, r3, r2
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2164      	movs	r1, #100	; 0x64
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <LL_USART_SetBaudRate+0x454>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	b29b      	uxth	r3, r3
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	b29b      	uxth	r3, r3
 800908c:	4423      	add	r3, r4
 800908e:	b29b      	uxth	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009096:	609a      	str	r2, [r3, #8]
}
 8009098:	bf00      	nop
 800909a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800909e:	46bd      	mov	sp, r7
 80090a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090a4:	51eb851f 	.word	0x51eb851f

080090a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff fd8e 	bl	8008bdc <LL_USART_IsEnabled>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d17a      	bne.n	80091bc <LL_USART_Init+0x114>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80090ce:	f023 030c 	bic.w	r3, r3, #12
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	6851      	ldr	r1, [r2, #4]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	68d2      	ldr	r2, [r2, #12]
 80090da:	4311      	orrs	r1, r2
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	6912      	ldr	r2, [r2, #16]
 80090e0:	4311      	orrs	r1, r2
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	6992      	ldr	r2, [r2, #24]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fd85 	bl	8008c04 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fd92 	bl	8008c2a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f962 	bl	80083d4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a2d      	ldr	r2, [pc, #180]	; (80091c8 <LL_USART_Init+0x120>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d102      	bne.n	800911e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e03d      	b.n	800919a <LL_USART_Init+0xf2>
    }
    else if (USARTx == USART2)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a2a      	ldr	r2, [pc, #168]	; (80091cc <LL_USART_Init+0x124>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d102      	bne.n	800912c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	e036      	b.n	800919a <LL_USART_Init+0xf2>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a28      	ldr	r2, [pc, #160]	; (80091d0 <LL_USART_Init+0x128>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d102      	bne.n	800913a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	e02f      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a25      	ldr	r2, [pc, #148]	; (80091d4 <LL_USART_Init+0x12c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d102      	bne.n	8009148 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	e028      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a23      	ldr	r2, [pc, #140]	; (80091d8 <LL_USART_Init+0x130>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d102      	bne.n	8009156 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	61bb      	str	r3, [r7, #24]
 8009154:	e021      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a20      	ldr	r2, [pc, #128]	; (80091dc <LL_USART_Init+0x134>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d102      	bne.n	8009164 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	e01a      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <LL_USART_Init+0x138>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d102      	bne.n	8009172 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	e013      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <LL_USART_Init+0x13c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d102      	bne.n	8009180 <LL_USART_Init+0xd8>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	e00c      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a19      	ldr	r2, [pc, #100]	; (80091e8 <LL_USART_Init+0x140>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d102      	bne.n	800918e <LL_USART_Init+0xe6>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e005      	b.n	800919a <LL_USART_Init+0xf2>
    }
#endif /* UART9 */
#if defined(UART10)
    else if (USARTx == UART10)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a16      	ldr	r2, [pc, #88]	; (80091ec <LL_USART_Init+0x144>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <LL_USART_Init+0xf2>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00d      	beq.n	80091bc <LL_USART_Init+0x114>
        && (USART_InitStruct->BaudRate != 0U))
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d009      	beq.n	80091bc <LL_USART_Init+0x114>
    {
      status = SUCCESS;
 80091a8:	2300      	movs	r3, #0
 80091aa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69b9      	ldr	r1, [r7, #24]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fd4a 	bl	8008c50 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80091bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	40011000 	.word	0x40011000
 80091cc:	40004400 	.word	0x40004400
 80091d0:	40004800 	.word	0x40004800
 80091d4:	40011400 	.word	0x40011400
 80091d8:	40004c00 	.word	0x40004c00
 80091dc:	40005000 	.word	0x40005000
 80091e0:	40007800 	.word	0x40007800
 80091e4:	40007c00 	.word	0x40007c00
 80091e8:	40011800 	.word	0x40011800
 80091ec:	40011c00 	.word	0x40011c00

080091f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80091f8:	4a04      	ldr	r2, [pc, #16]	; (800920c <LL_SetSystemCoreClock+0x1c>)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6013      	str	r3, [r2, #0]
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	200005bc 	.word	0x200005bc

08009210 <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in u16Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_d(const BusVoltageSensor_Handle_t *pHandle)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	88db      	ldrh	r3, [r3, #6]
#endif
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	88db      	ldrh	r3, [r3, #6]
 8009234:	60fb      	str	r3, [r7, #12]
    temp *= pHandle->ConversionFactor;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	461a      	mov	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	60fb      	str	r3, [r7, #12]
    temp /= 65536U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	60fb      	str	r3, [r7, #12]
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	b29b      	uxth	r3, r3
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <VBS_CheckVbus>:
  *         bus voltage and protection threshold values
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t VBS_CheckVbus(const BusVoltageSensor_Handle_t *pHandle)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  {
    temp_faultState = pHandle->FaultState;
  }
  return (temp_faultState);
#else
  return (pHandle->FaultState);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	891b      	ldrh	r3, [r3, #8]
#endif
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b08e      	sub	sp, #56	; 0x38
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  qd_t Local_Vqd = Vqd;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	60fb      	str	r3, [r7, #12]
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8009286:	f9b7 3000 	ldrsh.w	r3, [r7]
 800928a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8009294:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009298:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
    square_limit = maxModule * maxModule;
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	fb03 f303 	mul.w	r3, r3, r3
 80092a8:	623b      	str	r3, [r7, #32]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	885b      	ldrh	r3, [r3, #2]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	61fb      	str	r3, [r7, #28]
    square_sum = square_q + square_d;
 80092ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	4413      	add	r3, r2
 80092c0:	61bb      	str	r3, [r7, #24]

    if (square_sum > square_limit)
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	dd35      	ble.n	8009336 <Circle_Limitation+0xc4>
    {
      if (square_d <= vd_square_limit)
 80092ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	dc12      	bgt.n	80092f8 <Circle_Limitation+0x86>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - square_d;
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	617b      	str	r3, [r7, #20]
        new_q = MCM_Sqrt(square_temp);
 80092da:	6978      	ldr	r0, [r7, #20]
 80092dc:	f7f9 fc2c 	bl	8002b38 <MCM_Sqrt>
 80092e0:	6378      	str	r0, [r7, #52]	; 0x34
#endif
        if (Vqd.q < 0)
 80092e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	da02      	bge.n	80092f0 <Circle_Limitation+0x7e>
        {
          new_q = -new_q;
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	425b      	negs	r3, r3
 80092ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        new_d = Vqd.d;
 80092f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092f4:	633b      	str	r3, [r7, #48]	; 0x30
 80092f6:	e018      	b.n	800932a <Circle_Limitation+0xb8>
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	633b      	str	r3, [r7, #48]	; 0x30
        if (Vqd.d < 0)
 80092fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009302:	2b00      	cmp	r3, #0
 8009304:	da02      	bge.n	800930c <Circle_Limitation+0x9a>
        {
          new_d = -new_d;
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	425b      	negs	r3, r3
 800930a:	633b      	str	r3, [r7, #48]	; 0x30
        }
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
 800930c:	6a3a      	ldr	r2, [r7, #32]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	617b      	str	r3, [r7, #20]
        new_q = MCM_Sqrt(square_temp);
 8009314:	6978      	ldr	r0, [r7, #20]
 8009316:	f7f9 fc0f 	bl	8002b38 <MCM_Sqrt>
 800931a:	6378      	str	r0, [r7, #52]	; 0x34
#endif
        if (Vqd.q < 0)
 800931c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009320:	2b00      	cmp	r3, #0
 8009322:	da02      	bge.n	800932a <Circle_Limitation+0xb8>
        {
          new_q = - new_q;
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	425b      	negs	r3, r3
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	b21b      	sxth	r3, r3
 800932e:	81bb      	strh	r3, [r7, #12]
      Local_Vqd.d = (int16_t)new_d;
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	b21b      	sxth	r3, r3
 8009334:	81fb      	strh	r3, [r7, #14]
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	2300      	movs	r3, #0
 800933c:	8a3a      	ldrh	r2, [r7, #16]
 800933e:	f362 030f 	bfi	r3, r2, #0, #16
 8009342:	8a7a      	ldrh	r2, [r7, #18]
 8009344:	f362 431f 	bfi	r3, r2, #16, #16
}
 8009348:	4618      	mov	r0, r3
 800934a:	3738      	adds	r7, #56	; 0x38
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <LL_GPIO_SetOutputPin>:
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	619a      	str	r2, [r3, #24]
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_GPIO_ResetOutputPin>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	041a      	lsls	r2, r3, #16
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	619a      	str	r2, [r3, #24]
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <DOUT_SetOutputState>:
  * @param pHandle handler address of the digital output component.
  * @param State New requested state
  *
  */
__weak void DOUT_SetOutputState(DOUT_handle_t *pHandle, DOutputState_t State)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
    /* Nothing to do */
  }
  else
  {
#endif
    if (ACTIVE == State)
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d115      	bne.n	80093c8 <DOUT_SetOutputState+0x3e>
    {
      if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7a9b      	ldrb	r3, [r3, #10]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d108      	bne.n	80093b6 <DOUT_SetOutputState+0x2c>
      {
        LL_GPIO_SetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	891b      	ldrh	r3, [r3, #8]
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7ff ffce 	bl	8009350 <LL_GPIO_SetOutputPin>
 80093b4:	e01d      	b.n	80093f2 <DOUT_SetOutputState+0x68>
      }
      else
      {
        LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	891b      	ldrh	r3, [r3, #8]
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f7ff ffd3 	bl	800936c <LL_GPIO_ResetOutputPin>
 80093c6:	e014      	b.n	80093f2 <DOUT_SetOutputState+0x68>
      }
    }
    else if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7a9b      	ldrb	r3, [r3, #10]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d108      	bne.n	80093e2 <DOUT_SetOutputState+0x58>
    {
      LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	891b      	ldrh	r3, [r3, #8]
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f7ff ffc6 	bl	800936c <LL_GPIO_ResetOutputPin>
 80093e0:	e007      	b.n	80093f2 <DOUT_SetOutputState+0x68>
    }
    else
    {
      LL_GPIO_SetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	891b      	ldrh	r3, [r3, #8]
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f7ff ffaf 	bl	8009350 <LL_GPIO_SetOutputPin>
    }
    pHandle->OutputState = State;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_DIG_OUT
  }
#endif
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <FF_Init>:
  * @param  pPIDId Id PID structure.
  * @param  pPIDIq Iq PID structure.
  */
__weak void FF_Init(FF_Handle_t *pHandle, BusVoltageSensor_Handle_t *pBusSensor, PID_Handle_t *pPIDId,
                    PID_Handle_t *pPIDIq)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	60da      	str	r2, [r3, #12]
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	611a      	str	r2, [r3, #16]
    pHandle->wConstant_2  = pHandle->wDefConstant_2;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	615a      	str	r2, [r3, #20]

    pHandle->pBus_Sensor = pBusSensor;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	619a      	str	r2, [r3, #24]

    pHandle->pPID_d = pPIDId;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	621a      	str	r2, [r3, #32]

    pHandle->pPID_q = pPIDIq;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	61da      	str	r2, [r3, #28]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <FF_Clear>:
  * @brief  It should be called before each motor start and clears the Feed-forward
  *         internal variables.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_Clear(FF_Handle_t *pHandle)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Vqdff.q = (int16_t)0;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	801a      	strh	r2, [r3, #0]
    pHandle->Vqdff.d = (int16_t)0;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	805a      	strh	r2, [r3, #2]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <FF_VqdffComputation>:
  * @param  Iqdref Iqd reference components used to calculate the Feed-forward
  *         action.
  * @param  pSTC Pointer on speed and torque controller structure.
  */
__weak void FF_VqdffComputation(FF_Handle_t *pHandle, qd_t Iqdref, SpeednTorqCtrl_Handle_t *pSTC)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
    int32_t wtemp1, wtemp2;
    int16_t hSpeed_dpp;
    uint16_t hAvBusVoltage_d;
    SpeednPosFdbk_Handle_t *SpeedSensor;

    SpeedSensor = STC_GetSpeedSensor(pSTC);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fe1f 	bl	800b0b4 <STC_GetSpeedSensor>
 8009476:	61b8      	str	r0, [r7, #24]
    hSpeed_dpp = SPD_GetElSpeedDpp(SpeedSensor);
 8009478:	69b8      	ldr	r0, [r7, #24]
 800947a:	f001 ff62 	bl	800b342 <SPD_GetElSpeedDpp>
 800947e:	4603      	mov	r3, r0
 8009480:	82fb      	strh	r3, [r7, #22]
    hAvBusVoltage_d = VBS_GetAvBusVoltage_d(pHandle->pBus_Sensor) / 2U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fec2 	bl	8009210 <VBS_GetAvBusVoltage_d>
 800948c:	4603      	mov	r3, r0
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	82bb      	strh	r3, [r7, #20]

    if (hAvBusVoltage_d != (uint16_t)0)
 8009492:	8abb      	ldrh	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d070      	beq.n	800957a <FF_VqdffComputation+0x116>
    {
      /*q-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 8009498:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800949c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	da02      	bge.n	80094ae <FF_VqdffComputation+0x4a>
 80094a8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80094ac:	337f      	adds	r3, #127	; 0x7f
 80094ae:	13db      	asrs	r3, r3, #15
 80094b0:	613b      	str	r3, [r7, #16]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	fb03 f202 	mul.w	r2, r3, r2
 80094bc:	8abb      	ldrh	r3, [r7, #20]
 80094be:	fb92 f3f3 	sdiv	r3, r2, r3
 80094c2:	61fb      	str	r3, [r7, #28]
      wtemp2 *= (int32_t)2;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]

      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80094d2:	fb03 f202 	mul.w	r2, r3, r2
 80094d6:	8abb      	ldrh	r3, [r7, #20]
 80094d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	613b      	str	r3, [r7, #16]

      wtemp2 = wtemp1 + wtemp2 + pHandle->VqdAvPIout.q;
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	4413      	add	r3, r2
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	61fb      	str	r3, [r7, #28]

      SATURATION_TO_S16(wtemp2)
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f6:	db03      	blt.n	8009500 <FF_VqdffComputation+0x9c>
 80094f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	e005      	b.n	800950c <FF_VqdffComputation+0xa8>
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8009506:	dc01      	bgt.n	800950c <FF_VqdffComputation+0xa8>
 8009508:	4b21      	ldr	r3, [pc, #132]	; (8009590 <FF_VqdffComputation+0x12c>)
 800950a:	61fb      	str	r3, [r7, #28]

      pHandle->Vqdff.q = (int16_t)(wtemp2);
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	b21a      	sxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	801a      	strh	r2, [r3, #0]

      /* d-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 8009514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009518:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800951c:	fb02 f303 	mul.w	r3, r2, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	da02      	bge.n	800952a <FF_VqdffComputation+0xc6>
 8009524:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009528:	337f      	adds	r3, #127	; 0x7f
 800952a:	13db      	asrs	r3, r3, #15
 800952c:	613b      	str	r3, [r7, #16]
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	fb03 f202 	mul.w	r2, r3, r2
 8009538:	8abb      	ldrh	r3, [r7, #20]
 800953a:	fb92 f3f3 	sdiv	r3, r2, r3
 800953e:	61fb      	str	r3, [r7, #28]
      wtemp2 *= (int32_t)2;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	61fb      	str	r3, [r7, #28]

      wtemp2 = (int32_t)pHandle->VqdAvPIout.d - wtemp2;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800954c:	461a      	mov	r2, r3
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	61fb      	str	r3, [r7, #28]

      SATURATION_TO_S16(wtemp2)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955a:	db03      	blt.n	8009564 <FF_VqdffComputation+0x100>
 800955c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	e005      	b.n	8009570 <FF_VqdffComputation+0x10c>
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800956a:	dc01      	bgt.n	8009570 <FF_VqdffComputation+0x10c>
 800956c:	4b08      	ldr	r3, [pc, #32]	; (8009590 <FF_VqdffComputation+0x12c>)
 800956e:	61fb      	str	r3, [r7, #28]

      pHandle->Vqdff.d = (int16_t)(wtemp2);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	b21a      	sxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	805a      	strh	r2, [r3, #2]
      pHandle->Vqdff.d = (int16_t)0;
    }
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009578:	e005      	b.n	8009586 <FF_VqdffComputation+0x122>
      pHandle->Vqdff.q = (int16_t)0;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	801a      	strh	r2, [r3, #0]
      pHandle->Vqdff.d = (int16_t)0;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	805a      	strh	r2, [r3, #2]
}
 8009586:	bf00      	nop
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	ffff8001 	.word	0xffff8001

08009594 <FF_VqdConditioning>:
  * @param  pHandle Feed-forward structure.
  * @param  Vqd Initial value of Vqd to be manipulated by Feed-forward action .
  * @retval qd_t Vqd conditioned values.
  */
__weak qd_t FF_VqdConditioning(FF_Handle_t *pHandle, qd_t Vqd)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  else
  {
#endif
    int32_t wtemp;

    pHandle->VqdPIout = Vqd;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	605a      	str	r2, [r3, #4]

    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 80095a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095b0:	4413      	add	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

    SATURATION_TO_S16(wtemp)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ba:	db03      	blt.n	80095c4 <FF_VqdConditioning+0x30>
 80095bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e005      	b.n	80095d0 <FF_VqdConditioning+0x3c>
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80095ca:	dc01      	bgt.n	80095d0 <FF_VqdConditioning+0x3c>
 80095cc:	4b16      	ldr	r3, [pc, #88]	; (8009628 <FF_VqdConditioning+0x94>)
 80095ce:	617b      	str	r3, [r7, #20]

    lVqd.q = (int16_t)wtemp;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	b21b      	sxth	r3, r3
 80095d4:	81bb      	strh	r3, [r7, #12]

    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 80095d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80095e2:	4413      	add	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]

    SATURATION_TO_S16(wtemp)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ec:	db03      	blt.n	80095f6 <FF_VqdConditioning+0x62>
 80095ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	e005      	b.n	8009602 <FF_VqdConditioning+0x6e>
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80095fc:	dc01      	bgt.n	8009602 <FF_VqdConditioning+0x6e>
 80095fe:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <FF_VqdConditioning+0x94>)
 8009600:	617b      	str	r3, [r7, #20]

    lVqd.d = (int16_t)wtemp;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	b21b      	sxth	r3, r3
 8009606:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
  return (lVqd);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	2300      	movs	r3, #0
 800960e:	8a3a      	ldrh	r2, [r7, #16]
 8009610:	f362 030f 	bfi	r3, r2, #0, #16
 8009614:	8a7a      	ldrh	r2, [r7, #18]
 8009616:	f362 431f 	bfi	r3, r2, #16, #16
}
 800961a:	4618      	mov	r0, r3
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	ffff8001 	.word	0xffff8001

0800962c <FF_DataProcess>:
  * @brief  It low-pass filters the Vqd voltage coming from the speed PI. Filter
  *         bandwidth depends on hVqdLowPassFilterBW parameter.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_DataProcess(FF_Handle_t *pHandle)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    int32_t wAux;
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009638:	3b01      	subs	r3, #1
 800963a:	60fb      	str	r3, [r7, #12]

#ifndef FULL_MISRA_C_COMPLIANCY_FWD_FDB
    /* Computation of average Vqd as output by PI(D) current controllers, used by
       Feed-forward controller algorithm */
    wAux = (int32_t)(pHandle->VqdAvPIout.q) * lowPassFilterBW;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009642:	461a      	mov	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	fb02 f303 	mul.w	r3, r2, r3
 800964a:	60bb      	str	r3, [r7, #8]
    wAux += pHandle->VqdPIout.q;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009652:	461a      	mov	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4413      	add	r3, r2
 8009658:	60bb      	str	r3, [r7, #8]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800965e:	461a      	mov	r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4113      	asrs	r3, r2
 8009664:	b21a      	sxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	811a      	strh	r2, [r3, #8]

    wAux = (int32_t)(pHandle->VqdAvPIout.d) * lowPassFilterBW;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009670:	461a      	mov	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	fb02 f303 	mul.w	r3, r2, r3
 8009678:	60bb      	str	r3, [r7, #8]
    wAux += pHandle->VqdPIout.d;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009680:	461a      	mov	r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4413      	add	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.d = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800968c:	461a      	mov	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4113      	asrs	r3, r2
 8009692:	b21a      	sxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	815a      	strh	r2, [r3, #10]
    pHandle->VqdAvPIout.d = (int16_t)(wAux / (int32_t)(pHandle->hVqdLowPassFilterBW));
#endif
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009698:	bf00      	nop
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <FF_InitFOCAdditionalMethods>:
/**
  * @brief  Use this method to initialize FF variables in START_TO_RUN state.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_InitFOCAdditionalMethods(FF_Handle_t *pHandle)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->VqdAvPIout.q = 0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	811a      	strh	r2, [r3, #8]
    pHandle->VqdAvPIout.d = 0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	815a      	strh	r2, [r3, #10]
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fe1d 	bl	800a2fe <PID_SetIntegralTerm>
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fe17 	bl	800a2fe <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <FF_GetVqdff>:
  *         components.
  * @param  pHandle Feed-forward structure.
  * @retval qd_t Vqd Feed-forward components.
  */
__weak qd_t FF_GetVqdff(const FF_Handle_t *pHandle)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  {
    retqt = pHandle->Vqdff;
  }
  return (retqt);
#else
  return (pHandle->Vqdff);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	89ba      	ldrh	r2, [r7, #12]
 80096ea:	f362 030f 	bfi	r3, r2, #0, #16
 80096ee:	89fa      	ldrh	r2, [r7, #14]
 80096f0:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <FF_GetVqdAvPIout>:
  *         currents PI regulators.
  * @param  pHandle Feed-forward structure.
  * @retval qd_t Averaged output of qd axes currents PI regulators.
  */
__weak qd_t FF_GetVqdAvPIout(const FF_Handle_t *pHandle)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  {
    retqt = pHandle->VqdAvPIout;
  }
  return (retqt);
#else
  return (pHandle->VqdAvPIout);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	2300      	movs	r3, #0
 8009710:	89ba      	ldrh	r2, [r7, #12]
 8009712:	f362 030f 	bfi	r3, r2, #0, #16
 8009716:	89fa      	ldrh	r2, [r7, #14]
 8009718:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <ICL_Init>:
  * @param  pHandle: handler of the current instance of the ICL component
  * @param  pVBS the bus voltage sensor used by the ICL.
  * @param  pDOUT the digital output used by the ICL.
  */
__weak void ICL_Init(ICL_Handle_t *pHandle, BusVoltageSensor_Handle_t *pVBS, DOUT_handle_t *pDOUT)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  pHandle->pVBS = pVBS;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	601a      	str	r2, [r3, #0]
  pHandle->pDOUT = pDOUT;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
  DOUT_SetOutputState(pDOUT, ACTIVE);
 8009740:	2101      	movs	r1, #1
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fe21 	bl	800938a <DOUT_SetOutputState>
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <ICL_Exec>:
  *         called during background task.
  * @param  pHandle handler of the current instance of the ICL component
  * @retval ICLState_t returns the current ICL state machine
  */
__weak ICL_State_t ICL_Exec(ICL_Handle_t *pHandle)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* ICL actions.*/
  switch (pHandle->ICLstate)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7a1b      	ldrb	r3, [r3, #8]
 800975c:	3b01      	subs	r3, #1
 800975e:	2b03      	cmp	r3, #3
 8009760:	d866      	bhi.n	8009830 <ICL_Exec+0xe0>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <ICL_Exec+0x18>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009779 	.word	0x08009779
 800976c:	080097bd 	.word	0x080097bd
 8009770:	0800979f 	.word	0x0800979f
 8009774:	08009805 	.word	0x08009805
  {
    case ICL_ACTIVATION:
    {
      /* ICL activation: counting the step before pass in ICL_ACTIVE */
      if (pHandle->hICLTicksCounter == 0u)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	895b      	ldrh	r3, [r3, #10]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <ICL_Exec+0x40>
      {
        pHandle->ICLstate = ICL_ACTIVE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	721a      	strb	r2, [r3, #8]
        pHandle->hICLTicksCounter = pHandle->hICLChargingDelayTicks;        
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	89da      	ldrh	r2, [r3, #14]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	815a      	strh	r2, [r3, #10]
      else
      {
        pHandle->hICLTicksCounter--;
      }
    }
    break;
 800978e:	e054      	b.n	800983a <ICL_Exec+0xea>
        pHandle->hICLTicksCounter--;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	895b      	ldrh	r3, [r3, #10]
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	815a      	strh	r2, [r3, #10]
    break;
 800979c:	e04d      	b.n	800983a <ICL_Exec+0xea>

    case ICL_DEACTIVATION:
    {
      /* ICL deactivation: counting the step before pass in ICL_INACTIVE.*/
      if (pHandle->hICLTicksCounter == 0u)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	895b      	ldrh	r3, [r3, #10]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d103      	bne.n	80097ae <ICL_Exec+0x5e>
      {
        pHandle->ICLstate = ICL_INACTIVE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2204      	movs	r2, #4
 80097aa:	721a      	strb	r2, [r3, #8]
      else
      {
        pHandle->hICLTicksCounter--;
      }
    }
    break;
 80097ac:	e045      	b.n	800983a <ICL_Exec+0xea>
        pHandle->hICLTicksCounter--;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	895b      	ldrh	r3, [r3, #10]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	815a      	strh	r2, [r3, #10]
    break;
 80097ba:	e03e      	b.n	800983a <ICL_Exec+0xea>

    case ICL_ACTIVE:
    {
  
      /* ICL is active: if bus is present and capacitor charging time elapsed*/
      if (pHandle->hICLTicksCounter == 0u)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d118      	bne.n	80097f6 <ICL_Exec+0xa6>
      {
        if (VBS_GetAvBusVoltage_d(pHandle->pVBS) > pHandle->hICLVoltageThreshold){
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fd21 	bl	8009210 <VBS_GetAvBusVoltage_d>
 80097ce:	4603      	mov	r3, r0
 80097d0:	461a      	mov	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	8a1b      	ldrh	r3, [r3, #16]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d92c      	bls.n	8009834 <ICL_Exec+0xe4>
          DOUT_SetOutputState(pHandle->pDOUT, INACTIVE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fdd2 	bl	800938a <DOUT_SetOutputState>
          pHandle->ICLstate = ICL_DEACTIVATION;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2203      	movs	r2, #3
 80097ea:	721a      	strb	r2, [r3, #8]
          pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	899a      	ldrh	r2, [r3, #12]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	815a      	strh	r2, [r3, #10]
      else
      {
          pHandle->hICLTicksCounter--;
      }
    }
    break;
 80097f4:	e01e      	b.n	8009834 <ICL_Exec+0xe4>
          pHandle->hICLTicksCounter--;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	895b      	ldrh	r3, [r3, #10]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	815a      	strh	r2, [r3, #10]
    break;
 8009802:	e017      	b.n	8009834 <ICL_Exec+0xe4>

    case ICL_INACTIVE:
    {
      /* ICL is inactive: if bus is not present activate the ICL */
      if (VBS_CheckVbus(pHandle->pVBS) == MC_UNDER_VOLT)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fd26 	bl	800925a <VBS_CheckVbus>
 800980e:	4603      	mov	r3, r0
 8009810:	2b04      	cmp	r3, #4
 8009812:	d111      	bne.n	8009838 <ICL_Exec+0xe8>
      {
        DOUT_SetOutputState(pHandle->pDOUT, ACTIVE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2101      	movs	r1, #1
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fdb5 	bl	800938a <DOUT_SetOutputState>
        pHandle->ICLstate = ICL_ACTIVATION;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	721a      	strb	r2, [r3, #8]
        pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	899a      	ldrh	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	815a      	strh	r2, [r3, #10]
      }
    }
    break;
 800982e:	e003      	b.n	8009838 <ICL_Exec+0xe8>

    case ICL_IDLE:
    default:
    {
    }
    break;
 8009830:	bf00      	nop
 8009832:	e002      	b.n	800983a <ICL_Exec+0xea>
    break;
 8009834:	bf00      	nop
 8009836:	e000      	b.n	800983a <ICL_Exec+0xea>
    break;
 8009838:	bf00      	nop
  }

  return pHandle->ICLstate;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7a1b      	ldrb	r3, [r3, #8]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop

08009848 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
  uint16_t *packetHeader;
  uint16_t command;
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
 8009850:	2300      	movs	r3, #0
 8009852:	773b      	strb	r3, [r7, #28]
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	61bb      	str	r3, [r7, #24]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	f023 0307 	bic.w	r3, r3, #7
 8009862:	83fb      	strh	r3, [r7, #30]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8009864:	8bfb      	ldrh	r3, [r7, #30]
 8009866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800986a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800986e:	d109      	bne.n	8009884 <MCP_ReceivedPacket+0x3c>
    {
      userCommand = (command >> 3) & 0x1f;
 8009870:	8bfb      	ldrh	r3, [r7, #30]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	b29b      	uxth	r3, r3
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	773b      	strb	r3, [r7, #28]
      command = MCP_USER_CMD;    	
 800987e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009882:	83fb      	strh	r3, [r7, #30]
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	75fb      	strb	r3, [r7, #23]

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	015b      	lsls	r3, r3, #5
 8009898:	4ac7      	ldr	r2, [pc, #796]	; (8009bb8 <MCP_ReceivedPacket+0x370>)
 800989a:	4413      	add	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	899b      	ldrh	r3, [r3, #12]
 80098a2:	3b02      	subs	r3, #2
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	819a      	strh	r2, [r3, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	1c9a      	adds	r2, r3, #2
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	899b      	ldrh	r3, [r3, #12]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29b      	uxth	r3, r3
 80098be:	81fb      	strh	r3, [r7, #14]
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	81da      	strh	r2, [r3, #14]

    switch (command)
 80098c6:	8bfb      	ldrh	r3, [r7, #30]
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098cc:	f000 813e 	beq.w	8009b4c <MCP_ReceivedPacket+0x304>
 80098d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d4:	f300 815c 	bgt.w	8009b90 <MCP_ReceivedPacket+0x348>
 80098d8:	2b38      	cmp	r3, #56	; 0x38
 80098da:	f300 80c5 	bgt.w	8009a68 <MCP_ReceivedPacket+0x220>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da4a      	bge.n	8009978 <MCP_ReceivedPacket+0x130>
 80098e2:	e155      	b.n	8009b90 <MCP_ReceivedPacket+0x348>
 80098e4:	3b48      	subs	r3, #72	; 0x48
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	f200 8152 	bhi.w	8009b90 <MCP_ReceivedPacket+0x348>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <MCP_ReceivedPacket+0xac>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009b17 	.word	0x08009b17
 80098f8:	08009b91 	.word	0x08009b91
 80098fc:	08009b91 	.word	0x08009b91
 8009900:	08009b91 	.word	0x08009b91
 8009904:	08009b91 	.word	0x08009b91
 8009908:	08009b91 	.word	0x08009b91
 800990c:	08009b91 	.word	0x08009b91
 8009910:	08009b91 	.word	0x08009b91
 8009914:	08009b23 	.word	0x08009b23
 8009918:	08009b91 	.word	0x08009b91
 800991c:	08009b91 	.word	0x08009b91
 8009920:	08009b91 	.word	0x08009b91
 8009924:	08009b91 	.word	0x08009b91
 8009928:	08009b91 	.word	0x08009b91
 800992c:	08009b91 	.word	0x08009b91
 8009930:	08009b91 	.word	0x08009b91
 8009934:	08009b23 	.word	0x08009b23
 8009938:	08009b91 	.word	0x08009b91
 800993c:	08009b91 	.word	0x08009b91
 8009940:	08009b91 	.word	0x08009b91
 8009944:	08009b91 	.word	0x08009b91
 8009948:	08009b91 	.word	0x08009b91
 800994c:	08009b91 	.word	0x08009b91
 8009950:	08009b91 	.word	0x08009b91
 8009954:	08009b23 	.word	0x08009b23
 8009958:	08009b91 	.word	0x08009b91
 800995c:	08009b91 	.word	0x08009b91
 8009960:	08009b91 	.word	0x08009b91
 8009964:	08009b91 	.word	0x08009b91
 8009968:	08009b91 	.word	0x08009b91
 800996c:	08009b91 	.word	0x08009b91
 8009970:	08009b91 	.word	0x08009b91
 8009974:	08009b29 	.word	0x08009b29
 8009978:	2b38      	cmp	r3, #56	; 0x38
 800997a:	f200 8109 	bhi.w	8009b90 <MCP_ReceivedPacket+0x348>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <MCP_ReceivedPacket+0x13c>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009a77 	.word	0x08009a77
 8009988:	08009b91 	.word	0x08009b91
 800998c:	08009b91 	.word	0x08009b91
 8009990:	08009b91 	.word	0x08009b91
 8009994:	08009b91 	.word	0x08009b91
 8009998:	08009b91 	.word	0x08009b91
 800999c:	08009b91 	.word	0x08009b91
 80099a0:	08009b91 	.word	0x08009b91
 80099a4:	08009a8b 	.word	0x08009a8b
 80099a8:	08009b91 	.word	0x08009b91
 80099ac:	08009b91 	.word	0x08009b91
 80099b0:	08009b91 	.word	0x08009b91
 80099b4:	08009b91 	.word	0x08009b91
 80099b8:	08009b91 	.word	0x08009b91
 80099bc:	08009b91 	.word	0x08009b91
 80099c0:	08009b91 	.word	0x08009b91
 80099c4:	08009a9b 	.word	0x08009a9b
 80099c8:	08009b91 	.word	0x08009b91
 80099cc:	08009b91 	.word	0x08009b91
 80099d0:	08009b91 	.word	0x08009b91
 80099d4:	08009b91 	.word	0x08009b91
 80099d8:	08009b91 	.word	0x08009b91
 80099dc:	08009b91 	.word	0x08009b91
 80099e0:	08009b91 	.word	0x08009b91
 80099e4:	08009aab 	.word	0x08009aab
 80099e8:	08009b91 	.word	0x08009b91
 80099ec:	08009b91 	.word	0x08009b91
 80099f0:	08009b91 	.word	0x08009b91
 80099f4:	08009b91 	.word	0x08009b91
 80099f8:	08009b91 	.word	0x08009b91
 80099fc:	08009b91 	.word	0x08009b91
 8009a00:	08009b91 	.word	0x08009b91
 8009a04:	08009abd 	.word	0x08009abd
 8009a08:	08009b91 	.word	0x08009b91
 8009a0c:	08009b91 	.word	0x08009b91
 8009a10:	08009b91 	.word	0x08009b91
 8009a14:	08009b91 	.word	0x08009b91
 8009a18:	08009b91 	.word	0x08009b91
 8009a1c:	08009b91 	.word	0x08009b91
 8009a20:	08009b91 	.word	0x08009b91
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009b91 	.word	0x08009b91
 8009a2c:	08009b91 	.word	0x08009b91
 8009a30:	08009b91 	.word	0x08009b91
 8009a34:	08009b91 	.word	0x08009b91
 8009a38:	08009b91 	.word	0x08009b91
 8009a3c:	08009b91 	.word	0x08009b91
 8009a40:	08009b91 	.word	0x08009b91
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009b91 	.word	0x08009b91
 8009a4c:	08009b91 	.word	0x08009b91
 8009a50:	08009b91 	.word	0x08009b91
 8009a54:	08009b91 	.word	0x08009b91
 8009a58:	08009b91 	.word	0x08009b91
 8009a5c:	08009b91 	.word	0x08009b91
 8009a60:	08009b91 	.word	0x08009b91
 8009a64:	08009b0b 	.word	0x08009b0b
 8009a68:	2b68      	cmp	r3, #104	; 0x68
 8009a6a:	f300 8091 	bgt.w	8009b90 <MCP_ReceivedPacket+0x348>
 8009a6e:	2b48      	cmp	r3, #72	; 0x48
 8009a70:	f6bf af38 	bge.w	80098e4 <MCP_ReceivedPacket+0x9c>
 8009a74:	e08c      	b.n	8009b90 <MCP_ReceivedPacket+0x348>
    {
      case GET_MCP_VERSION:
        pHandle->txLength = 4;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2204      	movs	r2, #4
 8009a7a:	81da      	strh	r2, [r3, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2201      	movs	r2, #1
 8009a82:	701a      	strb	r2, [r3, #0]
        MCPResponse = MCP_CMD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	777b      	strb	r3, [r7, #29]
      break;
 8009a88:	e085      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      case SET_DATA_ELEMENT:
      {
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8009a8a:	89fb      	ldrh	r3, [r7, #14]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fa fabf 	bl	8004012 <RI_SetRegCommandParser>
 8009a94:	4603      	mov	r3, r0
 8009a96:	777b      	strb	r3, [r7, #29]
        break;
 8009a98:	e07d      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case GET_DATA_ELEMENT:
      {
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8009a9a:	89fb      	ldrh	r3, [r7, #14]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fa fb30 	bl	8004104 <RI_GetRegCommandParser>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	777b      	strb	r3, [r7, #29]
        break;
 8009aa8:	e075      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case START_MOTOR:
      {
        MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f7f8 fc32 	bl	8002314 <MCI_StartMotor>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f083 0301 	eor.w	r3, r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	777b      	strb	r3, [r7, #29]
        break;
 8009aba:	e06c      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case STOP_MOTOR: /* Todo: Check the pertinance of return value*/
      {
        (void)MCI_StopMotor(pMCI);
 8009abc:	6938      	ldr	r0, [r7, #16]
 8009abe:	f7f8 fc4f 	bl	8002360 <MCI_StopMotor>
        MCPResponse = MCP_CMD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	777b      	strb	r3, [r7, #29]
        break;
 8009ac6:	e066      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case STOP_RAMP:
      {
        if (RUN == MCI_GetSTMState(pMCI))
 8009ac8:	6938      	ldr	r0, [r7, #16]
 8009aca:	f7f8 fd20 	bl	800250e <MCI_GetSTMState>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b06      	cmp	r3, #6
 8009ad2:	d102      	bne.n	8009ada <MCP_ReceivedPacket+0x292>
        {
          MCI_StopRamp(pMCI);
 8009ad4:	6938      	ldr	r0, [r7, #16]
 8009ad6:	f7f8 fdbf 	bl	8002658 <MCI_StopRamp>
        }
        MCPResponse = MCP_CMD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	777b      	strb	r3, [r7, #29]
        break;
 8009ade:	e05a      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case START_STOP:
      {
        /* Queries the STM and a command start or stop depending on the state. */
        if (IDLE == MCI_GetSTMState(pMCI))
 8009ae0:	6938      	ldr	r0, [r7, #16]
 8009ae2:	f7f8 fd14 	bl	800250e <MCI_GetSTMState>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d108      	bne.n	8009afe <MCP_ReceivedPacket+0x2b6>
        {
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f7f8 fc11 	bl	8002314 <MCI_StartMotor>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f083 0301 	eor.w	r3, r3, #1
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	777b      	strb	r3, [r7, #29]
        else
        {
          (void)MCI_StopMotor(pMCI);
          MCPResponse = MCP_CMD_OK;
        }
        break;
 8009afc:	e04b      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
          (void)MCI_StopMotor(pMCI);
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f7f8 fc2e 	bl	8002360 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	777b      	strb	r3, [r7, #29]
        break;
 8009b08:	e045      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case FAULT_ACK:
      {
        (void)MCI_FaultAcknowledged(pMCI);
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f7f8 fc58 	bl	80023c0 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	777b      	strb	r3, [r7, #29]
        break;
 8009b14:	e03f      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }

      case IQDREF_CLEAR:
      {
        MCI_Clear_Iqdref(pMCI);
 8009b16:	6938      	ldr	r0, [r7, #16]
 8009b18:	f7f8 fe6b 	bl	80027f2 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	777b      	strb	r3, [r7, #29]
        break;
 8009b20:	e039      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }
      case PFC_ENABLE:
      case PFC_DISABLE:
      case PFC_FAULT_ACK:
      {
        MCPResponse = MCP_CMD_UNKNOWN;
 8009b22:	2302      	movs	r3, #2
 8009b24:	777b      	strb	r3, [r7, #29]
        break;
 8009b26:	e036      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }      
      case PROFILER_CMD:
      {
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8998      	ldrh	r0, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6859      	ldr	r1, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f103 040e 	add.w	r4, r3, #14
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	4623      	mov	r3, r4
 8009b42:	f7f8 fb42 	bl	80021ca <MC_ProfilerCommand>
 8009b46:	4603      	mov	r3, r0
 8009b48:	777b      	strb	r3, [r7, #29]
        break;
 8009b4a:	e024      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      }
      
      case MCP_USER_CMD:
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8009b4c:	7f3b      	ldrb	r3, [r7, #28]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d81b      	bhi.n	8009b8a <MCP_ReceivedPacket+0x342>
 8009b52:	7f3b      	ldrb	r3, [r7, #28]
 8009b54:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <MCP_ReceivedPacket+0x374>)
 8009b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d015      	beq.n	8009b8a <MCP_ReceivedPacket+0x342>
    	  {
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8009b5e:	7f3b      	ldrb	r3, [r7, #28]
 8009b60:	4a16      	ldr	r2, [pc, #88]	; (8009bbc <MCP_ReceivedPacket+0x374>)
 8009b62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8998      	ldrh	r0, [r3, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6859      	ldr	r1, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 050e 	add.w	r5, r3, #14
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	462b      	mov	r3, r5
 8009b80:	47a0      	blx	r4
 8009b82:	4603      	mov	r3, r0
 8009b84:	777b      	strb	r3, [r7, #29]
 8009b86:	bf00      	nop
    	  }
    	  else
    	  {
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
    	  }
        break;
 8009b88:	e005      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8009b8a:	230d      	movs	r3, #13
 8009b8c:	777b      	strb	r3, [r7, #29]
        break;
 8009b8e:	e002      	b.n	8009b96 <MCP_ReceivedPacket+0x34e>
      default :
      {
        MCPResponse = MCP_CMD_UNKNOWN;
 8009b90:	2302      	movs	r3, #2
 8009b92:	777b      	strb	r3, [r7, #29]
        break;
 8009b94:	bf00      	nop
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	89d2      	ldrh	r2, [r2, #14]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	7f7a      	ldrb	r2, [r7, #29]
 8009ba2:	701a      	strb	r2, [r3, #0]
    pHandle->txLength++;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	89db      	ldrh	r3, [r3, #14]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	81da      	strh	r2, [r3, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8009bb0:	bf00      	nop
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb8:	2000079c 	.word	0x2000079c
 8009bbc:	20001978 	.word	0x20001978

08009bc0 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009bc0:	b590      	push	{r4, r7, lr}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7fda      	ldrb	r2, [r3, #31]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	f040 813a 	bne.w	8009e4c <MCPA_dataLog+0x28c>
    {
      pHandle->HFIndex = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	77da      	strb	r2, [r3, #31]
      if (0U == pHandle->bufferIndex)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8b1b      	ldrh	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d166      	bne.n	8009cb4 <MCPA_dataLog+0xf4>
      {
        /* New buffer allocation */

        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6810      	ldr	r0, [r2, #0]
                                       (void **) &pHandle->currentBuffer, //cstat !MISRAC2012-Rule-11.3
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	f102 0114 	add.w	r1, r2, #20
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009bf6:	2209      	movs	r2, #9
 8009bf8:	4798      	blx	r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f083 0301 	eor.w	r3, r3, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d156      	bne.n	8009cb4 <MCPA_dataLog+0xf4>
          pHandle->bufferMissed++;
#endif
        }
        else
        {
          logValue = (uint32_t *) pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	60fb      	str	r3, [r7, #12]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009c0c:	4b94      	ldr	r3, [pc, #592]	; (8009e60 <MCPA_dataLog+0x2a0>)
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	601a      	str	r2, [r3, #0]
          pHandle->bufferIndex = 4U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2204      	movs	r2, #4
 8009c18:	831a      	strh	r2, [r3, #24]
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2020 	strb.w	r2, [r3, #32]
          /* Check if configuration has changed for this new buffer */
          if (pHandle->Mark == pHandle->MarkBuff)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d040      	beq.n	8009cb4 <MCPA_dataLog+0xf4>
          {
            /* Nothing to do */
          }
          else
          {
            pHandle->MarkBuff = pHandle->Mark;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            pHandle->HFRateBuff = pHandle->HFRate;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            pHandle->MFRateBuff = pHandle->MFRate;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8b5a      	ldrh	r2, [r3, #26]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	839a      	strh	r2, [r3, #28]
            /* We store pointer here, so 4 bytes */
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6898      	ldr	r0, [r3, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6859      	ldr	r1, [r3, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	461a      	mov	r2, r3
 8009c92:	f004 f8dd 	bl	800de50 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68d9      	ldr	r1, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009cac:	4413      	add	r3, r2
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f004 f8ce 	bl	800de50 <memcpy>
          }
        }
      }
      /* */
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	8b1b      	ldrh	r3, [r3, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d071      	beq.n	8009da0 <MCPA_dataLog+0x1e0>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8b1a      	ldrh	r2, [r3, #24]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8b9b      	ldrh	r3, [r3, #28]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d86b      	bhi.n	8009da0 <MCPA_dataLog+0x1e0>
      {
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	8b12      	ldrh	r2, [r2, #24]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
 8009cd8:	e014      	b.n	8009d04 <MCPA_dataLog+0x144>
        {
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	881a      	ldrh	r2, [r3, #0]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	801a      	strh	r2, [r3, #0]
          logValue16++;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	613b      	str	r3, [r7, #16]
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	8b1b      	ldrh	r3, [r3, #24]
 8009cf6:	3302      	adds	r3, #2
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	831a      	strh	r2, [r3, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	3301      	adds	r3, #1
 8009d02:	75fb      	strb	r3, [r7, #23]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d0a:	7dfa      	ldrb	r2, [r7, #23]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d3e4      	bcc.n	8009cda <MCPA_dataLog+0x11a>
        }
        /* MFRateBuff=254 means we dump MF data once per buffer */
        /* MFRateBuff=255 means we do not dump MF data */
        if (pHandle->MFRateBuff < 254U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009d16:	2bfd      	cmp	r3, #253	; 0xfd
 8009d18:	d842      	bhi.n	8009da0 <MCPA_dataLog+0x1e0>
        {
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d132      	bne.n	8009d90 <MCPA_dataLog+0x1d0>
          {
            pHandle->MFIndex = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2020 	strb.w	r2, [r3, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d38:	75fb      	strb	r3, [r7, #23]
 8009d3a:	e01d      	b.n	8009d78 <MCPA_dataLog+0x1b8>
            {
              /* Dump MF data*/
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	8b12      	ldrh	r2, [r2, #24]
 8009d44:	4413      	add	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689a      	ldr	r2, [r3, #8]
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	601a      	str	r2, [r3, #0]
                  logValue32 = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
                  *logValue32 = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
                  break;
              }
#endif
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	8b1a      	ldrh	r2, [r3, #24]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6919      	ldr	r1, [r3, #16]
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	440b      	add	r3, r1
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	4413      	add	r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	831a      	strh	r2, [r3, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	3301      	adds	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
 8009d78:	7dfa      	ldrb	r2, [r7, #23]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d80:	4619      	mov	r1, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d88:	440b      	add	r3, r1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	dbd6      	blt.n	8009d3c <MCPA_dataLog+0x17c>
 8009d8e:	e007      	b.n	8009da0 <MCPA_dataLog+0x1e0>
            }
          }
          else
          {
            pHandle->MFIndex ++;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d96:	3301      	adds	r3, #1
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f883 2020 	strb.w	r2, [r3, #32]
          }
        }
      }
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8b1a      	ldrh	r2, [r3, #24]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8b9b      	ldrh	r3, [r3, #28]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d955      	bls.n	8009e58 <MCPA_dataLog+0x298>
      {
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009db2:	2bfe      	cmp	r3, #254	; 0xfe
 8009db4:	d12d      	bne.n	8009e12 <MCPA_dataLog+0x252>
        {
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dbc:	75fb      	strb	r3, [r7, #23]
 8009dbe:	e01d      	b.n	8009dfc <MCPA_dataLog+0x23c>
          {
            logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	8b12      	ldrh	r2, [r2, #24]
 8009dc8:	4413      	add	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	601a      	str	r2, [r3, #0]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8b1a      	ldrh	r2, [r3, #24]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6919      	ldr	r1, [r3, #16]
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	440b      	add	r3, r1
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4413      	add	r3, r2
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	831a      	strh	r2, [r3, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]
 8009dfc:	7dfa      	ldrb	r2, [r7, #23]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e04:	4619      	mov	r1, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e0c:	440b      	add	r3, r1
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	dbd6      	blt.n	8009dc0 <MCPA_dataLog+0x200>
          }
        }
        /* Buffer is ready to be send*/
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	8b12      	ldrh	r2, [r2, #24]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	801a      	strh	r2, [r3, #0]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685c      	ldr	r4, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6959      	ldr	r1, [r3, #20]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8b1b      	ldrh	r3, [r3, #24]
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	2309      	movs	r3, #9
 8009e42:	47a0      	blx	r4
                                              MCTL_ASYNC);
        pHandle->bufferIndex = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	831a      	strh	r2, [r3, #24]
      pHandle->HFIndex++;
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009e4a:	e005      	b.n	8009e58 <MCPA_dataLog+0x298>
      pHandle->HFIndex++;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7fdb      	ldrb	r3, [r3, #31]
 8009e50:	3301      	adds	r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	77da      	strb	r2, [r3, #31]
}
 8009e58:	bf00      	nop
 8009e5a:	371c      	adds	r7, #28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}
 8009e60:	20001a00 	.word	0x20001a00

08009e64 <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	8b1b      	ldrh	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d04e      	beq.n	8009f12 <MCPA_flushDataLog+0xae>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009e7a:	2bfe      	cmp	r3, #254	; 0xfe
 8009e7c:	d12d      	bne.n	8009eda <MCPA_flushDataLog+0x76>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e84:	75fb      	strb	r3, [r7, #23]
 8009e86:	e01d      	b.n	8009ec4 <MCPA_flushDataLog+0x60>
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	8b12      	ldrh	r2, [r2, #24]
 8009e90:	4413      	add	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	601a      	str	r2, [r3, #0]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8b1a      	ldrh	r2, [r3, #24]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6919      	ldr	r1, [r3, #16]
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	440b      	add	r3, r1
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	831a      	strh	r2, [r3, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
 8009ec4:	7dfa      	ldrb	r2, [r7, #23]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ecc:	4619      	mov	r1, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ed4:	440b      	add	r3, r1
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	dbd6      	blt.n	8009e88 <MCPA_flushDataLog+0x24>
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	8b12      	ldrh	r2, [r2, #24]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	801a      	strh	r2, [r3, #0]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685c      	ldr	r4, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6959      	ldr	r1, [r3, #20]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8b1b      	ldrh	r3, [r3, #24]
 8009f04:	3302      	adds	r3, #2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	2309      	movs	r3, #9
 8009f0a:	47a0      	blx	r4
    pHandle->bufferIndex = 0;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	831a      	strh	r2, [r3, #24]
  }   
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd90      	pop	{r4, r7, pc}

08009f1a <MCPA_stopDataLog>:

void MCPA_stopDataLog(MCPA_Handle_t *pHandle)
{ 
 8009f1a:	b590      	push	{r4, r7, lr}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  uint16_t *logValue16;  
  
  pHandle->Mark = 0;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	8b1b      	ldrh	r3, [r3, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d018      	beq.n	8009f64 <MCPA_stopDataLog+0x4a>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	8b12      	ldrh	r2, [r2, #24]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	801a      	strh	r2, [r3, #0]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685c      	ldr	r4, [r3, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6959      	ldr	r1, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	8b1b      	ldrh	r3, [r3, #24]
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	2309      	movs	r3, #9
 8009f62:	47a0      	blx	r4
  }     
  pHandle->bufferIndex = 0;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	831a      	strh	r2, [r3, #24]
  pHandle->MarkBuff = 0;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	77da      	strb	r2, [r3, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8009f80:	bf00      	nop
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd90      	pop	{r4, r7, pc}

08009f88 <MCPA_cfgLog>:

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint8_t result = MCP_CMD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	75fb      	strb	r3, [r7, #23]
    result = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8009f96:	2300      	movs	r3, #0
 8009f98:	82bb      	strh	r3, [r7, #20]
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	817b      	strh	r3, [r7, #10]

    if (buffSize == 0)
 8009fa4:	897b      	ldrh	r3, [r7, #10]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d103      	bne.n	8009fb2 <MCPA_cfgLog+0x2a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff ffb5 	bl	8009f1a <MCPA_stopDataLog>
 8009fb0:	e08c      	b.n	800a0cc <MCPA_cfgLog+0x144>
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	89db      	ldrh	r3, [r3, #14]
 8009fb8:	897a      	ldrh	r2, [r7, #10]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d902      	bls.n	8009fc4 <MCPA_cfgLog+0x3c>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009fbe:	2309      	movs	r3, #9
 8009fc0:	75fb      	strb	r3, [r7, #23]
 8009fc2:	e083      	b.n	800a0cc <MCPA_cfgLog+0x144>
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	789a      	ldrb	r2, [r3, #2]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	78da      	ldrb	r2, [r3, #3]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	791a      	ldrb	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	795a      	ldrb	r2, [r3, #5]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3306      	adds	r3, #6
 8009ff0:	60fb      	str	r3, [r7, #12]

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a000:	4413      	add	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	7f92      	ldrb	r2, [r2, #30]
 800a006:	4293      	cmp	r3, r2
 800a008:	dc5e      	bgt.n	800a0c8 <MCPA_cfgLog+0x140>
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	74fb      	strb	r3, [r7, #19]
 800a00e:	e032      	b.n	800a076 <MCPA_cfgLog+0xee>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	813b      	strh	r3, [r7, #8]
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	7cfb      	ldrb	r3, [r7, #19]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	441a      	add	r2, r3
 800a020:	893b      	ldrh	r3, [r7, #8]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7fb fe33 	bl	8005c90 <RI_GetPtrReg>
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a030:	7cfa      	ldrb	r2, [r7, #19]
 800a032:	429a      	cmp	r2, r3
 800a034:	d306      	bcc.n	800a044 <MCPA_cfgLog+0xbc>
 800a036:	893b      	ldrh	r3, [r7, #8]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fb fe01 	bl	8005c40 <RI_GetIDSize>
 800a03e:	4603      	mov	r3, r0
 800a040:	4619      	mov	r1, r3
 800a042:	e000      	b.n	800a046 <MCPA_cfgLog+0xbe>
 800a044:	2102      	movs	r1, #2
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	7cfb      	ldrb	r3, [r7, #19]
 800a04c:	4413      	add	r3, r2
 800a04e:	460a      	mov	r2, r1
 800a050:	701a      	strb	r2, [r3, #0]
        pCfgData++;/* Point to the next UID */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
        pCfgData++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60fb      	str	r3, [r7, #12]
         logSize = logSize+pHandle->dataSizeTable[i];
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	7cfb      	ldrb	r3, [r7, #19]
 800a064:	4413      	add	r3, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	8abb      	ldrh	r3, [r7, #20]
 800a06c:	4413      	add	r3, r2
 800a06e:	82bb      	strh	r3, [r7, #20]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800a070:	7cfb      	ldrb	r3, [r7, #19]
 800a072:	3301      	adds	r3, #1
 800a074:	74fb      	strb	r3, [r7, #19]
 800a076:	7cfa      	ldrb	r2, [r7, #19]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a07e:	4619      	mov	r1, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a086:	440b      	add	r3, r1
 800a088:	429a      	cmp	r2, r3
 800a08a:	dbc1      	blt.n	800a010 <MCPA_cfgLog+0x88>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 800a08c:	897a      	ldrh	r2, [r7, #10]
 800a08e:	8abb      	ldrh	r3, [r7, #20]
 800a090:	3306      	adds	r3, #6
 800a092:	429a      	cmp	r2, r3
 800a094:	d202      	bcs.n	800a09c <MCPA_cfgLog+0x114>
     {
       result = MCP_ERROR_NO_TXASYNC_SPACE;
 800a096:	2309      	movs	r3, #9
 800a098:	75fb      	strb	r3, [r7, #23]
 800a09a:	e017      	b.n	800a0cc <MCPA_cfgLog+0x144>
     }
     else
     {
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 800a09c:	897a      	ldrh	r2, [r7, #10]
 800a09e:	8abb      	ldrh	r3, [r7, #20]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	3b02      	subs	r3, #2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	835a      	strh	r2, [r3, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
       if (0U == pHandle->Mark)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d105      	bne.n	800a0cc <MCPA_cfgLog+0x144>
       {  /* Switch Off condition */
            MCPA_stopDataLog(pHandle);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff ff2a 	bl	8009f1a <MCPA_stopDataLog>
 800a0c6:	e001      	b.n	800a0cc <MCPA_cfgLog+0x144>
         }
       }
        }  
     else
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
 800a0c8:	230a      	movs	r3, #10
 800a0ca:	75fb      	strb	r3, [r7, #23]
     }
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <NTC_SetFaultState>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState(NTC_Handle_t *pHandle)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8a1a      	ldrh	r2, [r3, #16]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8b5b      	ldrh	r3, [r3, #26]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d902      	bls.n	800a0f0 <NTC_SetFaultState+0x1a>
    {
      hFault = MC_OVER_TEMP;
 800a0ea:	2308      	movs	r3, #8
 800a0ec:	81fb      	strh	r3, [r7, #14]
 800a0ee:	e00b      	b.n	800a108 <NTC_SetFaultState+0x32>
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	8a1a      	ldrh	r2, [r3, #16]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8b9b      	ldrh	r3, [r3, #28]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d202      	bcs.n	800a102 <NTC_SetFaultState+0x2c>
    {
      hFault = MC_NO_ERROR;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	81fb      	strh	r3, [r7, #14]
 800a100:	e002      	b.n	800a108 <NTC_SetFaultState+0x32>
    }
    else
    {
      hFault = pHandle->hFaultState;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8adb      	ldrh	r3, [r3, #22]
 800a106:	81fb      	strh	r3, [r7, #14]
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
 800a108:	89fb      	ldrh	r3, [r7, #14]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <NTC_Init>:
  *
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  */
__weak void NTC_Init(NTC_Handle_t *pHandle)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10d      	bne.n	800a142 <NTC_Init+0x2c>
    {
      /* Need to be register with RegularConvManager */
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fb ffdc 	bl	80060e8 <RCM_RegisterRegConv>
 800a130:	4603      	mov	r3, r0
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      NTC_Clear(pHandle);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f80c 	bl	800a158 <NTC_Clear>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800a140:	e006      	b.n	800a150 <NTC_Init+0x3a>
      pHandle->hFaultState = MC_NO_ERROR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	82da      	strh	r2, [r3, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8a5a      	ldrh	r2, [r3, #18]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	821a      	strh	r2, [r3, #16]
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <NTC_Clear>:
  * @brief Initializes internal average temperature computed value
  *
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  */
__weak void NTC_Clear(NTC_Handle_t *pHandle)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	821a      	strh	r2, [r3, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d12e      	bne.n	800a1e0 <NTC_CalcAvTemp+0x6e>
    {
      uint16_t hAux;
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fc f845 	bl	8006218 <RCM_ExecRegularConv>
 800a18e:	4603      	mov	r3, r0
 800a190:	82fb      	strh	r3, [r7, #22]

      if (0xFFFFU == hAux)
 800a192:	8afb      	ldrh	r3, [r7, #22]
 800a194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a198:	4293      	cmp	r3, r2
 800a19a:	d019      	beq.n	800a1d0 <NTC_CalcAvTemp+0x5e>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8b1b      	ldrh	r3, [r3, #24]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	8a1b      	ldrh	r3, [r3, #16]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	613b      	str	r3, [r7, #16]
        wtemp += hAux;
 800a1b2:	8afb      	ldrh	r3, [r7, #22]
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	8b1b      	ldrh	r3, [r3, #24]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	821a      	strh	r2, [r3, #16]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff ff80 	bl	800a0d6 <NTC_SetFaultState>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	82da      	strh	r2, [r3, #22]
 800a1de:	e002      	b.n	800a1e6 <NTC_CalcAvTemp+0x74>
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	82da      	strh	r2, [r3, #22]
    }
    returnValue = pHandle->hFaultState;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8adb      	ldrh	r3, [r3, #22]
 800a1ea:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 800a1ec:	89fb      	ldrh	r3, [r7, #14]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <NTC_GetAvTemp_C>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C(NTC_Handle_t *pHandle)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d117      	bne.n	800a236 <NTC_GetAvTemp_C+0x40>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8a1b      	ldrh	r3, [r3, #16]
 800a20a:	60fb      	str	r3, [r7, #12]
      wTemp -= ((int32_t)pHandle->wV0);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	461a      	mov	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
      wTemp *= pHandle->hSensitivity;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800a21e:	461a      	mov	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	60fb      	str	r3, [r7, #12]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	141b      	asrs	r3, r3, #16
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a230:	4413      	add	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e002      	b.n	800a23c <NTC_GetAvTemp_C+0x46>
      wTemp = (wTemp / 65536) + (int32_t)pHandle->hT0;
#endif
    }
    else
    {
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	8a9b      	ldrh	r3, [r3, #20]
 800a23a:	60fb      	str	r3, [r7, #12]
    }
    returnValue = (int16_t)wTemp;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 800a240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <PID_HandleInit>:
  * are set to their default values. These default values are the ones 
  * set to the PID_Handle_t::hDefKpGain, PID_Handle_t::hDefKiGain and
  * PID_Handle_t::hDefKdGain fields of the PID_Handle_t structure.
  */
__weak void PID_HandleInit(PID_Handle_t *pHandle)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	809a      	strh	r2, [r3, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	80da      	strh	r2, [r3, #6]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	845a      	strh	r2, [r3, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	609a      	str	r2, [r3, #8]
    pHandle->wPrevProcessVarError = 0;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <PID_SetKP>:
  * @brief  Sets @f$K_{pg}@f$, the numerator of the proportional gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKpGain New @f$K_{pg}@f$ value
  */
__weak void PID_SetKP(PID_Handle_t *pHandle, int16_t hKpGain)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	887a      	ldrh	r2, [r7, #2]
 800a29e:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <PID_SetKI>:
  * @brief  Sets the @f$K_{ig}@f$, the numrerator of the integral gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKiGain new @f$K_{ig}@f$ value
  */
__weak void PID_SetKI(PID_Handle_t *pHandle, int16_t hKiGain)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	887a      	ldrh	r2, [r7, #2]
 800a2bc:	80da      	strh	r2, [r3, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <PID_GetKP>:
/**
  * @brief  Returns @f$K_{pg}@f$, the numerator of the proportional gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKP(PID_Handle_t *pHandle)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
#endif
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <PID_GetKI>:
/**
  * @brief  Returns @f$K_{ig}@f$, the numrerator of the integral gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKI(PID_Handle_t *pHandle)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
#endif
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <PID_SetIntegralTerm>:
  * 
  * @attention @p wIntegralTermValue divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetIntegralTerm(PID_Handle_t *pHandle, int32_t wIntegralTermValue)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
 800a30e:	bf00      	nop
}
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <PID_GetKPDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKPDivisor()
  */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	8b9b      	ldrh	r3, [r3, #28]
#endif
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <PID_SetKPDivisorPOW2>:
  * powers of two. 
  * 
  * This function sets @f$K_{pd}@f$ to 2 to the power of @p hKpDivisorPOW2.
  */
__weak void PID_SetKPDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKpDivisorPOW2)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	887a      	ldrh	r2, [r7, #2]
 800a342:	839a      	strh	r2, [r3, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800a344:	887b      	ldrh	r3, [r7, #2]
 800a346:	2201      	movs	r2, #1
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	831a      	strh	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <PID_GetKIDivisor>:
  * powers of two. 
  * 
  * @sa PID_GetKIDivisorPOW2()
  */
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8b5b      	ldrh	r3, [r3, #26]
#endif
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <PID_GetKIDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKIDivisor()
  */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	8bdb      	ldrh	r3, [r3, #30]
#endif
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <PID_SetKIDivisorPOW2>:
  * accept any 16-bit value. If the limits of the integral term need to be different 
  * use the PID_SetUpperIntegralTermLimit() and PID_SetLowerIntegralTermLimit() functions
  * after this one.
  */
__weak void PID_SetKIDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKiDivisorPOW2)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800a39a:	887b      	ldrh	r3, [r7, #2]
 800a39c:	2201      	movs	r2, #1
 800a39e:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a2:	60fb      	str	r3, [r7, #12]
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	887a      	ldrh	r2, [r7, #2]
 800a3a8:	83da      	strh	r2, [r3, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	835a      	strh	r2, [r3, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	03db      	lsls	r3, r3, #15
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f81a 	bl	800a3f6 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	03db      	lsls	r3, r3, #15
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f804 	bl	800a3da <PID_SetLowerIntegralTermLimit>
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <PID_SetLowerIntegralTermLimit>:
  * 
  * @attention @p wLowerLimit divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetLowerIntegralTermLimit(PID_Handle_t *pHandle, int32_t wLowerLimit)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	611a      	str	r2, [r3, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a3ea:	bf00      	nop
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <PID_SetUpperIntegralTermLimit>:
  * 
  * @attention @p wUpperLimit divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetUpperIntegralTermLimit(PID_Handle_t *pHandle, int32_t wUpperLimit)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	60da      	str	r2, [r3, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <PID_SetKD>:
  * @brief  Sets @f$K_{dg}@f$, the numerator of the derivative gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKpGain New @f$K_{dg}@f$ value
  */
__weak void PID_SetKD(PID_Handle_t *pHandle, int16_t hKdGain)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	887a      	ldrh	r2, [r7, #2]
 800a422:	845a      	strh	r2, [r3, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <PID_GetKD>:
/**
  * @brief  Returns @f$K_{dg}@f$, the numerator of the derivative gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKD(PID_Handle_t *pHandle)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
#endif
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <PID_GetKDDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKDDivisor()
  */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
#endif
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <PID_SetKDDivisorPOW2>:
  * powers of two. 
  * 
  * This function sets @f$K_{dd}@f$ to 2 to the power of @p hKdDivisorPOW2.
  */
__weak void PID_SetKDDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKdDivisorPOW2)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	887a      	ldrh	r2, [r7, #2]
 800a472:	84da      	strh	r2, [r3, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800a474:	887b      	ldrh	r3, [r7, #2]
 800a476:	2201      	movs	r2, #1
 800a478:	fa02 f303 	lsl.w	r3, r2, r3
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	849a      	strh	r2, [r3, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 800a490:	b480      	push	{r7}
 800a492:	b08b      	sub	sp, #44	; 0x2c
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
#endif
    int32_t wProportional_Term;
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	61fb      	str	r3, [r7, #28]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	8a9b      	ldrh	r3, [r3, #20]
 800a4a2:	837b      	strh	r3, [r7, #26]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	8adb      	ldrh	r3, [r3, #22]
 800a4a8:	833b      	strh	r3, [r7, #24]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	fb02 f303 	mul.w	r3, r2, r3
 800a4b8:	617b      	str	r3, [r7, #20]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <PI_Controller+0x3c>
    {
      pHandle->wIntegralTerm = 0;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	609a      	str	r2, [r3, #8]
 800a4ca:	e03a      	b.n	800a542 <PI_Controller+0xb2>
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	fb02 f303 	mul.w	r3, r2, r3
 800a4da:	613b      	str	r3, [r7, #16]
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	623b      	str	r3, [r7, #32]

      if (wIntegral_sum_temp < 0)
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	da0a      	bge.n	800a502 <PI_Controller+0x72>
      {
        if (pHandle->wIntegralTerm > 0)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dd0f      	ble.n	800a514 <PI_Controller+0x84>
        {
          if (wIntegral_Term > 0)
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd0c      	ble.n	800a514 <PI_Controller+0x84>
          {
            wIntegral_sum_temp = INT32_MAX;
 800a4fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a4fe:	623b      	str	r3, [r7, #32]
 800a500:	e008      	b.n	800a514 <PI_Controller+0x84>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	da04      	bge.n	800a514 <PI_Controller+0x84>
        {
          if (wIntegral_Term < 0)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da01      	bge.n	800a514 <PI_Controller+0x84>
          {
            wIntegral_sum_temp = -INT32_MAX;
 800a510:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <PI_Controller+0x124>)
 800a512:	623b      	str	r3, [r7, #32]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	6a3a      	ldr	r2, [r7, #32]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	dd04      	ble.n	800a528 <PI_Controller+0x98>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	609a      	str	r2, [r3, #8]
 800a526:	e00c      	b.n	800a542 <PI_Controller+0xb2>
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	6a3a      	ldr	r2, [r7, #32]
 800a52e:	429a      	cmp	r2, r3
 800a530:	da04      	bge.n	800a53c <PI_Controller+0xac>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	691a      	ldr	r2, [r3, #16]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	609a      	str	r2, [r3, #8]
 800a53a:	e002      	b.n	800a542 <PI_Controller+0xb2>
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a3a      	ldr	r2, [r7, #32]
 800a540:	609a      	str	r2, [r3, #8]
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	8b9b      	ldrh	r3, [r3, #28]
 800a546:	461a      	mov	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	fa43 f202 	asr.w	r2, r3, r2
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	8bc9      	ldrh	r1, [r1, #30]
 800a556:	410b      	asrs	r3, r1
 800a558:	4413      	add	r3, r2
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800a55c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a562:	429a      	cmp	r2, r3
 800a564:	dd08      	ble.n	800a578 <PI_Controller+0xe8>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800a566:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	61fb      	str	r3, [r7, #28]
      wOutput_32 = hUpperOutputLimit;
 800a570:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
 800a576:	e00c      	b.n	800a592 <PI_Controller+0x102>
    }
    else if (wOutput_32 < hLowerOutputLimit)
 800a578:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57e:	429a      	cmp	r2, r3
 800a580:	da07      	bge.n	800a592 <PI_Controller+0x102>
    {
      wDischarge = hLowerOutputLimit - wOutput_32;
 800a582:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	61fb      	str	r3, [r7, #28]
      wOutput_32 = hLowerOutputLimit;
 800a58c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	441a      	add	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
    returnValue = (int16_t)wOutput_32;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 800a5a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	372c      	adds	r7, #44	; 0x2c
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	80000001 	.word	0x80000001

0800a5b8 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	f107 0310 	add.w	r3, r7, #16
 800a5c8:	320c      	adds	r2, #12
 800a5ca:	6810      	ldr	r0, [r2, #0]
 800a5cc:	6018      	str	r0, [r3, #0]
    qd_t Vqd = pHandle->pFOCVars->Vqd;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	f107 030c 	add.w	r3, r7, #12
 800a5d6:	3216      	adds	r2, #22
 800a5d8:	6810      	ldr	r0, [r2, #0]
 800a5da:	6018      	str	r0, [r3, #0]

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800a5dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a5e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a5e4:	fb03 f202 	mul.w	r2, r3, r2
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800a5e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5ec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800a5f4:	4413      	add	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]
    wAux /= 65536;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da02      	bge.n	800a604 <PQD_CalcElMotorPower+0x4c>
 800a5fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a602:	33ff      	adds	r3, #255	; 0xff
 800a604:	141b      	asrs	r3, r3, #16
 800a606:	617b      	str	r3, [r7, #20]

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a616:	4619      	mov	r1, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	1a5b      	subs	r3, r3, r1
 800a61c:	111b      	asrs	r3, r3, #4
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4413      	add	r3, r2
 800a622:	b29b      	uxth	r3, r3
 800a624:	b21a      	sxth	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	801a      	strh	r2, [r3, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 800a62a:	bf00      	nop
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <PQD_Clear>:
  * This function should be called before each motor start.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_Clear(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  float PowerW=0.0;
 800a658:	f04f 0300 	mov.w	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a664:	461c      	mov	r4, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fddc 	bl	8009228 <VBS_GetAvBusVoltage_V>
 800a670:	4603      	mov	r3, r0
 800a672:	fb04 f303 	mul.w	r3, r4, r3
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	edd3 7a01 	vldr	s15, [r3, #4]
 800a684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a688:	edc7 7a03 	vstr	s15, [r7, #12]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	ee07 3a90 	vmov	s15, r3
}
 800a692:	eeb0 0a67 	vmov.f32	s0, s15
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd90      	pop	{r4, r7, pc}

0800a69c <LL_TIM_SetTriggerOutput>:
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	605a      	str	r2, [r3, #4]
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <LL_TIM_ClearFlag_CC1>:
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f06f 0202 	mvn.w	r2, #2
 800a6d0:	611a      	str	r2, [r3, #16]
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <LL_TIM_IsActiveFlag_CC1>:
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d101      	bne.n	800a6f6 <LL_TIM_IsActiveFlag_CC1+0x18>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e000      	b.n	800a6f8 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <LL_TIM_GenerateEvent_UPDATE>:
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	f043 0201 	orr.w	r2, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	615a      	str	r2, [r3, #20]
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <LL_APB1_GRP1_EnableClock>:
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800a72c:	4b08      	ldr	r3, [pc, #32]	; (800a750 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a72e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a730:	4907      	ldr	r1, [pc, #28]	; (800a750 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4313      	orrs	r3, r2
 800a736:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a738:	4b05      	ldr	r3, [pc, #20]	; (800a750 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a73a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4013      	ands	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a742:	68fb      	ldr	r3, [r7, #12]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	40023800 	.word	0x40023800

0800a754 <LL_APB1_GRP1_IsEnabledClock>:
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800a75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4013      	ands	r3, r2
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	429a      	cmp	r2, r3
 800a768:	bf0c      	ite	eq
 800a76a:	2301      	moveq	r3, #1
 800a76c:	2300      	movne	r3, #0
 800a76e:	b2db      	uxtb	r3, r3
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	40023800 	.word	0x40023800

0800a780 <LL_APB1_GRP1_DisableClock>:
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <LL_APB1_GRP1_DisableClock+0x24>)
 800a78a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	43db      	mvns	r3, r3
 800a790:	4904      	ldr	r1, [pc, #16]	; (800a7a4 <LL_APB1_GRP1_DisableClock+0x24>)
 800a792:	4013      	ands	r3, r2
 800a794:	640b      	str	r3, [r1, #64]	; 0x40
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	40023800 	.word	0x40023800

0800a7a8 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	f7ff ffd0 	bl	800a754 <LL_APB1_GRP1_IsEnabledClock>
 800a7b4:	6078      	str	r0, [r7, #4]
  if ((uint32_t)0 == isTIM2ClockOn)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10a      	bne.n	800a7d2 <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800a7bc:	2001      	movs	r0, #1
 800a7be:	f7ff ffb1 	bl	800a724 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 800a7c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a7c6:	f7ff ff9d 	bl	800a704 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	f7ff ffd8 	bl	800a780 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800a7d0:	e013      	b.n	800a7fa <startTimers+0x52>
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 800a7d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7dc:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 800a7de:	2120      	movs	r1, #32
 800a7e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a7e4:	f7ff ff5a 	bl	800a69c <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 800a7e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a7ec:	f7ff ff8a 	bl	800a704 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a7f6:	f7ff ff51 	bl	800a69c <LL_TIM_SetTriggerOutput>
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	4613      	mov	r3, r2
 800a810:	71fb      	strb	r3, [r7, #7]
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	3301      	adds	r3, #1
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	b29b      	uxth	r3, r3
 800a81a:	015b      	lsls	r3, r3, #5
 800a81c:	82bb      	strh	r3, [r7, #20]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff ff4f 	bl	800a6c2 <LL_TIM_ClearFlag_CC1>
    hCalibrationPeriodCounter = 0u;
 800a824:	2300      	movs	r3, #0
 800a826:	82fb      	strh	r3, [r7, #22]
    while (*cnt < NB_CONVERSIONS)
 800a828:	e018      	b.n	800a85c <waitForPolarizationEnd+0x5a>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff ff57 	bl	800a6de <LL_TIM_IsActiveFlag_CC1>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d112      	bne.n	800a85c <waitForPolarizationEnd+0x5a>
      {
        LL_TIM_ClearFlag_CC1(TIMx);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff ff43 	bl	800a6c2 <LL_TIM_ClearFlag_CC1>
        hCalibrationPeriodCounter++;
 800a83c:	8afb      	ldrh	r3, [r7, #22]
 800a83e:	3301      	adds	r3, #1
 800a840:	82fb      	strh	r3, [r7, #22]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800a842:	8afa      	ldrh	r2, [r7, #22]
 800a844:	8abb      	ldrh	r3, [r7, #20]
 800a846:	429a      	cmp	r2, r3
 800a848:	d308      	bcc.n	800a85c <waitForPolarizationEnd+0x5a>
        {
          if (*cnt < NB_CONVERSIONS)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b0f      	cmp	r3, #15
 800a852:	d803      	bhi.n	800a85c <waitForPolarizationEnd+0x5a>
          {
            *SWerror = 1u;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2201      	movs	r2, #1
 800a858:	801a      	strh	r2, [r3, #0]
            break;
 800a85a:	e005      	b.n	800a868 <waitForPolarizationEnd+0x66>
    while (*cnt < NB_CONVERSIONS)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b0f      	cmp	r3, #15
 800a864:	d9e1      	bls.n	800a82a <waitForPolarizationEnd+0x28>
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <RVBS_Init>:
  * @brief  It initializes bus voltage conversion (ADC, ADC channel, conversion time.
    It must be called only after PWM_Init.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Init(RDivider_Handle_t *pHandle)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	330c      	adds	r3, #12
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fb fc33 	bl	80060e8 <RCM_RegisterRegConv>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Check */
    RVBS_Clear(pHandle);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f804 	bl	800a89a <RVBS_Clear>
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8b5b      	ldrh	r3, [r3, #26]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8c1b      	ldrh	r3, [r3, #32]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	085b      	lsrs	r3, r3, #1
 800a8b0:	81bb      	strh	r3, [r7, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	81fb      	strh	r3, [r7, #14]
 800a8b6:	e009      	b.n	800a8cc <RVBS_Clear+0x32>
    {
      pHandle->aBuffer[index] = aux;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8bc:	89fb      	ldrh	r3, [r7, #14]
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	4413      	add	r3, r2
 800a8c2:	89ba      	ldrh	r2, [r7, #12]
 800a8c4:	801a      	strh	r2, [r3, #0]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a8c6:	89fb      	ldrh	r3, [r7, #14]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	81fb      	strh	r3, [r7, #14]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8b1b      	ldrh	r3, [r3, #24]
 800a8d0:	89fa      	ldrh	r2, [r7, #14]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d3f0      	bcc.n	800a8b8 <RVBS_Clear+0x1e>
    }
    pHandle->_Super.LatestConv = aux;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	89ba      	ldrh	r2, [r7, #12]
 800a8da:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	89ba      	ldrh	r2, [r7, #12]
 800a8e0:	80da      	strh	r2, [r3, #6]
    pHandle->index = 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <RVBS_CalcAvVbus>:
  *         value for all STM32 families except STM32F3 in u16Volt format
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbus(RDivider_Handle_t *pHandle)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b086      	sub	sp, #24
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
#endif
    uint32_t wtemp;
    uint16_t hAux;
    uint8_t i;

    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a904:	4618      	mov	r0, r3
 800a906:	f7fb fc87 	bl	8006218 <RCM_ExecRegularConv>
 800a90a:	4603      	mov	r3, r0
 800a90c:	823b      	strh	r3, [r7, #16]

    if (0xFFFFU == hAux)
 800a90e:	8a3b      	ldrh	r3, [r7, #16]
 800a910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a914:	4293      	cmp	r3, r2
 800a916:	d044      	beq.n	800a9a2 <RVBS_CalcAvVbus+0xac>
      /* Nothing to do */
    }
    else
    {
      /* Store latest value on buffer */
      pHandle->aBuffer[pHandle->index] = hAux;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	4413      	add	r3, r2
 800a926:	8a3a      	ldrh	r2, [r7, #16]
 800a928:	801a      	strh	r2, [r3, #0]
      wtemp = 0u;
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a92e:	2300      	movs	r3, #0
 800a930:	74fb      	strb	r3, [r7, #19]
 800a932:	e00c      	b.n	800a94e <RVBS_CalcAvVbus+0x58>
      {
        wtemp += pHandle->aBuffer[i];
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a938:	7cfb      	ldrb	r3, [r7, #19]
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	461a      	mov	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	4413      	add	r3, r2
 800a946:	617b      	str	r3, [r7, #20]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a948:	7cfb      	ldrb	r3, [r7, #19]
 800a94a:	3301      	adds	r3, #1
 800a94c:	74fb      	strb	r3, [r7, #19]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8b1b      	ldrh	r3, [r3, #24]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	7cfa      	ldrb	r2, [r7, #19]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3ec      	bcc.n	800a934 <RVBS_CalcAvVbus+0x3e>
      }
      wtemp /= pHandle->LowPassFilterBW;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8b1b      	ldrh	r3, [r3, #24]
 800a95e:	461a      	mov	r2, r3
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	fbb3 f3f2 	udiv	r3, r3, r2
 800a966:	617b      	str	r3, [r7, #20]
      /* Averaging done over the buffer stored values */
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	80da      	strh	r2, [r3, #6]
      pHandle->_Super.LatestConv = hAux;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	8a3a      	ldrh	r2, [r7, #16]
 800a974:	809a      	strh	r2, [r3, #4]

      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a97c:	461a      	mov	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8b1b      	ldrh	r3, [r3, #24]
 800a982:	3b01      	subs	r3, #1
 800a984:	429a      	cmp	r2, r3
 800a986:	d208      	bcs.n	800a99a <RVBS_CalcAvVbus+0xa4>
      {
        pHandle->index++;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a98e:	3301      	adds	r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a998:	e003      	b.n	800a9a2 <RVBS_CalcAvVbus+0xac>
      }
      else
      {
        pHandle->index = 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }

    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f80c 	bl	800a9c0 <RVBS_CheckFaultState>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	811a      	strh	r2, [r3, #8]
    tempValue = pHandle->_Super.FaultState;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	891b      	ldrh	r3, [r3, #8]
 800a9b4:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (tempValue);
 800a9b6:	89fb      	ldrh	r3, [r7, #14]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	8b5a      	ldrh	r2, [r3, #26]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8b9b      	ldrh	r3, [r3, #28]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d114      	bne.n	800a9fe <RVBS_CheckFaultState+0x3e>
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	88da      	ldrh	r2, [r3, #6]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8b5b      	ldrh	r3, [r3, #26]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d902      	bls.n	800a9e6 <RVBS_CheckFaultState+0x26>
      {
        fault = MC_OVER_VOLT;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	81fb      	strh	r3, [r7, #14]
 800a9e4:	e038      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
      }
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	88da      	ldrh	r2, [r3, #6]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8c1b      	ldrh	r3, [r3, #32]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d202      	bcs.n	800a9f8 <RVBS_CheckFaultState+0x38>
      {
        fault = MC_UNDER_VOLT;
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	81fb      	strh	r3, [r7, #14]
 800a9f6:	e02f      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
      }
      else
      {
        fault = MC_NO_ERROR;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	81fb      	strh	r3, [r7, #14]
 800a9fc:	e02c      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	88da      	ldrh	r2, [r3, #6]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8c1b      	ldrh	r3, [r3, #32]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d202      	bcs.n	800aa10 <RVBS_CheckFaultState+0x50>
      {
        fault = MC_UNDER_VOLT;
 800aa0a:	2304      	movs	r3, #4
 800aa0c:	81fb      	strh	r3, [r7, #14]
 800aa0e:	e023      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	7f9b      	ldrb	r3, [r3, #30]
 800aa14:	f083 0301 	eor.w	r3, r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00e      	beq.n	800aa3c <RVBS_CheckFaultState+0x7c>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	88da      	ldrh	r2, [r3, #6]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	8b9b      	ldrh	r3, [r3, #28]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d205      	bcs.n	800aa36 <RVBS_CheckFaultState+0x76>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	779a      	strb	r2, [r3, #30]
          fault = MC_NO_ERROR;
 800aa30:	2300      	movs	r3, #0
 800aa32:	81fb      	strh	r3, [r7, #14]
 800aa34:	e010      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
        }
        else{
          fault = MC_OVER_VOLT;
 800aa36:	2302      	movs	r3, #2
 800aa38:	81fb      	strh	r3, [r7, #14]
 800aa3a:	e00d      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	88da      	ldrh	r2, [r3, #6]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	8b5b      	ldrh	r3, [r3, #26]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d905      	bls.n	800aa54 <RVBS_CheckFaultState+0x94>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	779a      	strb	r2, [r3, #30]
          fault = MC_OVER_VOLT;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	81fb      	strh	r3, [r7, #14]
 800aa52:	e001      	b.n	800aa58 <RVBS_CheckFaultState+0x98>
        }
        else{
          fault = MC_NO_ERROR;
 800aa54:	2300      	movs	r3, #0
 800aa56:	81fb      	strh	r3, [r7, #14]
      }
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
 800aa58:	89fb      	ldrh	r3, [r7, #14]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init(RampExtMngr_Handle_t *pHandle)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	609a      	str	r2, [r3, #8]
    pHandle->TargetFinal = 0;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	605a      	str	r2, [r3, #4]
    pHandle->RampRemainingStep = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	611a      	str	r2, [r3, #16]
    pHandle->ScalingFactor = 1U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	615a      	str	r2, [r3, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc(RampExtMngr_Handle_t *pHandle)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	60fb      	str	r3, [r7, #12]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d90a      	bls.n	800aac4 <REMNG_Calc+0x2c>
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60da      	str	r2, [r3, #12]
 800aac2:	e00d      	b.n	800aae0 <REMNG_Calc+0x48>
    }
    else if (1U == pHandle->RampRemainingStep)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d109      	bne.n	800aae0 <REMNG_Calc+0x48>
    {
      /* Set the backup value of TargetFinal. */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6952      	ldr	r2, [r2, #20]
 800aad4:	fb02 f303 	mul.w	r3, r2, r3
 800aad8:	60fb      	str	r3, [r7, #12]
      pHandle->RampRemainingStep = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	60da      	str	r2, [r3, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	609a      	str	r2, [r3, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	6952      	ldr	r2, [r2, #20]
 800aaee:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaf2:	60bb      	str	r3, [r7, #8]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
	...

0800ab04 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp(RampExtMngr_Handle_t *pHandle, int32_t TargetFinal, uint32_t Durationms)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08c      	sub	sp, #48	; 0x30
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  bool retVal = true;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int32_t aux1;
    int32_t current_ref;


    /* Get current state */
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	6952      	ldr	r2, [r2, #20]
 800ab1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab22:	627b      	str	r3, [r7, #36]	; 0x24

    if (0U == Durationms)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d114      	bne.n	800ab54 <REMNG_ExecRamp+0x50>
    {
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800ab2a:	68b8      	ldr	r0, [r7, #8]
 800ab2c:	f000 f887 	bl	800ac3e <getScalingFactor>
 800ab30:	4602      	mov	r2, r0
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	615a      	str	r2, [r3, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	fb03 f202 	mul.w	r2, r3, r2
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	609a      	str	r2, [r3, #8]
      pHandle->RampRemainingStep = 0U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	611a      	str	r2, [r3, #16]
 800ab52:	e059      	b.n	800ac08 <REMNG_ExecRamp+0x104>
    }
    else
    {
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f86f 	bl	800ac3e <getScalingFactor>
 800ab60:	6238      	str	r0, [r7, #32]
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800ab62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab64:	f000 f86b 	bl	800ac3e <getScalingFactor>
 800ab68:	61f8      	str	r0, [r7, #28]
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800ab6a:	68b8      	ldr	r0, [r7, #8]
 800ab6c:	f000 f867 	bl	800ac3e <getScalingFactor>
 800ab70:	61b8      	str	r0, [r7, #24]
      uint32_t wScalingFactorMin;

      if (wScalingFactor <  wScalingFactor2)
 800ab72:	6a3a      	ldr	r2, [r7, #32]
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d209      	bcs.n	800ab8e <REMNG_ExecRamp+0x8a>
      {
        if (wScalingFactor < wScalingFactor3)
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d202      	bcs.n	800ab88 <REMNG_ExecRamp+0x84>
        {
          wScalingFactorMin = wScalingFactor;
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab86:	e00b      	b.n	800aba0 <REMNG_ExecRamp+0x9c>
        }
        else
        {
          wScalingFactorMin = wScalingFactor3;
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab8c:	e008      	b.n	800aba0 <REMNG_ExecRamp+0x9c>
        }
      }
      else
      {
        if (wScalingFactor2 < wScalingFactor3)
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d202      	bcs.n	800ab9c <REMNG_ExecRamp+0x98>
        {
          wScalingFactorMin = wScalingFactor2;
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab9a:	e001      	b.n	800aba0 <REMNG_ExecRamp+0x9c>
        }
        else
        {
          wScalingFactorMin = wScalingFactor3;
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }

      pHandle->ScalingFactor = wScalingFactorMin;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba4:	615a      	str	r2, [r3, #20]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	461a      	mov	r2, r3
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	fb03 f202 	mul.w	r2, r3, r2
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	609a      	str	r2, [r3, #8]

      /* Store the TargetFinal to be applied in the last step */
      pHandle->TargetFinal = TargetFinal;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	605a      	str	r2, [r3, #4]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	617b      	str	r3, [r7, #20]
      aux /= 1000U;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	4a12      	ldr	r2, [pc, #72]	; (800ac14 <REMNG_ExecRamp+0x110>)
 800abcc:	fba2 2303 	umull	r2, r3, r2, r3
 800abd0:	099b      	lsrs	r3, r3, #6
 800abd2:	617b      	str	r3, [r7, #20]
      pHandle->RampRemainingStep = aux;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	6952      	ldr	r2, [r2, #20]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	613b      	str	r3, [r7, #16]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	461a      	mov	r2, r3
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
      pHandle->IncDecAmount = aux1;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	611a      	str	r2, [r3, #16]
    }
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return retVal;
 800ac08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3730      	adds	r7, #48	; 0x30
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	10624dd3 	.word	0x10624dd3

0800ac18 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted(const RampExtMngr_Handle_t *pHandle)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <REMNG_RampCompleted+0x18>
    {
      retVal = true;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]
      /* nothing to do */
    }
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);
 800ac30:	7bfb      	ldrb	r3, [r7, #15]

}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor(int32_t Target)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b087      	sub	sp, #28
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  uint32_t TargetAbs;
  int32_t aux;
  uint8_t i;

  if (Target < 0)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	da05      	bge.n	800ac58 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	425b      	negs	r3, r3
 800ac50:	60fb      	str	r3, [r7, #12]
    TargetAbs = (uint32_t)aux;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	617b      	str	r3, [r7, #20]
 800ac56:	e001      	b.n	800ac5c <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = (uint32_t)Target;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	617b      	str	r3, [r7, #20]
  }
  for (i = 1U; i < 32U; i++)
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	74fb      	strb	r3, [r7, #19]
 800ac60:	e00c      	b.n	800ac7c <getScalingFactor+0x3e>
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800ac62:	7cfb      	ldrb	r3, [r7, #19]
 800ac64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac68:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6c:	60bb      	str	r3, [r7, #8]
    if (TargetAbs >= limit)
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d206      	bcs.n	800ac84 <getScalingFactor+0x46>
  for (i = 1U; i < 32U; i++)
 800ac76:	7cfb      	ldrb	r3, [r7, #19]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	74fb      	strb	r3, [r7, #19]
 800ac7c:	7cfb      	ldrb	r3, [r7, #19]
 800ac7e:	2b1f      	cmp	r3, #31
 800ac80:	d9ef      	bls.n	800ac62 <getScalingFactor+0x24>
 800ac82:	e000      	b.n	800ac86 <getScalingFactor+0x48>
    {
      break;
 800ac84:	bf00      	nop
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800ac86:	7cfb      	ldrb	r3, [r7, #19]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	fa02 f303 	lsl.w	r3, r2, r3
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	330c      	adds	r3, #12
 800acae:	617b      	str	r3, [r7, #20]
    uint8_t bPhase = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	74fb      	strb	r3, [r7, #19]

    pHandle->pSTC = pSTC;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	669a      	str	r2, [r3, #104]	; 0x68
    pHandle->pVSS = pVSS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	66da      	str	r2, [r3, #108]	; 0x6c
    pHandle->pSNSL = pSNSL;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->pPWM = pPWM;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a3a      	ldr	r2, [r7, #32]
 800acca:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    pHandle->EnteredZone1 = false;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800acdc:	e005      	b.n	800acea <RUC_Init+0x4e>
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	617b      	str	r3, [r7, #20]
      bPhase++;
 800ace4:	7cfb      	ldrb	r3, [r7, #19]
 800ace6:	3301      	adds	r3, #1
 800ace8:	74fb      	strb	r3, [r7, #19]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <RUC_Init+0x5a>
 800acf0:	7cfb      	ldrb	r3, [r7, #19]
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d9f3      	bls.n	800acde <RUC_Init+0x42>
    }

    if (0U == bPhase)
 800acf6:	7cfb      	ldrb	r3, [r7, #19]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01c      	beq.n	800ad36 <RUC_Init+0x9a>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800acfc:	7cfb      	ldrb	r3, [r7, #19]
 800acfe:	1e5a      	subs	r2, r3, #1
 800ad00:	68f9      	ldr	r1, [r7, #12]
 800ad02:	4613      	mov	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	3314      	adds	r3, #20
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]

      pHandle->bPhaseNbr = bPhase;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	7cfa      	ldrb	r2, [r7, #19]
 800ad16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	2364      	movs	r3, #100	; 0x64
 800ad22:	fb02 f303 	mul.w	r3, r2, r3
 800ad26:	4a07      	ldr	r2, [pc, #28]	; (800ad44 <RUC_Init+0xa8>)
 800ad28:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2c:	099b      	lsrs	r3, r3, #6
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	10624dd3 	.word	0x10624dd3

0800ad48 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad58:	617b      	str	r3, [r7, #20]
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad5e:	613b      	str	r3, [r7, #16]
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	330c      	adds	r3, #12
 800ad64:	60fb      	str	r3, [r7, #12]

    pHandle->hDirection = hMotorDirection;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	887a      	ldrh	r2, [r7, #2]
 800ad6a:	80da      	strh	r2, [r3, #6]
    pHandle->EnteredZone1 = false;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	f001 fac6 	bl	800c31e <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800ad92:	2104      	movs	r1, #4
 800ad94:	6938      	ldr	r0, [r7, #16]
 800ad96:	f000 f9e3 	bl	800b160 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	887b      	ldrh	r3, [r7, #2]
 800ada4:	fb12 f303 	smulbb	r3, r2, r3
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	b21b      	sxth	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	6978      	ldr	r0, [r7, #20]
 800adb0:	f001 fc39 	bl	800c626 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800adb4:	2200      	movs	r2, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	6938      	ldr	r0, [r7, #16]
 800adba:	f000 f9e7 	bl	800b18c <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	887b      	ldrh	r3, [r7, #2]
 800adc8:	fb12 f303 	smulbb	r3, r2, r3
 800adcc:	b29b      	uxth	r3, r3
 800adce:	b219      	sxth	r1, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	461a      	mov	r2, r3
 800add6:	6938      	ldr	r0, [r7, #16]
 800add8:	f000 f9d8 	bl	800b18c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	887b      	ldrh	r3, [r7, #2]
 800ade6:	fb12 f303 	smulbb	r3, r2, r3
 800adea:	b29b      	uxth	r3, r3
 800adec:	b219      	sxth	r1, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	6978      	ldr	r0, [r7, #20]
 800adf6:	f001 fc33 	bl	800c660 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	fb02 f303 	mul.w	r3, r2, r3
                                              / 1000U );
 800ae08:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <RUC_Clear+0xf4>)
 800ae0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0e:	099b      	lsrs	r3, r3, #6
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	809a      	strh	r2, [r3, #4]

    pHandle->hPhaseRemainingTicks++;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	889b      	ldrh	r3, [r3, #4]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	809a      	strh	r2, [r3, #4]

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689a      	ldr	r2, [r3, #8]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	609a      	str	r2, [r3, #8]

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800ae32:	bf00      	nop
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	10624dd3 	.word	0x10624dd3

0800ae40 <RUC_Exec>:
  * @brief  FOC Main Rev-Up controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	889b      	ldrh	r3, [r3, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <RUC_Exec+0x20>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	889b      	ldrh	r3, [r3, #4]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	809a      	strh	r2, [r3, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	889b      	ldrh	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d152      	bne.n	800af0e <RUC_Exec+0xce>
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d04c      	beq.n	800af0a <RUC_Exec+0xca>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	fb12 f303 	smulbb	r3, r2, r3
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	b219      	sxth	r1, r3
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	881b      	ldrh	r3, [r3, #0]
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800ae94:	461a      	mov	r2, r3
 800ae96:	f000 f979 	bl	800b18c <STC_ExecRamp>

        VSS_SetMecAcceleration(pHandle->pVSS,
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	fb12 f303 	smulbb	r3, r2, r3
 800aeb4:	b29b      	uxth	r3, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 800aeb6:	b219      	sxth	r1, r3
                               pHandle->pCurrentPhaseParams->hDurationms);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f001 fbce 	bl	800c660 <VSS_SetMecAcceleration>

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	fb02 f303 	mul.w	r3, r2, r3
 800aed4:	4a10      	ldr	r2, [pc, #64]	; (800af18 <RUC_Exec+0xd8>)
 800aed6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeda:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	809a      	strh	r2, [r3, #4]
        pHandle->hPhaseRemainingTicks++;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	889b      	ldrh	r3, [r3, #4]
 800aee6:	3301      	adds	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	809a      	strh	r2, [r3, #4]

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	609a      	str	r2, [r3, #8]

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aefe:	3301      	adds	r3, #1
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800af08:	e001      	b.n	800af0e <RUC_Exec+0xce>
      }
      else
      {
        retVal = false;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
      }
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	10624dd3 	.word	0x10624dd3

0800af1c <RUC_FirstAccelerationStageReached>:
  * @brief  Check that alignment and first acceleration stage are completed.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to true when first acceleration stage has been reached.
  */
__weak bool RUC_FirstAccelerationStageReached(RevUpCtrl_Handle_t *pHandle)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800af34:	429a      	cmp	r2, r3
 800af36:	d301      	bcc.n	800af3c <RUC_FirstAccelerationStageReached+0x20>
    {
      retVal = true;
 800af38:	2301      	movs	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <RUC_SetPhase>:
  *         		This parameter must be a number between 0 and 6.
  *        		- New duration value required for associated phase in ms unit.
  *  @retval Boolean set to true
  */
__weak bool RUC_SetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b087      	sub	sp, #28
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	460b      	mov	r3, r1
 800af54:	607a      	str	r2, [r7, #4]
 800af56:	72fb      	strb	r3, [r7, #11]
  bool retValue = true;
 800af58:	2301      	movs	r3, #1
 800af5a:	75fb      	strb	r3, [r7, #23]
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800af5c:	7afa      	ldrb	r2, [r7, #11]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800af64:	68f9      	ldr	r1, [r7, #12]
 800af66:	4613      	mov	r3, r2
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3310      	adds	r3, #16
 800af72:	4602      	mov	r2, r0
 800af74:	801a      	strh	r2, [r3, #0]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800af76:	7afa      	ldrb	r2, [r7, #11]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800af7e:	68f9      	ldr	r1, [r7, #12]
 800af80:	4613      	mov	r3, r2
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	330e      	adds	r3, #14
 800af8c:	4602      	mov	r2, r0
 800af8e:	801a      	strh	r2, [r3, #0]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800af90:	7afa      	ldrb	r2, [r7, #11]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8818      	ldrh	r0, [r3, #0]
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	4613      	mov	r3, r2
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	440b      	add	r3, r1
 800afa2:	330c      	adds	r3, #12
 800afa4:	4602      	mov	r2, r0
 800afa6:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed Rev-Up.
  *
  */

__weak uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
#endif
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <RUC_GetPhase>:
  *         		This parameter must be a number between 0 and 6.
  *        		- Duration set in selected phase in ms unit.
  *  @retval Returns Boolean set to true value.
  */
__weak bool RUC_GetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	460b      	mov	r3, r1
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	72fb      	strb	r3, [r7, #11]
  bool retValue = true;
 800afde:	2301      	movs	r3, #1
 800afe0:	75fb      	strb	r3, [r7, #23]
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 800afe2:	7afa      	ldrb	r2, [r7, #11]
 800afe4:	68f9      	ldr	r1, [r7, #12]
 800afe6:	4613      	mov	r3, r2
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	440b      	add	r3, r1
 800aff0:	3310      	adds	r3, #16
 800aff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	809a      	strh	r2, [r3, #4]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800affa:	7afa      	ldrb	r2, [r7, #11]
 800affc:	68f9      	ldr	r1, [r7, #12]
 800affe:	4613      	mov	r3, r2
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	330e      	adds	r3, #14
 800b00a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	805a      	strh	r2, [r3, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800b012:	7afa      	ldrb	r2, [r7, #11]
 800b014:	68f9      	ldr	r1, [r7, #12]
 800b016:	4613      	mov	r3, r2
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	440b      	add	r3, r1
 800b020:	330c      	adds	r3, #12
 800b022:	881a      	ldrh	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <STC_Init>:
  * @param  pPI the PI object used as controller for the speed regulation.
  * @param  SPD_Handle the speed sensor used to perform the speed regulation.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]

  if (MC_NULL == pHandle)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01e      	beq.n	800b086 <STC_Init+0x50>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->PISpeed = pPI;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	611a      	str	r2, [r3, #16]
    pHandle->SPD = SPD_Handle;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	615a      	str	r2, [r3, #20]
    pHandle->Mode = pHandle->ModeDefault;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	701a      	strb	r2, [r3, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800b064:	041a      	lsls	r2, r3, #16
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	605a      	str	r2, [r3, #4]
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b06e:	041a      	lsls	r2, r3, #16
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	609a      	str	r2, [r3, #8]
    pHandle->TargetFinal = 0;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	805a      	strh	r2, [r3, #2]
    pHandle->RampRemainingStep = 0U;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	619a      	str	r2, [r3, #24]
  }
}
 800b086:	bf00      	nop
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
  if (MC_NULL == pHandle)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <STC_SetSpeedSensor+0x16>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	615a      	str	r2, [r3, #20]
  }
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <STC_GetSpeedSensor+0x14>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	e000      	b.n	800b0ca <STC_GetSpeedSensor+0x16>
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00e      	beq.n	800b102 <STC_Clear+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d105      	bne.n	800b0f8 <STC_Clear+0x22>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f903 	bl	800a2fe <PID_SetIntegralTerm>
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0fc:	041a      	lsls	r2, r3, #16
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	609a      	str	r2, [r3, #8]
  }
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference.
  *         Expressed in the unit defined by SPEED_UNIT.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b10a:	b480      	push	{r7}
 800b10c:	b083      	sub	sp, #12
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d009      	beq.n	800b12c <STC_GetMecSpeedRefUnit+0x22>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	da02      	bge.n	800b126 <STC_GetMecSpeedRefUnit+0x1c>
 800b120:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b124:	33ff      	adds	r3, #255	; 0xff
 800b126:	141b      	asrs	r3, r3, #16
 800b128:	b21b      	sxth	r3, r3
 800b12a:	e000      	b.n	800b12e <STC_GetMecSpeedRefUnit+0x24>
 800b12c:	2300      	movs	r3, #0
#endif
}
 800b12e:	4618      	mov	r0, r3
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <STC_GetDutyCycleRef>:
  *         actually the dutycycle reference expressed in digit.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval uint16_t current dutycycle reference. This value is actually expressed in digit.
  */
__weak uint16_t STC_GetDutyCycleRef(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <STC_GetDutyCycleRef+0x18>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	0c1b      	lsrs	r3, r3, #16
 800b14e:	b29b      	uxth	r3, r3
 800b150:	e000      	b.n	800b154 <STC_GetDutyCycleRef+0x1a>
 800b152:	2300      	movs	r3, #0
#endif
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <STC_SetControlMode>:
  *         MCM_TORQUE_MODE to enable the Torque mode or MCM_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  if (MC_NULL == pHandle)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <STC_SetControlMode+0x1e>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	701a      	strb	r2, [r3, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	60da      	str	r2, [r3, #12]
  }
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <STC_ExecRamp>:
  *         the boundary of the application (Above max application speed or below min  
  *         application speed in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	817b      	strh	r3, [r7, #10]
  bool allowedRange = true;
 800b19a:	2301      	movs	r3, #1
 800b19c:	77fb      	strb	r3, [r7, #31]

  if (MC_NULL == pHandle)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <STC_ExecRamp+0x1e>
  {
    allowedRange = false;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	77fb      	strb	r3, [r7, #31]
 800b1a8:	e082      	b.n	800b2b0 <STC_ExecRamp+0x124>
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d10d      	bne.n	800b1ce <STC_ExecRamp+0x42>
    {
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7ff ffc1 	bl	800b13a <STC_GetDutyCycleRef>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 800b1bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	dd2d      	ble.n	800b224 <STC_ExecRamp+0x98>
      {
        allowedRange = false;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	77fb      	strb	r3, [r7, #31]
 800b1cc:	e02a      	b.n	800b224 <STC_ExecRamp+0x98>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	da02      	bge.n	800b1dc <STC_ExecRamp+0x50>
 800b1d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b1da:	33ff      	adds	r3, #255	; 0xff
 800b1dc:	141b      	asrs	r3, r3, #16
 800b1de:	83bb      	strh	r3, [r7, #28]
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800b1e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	8bd2      	ldrh	r2, [r2, #30]
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	dd02      	ble.n	800b1f2 <STC_ExecRamp+0x66>
      {
        allowedRange = false;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	77fb      	strb	r3, [r7, #31]
 800b1f0:	e018      	b.n	800b224 <STC_ExecRamp+0x98>
      }
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800b1f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	da02      	bge.n	800b206 <STC_ExecRamp+0x7a>
      {
        allowedRange = false;
 800b200:	2300      	movs	r3, #0
 800b202:	77fb      	strb	r3, [r7, #31]
 800b204:	e00e      	b.n	800b224 <STC_ExecRamp+0x98>
      }
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800b206:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	8c12      	ldrh	r2, [r2, #32]
 800b20e:	4293      	cmp	r3, r2
 800b210:	da08      	bge.n	800b224 <STC_ExecRamp+0x98>
      {
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b218:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	dd01      	ble.n	800b224 <STC_ExecRamp+0x98>
        {
          allowedRange = false;
 800b220:	2300      	movs	r3, #0
 800b222:	77fb      	strb	r3, [r7, #31]
        /* Nothing to do */
      }
#endif
    }

    if (true == allowedRange)
 800b224:	7ffb      	ldrb	r3, [r7, #31]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d042      	beq.n	800b2b0 <STC_ExecRamp+0x124>
    {
      /* Interrupts the execution of any previous ramp command */
      if (0U == hDurationms)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d116      	bne.n	800b25e <STC_ExecRamp+0xd2>
      {
        if (MCM_SPEED_MODE == pHandle->Mode)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b03      	cmp	r3, #3
 800b236:	d105      	bne.n	800b244 <STC_ExecRamp+0xb8>
        {
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800b238:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b23c:	041a      	lsls	r2, r3, #16
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	605a      	str	r2, [r3, #4]
 800b242:	e005      	b.n	800b250 <STC_ExecRamp+0xc4>
        }
        else
        {
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 800b244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	461a      	mov	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	609a      	str	r2, [r3, #8]
        }
        pHandle->RampRemainingStep = 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = 0;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	619a      	str	r2, [r3, #24]
 800b25c:	e028      	b.n	800b2b0 <STC_ExecRamp+0x124>
      }
      else
      {
        /* Store the hTargetFinal to be applied in the last step */
        pHandle->TargetFinal = hTargetFinal;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	897a      	ldrh	r2, [r7, #10]
 800b262:	805a      	strh	r2, [r3, #2]

        /* Compute the (wRampRemainingStep) number of steps remaining to complete
        the ramp. */
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8b9b      	ldrh	r3, [r3, #28]
 800b268:	461a      	mov	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
 800b270:	61bb      	str	r3, [r7, #24]
        wAux /= 1000U;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	4a11      	ldr	r2, [pc, #68]	; (800b2bc <STC_ExecRamp+0x130>)
 800b276:	fba2 2303 	umull	r2, r3, r2, r3
 800b27a:	099b      	lsrs	r3, r3, #6
 800b27c:	61bb      	str	r3, [r7, #24]
        pHandle->RampRemainingStep = wAux;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	60da      	str	r2, [r3, #12]
        pHandle->RampRemainingStep++;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	60da      	str	r2, [r3, #12]

        /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
        the reference value at each CalcSpeedReference. */
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800b28e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b292:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	041b      	lsls	r3, r3, #16
 800b29a:	617b      	str	r3, [r7, #20]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]
        pHandle->IncDecAmount = wAux1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	619a      	str	r2, [r3, #24]
      }
    }
  }
  return (allowedRange);
 800b2b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3720      	adds	r7, #32
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	10624dd3 	.word	0x10624dd3

0800b2c0 <STC_StopRamp>:
  *         The last value of mechanical rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d005      	beq.n	800b2da <STC_StopRamp+0x1a>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	619a      	str	r2, [r3, #24]
  }
}
 800b2da:	bf00      	nop
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d008      	beq.n	800b306 <STC_ForceSpeedReferenceToCurrentSpeed+0x20>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f815 	bl	800b328 <SPD_GetAvrgMecSpeedUnit>
 800b2fe:	4603      	mov	r3, r0
 800b300:	041a      	lsls	r2, r3, #16
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	605a      	str	r2, [r3, #4]
  }
}
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360�/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
#endif
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
#endif
}
 800b336:	4618      	mov	r0, r3
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <SPD_GetElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical speed (Dpp)
  */
__weak int16_t SPD_GetElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
#endif
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
#endif
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 800b376:	b480      	push	{r7}
 800b378:	b087      	sub	sp, #28
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800b380:	2301      	movs	r3, #1
 800b382:	75fb      	strb	r3, [r7, #23]
#endif
    uint16_t hAbsMecSpeedUnit;
    uint16_t hAbsMecAccelUnitP;
    int16_t hAux;
    uint8_t bSpeedErrorNumber;
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	78db      	ldrb	r3, [r3, #3]
 800b388:	73fb      	strb	r3, [r7, #15]
    bool SpeedError = false;
 800b38a:	2300      	movs	r3, #0
 800b38c:	743b      	strb	r3, [r7, #16]

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	747b      	strb	r3, [r7, #17]

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	da09      	bge.n	800b3b2 <SPD_IsMecSpeedReliable+0x3c>
    {
      hAux = -(*pMecSpeedUnit);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	425b      	negs	r3, r3
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	81bb      	strh	r3, [r7, #12]
      hAbsMecSpeedUnit = (uint16_t)hAux;
 800b3ac:	89bb      	ldrh	r3, [r7, #12]
 800b3ae:	82bb      	strh	r3, [r7, #20]
 800b3b0:	e003      	b.n	800b3ba <SPD_IsMecSpeedReliable+0x44>
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3b8:	82bb      	strh	r3, [r7, #20]
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	8a9b      	ldrh	r3, [r3, #20]
 800b3be:	8aba      	ldrh	r2, [r7, #20]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d901      	bls.n	800b3c8 <SPD_IsMecSpeedReliable+0x52>
    {
      SpeedError = true;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	743b      	strb	r3, [r7, #16]
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	8adb      	ldrh	r3, [r3, #22]
 800b3cc:	8aba      	ldrh	r2, [r7, #20]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d201      	bcs.n	800b3d6 <SPD_IsMecSpeedReliable+0x60>
    {
      SpeedError = true;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	743b      	strb	r3, [r7, #16]
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	da09      	bge.n	800b3f4 <SPD_IsMecSpeedReliable+0x7e>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	425b      	negs	r3, r3
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	81bb      	strh	r3, [r7, #12]
      hAbsMecAccelUnitP = (uint16_t)hAux;
 800b3ee:	89bb      	ldrh	r3, [r7, #12]
 800b3f0:	827b      	strh	r3, [r7, #18]
 800b3f2:	e003      	b.n	800b3fc <SPD_IsMecSpeedReliable+0x86>
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b3fa:	827b      	strh	r3, [r7, #18]
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8b1b      	ldrh	r3, [r3, #24]
 800b400:	8a7a      	ldrh	r2, [r7, #18]
 800b402:	429a      	cmp	r2, r3
 800b404:	d901      	bls.n	800b40a <SPD_IsMecSpeedReliable+0x94>
    {
      SpeedError = true;
 800b406:	2301      	movs	r3, #1
 800b408:	743b      	strb	r3, [r7, #16]
    }

    if (true == SpeedError)
 800b40a:	7c3b      	ldrb	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d007      	beq.n	800b420 <SPD_IsMecSpeedReliable+0xaa>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b410:	7c7a      	ldrb	r2, [r7, #17]
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	429a      	cmp	r2, r3
 800b416:	d209      	bcs.n	800b42c <SPD_IsMecSpeedReliable+0xb6>
      {
        bSpeedErrorNumber++;
 800b418:	7c7b      	ldrb	r3, [r7, #17]
 800b41a:	3301      	adds	r3, #1
 800b41c:	747b      	strb	r3, [r7, #17]
 800b41e:	e005      	b.n	800b42c <SPD_IsMecSpeedReliable+0xb6>
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b420:	7c7a      	ldrb	r2, [r7, #17]
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	429a      	cmp	r2, r3
 800b426:	d201      	bcs.n	800b42c <SPD_IsMecSpeedReliable+0xb6>
      {
        bSpeedErrorNumber = 0u;
 800b428:	2300      	movs	r3, #0
 800b42a:	747b      	strb	r3, [r7, #17]
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b42c:	7c7a      	ldrb	r2, [r7, #17]
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	429a      	cmp	r2, r3
 800b432:	d101      	bne.n	800b438 <SPD_IsMecSpeedReliable+0xc2>
    {
      SpeedSensorReliability = false;
 800b434:	2300      	movs	r3, #0
 800b436:	75fb      	strb	r3, [r7, #23]
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7c7a      	ldrb	r2, [r7, #17]
 800b43c:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	371c      	adds	r7, #28
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b45a:	60fb      	str	r3, [r7, #12]
    wAux *= INT16_MAX;
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4613      	mov	r3, r2
 800b460:	03db      	lsls	r3, r3, #15
 800b462:	1a9b      	subs	r3, r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8a9b      	ldrh	r3, [r3, #20]
 800b46a:	b21b      	sxth	r3, r3
 800b46c:	461a      	mov	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	fb93 f3f2 	sdiv	r3, r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
    tempValue = (int16_t)wAux;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
 800b47a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	2b04      	cmp	r3, #4
 800b498:	d103      	bne.n	800b4a2 <STC_CalcTorqueReference+0x18>
    {
      wCurrentReference = pHandle->TorqueRef;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	613b      	str	r3, [r7, #16]
 800b4a0:	e002      	b.n	800b4a8 <STC_CalcTorqueReference+0x1e>
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	613b      	str	r3, [r7, #16]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d90a      	bls.n	800b4c6 <STC_CalcTorqueReference+0x3c>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	613b      	str	r3, [r7, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	1e5a      	subs	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60da      	str	r2, [r3, #12]
 800b4c4:	e00b      	b.n	800b4de <STC_CalcTorqueReference+0x54>
    }
    else if (1U == pHandle->RampRemainingStep)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d107      	bne.n	800b4de <STC_CalcTorqueReference+0x54>
    {
      /* Set the backup value of hTargetFinal. */
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4d4:	041b      	lsls	r3, r3, #16
 800b4d6:	613b      	str	r3, [r7, #16]
      pHandle->RampRemainingStep = 0U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	60da      	str	r2, [r3, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d121      	bne.n	800b52a <STC_CalcTorqueReference+0xa0>
      /* Run the speed control loop */

      /* Compute speed error */
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	141b      	asrs	r3, r3, #16
 800b4ea:	81fb      	strh	r3, [r7, #14]
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
#endif
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff19 	bl	800b328 <SPD_GetAvrgMecSpeedUnit>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	81bb      	strh	r3, [r7, #12]
      hError = hTargetSpeed - hMeasuredSpeed;
 800b4fa:	89fa      	ldrh	r2, [r7, #14]
 800b4fc:	89bb      	ldrh	r3, [r7, #12]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	b29b      	uxth	r3, r3
 800b502:	817b      	strh	r3, [r7, #10]
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe ffbe 	bl	800a490 <PI_Controller>
 800b514:	4603      	mov	r3, r0
 800b516:	82fb      	strh	r3, [r7, #22]

      pHandle->SpeedRefUnitExt = wCurrentReference;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	605a      	str	r2, [r3, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b51e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b522:	041a      	lsls	r2, r3, #16
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	609a      	str	r2, [r3, #8]
 800b528:	e005      	b.n	800b536 <STC_CalcTorqueReference+0xac>
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	609a      	str	r2, [r3, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	141b      	asrs	r3, r3, #16
 800b534:	82fb      	strh	r3, [r7, #22]
#endif
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
 800b536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  *
  * - Called during the boot phase of the MC process.
  */
__weak qd_t STC_GetDefaultIqdref(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b550:	813b      	strh	r3, [r7, #8]
    IqdRefDefault.d = pHandle->IdrefDefault;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b558:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	2300      	movs	r3, #0
 800b560:	89ba      	ldrh	r2, [r7, #12]
 800b562:	f362 030f 	bfi	r3, r2, #0, #16
 800b566:	89fa      	ldrh	r2, [r7, #14]
 800b568:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <STO_PLL_Init>:
/**
  * @brief  Initializes the @p pHandle of STate Observer (STO) PLL component.
  *
  */
__weak void STO_PLL_Init(STO_PLL_Handle_t *pHandle)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  {
#endif
    int16_t htempk;
    int32_t wAux;

    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

    wAux = ((int32_t)1);
 800b594:	2301      	movs	r3, #1
 800b596:	60bb      	str	r3, [r7, #8]
    pHandle->F3POW2 = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	865a      	strh	r2, [r3, #50]	; 0x32

    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <STO_PLL_Init+0xac>)
 800b5a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5ac:	81fb      	strh	r3, [r7, #14]

    while (htempk != 0)
 800b5ae:	e00e      	b.n	800b5ce <STO_PLL_Init+0x56>
    {
      htempk /= ((int16_t)2);
 800b5b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5b4:	0fda      	lsrs	r2, r3, #31
 800b5b6:	4413      	add	r3, r2
 800b5b8:	105b      	asrs	r3, r3, #1
 800b5ba:	81fb      	strh	r3, [r7, #14]
      wAux *= ((int32_t)2);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	60bb      	str	r3, [r7, #8]
      pHandle->F3POW2++;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	865a      	strh	r2, [r3, #50]	; 0x32
    while (htempk != 0)
 800b5ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1ec      	bne.n	800b5b0 <STO_PLL_Init+0x38>
    }

    pHandle->hF3 = (int16_t)wAux;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	b21a      	sxth	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	861a      	strh	r2, [r3, #48]	; 0x30
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
 800b5f0:	60bb      	str	r3, [r7, #8]
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	4a0c      	ldr	r2, [pc, #48]	; (800b628 <STO_PLL_Init+0xb0>)
 800b5f6:	fb82 1203 	smull	r1, r2, r2, r3
 800b5fa:	1212      	asrs	r2, r2, #8
 800b5fc:	17db      	asrs	r3, r3, #31
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	b21a      	sxth	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	855a      	strh	r2, [r3, #42]	; 0x2a

    STO_PLL_Clear(pHandle);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fc15 	bl	800be36 <STO_PLL_Clear>

    PID_HandleInit(&pHandle->PIRegulator);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3334      	adds	r3, #52	; 0x34
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe fe1d 	bl	800a250 <PID_HandleInit>

    /* Acceleration measurement set to zero */
    pHandle->_Super.hMecAccelUnitP = 0;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	825a      	strh	r2, [r3, #18]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return;
 800b61c:	bf00      	nop
}
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	000fea5e 	.word	0x000fea5e
 800b628:	06488dc5 	.word	0x06488dc5

0800b62c <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08e      	sub	sp, #56	; 0x38
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <STO_PLL_CalcElAngle+0x16>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <STO_PLL_CalcElAngle+0x1c>
  {
    retValue = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b646:	e200      	b.n	800ba4a <STO_PLL_CalcElAngle+0x41e>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b652:	4619      	mov	r1, r3
 800b654:	460b      	mov	r3, r1
 800b656:	03db      	lsls	r3, r3, #15
 800b658:	1a5b      	subs	r3, r3, r1
 800b65a:	429a      	cmp	r2, r3
 800b65c:	dd09      	ble.n	800b672 <STO_PLL_CalcElAngle+0x46>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b664:	461a      	mov	r2, r3
 800b666:	4613      	mov	r3, r2
 800b668:	03db      	lsls	r3, r3, #15
 800b66a:	1a9a      	subs	r2, r3, r2
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	669a      	str	r2, [r3, #104]	; 0x68
 800b670:	e011      	b.n	800b696 <STO_PLL_CalcElAngle+0x6a>
    }
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b67c:	4619      	mov	r1, r3
 800b67e:	03db      	lsls	r3, r3, #15
 800b680:	1acb      	subs	r3, r1, r3
 800b682:	429a      	cmp	r2, r3
 800b684:	dc07      	bgt.n	800b696 <STO_PLL_CalcElAngle+0x6a>
    {
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b68c:	461a      	mov	r2, r3
 800b68e:	03db      	lsls	r3, r3, #15
 800b690:	1ad2      	subs	r2, r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	669a      	str	r2, [r3, #104]	; 0x68
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	f8b2 211e 	ldrh.w	r2, [r2, #286]	; 0x11e
 800b6a0:	4113      	asrs	r3, r2
 800b6a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	03db      	lsls	r3, r3, #15
 800b6b4:	1a5b      	subs	r3, r3, r1
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	dd09      	ble.n	800b6ce <STO_PLL_CalcElAngle+0xa2>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	03db      	lsls	r3, r3, #15
 800b6c6:	1a9a      	subs	r2, r3, r2
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6cc:	e011      	b.n	800b6f2 <STO_PLL_CalcElAngle+0xc6>
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b6d8:	4619      	mov	r1, r3
 800b6da:	03db      	lsls	r3, r3, #15
 800b6dc:	1acb      	subs	r3, r1, r3
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	dc07      	bgt.n	800b6f2 <STO_PLL_CalcElAngle+0xc6>
    {
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	03db      	lsls	r3, r3, #15
 800b6ec:	1ad2      	subs	r2, r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	66da      	str	r2, [r3, #108]	; 0x6c
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	f8b2 211e 	ldrh.w	r2, [r2, #286]	; 0x11e
 800b6fc:	4113      	asrs	r3, r2
 800b6fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b70a:	4619      	mov	r1, r3
 800b70c:	460b      	mov	r3, r1
 800b70e:	03db      	lsls	r3, r3, #15
 800b710:	1a5b      	subs	r3, r3, r1
 800b712:	429a      	cmp	r2, r3
 800b714:	dd09      	ble.n	800b72a <STO_PLL_CalcElAngle+0xfe>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b71c:	461a      	mov	r2, r3
 800b71e:	4613      	mov	r3, r2
 800b720:	03db      	lsls	r3, r3, #15
 800b722:	1a9a      	subs	r2, r3, r2
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	661a      	str	r2, [r3, #96]	; 0x60
 800b728:	e011      	b.n	800b74e <STO_PLL_CalcElAngle+0x122>
    }
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b734:	4619      	mov	r1, r3
 800b736:	03db      	lsls	r3, r3, #15
 800b738:	1acb      	subs	r3, r1, r3
 800b73a:	429a      	cmp	r2, r3
 800b73c:	dc07      	bgt.n	800b74e <STO_PLL_CalcElAngle+0x122>
    {
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b744:	461a      	mov	r2, r3
 800b746:	03db      	lsls	r3, r3, #15
 800b748:	1ad2      	subs	r2, r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	661a      	str	r2, [r3, #96]	; 0x60
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b758:	4619      	mov	r1, r3
 800b75a:	460b      	mov	r3, r1
 800b75c:	03db      	lsls	r3, r3, #15
 800b75e:	1a5b      	subs	r3, r3, r1
 800b760:	429a      	cmp	r2, r3
 800b762:	dd09      	ble.n	800b778 <STO_PLL_CalcElAngle+0x14c>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b76a:	461a      	mov	r2, r3
 800b76c:	4613      	mov	r3, r2
 800b76e:	03db      	lsls	r3, r3, #15
 800b770:	1a9a      	subs	r2, r3, r2
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	665a      	str	r2, [r3, #100]	; 0x64
 800b776:	e011      	b.n	800b79c <STO_PLL_CalcElAngle+0x170>
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b782:	4619      	mov	r1, r3
 800b784:	03db      	lsls	r3, r3, #15
 800b786:	1acb      	subs	r3, r1, r3
 800b788:	429a      	cmp	r2, r3
 800b78a:	dc07      	bgt.n	800b79c <STO_PLL_CalcElAngle+0x170>
    {
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b792:	461a      	mov	r2, r3
 800b794:	03db      	lsls	r3, r3, #15
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	665a      	str	r2, [r3, #100]	; 0x64
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800b7a6:	4113      	asrs	r3, r2
 800b7a8:	857b      	strh	r3, [r7, #42]	; 0x2a
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b7aa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	857b      	strh	r3, [r7, #42]	; 0x2a

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800b7c4:	4113      	asrs	r3, r2
 800b7c6:	853b      	strh	r3, [r7, #40]	; 0x28
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b7c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	853b      	strh	r3, [r7, #40]	; 0x28

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	891b      	ldrh	r3, [r3, #8]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	141b      	asrs	r3, r3, #16
 800b7ee:	847b      	strh	r3, [r7, #34]	; 0x22
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	891b      	ldrh	r3, [r3, #8]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
 800b800:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	141b      	asrs	r3, r3, #16
 800b806:	843b      	strh	r3, [r7, #32]
#endif

    /*alfa axes observer*/
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800b812:	4113      	asrs	r3, r2
 800b814:	83fb      	strh	r3, [r7, #30]
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b81c:	461a      	mov	r2, r3
 800b81e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b822:	fb02 f303 	mul.w	r3, r2, r3
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b838:	461a      	mov	r2, r3
 800b83a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b83e:	fb02 f303 	mul.w	r3, r2, r3
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next += wAux;
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	4413      	add	r3, r2
 800b84a:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800b852:	461a      	mov	r2, r3
 800b854:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b858:	fb02 f303 	mul.w	r3, r2, r3
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next += wAux;
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	4413      	add	r3, r2
 800b864:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800b86c:	461a      	mov	r2, r3
 800b86e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next -= wAux;
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800b886:	461a      	mov	r2, r3
 800b888:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b88c:	fb02 f303 	mul.w	r3, r2, r3
 800b890:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b898:	4413      	add	r3, r2
 800b89a:	617b      	str	r3, [r7, #20]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b89c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b8a4:	4113      	asrs	r3, r2
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wAux = ((int32_t)hAux_Beta) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	fb02 f303 	mul.w	r3, r2, r3
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_alfa_est_Next += wAux;
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	4413      	add	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]

    /*beta axes observer*/
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800b8da:	4113      	asrs	r3, r2
 800b8dc:	83fb      	strh	r3, [r7, #30]
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b900:	461a      	mov	r2, r3
 800b902:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b906:	fb02 f303 	mul.w	r3, r2, r3
 800b90a:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next += wAux;
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	4413      	add	r3, r2
 800b912:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800b91a:	461a      	mov	r2, r3
 800b91c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b920:	fb02 f303 	mul.w	r3, r2, r3
 800b924:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next += wAux;
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	4413      	add	r3, r2
 800b92c:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800b934:	461a      	mov	r2, r3
 800b936:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b93a:	fb02 f303 	mul.w	r3, r2, r3
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next -= wAux;
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800b94e:	461a      	mov	r2, r3
 800b950:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b960:	4413      	add	r3, r2
 800b962:	60fb      	str	r3, [r7, #12]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b964:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b96c:	4113      	asrs	r3, r2
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wAux = ((int32_t)hAux_Alfa) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800b976:	461a      	mov	r2, r3
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	fb02 f303 	mul.w	r3, r2, r3
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b986:	461a      	mov	r2, r3
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	fb02 f303 	mul.w	r3, r2, r3
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_beta_est_Next -= wAux;
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	60fb      	str	r3, [r7, #12]

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b99c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    pHandle->hBemf_beta_est = hAux_Beta;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b9a4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

    if (0 == pHandle->hForcedDirection)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f993 3124 	ldrsb.w	r3, [r3, #292]	; 0x124
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10b      	bne.n	800b9ca <STO_PLL_CalcElAngle+0x39e>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db02      	blt.n	800b9c2 <STO_PLL_CalcElAngle+0x396>
      {
        wDirection = 1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c0:	e007      	b.n	800b9d2 <STO_PLL_CalcElAngle+0x3a6>
      }
      else
      {
        wDirection = -1;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c8:	e003      	b.n	800b9d2 <STO_PLL_CalcElAngle+0x3a6>
      }
    }
    else
    {
      /* we are in main sensor mode, use a forced direction */
      wDirection = pHandle->hForcedDirection;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f993 3124 	ldrsb.w	r3, [r3, #292]	; 0x124
 800b9d0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9d8:	fb12 f303 	smulbb	r3, r2, r3
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	85fb      	strh	r3, [r7, #46]	; 0x2e
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9e6:	fb12 f303 	smulbb	r3, r2, r3
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	85bb      	strh	r3, [r7, #44]	; 0x2c

    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800b9ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9f0:	425b      	negs	r3, r3
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	b21a      	sxth	r2, r3
 800b9f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fa91 	bl	800bf24 <STO_ExecutePLL>
 800ba02:	4603      	mov	r3, r0
 800ba04:	817b      	strh	r3, [r7, #10]
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	897a      	ldrh	r2, [r7, #10]
 800ba0a:	821a      	strh	r2, [r3, #16]

    STO_Store_Rotor_Speed(pHandle, hRotor_Speed);
 800ba0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fa56 	bl	800bec4 <STO_Store_Rotor_Speed>

    pHandle->_Super.hElAngle += hRotor_Speed;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	897b      	ldrh	r3, [r7, #10]
 800ba22:	4413      	add	r3, r2
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	b21a      	sxth	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	809a      	strh	r2, [r3, #4]

    /*storing previous values of currents and bemfs*/
    pHandle->Ialfa_est = wIalfa_est_Next;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	669a      	str	r2, [r3, #104]	; 0x68

    pHandle->Ibeta_est = wIbeta_est_Next;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	66da      	str	r2, [r3, #108]	; 0x6c
    retValue = pHandle->_Super.hElAngle;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	889b      	ldrh	r3, [r3, #4]
 800ba48:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  return (retValue);
 800ba4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3738      	adds	r7, #56	; 0x38
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <STO_PLL_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (expressed in #SPEED_UNIT).
  * @retval True if the sensor information is reliable, false otherwise.
  */

__weak bool STO_PLL_CalcAvrgMecSpeedUnit(STO_PLL_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 800ba56:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba5a:	b092      	sub	sp, #72	; 0x48
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
    bAux = false;
  }
  else
  {
#endif
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800ba62:	2100      	movs	r1, #0
 800ba64:	6439      	str	r1, [r7, #64]	; 0x40
    int32_t wError;
    int32_t wAux;
    int32_t wAvrSquareSpeed;
    int32_t wAvrQuadraticError = 0;
 800ba66:	2100      	movs	r1, #0
 800ba68:	63f9      	str	r1, [r7, #60]	; 0x3c
    int32_t wObsBemf, wEstBemf;
    int32_t wObsBemfSq = 0;
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	63b9      	str	r1, [r7, #56]	; 0x38
    int32_t wEstBemfSq = 0;
 800ba6e:	2100      	movs	r1, #0
 800ba70:	6379      	str	r1, [r7, #52]	; 0x34
    int32_t wEstBemfSqLo;
    bool bIs_Speed_Reliable = false;
 800ba72:	2100      	movs	r1, #0
 800ba74:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
    bool bIs_Bemf_Consistent = false;
 800ba78:	2100      	movs	r1, #0
 800ba7a:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
 800ba84:	f887 1030 	strb.w	r1, [r7, #48]	; 0x30

    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ba88:	2100      	movs	r1, #0
 800ba8a:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800ba8e:	e010      	b.n	800bab2 <STO_PLL_CalcAvrgMecSpeedUnit+0x5c>
    {
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800ba90:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	3138      	adds	r1, #56	; 0x38
 800ba98:	0049      	lsls	r1, r1, #1
 800ba9a:	4401      	add	r1, r0
 800ba9c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800baa0:	4608      	mov	r0, r1
 800baa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800baa4:	4401      	add	r1, r0
 800baa6:	6439      	str	r1, [r7, #64]	; 0x40
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800baa8:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800baac:	3101      	adds	r1, #1
 800baae:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bab2:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 800bab6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800baba:	4288      	cmp	r0, r1
 800babc:	d3e8      	bcc.n	800ba90 <STO_PLL_CalcAvrgMecSpeedUnit+0x3a>
    }

    if (0U == bSpeedBufferSizeUnit)
 800babe:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bac2:	2900      	cmp	r1, #0
 800bac4:	d005      	beq.n	800bad2 <STO_PLL_CalcAvrgMecSpeedUnit+0x7c>
    {
      /* Nothing to do */
    }
    else
    {
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800bac6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800baca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bacc:	fb90 f1f1 	sdiv	r1, r0, r1
 800bad0:	6439      	str	r1, [r7, #64]	; 0x40
    }

    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bad2:	2100      	movs	r1, #0
 800bad4:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bad8:	e018      	b.n	800bb0c <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    {
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800bada:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	3138      	adds	r1, #56	; 0x38
 800bae2:	0049      	lsls	r1, r1, #1
 800bae4:	4401      	add	r1, r0
 800bae6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800baea:	4608      	mov	r0, r1
 800baec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800baee:	1a41      	subs	r1, r0, r1
 800baf0:	60f9      	str	r1, [r7, #12]
      wError = (wError * wError);
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	fb01 f101 	mul.w	r1, r1, r1
 800baf8:	60f9      	str	r1, [r7, #12]
      wAvrQuadraticError += wError;
 800bafa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bafc:	68f9      	ldr	r1, [r7, #12]
 800bafe:	4401      	add	r1, r0
 800bb00:	63f9      	str	r1, [r7, #60]	; 0x3c
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bb02:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bb06:	3101      	adds	r1, #1
 800bb08:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bb0c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 800bb10:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bb14:	4288      	cmp	r0, r1
 800bb16:	d3e0      	bcc.n	800bada <STO_PLL_CalcAvrgMecSpeedUnit+0x84>
    }

    /* It computes the measurement variance */
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800bb18:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bb1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb1e:	fb90 f1f1 	sdiv	r1, r0, r1
 800bb22:	63f9      	str	r1, [r7, #60]	; 0x3c

    /* The maximum variance acceptable is here calculated as a function of average speed */
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800bb24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb26:	fb01 f101 	mul.w	r1, r1, r1
 800bb2a:	62f9      	str	r1, [r7, #44]	; 0x2c
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800bb2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb2e:	17c8      	asrs	r0, r1, #31
 800bb30:	4688      	mov	r8, r1
 800bb32:	4681      	mov	r9, r0
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	f8b1 1110 	ldrh.w	r1, [r1, #272]	; 0x110
 800bb3a:	b289      	uxth	r1, r1
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	460c      	mov	r4, r1
 800bb40:	4605      	mov	r5, r0
 800bb42:	fb04 f009 	mul.w	r0, r4, r9
 800bb46:	fb08 f105 	mul.w	r1, r8, r5
 800bb4a:	4401      	add	r1, r0
 800bb4c:	fba8 2304 	umull	r2, r3, r8, r4
 800bb50:	4419      	add	r1, r3
 800bb52:	460b      	mov	r3, r1
 800bb54:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800bb58:	e9c7 2308 	strd	r2, r3, [r7, #32]
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 800bb5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da05      	bge.n	800bb70 <STO_PLL_CalcAvrgMecSpeedUnit+0x11a>
 800bb64:	f112 0a7f 	adds.w	sl, r2, #127	; 0x7f
 800bb68:	f143 0b00 	adc.w	fp, r3, #0
 800bb6c:	4652      	mov	r2, sl
 800bb6e:	465b      	mov	r3, fp
 800bb70:	f04f 0000 	mov.w	r0, #0
 800bb74:	f04f 0100 	mov.w	r1, #0
 800bb78:	09d0      	lsrs	r0, r2, #7
 800bb7a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800bb7e:	11d9      	asrs	r1, r3, #7
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4613      	mov	r3, r2
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800bb88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	da02      	bge.n	800bb96 <STO_PLL_CalcAvrgMecSpeedUnit+0x140>
    {
      bIs_Speed_Reliable = true;
 800bb90:	2301      	movs	r3, #1
 800bb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    /* Computation of Mechanical speed Unit */
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	8b5b      	ldrh	r3, [r3, #26]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb9e:	fb02 f303 	mul.w	r3, r2, r3
 800bba2:	61fb      	str	r3, [r7, #28]
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	789b      	ldrb	r3, [r3, #2]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	fb02 f303 	mul.w	r3, r2, r3
 800bbb0:	61fb      	str	r3, [r7, #28]
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbbe:	61fb      	str	r3, [r7, #28]
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	785b      	ldrb	r3, [r3, #1]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbcc:	61fb      	str	r3, [r7, #28]

    *pMecSpeedUnit = (int16_t)wAux;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	b21a      	sxth	r2, r3
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	801a      	strh	r2, [r3, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	b21a      	sxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	819a      	strh	r2, [r3, #12]

    pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bbe4:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

    /* Bemf Consistency Check algorithm */
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d05b      	beq.n	800bcaa <STO_PLL_CalcAvrgMecSpeedUnit+0x254>
    {
      /* wAux abs value   */
      //cstat !MISRAC2012-Rule-14.3_b !RED-func-no-effect !RED-cmp-never !RED-cond-never
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bfb8      	it	lt
 800bbf8:	425b      	neglt	r3, r3
 800bbfa:	61fb      	str	r3, [r7, #28]
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800bc02:	461a      	mov	r2, r3
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	4293      	cmp	r3, r2
 800bc08:	da41      	bge.n	800bc8e <STO_PLL_CalcAvrgMecSpeedUnit+0x238>
      {
        /* Computation of Observed back-emf */
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800bc10:	61bb      	str	r3, [r7, #24]
        wObsBemfSq = wObsBemf * wObsBemf;
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	fb03 f303 	mul.w	r3, r3, r3
 800bc18:	63bb      	str	r3, [r7, #56]	; 0x38
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800bc20:	61bb      	str	r3, [r7, #24]
        wObsBemfSq += wObsBemf * wObsBemf;
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	fb03 f303 	mul.w	r3, r3, r3
 800bc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2a:	4413      	add	r3, r2
 800bc2c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Computation of Estimated back-emf */
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	4613      	mov	r3, r2
 800bc32:	03db      	lsls	r3, r3, #15
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	8a92      	ldrh	r2, [r2, #20]
 800bc3a:	b212      	sxth	r2, r2
 800bc3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc40:	617b      	str	r3, [r7, #20]
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800bc48:	461a      	mov	r2, r3
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da00      	bge.n	800bc56 <STO_PLL_CalcAvrgMecSpeedUnit+0x200>
 800bc54:	333f      	adds	r3, #63	; 0x3f
 800bc56:	119b      	asrs	r3, r3, #6
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
        wEstBemfSq *= wEstBemf;
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	fb02 f303 	mul.w	r3, r2, r3
 800bc62:	637b      	str	r3, [r7, #52]	; 0x34

        /* Computation of threshold */
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	da00      	bge.n	800bc6c <STO_PLL_CalcAvrgMecSpeedUnit+0x216>
 800bc6a:	333f      	adds	r3, #63	; 0x3f
 800bc6c:	119b      	asrs	r3, r3, #6
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bc76:	fb02 f303 	mul.w	r3, r2, r3
 800bc7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	613b      	str	r3, [r7, #16]

        /* Check */
        if (wObsBemfSq > wEstBemfSqLo)
 800bc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	dd02      	ble.n	800bc8e <STO_PLL_CalcAvrgMecSpeedUnit+0x238>
        {
          bIs_Bemf_Consistent = true;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
      }

      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800bc94:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc9c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bca4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bca8:	e002      	b.n	800bcb0 <STO_PLL_CalcAvrgMecSpeedUnit+0x25a>
    }
    else
    {
      bIs_Bemf_Consistent = true;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }

    /* Decision making */
    if (false == pHandle->IsAlgorithmConverged)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800bcb6:	f083 0301 	eor.w	r3, r3, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d008      	beq.n	800bcd2 <STO_PLL_CalcAvrgMecSpeedUnit+0x27c>
    {
      bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7ff fb56 	bl	800b376 <SPD_IsMecSpeedReliable>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bcd0:	e03f      	b.n	800bd52 <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
    }
    else
    {
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800bcd8:	f083 0301 	eor.w	r3, r3, #1
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <STO_PLL_CalcAvrgMecSpeedUnit+0x29a>
 800bce2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bce6:	f083 0301 	eor.w	r3, r3, #1
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d024      	beq.n	800bd3a <STO_PLL_CalcAvrgMecSpeedUnit+0x2e4>
      {
        pHandle->ReliabilityCounter++;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d30b      	bcc.n	800bd28 <STO_PLL_CalcAvrgMecSpeedUnit+0x2d2>
        {
          pHandle->ReliabilityCounter = 0U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	78da      	ldrb	r2, [r3, #3]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	701a      	strb	r2, [r3, #0]
          bAux = false;
 800bd20:	2300      	movs	r3, #0
 800bd22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bd26:	e014      	b.n	800bd52 <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
        }
        else
        {
          bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fb22 	bl	800b376 <SPD_IsMecSpeedReliable>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bd38:	e00b      	b.n	800bd52 <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
        }
      }
      else
      {
        pHandle->ReliabilityCounter = 0U;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff fb15 	bl	800b376 <SPD_IsMecSpeedReliable>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
 800bd52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3748      	adds	r7, #72	; 0x48
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bd60 <STO_PLL_CalcAvrgElSpeedDpp>:
  * bSpeedBufferSizedpp.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_CalcAvrgElSpeedDpp(STO_PLL_Handle_t *pHandle)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b089      	sub	sp, #36	; 0x24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800bd6e:	82fb      	strh	r3, [r7, #22]
    int16_t hIndexOld;
    int16_t hIndexOldTemp;
    int32_t wSum = pHandle->DppBufferSum;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bd76:	61bb      	str	r3, [r7, #24]
    int32_t wAvrSpeed_dpp;
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800bd7e:	82bb      	strh	r3, [r7, #20]
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800bd86:	827b      	strh	r3, [r7, #18]
    int16_t hBufferSizeDiff;

    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800bd88:	8a7a      	ldrh	r2, [r7, #18]
 800bd8a:	8abb      	ldrh	r3, [r7, #20]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	823b      	strh	r3, [r7, #16]

    if (0 == hBufferSizeDiff)
 800bd92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d110      	bne.n	800bdbc <STO_PLL_CalcAvrgElSpeedDpp+0x5c>
    {
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800bd9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	3338      	adds	r3, #56	; 0x38
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	4413      	add	r3, r2
 800bda6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	4413      	add	r3, r2
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	f9b2 210c 	ldrsh.w	r2, [r2, #268]	; 0x10c
 800bdb6:	1a9b      	subs	r3, r3, r2
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	e027      	b.n	800be0c <STO_PLL_CalcAvrgElSpeedDpp+0xac>
    }
    else
    {
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800bdbc:	8afa      	ldrh	r2, [r7, #22]
 800bdbe:	8a3b      	ldrh	r3, [r7, #16]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	81fb      	strh	r3, [r7, #14]

      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800bdc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	db05      	blt.n	800bdde <STO_PLL_CalcAvrgElSpeedDpp+0x7e>
      {
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800bdd2:	89fa      	ldrh	r2, [r7, #14]
 800bdd4:	8a7b      	ldrh	r3, [r7, #18]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	83fb      	strh	r3, [r7, #30]
 800bddc:	e001      	b.n	800bde2 <STO_PLL_CalcAvrgElSpeedDpp+0x82>
      }
      else
      {
        hIndexOld = hIndexOldTemp;
 800bdde:	89fb      	ldrh	r3, [r7, #14]
 800bde0:	83fb      	strh	r3, [r7, #30]
      }

      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800bde2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	3338      	adds	r3, #56	; 0x38
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4413      	add	r3, r2
 800bdee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	441a      	add	r2, r3
 800bdf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	3338      	adds	r3, #56	; 0x38
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	440b      	add	r3, r1
 800be04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	61bb      	str	r3, [r7, #24]
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800be12:	461a      	mov	r2, r3
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	4113      	asrs	r3, r2
 800be18:	60bb      	str	r3, [r7, #8]
  else
  {
    wAvrSpeed_dpp = wSum / hSpeedBufferSizedpp;
  }
#endif
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	b21a      	sxth	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	81da      	strh	r2, [r3, #14]
    pHandle->DppBufferSum = wSum;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800be2a:	bf00      	nop
 800be2c:	3724      	adds	r7, #36	; 0x24
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <STO_PLL_Clear>:
/**
  * @brief  Clears state observer component by re-initializing private variables in @p pHandle.
  * 
  */
__weak void STO_PLL_Clear(STO_PLL_Handle_t *pHandle)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ialfa_est = (int32_t)0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->Ibeta_est = (int32_t)0;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->wBemf_alfa_est = (int32_t)0;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	669a      	str	r2, [r3, #104]	; 0x68
    pHandle->wBemf_beta_est = (int32_t)0;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	66da      	str	r2, [r3, #108]	; 0x6c
    pHandle->_Super.hElAngle = (int16_t)0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	81da      	strh	r2, [r3, #14]
    pHandle->ConsistencyCounter = 0u;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    pHandle->ReliabilityCounter = 0u;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
    pHandle->IsAlgorithmConverged = false;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    pHandle->IsBemfConsistent = false;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    pHandle->Obs_Bemf_Level = (int32_t)0;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    pHandle->Est_Bemf_Level = (int32_t)0;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    pHandle->DppBufferSum = (int32_t)0;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    pHandle->ForceConvergency = false;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    pHandle->ForceConvergency2 = false;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123

    STO_InitSpeedBuffer(pHandle);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f871 	bl	800bf92 <STO_InitSpeedBuffer>
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3334      	adds	r3, #52	; 0x34
 800beb4:	2100      	movs	r1, #0
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fa21 	bl	800a2fe <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <STO_Store_Rotor_Speed>:
/**
  * @brief  Stores in @p pHandle the latest calculated value of @p hRotor_Speed.
  * 
  */
inline static void STO_Store_Rotor_Speed(STO_PLL_Handle_t *pHandle, int16_t hRotor_Speed)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	807b      	strh	r3, [r7, #2]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800bed6:	73fb      	strb	r3, [r7, #15]

  bBuffer_index++;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	3301      	adds	r3, #1
 800bedc:	73fb      	strb	r3, [r7, #15]
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800bee4:	7bfa      	ldrb	r2, [r7, #15]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d101      	bne.n	800beee <STO_Store_Rotor_Speed+0x2a>
  {
    bBuffer_index = 0U;
 800beea:	2300      	movs	r3, #0
 800beec:	73fb      	strb	r3, [r7, #15]
  }

  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	3338      	adds	r3, #56	; 0x38
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	3338      	adds	r3, #56	; 0x38
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	887a      	ldrh	r2, [r7, #2]
 800bf0e:	809a      	strh	r2, [r3, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7bfa      	ldrb	r2, [r7, #15]
 800bf14:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <STO_ExecutePLL>:
  * @param  hBemf_alfa_est: Estimated Bemf alpha on the stator reference frame.
  * @param  hBemf_beta_est: Estimated Bemf beta on the stator reference frame.
  * @retval 
  */
inline static int16_t STO_ExecutePLL(STO_PLL_Handle_t *pHandle, int16_t hBemf_alfa_est, int16_t hBemf_beta_est)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	807b      	strh	r3, [r7, #2]
 800bf30:	4613      	mov	r3, r2
 800bf32:	803b      	strh	r3, [r7, #0]
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f6 fd72 	bl	8002a24 <MCM_Trig_Functions>
 800bf40:	4603      	mov	r3, r0
 800bf42:	60fb      	str	r3, [r7, #12]

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800bf44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf48:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bf4c:	fb02 f303 	mul.w	r3, r2, r3
 800bf50:	61fb      	str	r3, [r7, #28]
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800bf52:	f9b7 3000 	ldrsh.w	r3, [r7]
 800bf56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bf5a:	fb02 f303 	mul.w	r3, r2, r3
 800bf5e:	61bb      	str	r3, [r7, #24]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux1 = (int16_t)(wBeta_Cos_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	13db      	asrs	r3, r3, #15
 800bf64:	82fb      	strh	r3, [r7, #22]
#else
  hAux1 = (int16_t)(wBeta_Cos_tmp / 32768);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux2 = (int16_t)(wAlfa_Sin_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	13db      	asrs	r3, r3, #15
 800bf6a:	82bb      	strh	r3, [r7, #20]
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800bf72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7fe fa87 	bl	800a490 <PI_Controller>
 800bf82:	4603      	mov	r3, r0
 800bf84:	827b      	strh	r3, [r7, #18]
  return (hOutput);
 800bf86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3720      	adds	r7, #32
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <STO_InitSpeedBuffer>:
/**
  * @brief  Clears the estimated speed buffer in @p pHandle.
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b085      	sub	sp, #20
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800bfa0:	73bb      	strb	r3, [r7, #14]

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]
 800bfa6:	e009      	b.n	800bfbc <STO_InitSpeedBuffer+0x2a>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	3338      	adds	r3, #56	; 0x38
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	4413      	add	r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	809a      	strh	r2, [r3, #4]
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
 800bfbc:	7bfa      	ldrb	r2, [r7, #15]
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d3f1      	bcc.n	800bfa8 <STO_InitSpeedBuffer+0x16>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  return;
 800bfd4:	bf00      	nop
}
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <STO_PLL_IsObserverConverged>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  hForcedMecSpeedUnit: Mechanical speed in 0.1Hz unit as forced by VSS.
  * @retval bool True if the estimated angle and speed are reliables, false otherwise.
  */
__weak bool STO_PLL_IsObserverConverged(STO_PLL_Handle_t *pHandle, int16_t *phForcedMecSpeedUnit)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  bool bAux = false;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <STO_PLL_IsObserverConverged+0x22>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	801a      	strh	r2, [r3, #0]
    }

    if (true == pHandle->ForceConvergency)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d009      	beq.n	800c020 <STO_PLL_IsObserverConverged+0x40>
    {
      bAux = true;
 800c00c:	2301      	movs	r3, #1
 800c00e:	75fb      	strb	r3, [r7, #23]
      pHandle->IsAlgorithmConverged = true;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	e087      	b.n	800c130 <STO_PLL_IsObserverConverged+0x150>
    }
    else
    {
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	899b      	ldrh	r3, [r3, #12]
 800c024:	82bb      	strh	r3, [r7, #20]

      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800c026:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c030:	fb02 f303 	mul.w	r3, r2, r3
 800c034:	613b      	str	r3, [r7, #16]

      if (wtemp > 0)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dd79      	ble.n	800c130 <STO_PLL_IsObserverConverged+0x150>
      {
        if (hEstimatedSpeedUnit < 0)
 800c03c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	da03      	bge.n	800c04c <STO_PLL_IsObserverConverged+0x6c>
        {
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800c044:	8abb      	ldrh	r3, [r7, #20]
 800c046:	425b      	negs	r3, r3
 800c048:	b29b      	uxth	r3, r3
 800c04a:	82bb      	strh	r3, [r7, #20]
        }

        if (*phForcedMecSpeedUnit < 0)
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c052:	2b00      	cmp	r3, #0
 800c054:	da08      	bge.n	800c068 <STO_PLL_IsObserverConverged+0x88>
        {
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	425b      	negs	r3, r3
 800c060:	b29b      	uxth	r3, r3
 800c062:	b21a      	sxth	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	801a      	strh	r2, [r3, #0]
        }
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c06e:	461a      	mov	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	60fb      	str	r3, [r7, #12]
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da00      	bge.n	800c084 <STO_PLL_IsObserverConverged+0xa4>
 800c082:	330f      	adds	r3, #15
 800c084:	111b      	asrs	r3, r3, #4
 800c086:	817b      	strh	r3, [r7, #10]

        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800c096:	fb02 f303 	mul.w	r3, r2, r3
 800c09a:	60fb      	str	r3, [r7, #12]
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da00      	bge.n	800c0a4 <STO_PLL_IsObserverConverged+0xc4>
 800c0a2:	330f      	adds	r3, #15
 800c0a4:	111b      	asrs	r3, r3, #4
 800c0a6:	813b      	strh	r3, [r7, #8]

        /* If the variance of the estimated speed is low enough...*/
        if (true == pHandle->IsSpeedReliable)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d03a      	beq.n	800c128 <STO_PLL_IsObserverConverged+0x148>
        {
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800c0b8:	8abb      	ldrh	r3, [r7, #20]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d22f      	bcs.n	800c11e <STO_PLL_IsObserverConverged+0x13e>
          {
            /*...and the estimated value is quite close to the expected value... */
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800c0be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c0c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	db24      	blt.n	800c114 <STO_PLL_IsObserverConverged+0x134>
            {
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800c0ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c0ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	dc19      	bgt.n	800c10a <STO_PLL_IsObserverConverged+0x12a>
              {
                pHandle->ConsistencyCounter++;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 800c0dc:	3301      	adds	r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6

                /*... for hConsistencyThreshold consecutive times... */
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d31c      	bcc.n	800c130 <STO_PLL_IsObserverConverged+0x150>
                {

                  /* the algorithm converged.*/
                  bAux = true;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	75fb      	strb	r3, [r7, #23]
                  pHandle->IsAlgorithmConverged = true;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                  pHandle->_Super.bSpeedErrorNumber = 0U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	e012      	b.n	800c130 <STO_PLL_IsObserverConverged+0x150>
                }
              }
              else
              {
                pHandle->ConsistencyCounter = 0U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c112:	e00d      	b.n	800c130 <STO_PLL_IsObserverConverged+0x150>
              }
            }
            else
            {
              pHandle->ConsistencyCounter = 0U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c11c:	e008      	b.n	800c130 <STO_PLL_IsObserverConverged+0x150>
            }
          }
          else
          {
            pHandle->ConsistencyCounter = 0U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c126:	e003      	b.n	800c130 <STO_PLL_IsObserverConverged+0x150>
          }
        }
        else
        {
          pHandle->ConsistencyCounter = 0U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
      }
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	371c      	adds	r7, #28
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <STO_PLL_GetEstimatedBemf>:
  * @brief  Exports estimated Bemf alpha-beta from @p pHandle.
  * 
  * @retval alphabeta_t Bemf alpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedBemf(STO_PLL_Handle_t *pHandle)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
    vaux.beta = 0;
  }
  else
  {
#endif
    vaux.alpha = pHandle->hBemf_alfa_est;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800c14c:	813b      	strh	r3, [r7, #8]
    vaux.beta = pHandle->hBemf_beta_est;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800c154:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	2300      	movs	r3, #0
 800c15c:	89ba      	ldrh	r2, [r7, #12]
 800c15e:	f362 030f 	bfi	r3, r2, #0, #16
 800c162:	89fa      	ldrh	r2, [r7, #14]
 800c164:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  else
  {
#endif
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800c186:	4113      	asrs	r3, r2
 800c188:	b21b      	sxth	r3, r3
 800c18a:	813b      	strh	r3, [r7, #8]
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800c196:	4113      	asrs	r3, r2
 800c198:	b21b      	sxth	r3, r3
 800c19a:	817b      	strh	r3, [r7, #10]
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	89ba      	ldrh	r2, [r7, #12]
 800c1a4:	f362 030f 	bfi	r3, r2, #0, #16
 800c1a8:	89fa      	ldrh	r2, [r7, #14]
 800c1aa:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <STO_PLL_GetObserverGains>:
/**
  * @brief  Exports current observer gains from @p pHandle and to parameters @p phC2 and @p phC4.
  * 
  */
__weak void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b085      	sub	sp, #20
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	801a      	strh	r2, [r3, #0]
    *phC4 = pHandle->hC4;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <STO_PLL_SetObserverGains>:
/**
  * @brief  Stores in @p pHandle the new values @p hhC1 and @p hhC2 for observer gains.
  * 
  */
__weak void STO_PLL_SetObserverGains(STO_PLL_Handle_t *pHandle, int16_t hhC1, int16_t hhC2)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	807b      	strh	r3, [r7, #2]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	887a      	ldrh	r2, [r7, #2]
 800c1fa:	845a      	strh	r2, [r3, #34]	; 0x22
    pHandle->hC4 = hhC2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	883a      	ldrh	r2, [r7, #0]
 800c200:	84da      	strh	r2, [r3, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <STO_OTF_ResetPLL>:
  * @brief  Resets the PLL integral term during on-the-fly startup.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_OTF_ResetPLL(STO_Handle_t * pHandle)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3334      	adds	r3, #52	; 0x34
 800c220:	2100      	movs	r1, #0
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe f86b 	bl	800a2fe <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <STO_ResetPLL>:
  * @brief  Resets the PLL integral term.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_ResetPLL(STO_PLL_Handle_t *pHandle)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3334      	adds	r3, #52	; 0x34
 800c23c:	2100      	movs	r1, #0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe f85d 	bl	800a2fe <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <STO_PLL_GetEstimatedBemfLevel>:
  * @brief  Exports estimated Bemf squared level stored in @p pHandle.
  * 
  * @retval int32_t Magnitude of estimated Bemf Level squared based on speed measurement.
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
#endif
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <STO_PLL_GetObservedBemfLevel>:
  * @brief  Exports observed Bemf squared level stored in @p pHandle.
  *
  * @retval int32_t Magnitude of observed Bemf level squared.
  */
__weak int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
#endif
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <STO_PLL_IsVarianceTight>:
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  * @retval bool True if the speed measurement variance is lower than threshold VariancePercentage, false otherwise.
  */
__weak bool STO_PLL_IsVarianceTight(const STO_Handle_t *pHandle)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
    tempStatus = false;
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	60fb      	str	r3, [r7, #12]
    tempStatus = pHdl->IsSpeedReliable;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800c294:	72fb      	strb	r3, [r7, #11]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
 800c296:	7afb      	ldrb	r3, [r7, #11]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <STO_PLL_ForceConvergency1>:
  * @brief  Forces the state-observer to declare convergency.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_ForceConvergency1(STO_Handle_t *pHandle)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	60fb      	str	r3, [r7, #12]
    pHdl->ForceConvergency = true;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <STO_PLL_ForceConvergency2>:
  * @brief  Forces the state-observer to declare convergency.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_ForceConvergency2(STO_Handle_t *pHandle)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]
    pHdl->ForceConvergency2 = true;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c2dc:	bf00      	nop
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <STO_SetDirection>:

/**
  * @brief  Sets the rotation @p direction in @p pHandle.
  */
__weak void STO_SetDirection(STO_PLL_Handle_t *pHandle, int8_t direction)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	78fa      	ldrb	r2, [r7, #3]
 800c2f8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <VSS_Init>:
  *
  * - Calls VSS_Clear.
  * - Called at initialization of the whole MC core.
  */
__weak void VSS_Init(VirtualSpeedSensor_Handle_t *pHandle)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  VSS_Clear(pHandle);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f804 	bl	800c31e <VSS_Clear>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <VSS_Clear>:
  *         of the motor.
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component.
  * @retval none
  */
__weak void VSS_Clear(VirtualSpeedSensor_Handle_t *pHandle)
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]
    pHandle->_Super.hElAngle = 0;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.hMecAngle = 0;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	819a      	strh	r2, [r3, #12]
    pHandle->_Super.hElSpeedDpp = 0;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	81da      	strh	r2, [r3, #14]
    pHandle->_Super.hMecAccelUnitP = 0;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	825a      	strh	r2, [r3, #18]
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	701a      	strb	r2, [r3, #0]

    pHandle->wElAccDppP32 = 0;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	621a      	str	r2, [r3, #32]
    pHandle->wElSpeedDpp32 = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	851a      	strh	r2, [r3, #40]	; 0x28
    pHandle->hElAngleAccu = 0;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	861a      	strh	r2, [r3, #48]	; 0x30

    pHandle->bTransitionStarted = false;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    pHandle->bTransitionEnded = false;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	85da      	strh	r2, [r3, #46]	; 0x2e
    pHandle->bTransitionLocked = false;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    pHandle->bCopyObserver = false;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c392:	bf00      	nop
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <VSS_CalcElAngle>:
  * @retval int16_t Measured electrical angle in s16degree format.
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b087      	sub	sp, #28
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
  {
#endif
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	827b      	strh	r3, [r7, #18]

    if (true == pHandle->bCopyObserver)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	82fb      	strh	r3, [r7, #22]
 800c3bc:	e09a      	b.n	800c4f4 <VSS_CalcElAngle+0x156>
    }
    else
    {
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	4413      	add	r3, r2
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	b21a      	sxth	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	861a      	strh	r2, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	fb91 f3f3 	sdiv	r3, r1, r3
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	4413      	add	r3, r2
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	b21a      	sxth	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	80da      	strh	r2, [r3, #6]

      if (true == pHandle->bTransitionStarted)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c402:	2b00      	cmp	r3, #0
 800c404:	d073      	beq.n	800c4ee <VSS_CalcElAngle+0x150>
      {
        if (0 == pHandle->hTransitionRemainingSteps)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <VSS_CalcElAngle+0x88>
        {
          hRetAngle = *(int16_t *)pInputVars_str;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	82fb      	strh	r3, [r7, #22]
          pHandle->bTransitionEnded = true;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e066      	b.n	800c4f4 <VSS_CalcElAngle+0x156>
        }
        else
        {
          pHandle->hTransitionRemainingSteps--;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3b01      	subs	r3, #1
 800c430:	b29b      	uxth	r3, r3
 800c432:	b21a      	sxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	85da      	strh	r2, [r3, #46]	; 0x2e

          if (pHandle->_Super.hElSpeedDpp >= 0)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	db0b      	blt.n	800c45a <VSS_CalcElAngle+0xbc>
          {
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c448:	b29a      	uxth	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c450:	b29b      	uxth	r3, r3
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	b29b      	uxth	r3, r3
 800c456:	82bb      	strh	r3, [r7, #20]
 800c458:	e00d      	b.n	800c476 <VSS_CalcElAngle+0xd8>
          }
          else
          {
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c460:	b29a      	uxth	r2, r3
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	82bb      	strh	r3, [r7, #20]
            hSignCorr = -1;
 800c470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c474:	827b      	strh	r3, [r7, #18]
          }

          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800c476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	60fb      	str	r3, [r7, #12]
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800c48c:	461a      	mov	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	fb93 f3f2 	sdiv	r3, r3, r2
 800c494:	817b      	strh	r3, [r7, #10]
          hAngleCorr *= hSignCorr;
 800c496:	897a      	ldrh	r2, [r7, #10]
 800c498:	8a7b      	ldrh	r3, [r7, #18]
 800c49a:	fb12 f303 	smulbb	r3, r2, r3
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	817b      	strh	r3, [r7, #10]

          if (hAngleDiff >= 0)
 800c4a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	db0c      	blt.n	800c4c4 <VSS_CalcElAngle+0x126>
          {
            pHandle->bTransitionLocked = true;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	897b      	ldrh	r3, [r7, #10]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	82fb      	strh	r3, [r7, #22]
 800c4c2:	e017      	b.n	800c4f4 <VSS_CalcElAngle+0x156>
          }
          else
          {
            if (false == pHandle->bTransitionLocked)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c4ca:	f083 0301 	eor.w	r3, r3, #1
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <VSS_CalcElAngle+0x13e>
            {
              hRetAngle = pHandle->hElAngleAccu;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c4d8:	82fb      	strh	r3, [r7, #22]
 800c4da:	e00b      	b.n	800c4f4 <VSS_CalcElAngle+0x156>
            }
            else
            {
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	897b      	ldrh	r3, [r7, #10]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	82fb      	strh	r3, [r7, #22]
 800c4ec:	e002      	b.n	800c4f4 <VSS_CalcElAngle+0x156>
          }
        }
      }
      else
      {
        hRetAngle = pHandle->hElAngleAccu;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c4f2:	82fb      	strh	r3, [r7, #22]
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	8afa      	ldrh	r2, [r7, #22]
 800c4f8:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
 800c4fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <VSS_CalcAvrgMecSpeedUnit>:
  * - Returns the reliability state of the sensor (always true).
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d931      	bls.n	800c580 <VSS_CalcAvrgMecSpeedUnit+0x76>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	441a      	add	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	625a      	str	r2, [r3, #36]	; 0x24
#ifndef FULL_MISRA_C_COMPLIANCY_VIRT_SPD_SENS
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52e:	141b      	asrs	r3, r3, #16
 800c530:	b21a      	sxth	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	81da      	strh	r2, [r3, #14]
#else
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c53c:	461a      	mov	r2, r3
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	8b5b      	ldrh	r3, [r3, #26]
 800c542:	fb03 f202 	mul.w	r2, r3, r2
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	461a      	mov	r2, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	4619      	mov	r1, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	785b      	ldrb	r3, [r3, #1]
 800c55a:	fb01 f303 	mul.w	r3, r1, r3
 800c55e:	fb92 f3f3 	sdiv	r3, r2, r3
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800c562:	b21a      	sxth	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	801a      	strh	r2, [r3, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c576:	3b01      	subs	r3, #1
 800c578:	b29a      	uxth	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c57e:	e037      	b.n	800c5f0 <VSS_CalcAvrgMecSpeedUnit+0xe6>
    }
    else if (1U == pHandle->hRemainingStep)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c584:	2b01      	cmp	r3, #1
 800c586:	d12e      	bne.n	800c5e6 <VSS_CalcAvrgMecSpeedUnit+0xdc>
    {
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	801a      	strh	r2, [r3, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	819a      	strh	r2, [r3, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	fb03 f202 	mul.w	r2, r3, r2
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	8b5b      	ldrh	r3, [r3, #26]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	440b      	add	r3, r1
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c5be:	b21a      	sxth	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	81da      	strh	r2, [r3, #14]
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	785b      	ldrb	r3, [r3, #1]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	fb12 f303 	smulbb	r3, r2, r3
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	b21a      	sxth	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	81da      	strh	r2, [r3, #14]
      pHandle->hRemainingStep = 0U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800c5e4:	e004      	b.n	800c5f0 <VSS_CalcAvrgMecSpeedUnit+0xe6>
    }
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	801a      	strh	r2, [r3, #0]
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5f6:	f083 0301 	eor.w	r3, r3, #1
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <VSS_CalcAvrgMecSpeedUnit+0x104>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	78da      	ldrb	r2, [r3, #3]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	701a      	strb	r2, [r3, #0]
      SpeedSensorReliability = false;
 800c608:	2300      	movs	r3, #0
 800c60a:	73fb      	strb	r3, [r7, #15]
 800c60c:	e006      	b.n	800c61c <VSS_CalcAvrgMecSpeedUnit+0x112>
    }
    else
    {
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe feaf 	bl	800b376 <SPD_IsMecSpeedReliable>
 800c618:	4603      	mov	r3, r0
 800c61a:	73fb      	strb	r3, [r7, #15]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	460b      	mov	r3, r1
 800c630:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	887a      	ldrh	r2, [r7, #2]
 800c636:	861a      	strh	r2, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c63e:	461a      	mov	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	785b      	ldrb	r3, [r3, #1]
 800c644:	fb92 f3f3 	sdiv	r3, r2, r3
 800c648:	b21a      	sxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.hElAngle = hMecAngle;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	887a      	ldrh	r2, [r7, #2]
 800c652:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 800c660:	b480      	push	{r7}
 800c662:	b087      	sub	sp, #28
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	460b      	mov	r3, r1
 800c66a:	807b      	strh	r3, [r7, #2]
 800c66c:	4613      	mov	r3, r2
 800c66e:	803b      	strh	r3, [r7, #0]
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c676:	f083 0301 	eor.w	r3, r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d072      	beq.n	800c766 <VSS_SetMecAcceleration+0x106>
    {
      if (0U == hDurationms)
 800c680:	883b      	ldrh	r3, [r7, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d128      	bne.n	800c6d8 <VSS_SetMecAcceleration+0x78>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	887a      	ldrh	r2, [r7, #2]
 800c68a:	819a      	strh	r2, [r3, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
 800c68c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	69d2      	ldr	r2, [r2, #28]
 800c694:	fb03 f202 	mul.w	r2, r3, r2
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	8b5b      	ldrh	r3, [r3, #26]
 800c69c:	4619      	mov	r1, r3
 800c69e:	460b      	mov	r3, r1
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	440b      	add	r3, r1
 800c6a4:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800c6a6:	fb92 f3f3 	sdiv	r3, r2, r3
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
 800c6aa:	b21a      	sxth	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	81da      	strh	r2, [r3, #14]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	fb12 f303 	smulbb	r3, r2, r3
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	b21a      	sxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	81da      	strh	r2, [r3, #14]

        pHandle->hRemainingStep = 0U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	851a      	strh	r2, [r3, #40]	; 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	887a      	ldrh	r2, [r7, #2]
 800c6d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c6d6:	e046      	b.n	800c766 <VSS_SetMecAcceleration+0x106>
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800c6d8:	883b      	ldrh	r3, [r7, #0]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
 800c6e2:	4a24      	ldr	r2, [pc, #144]	; (800c774 <VSS_SetMecAcceleration+0x114>)
 800c6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e8:	099b      	lsrs	r3, r3, #6
 800c6ea:	82fb      	strh	r3, [r7, #22]
        hNbrStep++;
 800c6ec:	8afb      	ldrh	r3, [r7, #22]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	82fb      	strh	r3, [r7, #22]
        pHandle->hRemainingStep = hNbrStep;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	8afa      	ldrh	r2, [r7, #22]
 800c6f6:	851a      	strh	r2, [r3, #40]	; 0x28
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	785b      	ldrb	r3, [r3, #1]
 800c704:	fb92 f3f3 	sdiv	r3, r2, r3
 800c708:	82bb      	strh	r3, [r7, #20]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c70a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	69d2      	ldr	r2, [r2, #28]
 800c712:	fb03 f202 	mul.w	r2, r3, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	8b5b      	ldrh	r3, [r3, #26]
 800c71a:	4619      	mov	r1, r3
 800c71c:	460b      	mov	r3, r1
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	440b      	add	r3, r1
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	fb92 f3f3 	sdiv	r3, r2, r3
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c728:	827b      	strh	r3, [r7, #18]
        if (0U == hNbrStep)
 800c72a:	8afb      	ldrh	r3, [r7, #22]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d011      	beq.n	800c754 <VSS_SetMecAcceleration+0xf4>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c730:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c734:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c738:	1ad3      	subs	r3, r2, r3
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800c73a:	041a      	lsls	r2, r3, #16
 800c73c:	8afb      	ldrh	r3, [r7, #22]
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c73e:	fb92 f3f3 	sdiv	r3, r2, r3
 800c742:	60fb      	str	r3, [r7, #12]
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	461a      	mov	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	fb03 f202 	mul.w	r2, r3, r2
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	621a      	str	r2, [r3, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	887a      	ldrh	r2, [r7, #2]
 800c758:	855a      	strh	r2, [r3, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c760:	041a      	lsls	r2, r3, #16
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c766:	bf00      	nop
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	10624dd3 	.word	0x10624dd3

0800c778 <VSS_SetStartTransition>:
  * - Transition is to be considered ended when Sensor information is
  *  declared 'Reliable' or if function returned value is false.
  * - Called into START state of MC tasks state machine into TSK_MediumFrequencyTask.
  */
__weak bool VSS_SetStartTransition(VirtualSpeedSensor_Handle_t *pHandle, bool bCommand)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800c784:	2301      	movs	r3, #1
 800c786:	73fb      	strb	r3, [r7, #15]
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d011      	beq.n	800c7b2 <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionStarted = true;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      if (0 == pHandle->hTransitionSteps)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d108      	bne.n	800c7b2 <VSS_SetStartTransition+0x3a>
      {
        pHandle->bTransitionEnded = true;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
        bAux = false;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <VSS_TransitionEnded>:
  * @retval bool: true if Transition phase ended, false otherwise.
  *
  * - Called into SWITCH_OVER state of MC tasks state machine into TSK_MediumFrequencyTask.
  */
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
#endif
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
	...

0800c7dc <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800c7e4:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c7e6:	68da      	ldr	r2, [r3, #12]
 800c7e8:	4904      	ldr	r1, [pc, #16]	; (800c7fc <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60cb      	str	r3, [r1, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	e0042000 	.word	0xe0042000

0800c800 <LL_ADC_REG_SetSequencerLength>:
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	431a      	orrs	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <LL_ADC_INJ_SetSequencerLength>:
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	431a      	orrs	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_ADC_INJ_SetSequencerDiscont>:
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	605a      	str	r2, [r3, #4]
}
 800c866:	bf00      	nop
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <LL_ADC_Enable>:
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f043 0201 	orr.w	r2, r3, #1
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	609a      	str	r2, [r3, #8]
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <LL_ADC_INJ_StartConversionExtTrig>:
{
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689a      	ldr	r2, [r3, #8]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	609a      	str	r2, [r3, #8]
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <LL_ADC_INJ_StopConversionExtTrig>:
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	609a      	str	r2, [r3, #8]
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <LL_ADC_ClearFlag_EOCS>:
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f06f 0202 	mvn.w	r2, #2
 800c8e2:	601a      	str	r2, [r3, #0]
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <LL_ADC_ClearFlag_JEOS>:
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f06f 0204 	mvn.w	r2, #4
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <LL_ADC_EnableIT_JEOS>:
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	605a      	str	r2, [r3, #4]
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <LL_ADC_DisableIT_EOCS>:
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f023 0220 	bic.w	r2, r3, #32
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	605a      	str	r2, [r3, #4]
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <LL_ADC_DisableIT_JEOS>:
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	605a      	str	r2, [r3, #4]
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <LL_TIM_DisableCounter>:
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f023 0201 	bic.w	r2, r3, #1
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	601a      	str	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <LL_TIM_CC_EnableChannel>:
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1a      	ldr	r2, [r3, #32]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	431a      	orrs	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <LL_TIM_CC_DisableChannel>:
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a1a      	ldr	r2, [r3, #32]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	43db      	mvns	r3, r3
 800c9c0:	401a      	ands	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	621a      	str	r2, [r3, #32]
}
 800c9c6:	bf00      	nop
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <LL_TIM_CC_IsEnabledChannel>:
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a1a      	ldr	r2, [r3, #32]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d101      	bne.n	800c9ee <LL_TIM_CC_IsEnabledChannel+0x1c>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <LL_TIM_CC_IsEnabledChannel+0x1e>
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <LL_TIM_OC_SetMode>:
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d01c      	beq.n	800ca48 <LL_TIM_OC_SetMode+0x4c>
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	d017      	beq.n	800ca44 <LL_TIM_OC_SetMode+0x48>
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2b10      	cmp	r3, #16
 800ca18:	d012      	beq.n	800ca40 <LL_TIM_OC_SetMode+0x44>
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b40      	cmp	r3, #64	; 0x40
 800ca1e:	d00d      	beq.n	800ca3c <LL_TIM_OC_SetMode+0x40>
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca26:	d007      	beq.n	800ca38 <LL_TIM_OC_SetMode+0x3c>
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca2e:	d101      	bne.n	800ca34 <LL_TIM_OC_SetMode+0x38>
 800ca30:	2305      	movs	r3, #5
 800ca32:	e00a      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca34:	2306      	movs	r3, #6
 800ca36:	e008      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	e006      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e004      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca40:	2302      	movs	r3, #2
 800ca42:	e002      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca44:	2301      	movs	r3, #1
 800ca46:	e000      	b.n	800ca4a <LL_TIM_OC_SetMode+0x4e>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3318      	adds	r3, #24
 800ca50:	4619      	mov	r1, r3
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	4a0e      	ldr	r2, [pc, #56]	; (800ca90 <LL_TIM_OC_SetMode+0x94>)
 800ca56:	5cd3      	ldrb	r3, [r2, r3]
 800ca58:	440b      	add	r3, r1
 800ca5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	490c      	ldr	r1, [pc, #48]	; (800ca94 <LL_TIM_OC_SetMode+0x98>)
 800ca64:	5ccb      	ldrb	r3, [r1, r3]
 800ca66:	4619      	mov	r1, r3
 800ca68:	2373      	movs	r3, #115	; 0x73
 800ca6a:	408b      	lsls	r3, r1
 800ca6c:	43db      	mvns	r3, r3
 800ca6e:	401a      	ands	r2, r3
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	4908      	ldr	r1, [pc, #32]	; (800ca94 <LL_TIM_OC_SetMode+0x98>)
 800ca74:	5ccb      	ldrb	r3, [r1, r3]
 800ca76:	4619      	mov	r1, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	408b      	lsls	r3, r1
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	601a      	str	r2, [r3, #0]
}
 800ca82:	bf00      	nop
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	0800e2c8 	.word	0x0800e2c8
 800ca94:	0800e2d0 	.word	0x0800e2d0

0800ca98 <LL_TIM_OC_SetCompareCH1>:
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	635a      	str	r2, [r3, #52]	; 0x34
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <LL_TIM_OC_SetCompareCH2>:
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <LL_TIM_OC_SetCompareCH3>:
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <LL_TIM_OC_SetCompareCH4>:
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <LL_TIM_EnableAllOutputs>:
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb14:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <LL_TIM_DisableAllOutputs>:
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb34:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <LL_TIM_ClearFlag_UPDATE>:
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f06f 0201 	mvn.w	r2, #1
 800cb56:	611a      	str	r2, [r3, #16]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d101      	bne.n	800cb7c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e000      	b.n	800cb7e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <LL_TIM_ClearFlag_BRK>:
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb98:	611a      	str	r2, [r3, #16]
}
 800cb9a:	bf00      	nop
 800cb9c:	370c      	adds	r7, #12
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <LL_TIM_EnableIT_UPDATE>:
{
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f043 0201 	orr.w	r2, r3, #1
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	60da      	str	r2, [r3, #12]
}
 800cbba:	bf00      	nop
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <LL_TIM_DisableIT_UPDATE>:
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	60da      	str	r2, [r3, #12]
}
 800cbda:	bf00      	nop
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <LL_TIM_EnableIT_BRK>:
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]
}
 800cbfa:	bf00      	nop
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <LL_GPIO_SetOutputPin>:
{
 800cc06:	b480      	push	{r7}
 800cc08:	b083      	sub	sp, #12
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	619a      	str	r2, [r3, #24]
}
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <LL_GPIO_ResetOutputPin>:
{
 800cc22:	b480      	push	{r7}
 800cc24:	b083      	sub	sp, #12
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	041a      	lsls	r2, r3, #16
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	619a      	str	r2, [r3, #24]
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <__LL_TIM_OC_EnablePreload>:

/* Private functions ---------------------------------------------------------*/

/* Local redefinition of both LL_TIM_OC_EnablePreload & LL_TIM_OC_DisablePreload */
__STATIC_INLINE void __LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800cc40:	b4b0      	push	{r4, r5, r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d01c      	beq.n	800cc8a <__LL_TIM_OC_EnablePreload+0x4a>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	d017      	beq.n	800cc86 <__LL_TIM_OC_EnablePreload+0x46>
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b10      	cmp	r3, #16
 800cc5a:	d012      	beq.n	800cc82 <__LL_TIM_OC_EnablePreload+0x42>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b40      	cmp	r3, #64	; 0x40
 800cc60:	d00d      	beq.n	800cc7e <__LL_TIM_OC_EnablePreload+0x3e>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc68:	d007      	beq.n	800cc7a <__LL_TIM_OC_EnablePreload+0x3a>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc70:	d101      	bne.n	800cc76 <__LL_TIM_OC_EnablePreload+0x36>
 800cc72:	2305      	movs	r3, #5
 800cc74:	e00a      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc76:	2306      	movs	r3, #6
 800cc78:	e008      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc7a:	2304      	movs	r3, #4
 800cc7c:	e006      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e004      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e002      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <__LL_TIM_OC_EnablePreload+0x4c>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	461d      	mov	r5, r3
  register volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3318      	adds	r3, #24
 800cc92:	461a      	mov	r2, r3
 800cc94:	4629      	mov	r1, r5
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <__LL_TIM_OC_EnablePreload+0x7c>)
 800cc98:	5c5b      	ldrb	r3, [r3, r1]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800cc9e:	6822      	ldr	r2, [r4, #0]
 800cca0:	4629      	mov	r1, r5
 800cca2:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <__LL_TIM_OC_EnablePreload+0x80>)
 800cca4:	5c5b      	ldrb	r3, [r3, r1]
 800cca6:	4619      	mov	r1, r3
 800cca8:	2308      	movs	r3, #8
 800ccaa:	408b      	lsls	r3, r1
 800ccac:	4313      	orrs	r3, r2
 800ccae:	6023      	str	r3, [r4, #0]
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bcb0      	pop	{r4, r5, r7}
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	0800e2c8 	.word	0x0800e2c8
 800ccc0:	0800e2d0 	.word	0x0800e2d0

0800ccc4 <__LL_TIM_OC_DisablePreload>:

__STATIC_INLINE void __LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800ccc4:	b4b0      	push	{r4, r5, r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d01c      	beq.n	800cd0e <__LL_TIM_OC_DisablePreload+0x4a>
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d017      	beq.n	800cd0a <__LL_TIM_OC_DisablePreload+0x46>
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b10      	cmp	r3, #16
 800ccde:	d012      	beq.n	800cd06 <__LL_TIM_OC_DisablePreload+0x42>
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b40      	cmp	r3, #64	; 0x40
 800cce4:	d00d      	beq.n	800cd02 <__LL_TIM_OC_DisablePreload+0x3e>
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccec:	d007      	beq.n	800ccfe <__LL_TIM_OC_DisablePreload+0x3a>
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccf4:	d101      	bne.n	800ccfa <__LL_TIM_OC_DisablePreload+0x36>
 800ccf6:	2305      	movs	r3, #5
 800ccf8:	e00a      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800ccfa:	2306      	movs	r3, #6
 800ccfc:	e008      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800ccfe:	2304      	movs	r3, #4
 800cd00:	e006      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800cd02:	2303      	movs	r3, #3
 800cd04:	e004      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800cd06:	2302      	movs	r3, #2
 800cd08:	e002      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e000      	b.n	800cd10 <__LL_TIM_OC_DisablePreload+0x4c>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	461d      	mov	r5, r3
  register volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3318      	adds	r3, #24
 800cd16:	461a      	mov	r2, r3
 800cd18:	4629      	mov	r1, r5
 800cd1a:	4b09      	ldr	r3, [pc, #36]	; (800cd40 <__LL_TIM_OC_DisablePreload+0x7c>)
 800cd1c:	5c5b      	ldrb	r3, [r3, r1]
 800cd1e:	4413      	add	r3, r2
 800cd20:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	4629      	mov	r1, r5
 800cd26:	4b07      	ldr	r3, [pc, #28]	; (800cd44 <__LL_TIM_OC_DisablePreload+0x80>)
 800cd28:	5c5b      	ldrb	r3, [r3, r1]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	408b      	lsls	r3, r1
 800cd30:	43db      	mvns	r3, r3
 800cd32:	4013      	ands	r3, r2
 800cd34:	6023      	str	r3, [r4, #0]
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bcb0      	pop	{r4, r5, r7}
 800cd3e:	4770      	bx	lr
 800cd40:	0800e2c8 	.word	0x0800e2c8
 800cd44:	0800e2d0 	.word	0x0800e2d0

0800cd48 <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC.
  * 
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void R3_1_Init(PWMC_R3_1_Handle_t *pHandle)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60bb      	str	r3, [r7, #8]

  if ((uint32_t)pHandle == (uint32_t)&pHandle->_Super)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	461a      	mov	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d14d      	bne.n	800ce0a <R3_1_Init+0xc2>
  {

    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOCS(ADCx);
 800cd6e:	68b8      	ldr	r0, [r7, #8]
 800cd70:	f7ff fddc 	bl	800c92c <LL_ADC_DisableIT_EOCS>
    LL_ADC_ClearFlag_EOCS(ADCx);
 800cd74:	68b8      	ldr	r0, [r7, #8]
 800cd76:	f7ff fdad 	bl	800c8d4 <LL_ADC_ClearFlag_EOCS>
    LL_ADC_DisableIT_JEOS(ADCx);
 800cd7a:	68b8      	ldr	r0, [r7, #8]
 800cd7c:	f7ff fde6 	bl	800c94c <LL_ADC_DisableIT_JEOS>
    LL_ADC_ClearFlag_JEOS(ADCx);
 800cd80:	68b8      	ldr	r0, [r7, #8]
 800cd82:	f7ff fdb5 	bl	800c8f0 <LL_ADC_ClearFlag_JEOS>

    /* disable main TIM counter to ensure
     * a synchronous start by TIM2 trigger */
    LL_TIM_DisableCounter(TIMx);
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fdf0 	bl	800c96c <LL_TIM_DisableCounter>
    if ( TIMx == TIM1 )
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4a21      	ldr	r2, [pc, #132]	; (800ce14 <R3_1_Init+0xcc>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d103      	bne.n	800cd9c <R3_1_Init+0x54>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800cd94:	2001      	movs	r0, #1
 800cd96:	f7ff fd21 	bl	800c7dc <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800cd9a:	e006      	b.n	800cdaa <R3_1_Init+0x62>
    }
#if defined(TIM8)
    else if ( TIMx == TIM8 )
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4a1e      	ldr	r2, [pc, #120]	; (800ce18 <R3_1_Init+0xd0>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d102      	bne.n	800cdaa <R3_1_Init+0x62>
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800cda4:	2002      	movs	r0, #2
 800cda6:	f7ff fd19 	bl	800c7dc <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif

    LL_TIM_ClearFlag_BRK(TIMx);
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff feed 	bl	800cb8a <LL_TIM_ClearFlag_BRK>

    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <R3_1_Init+0x7c>
    {
      LL_TIM_EnableIT_BRK( TIMx );
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7ff ff11 	bl	800cbe6 <LL_TIM_EnableIT_BRK>
    }

    /* Enable PWM channel */
    LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800cdc4:	f240 5155 	movw	r1, #1365	; 0x555
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7ff fddf 	bl	800c98c <LL_TIM_CC_EnableChannel>

    /* ADC Enable (must be done after calibration) */
    LL_ADC_Enable( ADCx );
 800cdce:	68b8      	ldr	r0, [r7, #8]
 800cdd0:	f7ff fd4f 	bl	800c872 <LL_ADC_Enable>

    /* reset regular conversion sequencer length set by cubeMX */
    LL_ADC_REG_SetSequencerLength( ADCx, LL_ADC_REG_SEQ_SCAN_DISABLE );
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	68b8      	ldr	r0, [r7, #8]
 800cdd8:	f7ff fd12 	bl	800c800 <LL_ADC_REG_SetSequencerLength>
    
    /* ADCx Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADCx );
 800cddc:	68b8      	ldr	r0, [r7, #8]
 800cdde:	f7ff fd87 	bl	800c8f0 <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADCx );
 800cde2:	68b8      	ldr	r0, [r7, #8]
 800cde4:	f7ff fd92 	bl	800c90c <LL_ADC_EnableIT_JEOS>

    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cdee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* reset injected conversion sequencer length set by cubeMX */
    LL_ADC_INJ_SetSequencerLength( ADCx, LL_ADC_INJ_SEQ_SCAN_DISABLE );
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	68b8      	ldr	r0, [r7, #8]
 800cdf6:	f7ff fd16 	bl	800c826 <LL_ADC_INJ_SetSequencerLength>

    /* Clear the flags */
    pHandle->OverCurrentFlag = false;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    pHandle->_Super.DTTest = 0u;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  }
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	40010000 	.word	0x40010000
 800ce18:	40010400 	.word	0x40010400

0800ce1c <R3_1_SetOffsetCalib>:
/*
  * @brief  Stores in @p pHdl handler the calibrated @p offsets.
  * 
  */
__weak void R3_1_SetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	671a      	str	r2, [r3, #112]	; 0x70
  pHandle->PhaseBOffset = offsets->phaseBOffset;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	675a      	str	r2, [r3, #116]	; 0x74
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	461a      	mov	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	679a      	str	r2, [r3, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 800ce50:	bf00      	nop
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <R3_1_GetOffsetCalib>:
/*
  * @brief Reads the calibrated @p offsets stored in @p pHdl.
  * 
  */
__weak void R3_1_GetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60fb      	str	r3, [r7, #12]

  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6e:	461a      	mov	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	601a      	str	r2, [r3, #0]
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce78:	461a      	mov	r2, r3
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	605a      	str	r2, [r3, #4]
  offsets->phaseCOffset = pHandle->PhaseCOffset;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce82:	461a      	mov	r2, r3
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	609a      	str	r2, [r3, #8]
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <R3_1_CurrentReadingCalibration>:
  * @brief  Stores into the @p pHdl the voltage present on Ia and Ib current 
  *         feedback analog channels when no current is flowing into the motor.
  * 
  */
__weak void R3_1_CurrentReadingCalibration(PWMC_Handle_t *pHdl)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	617b      	str	r3, [r7, #20]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	613b      	str	r3, [r7, #16]

  if (false == pHandle->_Super.offsetCalibStatus)
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ceb0:	f083 0301 	eor.w	r3, r3, #1
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d077      	beq.n	800cfaa <R3_1_CurrentReadingCalibration+0x116>
  {
    volatile PWMC_GetPhaseCurr_Cb_t GetPhaseCurrCbSave;
    volatile PWMC_SetSampPointSectX_Cb_t SetSampPointSectXCbSave;

    /* Save callback routines */
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60fb      	str	r3, [r7, #12]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	60bb      	str	r3, [r7, #8]

    pHandle->PhaseAOffset = 0u;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2200      	movs	r2, #0
 800ceca:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset = 0u;
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	2200      	movs	r2, #0
 800ced0:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PhaseCOffset = 0u;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2200      	movs	r2, #0
 800ced6:	679a      	str	r2, [r3, #120]	; 0x78

    pHandle->PolarizationCounter = 0u;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    /* It forces inactive level on TIMx CHy and CHyN */
    LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800cee0:	f240 5155 	movw	r1, #1365	; 0x555
 800cee4:	6938      	ldr	r0, [r7, #16]
 800cee6:	f7ff fd62 	bl	800c9ae <LL_TIM_CC_DisableChannel>

    /* Offset calibration for A & B phases */
    /* Change function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	4a4f      	ldr	r2, [pc, #316]	; (800d02c <R3_1_CurrentReadingCalibration+0x198>)
 800ceee:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	4a4f      	ldr	r2, [pc, #316]	; (800d030 <R3_1_CurrentReadingCalibration+0x19c>)
 800cef4:	615a      	str	r2, [r3, #20]

    pHandle->CalibSector = SECTOR_5;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2204      	movs	r2, #4
 800cefa:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    /* Required to force first polarization conversion on SECTOR_5*/
    pHandle->_Super.Sector = SECTOR_5;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2204      	movs	r2, #4
 800cf02:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    R3_1_SwitchOnPWM( &pHandle->_Super );
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fa76 	bl	800d3fa <R3_1_SwitchOnPWM>

    /* Wait for NB_CONVERSIONS to be executed */
    waitForPolarizationEnd( TIMx,
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f103 0144 	add.w	r1, r3, #68	; 0x44
                            &pHandle->_Super.SWerror,
                            pHandle->pParams_str->RepetitionCounter,
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 800cf1a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	3387      	adds	r3, #135	; 0x87
 800cf22:	6938      	ldr	r0, [r7, #16]
 800cf24:	f7fd fc6d 	bl	800a802 <waitForPolarizationEnd>
                            &pHandle->PolarizationCounter );

    R3_1_SwitchOffPWM( &pHandle->_Super );
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fb0e 	bl	800d54c <R3_1_SwitchOffPWM>

    /* Offset calibration for C phase */
    /* Reset PolarizationCounter */
    pHandle->PolarizationCounter = 0u;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    /* Change function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	4a3e      	ldr	r2, [pc, #248]	; (800d034 <R3_1_CurrentReadingCalibration+0x1a0>)
 800cf3c:	601a      	str	r2, [r3, #0]

    /* "Phase C current calibration to verify"    */
    pHandle->CalibSector = SECTOR_1;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    /* Required to force first polarization conversion on SECTOR_1*/
    pHandle->_Super.Sector = SECTOR_1;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    R3_1_SwitchOnPWM( &pHandle->_Super );
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fa52 	bl	800d3fa <R3_1_SwitchOnPWM>

    /* Wait for NB_CONVERSIONS to be executed */
    waitForPolarizationEnd( TIMx,
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f103 0144 	add.w	r1, r3, #68	; 0x44
                            &pHandle->_Super.SWerror,
                            pHandle->pParams_str->RepetitionCounter,
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 800cf62:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	3387      	adds	r3, #135	; 0x87
 800cf6a:	6938      	ldr	r0, [r7, #16]
 800cf6c:	f7fd fc49 	bl	800a802 <waitForPolarizationEnd>
                            &pHandle->PolarizationCounter );

    R3_1_SwitchOffPWM( &pHandle->_Super );
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 faea 	bl	800d54c <R3_1_SwitchOffPWM>

    /* Shift of N bits to divide for the NB_ CONVERSIONS = 16= 2^N with N = 4 */
    pHandle->PhaseAOffset >>= 3;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf7c:	08da      	lsrs	r2, r3, #3
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset >>= 3;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf86:	08da      	lsrs	r2, r3, #3
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PhaseCOffset >>= 3;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf90:	08da      	lsrs	r2, r3, #3
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	679a      	str	r2, [r3, #120]	; 0x78
    pHandle->_Super.offsetCalibStatus = true;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Change back function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	615a      	str	r2, [r3, #20]
  }

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 800cfaa:	2101      	movs	r1, #1
 800cfac:	6938      	ldr	r0, [r7, #16]
 800cfae:	f7ff fe89 	bl	800ccc4 <__LL_TIM_OC_DisablePreload>
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 800cfb2:	2110      	movs	r1, #16
 800cfb4:	6938      	ldr	r0, [r7, #16]
 800cfb6:	f7ff fe85 	bl	800ccc4 <__LL_TIM_OC_DisablePreload>
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 800cfba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfbe:	6938      	ldr	r0, [r7, #16]
 800cfc0:	f7ff fe80 	bl	800ccc4 <__LL_TIM_OC_DisablePreload>

  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6938      	ldr	r0, [r7, #16]
 800cfce:	f7ff fd63 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->Half_PWMPeriod);
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6938      	ldr	r0, [r7, #16]
 800cfdc:	f7ff fd6a 	bl	800cab4 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->Half_PWMPeriod);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6938      	ldr	r0, [r7, #16]
 800cfea:	f7ff fd71 	bl	800cad0 <LL_TIM_OC_SetCompareCH3>

  /* Enable TIMx preload */
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 800cfee:	2101      	movs	r1, #1
 800cff0:	6938      	ldr	r0, [r7, #16]
 800cff2:	f7ff fe25 	bl	800cc40 <__LL_TIM_OC_EnablePreload>
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 800cff6:	2110      	movs	r1, #16
 800cff8:	6938      	ldr	r0, [r7, #16]
 800cffa:	f7ff fe21 	bl	800cc40 <__LL_TIM_OC_EnablePreload>
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 800cffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d002:	6938      	ldr	r0, [r7, #16]
 800d004:	f7ff fe1c 	bl	800cc40 <__LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800d008:	f240 5155 	movw	r1, #1365	; 0x555
 800d00c:	6938      	ldr	r0, [r7, #16]
 800d00e:	f7ff fcbd 	bl	800c98c <LL_TIM_CC_EnableChannel>


  /* sector and phase sequence for the switch on phase */
  pHandle->_Super.Sector = SECTOR_5;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2204      	movs	r2, #4
 800d016:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 800d022:	bf00      	nop
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	0800d25d 	.word	0x0800d25d
 800d030:	0800d67f 	.word	0x0800d67f
 800d034:	0800d2d7 	.word	0x0800d2d7

0800d038 <R3_1_GetPhaseCurrents>:
/*
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	61fb      	str	r3, [r7, #28]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	61bb      	str	r3, [r7, #24]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	617b      	str	r3, [r7, #20]
  uint16_t hReg1;
  uint16_t hReg2;
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d05a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d05e:	69b8      	ldr	r0, [r7, #24]
 800d060:	f7ff fca5 	bl	800c9ae <LL_TIM_CC_DisableChannel>

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d06a:	74fb      	strb	r3, [r7, #19]

  hReg1 =  (ADCx->JDR1)*2;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d070:	b29b      	uxth	r3, r3
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	823b      	strh	r3, [r7, #16]
  hReg2 =  (ADCx->JDR2)*2;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	005b      	lsls	r3, r3, #1
 800d07e:	81fb      	strh	r3, [r7, #14]

  switch ( bSector )
 800d080:	7cfb      	ldrb	r3, [r7, #19]
 800d082:	2b05      	cmp	r3, #5
 800d084:	f200 80c9 	bhi.w	800d21a <R3_1_GetPhaseCurrents+0x1e2>
 800d088:	a201      	add	r2, pc, #4	; (adr r2, 800d090 <R3_1_GetPhaseCurrents+0x58>)
 800d08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08e:	bf00      	nop
 800d090:	0800d11b 	.word	0x0800d11b
 800d094:	0800d19b 	.word	0x0800d19b
 800d098:	0800d19b 	.word	0x0800d19b
 800d09c:	0800d0a9 	.word	0x0800d0a9
 800d0a0:	0800d0a9 	.word	0x0800d0a9
 800d0a4:	0800d11b 	.word	0x0800d11b
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	8a3b      	ldrh	r3, [r7, #16]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d0ba:	dc04      	bgt.n	800d0c6 <R3_1_GetPhaseCurrents+0x8e>
      {
        pStator_Currents->a = -INT16_MAX;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f248 0201 	movw	r2, #32769	; 0x8001
 800d0c2:	801a      	strh	r2, [r3, #0]
 800d0c4:	e00c      	b.n	800d0e0 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( wAux > INT16_MAX )
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0cc:	db04      	blt.n	800d0d8 <R3_1_GetPhaseCurrents+0xa0>
      {
        pStator_Currents->a = INT16_MAX;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d0d4:	801a      	strh	r2, [r3, #0]
 800d0d6:	e003      	b.n	800d0e0 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	b21a      	sxth	r2, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	89fb      	ldrh	r3, [r7, #14]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d0f2:	dc04      	bgt.n	800d0fe <R3_1_GetPhaseCurrents+0xc6>
      {
        pStator_Currents->b = -INT16_MAX;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	f248 0201 	movw	r2, #32769	; 0x8001
 800d0fa:	805a      	strh	r2, [r3, #2]
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
      }
    }
    break;
 800d0fc:	e08e      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux > INT16_MAX )
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d104:	db04      	blt.n	800d110 <R3_1_GetPhaseCurrents+0xd8>
        pStator_Currents->b = INT16_MAX;
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d10c:	805a      	strh	r2, [r3, #2]
    break;
 800d10e:	e085      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->b = ( int16_t )wAux;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	b21a      	sxth	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	805a      	strh	r2, [r3, #2]
    break;
 800d118:	e080      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
    case SECTOR_6:
    case SECTOR_1:
    {
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d11e:	461a      	mov	r2, r3
 800d120:	8a3b      	ldrh	r3, [r7, #16]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d12c:	dc04      	bgt.n	800d138 <R3_1_GetPhaseCurrents+0x100>
      {
        pStator_Currents->b = -INT16_MAX;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	f248 0201 	movw	r2, #32769	; 0x8001
 800d134:	805a      	strh	r2, [r3, #2]
 800d136:	e00c      	b.n	800d152 <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( wAux > INT16_MAX )
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d13e:	db04      	blt.n	800d14a <R3_1_GetPhaseCurrents+0x112>
      {
        pStator_Currents->b = INT16_MAX;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d146:	805a      	strh	r2, [r3, #2]
 800d148:	e003      	b.n	800d152 <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	b21a      	sxth	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	805a      	strh	r2, [r3, #2]
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ia = -Ic -Ib */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d156:	461a      	mov	r2, r3
 800d158:	89fb      	ldrh	r3, [r7, #14]
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	60bb      	str	r3, [r7, #8]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	425b      	negs	r3, r3
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d168:	1a9b      	subs	r3, r3, r2
 800d16a:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( wAux > INT16_MAX )
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d172:	db04      	blt.n	800d17e <R3_1_GetPhaseCurrents+0x146>
      {
        pStator_Currents->a = INT16_MAX;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d17a:	801a      	strh	r2, [r3, #0]
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
      }
    }
    break;
 800d17c:	e04e      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux < -INT16_MAX )
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d184:	dc04      	bgt.n	800d190 <R3_1_GetPhaseCurrents+0x158>
        pStator_Currents->a = -INT16_MAX;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	f248 0201 	movw	r2, #32769	; 0x8001
 800d18c:	801a      	strh	r2, [r3, #0]
    break;
 800d18e:	e045      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->a = ( int16_t )wAux;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	b21a      	sxth	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	801a      	strh	r2, [r3, #0]
    break;
 800d198:	e040      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
    case SECTOR_2:
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d19e:	461a      	mov	r2, r3
 800d1a0:	8a3b      	ldrh	r3, [r7, #16]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d1ac:	dc04      	bgt.n	800d1b8 <R3_1_GetPhaseCurrents+0x180>
      {
        pStator_Currents->a = -INT16_MAX;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	f248 0201 	movw	r2, #32769	; 0x8001
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	e00c      	b.n	800d1d2 <R3_1_GetPhaseCurrents+0x19a>
      }
      else  if ( wAux > INT16_MAX )
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1be:	db04      	blt.n	800d1ca <R3_1_GetPhaseCurrents+0x192>
      {
        pStator_Currents->a = INT16_MAX;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	e003      	b.n	800d1d2 <R3_1_GetPhaseCurrents+0x19a>
      }
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	b21a      	sxth	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	801a      	strh	r2, [r3, #0]
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	89fb      	ldrh	r3, [r7, #14]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	60bb      	str	r3, [r7, #8]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	425b      	negs	r3, r3
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d1e8:	1a9b      	subs	r3, r3, r2
 800d1ea:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1f2:	db04      	blt.n	800d1fe <R3_1_GetPhaseCurrents+0x1c6>
      {
        pStator_Currents->b = INT16_MAX;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d1fa:	805a      	strh	r2, [r3, #2]
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
      }
    }
    break;
 800d1fc:	e00e      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux < -INT16_MAX )
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d204:	dc04      	bgt.n	800d210 <R3_1_GetPhaseCurrents+0x1d8>
        pStator_Currents->b = -INT16_MAX;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	f248 0201 	movw	r2, #32769	; 0x8001
 800d20c:	805a      	strh	r2, [r3, #2]
    break;
 800d20e:	e005      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->b = ( int16_t )wAux;
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	b21a      	sxth	r2, r3
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	805a      	strh	r2, [r3, #2]
    break;
 800d218:	e000      	b.n	800d21c <R3_1_GetPhaseCurrents+0x1e4>

    default:
    {
    }
    break;
 800d21a:	bf00      	nop
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  pHandle->_Super.Ib = pStator_Currents->b;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	425b      	negs	r3, r3
 800d23e:	b29a      	uxth	r2, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d246:	b29b      	uxth	r3, r3
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	b21a      	sxth	r2, r3
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 800d254:	bf00      	nop
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <R3_1_HFCurrentsCalibrationAB>:
  * @param  pHdl: Pointer on the target component instance.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d27e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d282:	6938      	ldr	r0, [r7, #16]
 800d284:	f7ff fb93 	bl	800c9ae <LL_TIM_CC_DisableChannel>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b0f      	cmp	r3, #15
 800d292:	d816      	bhi.n	800d2c2 <R3_1_HFCurrentsCalibrationAB+0x66>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29c:	441a      	add	r2, r3
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset += ADCx->JDR2;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2aa:	441a      	add	r2, r3
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PolarizationCounter++;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = 0;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	805a      	strh	r2, [r3, #2]
}
 800d2ce:	bf00      	nop
 800d2d0:	3718      	adds	r7, #24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <R3_1_HFCurrentsCalibrationC>:
  * @param  pHdl: Pointer on the target component instance.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b086      	sub	sp, #24
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d2f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d2fc:	6938      	ldr	r0, [r7, #16]
 800d2fe:	f7ff fb56 	bl	800c9ae <LL_TIM_CC_DisableChannel>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b0f      	cmp	r3, #15
 800d30c:	d80f      	bhi.n	800d32e <R3_1_HFCurrentsCalibrationC+0x58>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d316:	441a      	add	r2, r3
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	679a      	str	r2, [r3, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d322:	b2db      	uxtb	r3, r3
 800d324:	3301      	adds	r3, #1
 800d326:	b2da      	uxtb	r2, r3
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2200      	movs	r2, #0
 800d332:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = 0;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2200      	movs	r2, #0
 800d338:	805a      	strh	r2, [r3, #2]
}
 800d33a:	bf00      	nop
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <R3_1_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d362:	68b8      	ldr	r0, [r7, #8]
 800d364:	f7ff fbf0 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>
  
  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
 800d368:	2100      	movs	r1, #0
 800d36a:	68b8      	ldr	r0, [r7, #8]
 800d36c:	f7ff fb94 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
 800d370:	2100      	movs	r1, #0
 800d372:	68b8      	ldr	r0, [r7, #8]
 800d374:	f7ff fb9e 	bl	800cab4 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );
 800d378:	2100      	movs	r1, #0
 800d37a:	68b8      	ldr	r0, [r7, #8]
 800d37c:	f7ff fba8 	bl	800cad0 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d380:	bf00      	nop
 800d382:	68b8      	ldr	r0, [r7, #8]
 800d384:	f7ff fbee 	bl	800cb64 <LL_TIM_IsActiveFlag_UPDATE>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d0f9      	beq.n	800d382 <R3_1_TurnOnLowSides+0x40>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d38e:	68b8      	ldr	r0, [r7, #8]
 800d390:	f7ff fbda 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
 800d394:	68b8      	ldr	r0, [r7, #8]
 800d396:	f7ff fbb7 	bl	800cb08 <LL_TIM_EnableAllOutputs>
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d124      	bne.n	800d3f2 <R3_1_TurnOnLowSides+0xb0>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ae:	689a      	ldr	r2, [r3, #8]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f7ff fc23 	bl	800cc06 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	f7ff fc17 	bl	800cc06 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3de:	691a      	ldr	r2, [r3, #16]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	f7ff fc0b 	bl	800cc06 <LL_GPIO_SetOutputPin>
  }
  return; 
 800d3f0:	bf00      	nop
 800d3f2:	bf00      	nop
}
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <R3_1_SwitchOnPWM>:
  * @brief  Enables PWM generation on the proper Timer peripheral acting on MOE bit.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d41e:	085b      	lsrs	r3, r3, #1
 800d420:	b29b      	uxth	r3, r3
 800d422:	4619      	mov	r1, r3
 800d424:	68b8      	ldr	r0, [r7, #8]
 800d426:	f7ff fb37 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d430:	085b      	lsrs	r3, r3, #1
 800d432:	b29b      	uxth	r3, r3
 800d434:	4619      	mov	r1, r3
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f7ff fb3c 	bl	800cab4 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d442:	085b      	lsrs	r3, r3, #1
 800d444:	b29b      	uxth	r3, r3
 800d446:	4619      	mov	r1, r3
 800d448:	68b8      	ldr	r0, [r7, #8]
 800d44a:	f7ff fb41 	bl	800cad0 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d454:	3b05      	subs	r3, #5
 800d456:	4619      	mov	r1, r3
 800d458:	68b8      	ldr	r0, [r7, #8]
 800d45a:	f7ff fb47 	bl	800caec <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d45e:	68b8      	ldr	r0, [r7, #8]
 800d460:	f7ff fb72 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d464:	bf00      	nop
 800d466:	68b8      	ldr	r0, [r7, #8]
 800d468:	f7ff fb7c 	bl	800cb64 <LL_TIM_IsActiveFlag_UPDATE>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0f9      	beq.n	800d466 <R3_1_SwitchOnPWM+0x6c>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d472:	68b8      	ldr	r0, [r7, #8]
 800d474:	f7ff fb68 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );
 800d484:	68b8      	ldr	r0, [r7, #8]
 800d486:	f7ff fb3f 	bl	800cb08 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d494:	2b02      	cmp	r3, #2
 800d496:	d14f      	bne.n	800d538 <R3_1_SwitchOnPWM+0x13e>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	6a1a      	ldr	r2, [r3, #32]
 800d49c:	f240 5355 	movw	r3, #1365	; 0x555
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d024      	beq.n	800d4f0 <R3_1_SwitchOnPWM+0xf6>
    {
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4ac:	689a      	ldr	r2, [r3, #8]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	f7ff fba4 	bl	800cc06 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4c4:	68da      	ldr	r2, [r3, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7ff fb98 	bl	800cc06 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4dc:	691a      	ldr	r2, [r3, #16]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e4:	69db      	ldr	r3, [r3, #28]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7ff fb8c 	bl	800cc06 <LL_GPIO_SetOutputPin>
 800d4ee:	e023      	b.n	800d538 <R3_1_SwitchOnPWM+0x13e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4f6:	689a      	ldr	r2, [r3, #8]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f7ff fb8d 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	4619      	mov	r1, r3
 800d51a:	4610      	mov	r0, r2
 800d51c:	f7ff fb81 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d526:	691a      	ldr	r2, [r3, #16]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	4619      	mov	r1, r3
 800d532:	4610      	mov	r0, r2
 800d534:	f7ff fb75 	bl	800cc22 <LL_GPIO_ResetOutputPin>
    }
  }

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d538:	68b8      	ldr	r0, [r7, #8]
 800d53a:	f7ff fb05 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800d53e:	68b8      	ldr	r0, [r7, #8]
 800d540:	f7ff fb31 	bl	800cba6 <LL_TIM_EnableIT_UPDATE>

  return; 
 800d544:	bf00      	nop
}
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <R3_1_SwitchOffPWM>:
  * @brief  Disables PWM generation on the proper Timer peripheral acting on MOE bit.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800d562:	68b8      	ldr	r0, [r7, #8]
 800d564:	f7ff fb2f 	bl	800cbc6 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
 800d570:	68b8      	ldr	r0, [r7, #8]
 800d572:	f7ff fad9 	bl	800cb28 <LL_TIM_DisableAllOutputs>
  if (pHandle->BrakeActionLock == true)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d12a      	bne.n	800d5d6 <R3_1_SwitchOffPWM+0x8a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d123      	bne.n	800d5d6 <R3_1_SwitchOffPWM+0x8a>
    {
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7ff fb3e 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7ff fb32 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c4:	691a      	ldr	r2, [r3, #16]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5cc:	69db      	ldr	r3, [r3, #28]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7ff fb26 	bl	800cc22 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d5d6:	68b8      	ldr	r0, [r7, #8]
 800d5d8:	f7ff fab6 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d5dc:	bf00      	nop
 800d5de:	68b8      	ldr	r0, [r7, #8]
 800d5e0:	f7ff fac0 	bl	800cb64 <LL_TIM_IsActiveFlag_UPDATE>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0f9      	beq.n	800d5de <R3_1_SwitchOffPWM+0x92>
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d5ea:	68b8      	ldr	r0, [r7, #8]
 800d5ec:	f7ff faac 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  return;
 800d5f0:	bf00      	nop
}
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <R3_1_WriteTIMRegisters>:
  * @param  hCCR4Reg: New capture/compare register value, written in timer clock counts.
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t R3_1_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t hCCR4Reg)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	807b      	strh	r3, [r7, #2]
  uint16_t hAux;
      
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	613b      	str	r3, [r7, #16]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	60fb      	str	r3, [r7, #12]

  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff fa3d 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d624:	4619      	mov	r1, r3
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f7ff fa44 	bl	800cab4 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d632:	4619      	mov	r1, r3
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f7ff fa4b 	bl	800cad0 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4 (TIMx,hCCR4Reg);
 800d63a:	887b      	ldrh	r3, [r7, #2]
 800d63c:	4619      	mov	r1, r3
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7ff fa54 	bl	800caec <LL_TIM_OC_SetCompareCH4>
  
  /* Limit for update event */
  /* Check the status flag. If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4))
 800d644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff f9c2 	bl	800c9d2 <LL_TIM_CC_IsEnabledChannel>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <R3_1_WriteTIMRegisters+0x62>
  {
    hAux = MC_DURATION;
 800d654:	2301      	movs	r3, #1
 800d656:	82fb      	strh	r3, [r7, #22]
 800d658:	e001      	b.n	800d65e <R3_1_WriteTIMRegisters+0x66>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800d65a:	2300      	movs	r3, #0
 800d65c:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d664:	2b01      	cmp	r3, #1
 800d666:	d105      	bne.n	800d674 <R3_1_WriteTIMRegisters+0x7c>
  {
    hAux = MC_DURATION;
 800d668:	2301      	movs	r3, #1
 800d66a:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  return hAux;
 800d674:	8afb      	ldrh	r3, [r7, #22]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3718      	adds	r7, #24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <R3_1_SetADCSampPointCalibration>:
 * 
 * @param pHdl: Handler of the current instance of the PWM component.
 * @retval Return value of R3_1_WriteTIMRegisters.
 */
__weak uint16_t R3_1_SetADCSampPointCalibration(PWMC_Handle_t *pHdl)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	60fb      	str	r3, [r7, #12]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  pHandle->_Super.Sector = pHandle->CalibSector;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	f7ff ffa2 	bl	800d5f8 <R3_1_WriteTIMRegisters>
 800d6b4:	4603      	mov	r3, r0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <R3_1_SetADCSampPointSectX>:
  * 
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
__weak uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800d6be:	b5b0      	push	{r4, r5, r7, lr}
 800d6c0:	b086      	sub	sp, #24
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	613b      	str	r3, [r7, #16]
  uint16_t hCntSmp;
  uint16_t hDeltaDuty;
  register uint16_t lowDuty = pHdl->lowDuty;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8b3 4046 	ldrh.w	r4, [r3, #70]	; 0x46
  register uint16_t midDuty = pHdl->midDuty;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8b3 5048 	ldrh.w	r5, [r3, #72]	; 0x48
  
  /* Check if sampling AB in the middle of PWM is possible */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6dc:	1b1b      	subs	r3, r3, r4
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d909      	bls.n	800d700 <R3_1_SetADCSampPointSectX+0x42>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 5 */
    pHandle->_Super.Sector = SECTOR_5;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2204      	movs	r2, #4
 800d6f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* set sampling  point trigger in the middle of PWM period */
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	82fb      	strh	r3, [r7, #22]
 800d6fe:	e02c      	b.n	800d75a <R3_1_SetADCSampPointSectX+0x9c>
    one with minimum complementary duty and one with variable complementary duty. In this case, phases
    with variable complementary duty and with maximum duty are converted and the first will be always
    the phase with variable complementary duty cycle */

    /* Crossing Point Searching */
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 800d700:	1b63      	subs	r3, r4, r5
 800d702:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800d704:	89fa      	ldrh	r2, [r7, #14]
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d70c:	1b1b      	subs	r3, r3, r4
 800d70e:	b29b      	uxth	r3, r3
 800d710:	005b      	lsls	r3, r3, #1
 800d712:	429a      	cmp	r2, r3
 800d714:	d906      	bls.n	800d724 <R3_1_SetADCSampPointSectX+0x66>
    {
      /* hTbefore = 2*Ts + Tc, where Ts = Sampling time of ADC, Tc = Conversion Time of ADC */
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d71c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800d71e:	1ae3      	subs	r3, r4, r3
 800d720:	82fb      	strh	r3, [r7, #22]
 800d722:	e01a      	b.n	800d75a <R3_1_SetADCSampPointSectX+0x9c>
    }
    else
    {
      /* hTafter = DT + max(Trise, Tnoise) */
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d72a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d72c:	4423      	add	r3, r4
 800d72e:	82fb      	strh	r3, [r7, #22]

      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d736:	8afa      	ldrh	r2, [r7, #22]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d30e      	bcc.n	800d75a <R3_1_SetADCSampPointSectX+0x9c>
      {
        /* It must be changed the trigger direction from positive to negative
             to sample after middle of PWM*/
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	b29a      	uxth	r2, r3
 800d750:	8afb      	ldrh	r3, [r7, #22]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	b29b      	uxth	r3, r3
 800d756:	3b01      	subs	r3, #1
 800d758:	82fb      	strh	r3, [r7, #22]
      }
    }
  }

  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	8afa      	ldrh	r2, [r7, #22]
 800d75e:	4611      	mov	r1, r2
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff ff49 	bl	800d5f8 <R3_1_WriteTIMRegisters>
 800d766:	4603      	mov	r3, r0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bdb0      	pop	{r4, r5, r7, pc}

0800d770 <R3_1_TIMx_UP_IRQHandler>:
  * @brief  Contains the TIMx Update event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *R3_1_TIMx_UP_IRQHandler(PWMC_R3_1_Handle_t *pHandle)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	60bb      	str	r3, [r7, #8]

  /* reset ADC external trigger edge */
  LL_ADC_INJ_StopConversionExtTrig(ADCx);
 800d78c:	68b8      	ldr	r0, [r7, #8]
 800d78e:	f7ff f891 	bl	800c8b4 <LL_ADC_INJ_StopConversionExtTrig>
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800d79e:	3208      	adds	r2, #8
 800d7a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* enable ADC trigger source */
  LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d7a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff f8ed 	bl	800c98c <LL_TIM_CC_EnableChannel>
  
  /* set ADC external trigger edge */
  LL_ADC_INJ_StartConversionExtTrig(ADCx, pHandle->ADCTriggerEdge);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	68b8      	ldr	r0, [r7, #8]
 800d7bc:	f7ff f869 	bl	800c892 <LL_ADC_INJ_StartConversionExtTrig>

  /* reset default edge detection trigger */
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d7c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return &( pHandle->_Super.Motor );
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3368      	adds	r3, #104	; 0x68
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <R3_1_BRK_IRQHandler>:
  * @brief  Contains the TIMx Break event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *R3_1_BRK_IRQHandler(PWMC_R3_1_Handle_t *pHandle)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b082      	sub	sp, #8
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800d7e4:	f083 0301 	eor.w	r3, r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d02a      	beq.n	800d844 <R3_1_BRK_IRQHandler+0x6e>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d123      	bne.n	800d844 <R3_1_BRK_IRQHandler+0x6e>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f7ff fa07 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d81a:	68da      	ldr	r2, [r3, #12]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7ff f9fb 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d832:	691a      	ldr	r2, [r3, #16]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7ff f9ef 	bl	800cc22 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return &( pHandle->_Super.Motor );
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3368      	adds	r3, #104	; 0x68
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <R3_1_IsOverCurrentOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_BREAK_IN if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred(PWMC_Handle_t *pHdl)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	60bb      	str	r3, [r7, #8]
  uint16_t retVal = MC_NO_FAULTS;
 800d864:	2300      	movs	r3, #0
 800d866:	81fb      	strh	r3, [r7, #14]

  if (pHandle->OverCurrentFlag == true )
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d007      	beq.n	800d882 <R3_1_IsOverCurrentOccurred+0x2a>
  {
    retVal |= MC_BREAK_IN;
 800d872:	89fb      	ldrh	r3, [r7, #14]
 800d874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d878:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  }
  
  return retVal;
 800d882:	89fb      	ldrh	r3, [r7, #14]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <R3_1_RLDetectionModeEnable>:
  * @brief  Sets the PWM mode for R/L detection.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLDetectionModeEnable(PWMC_Handle_t *pHdl)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	60bb      	str	r3, [r7, #8]
  
  if (pHandle->_Super.RLDetectionMode == false)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d8ac:	f083 0301 	eor.w	r3, r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d049      	beq.n	800d94a <R3_1_RLDetectionModeEnable+0xba>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800d8b6:	2260      	movs	r2, #96	; 0x60
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	68b8      	ldr	r0, [r7, #8]
 800d8bc:	f7ff f89e 	bl	800c9fc <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	68b8      	ldr	r0, [r7, #8]
 800d8c4:	f7ff f862 	bl	800c98c <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800d8c8:	2104      	movs	r1, #4
 800d8ca:	68b8      	ldr	r0, [r7, #8]
 800d8cc:	f7ff f86f 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    
    LL_TIM_OC_SetCompareCH1(TIMx, 0u);
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	68b8      	ldr	r0, [r7, #8]
 800d8d4:	f7ff f8e0 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
    
    /*  Channel2 configuration */
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d10d      	bne.n	800d902 <R3_1_RLDetectionModeEnable+0x72>
    {
      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE);
 800d8e6:	2210      	movs	r2, #16
 800d8e8:	2110      	movs	r1, #16
 800d8ea:	68b8      	ldr	r0, [r7, #8]
 800d8ec:	f7ff f886 	bl	800c9fc <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800d8f0:	2110      	movs	r1, #16
 800d8f2:	68b8      	ldr	r0, [r7, #8]
 800d8f4:	f7ff f85b 	bl	800c9ae <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800d8f8:	2140      	movs	r1, #64	; 0x40
 800d8fa:	68b8      	ldr	r0, [r7, #8]
 800d8fc:	f7ff f846 	bl	800c98c <LL_TIM_CC_EnableChannel>
 800d900:	e013      	b.n	800d92a <R3_1_RLDetectionModeEnable+0x9a>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d10c      	bne.n	800d92a <R3_1_RLDetectionModeEnable+0x9a>
    {
      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE);
 800d910:	2220      	movs	r2, #32
 800d912:	2110      	movs	r1, #16
 800d914:	68b8      	ldr	r0, [r7, #8]
 800d916:	f7ff f871 	bl	800c9fc <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800d91a:	2110      	movs	r1, #16
 800d91c:	68b8      	ldr	r0, [r7, #8]
 800d91e:	f7ff f835 	bl	800c98c <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800d922:	2140      	movs	r1, #64	; 0x40
 800d924:	68b8      	ldr	r0, [r7, #8]
 800d926:	f7ff f842 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    else
    {
    }
    
    /*  Channel3 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2);
 800d92a:	2270      	movs	r2, #112	; 0x70
 800d92c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d930:	68b8      	ldr	r0, [r7, #8]
 800d932:	f7ff f863 	bl	800c9fc <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3);
 800d936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d93a:	68b8      	ldr	r0, [r7, #8]
 800d93c:	f7ff f837 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800d940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f7ff f832 	bl	800c9ae <LL_TIM_CC_DisableChannel>

  }
  
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	4a09      	ldr	r2, [pc, #36]	; (800d974 <R3_1_RLDetectionModeEnable+0xe4>)
 800d94e:	601a      	str	r2, [r3, #0]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	4a09      	ldr	r2, [pc, #36]	; (800d978 <R3_1_RLDetectionModeEnable+0xe8>)
 800d954:	611a      	str	r2, [r3, #16]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4a08      	ldr	r2, [pc, #32]	; (800d97c <R3_1_RLDetectionModeEnable+0xec>)
 800d95a:	609a      	str	r2, [r3, #8]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4a08      	ldr	r2, [pc, #32]	; (800d980 <R3_1_RLDetectionModeEnable+0xf0>)
 800d960:	605a      	str	r2, [r3, #4]

  pHandle->_Super.RLDetectionMode = true;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800d96a:	bf00      	nop
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	0800db9d 	.word	0x0800db9d
 800d978:	0800dc19 	.word	0x0800dc19
 800d97c:	0800dcb9 	.word	0x0800dcb9
 800d980:	0800d54d 	.word	0x0800d54d

0800d984 <R3_1_RLDetectionModeDisable>:
  * @brief  Disables the PWM mode for R/L detection.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLDetectionModeDisable(PWMC_Handle_t *pHdl)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	60bb      	str	r3, [r7, #8]

  if (pHandle->_Super.RLDetectionMode == true)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 80ad 	beq.w	800db00 <R3_1_RLDetectionModeDisable+0x17c>
    
    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1 
     * for correct reactivation of Repetition Counter value of TIM1.*/
    
    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800d9a6:	bf00      	nop
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0310 	and.w	r3, r3, #16
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0f9      	beq.n	800d9a8 <R3_1_RLDetectionModeDisable+0x24>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 800d9b4:	bf00      	nop
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f003 0310 	and.w	r3, r3, #16
 800d9be:	2b10      	cmp	r3, #16
 800d9c0:	d0f9      	beq.n	800d9b6 <R3_1_RLDetectionModeDisable+0x32>
    {
    }
    
    /* TIM1 Repetition Counter reactivation to the User Value */
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Repetition Counter of TIM1 User value reactivation END*/
    
    
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800d9d2:	2260      	movs	r2, #96	; 0x60
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	68b8      	ldr	r0, [r7, #8]
 800d9d8:	f7ff f810 	bl	800c9fc <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800d9dc:	2101      	movs	r1, #1
 800d9de:	68b8      	ldr	r0, [r7, #8]
 800d9e0:	f7fe ffd4 	bl	800c98c <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d104      	bne.n	800d9fc <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800d9f2:	2104      	movs	r1, #4
 800d9f4:	68b8      	ldr	r0, [r7, #8]
 800d9f6:	f7fe ffc9 	bl	800c98c <LL_TIM_CC_EnableChannel>
 800d9fa:	e00a      	b.n	800da12 <R3_1_RLDetectionModeDisable+0x8e>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da06:	2b02      	cmp	r3, #2
 800da08:	d103      	bne.n	800da12 <R3_1_RLDetectionModeDisable+0x8e>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800da0a:	2104      	movs	r1, #4
 800da0c:	68b8      	ldr	r0, [r7, #8]
 800da0e:	f7fe ffce 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800da18:	085b      	lsrs	r3, r3, #1
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	4619      	mov	r1, r3
 800da1e:	68b8      	ldr	r0, [r7, #8]
 800da20:	f7ff f83a 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
    
    /*  Channel2 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 800da24:	2260      	movs	r2, #96	; 0x60
 800da26:	2110      	movs	r1, #16
 800da28:	68b8      	ldr	r0, [r7, #8]
 800da2a:	f7fe ffe7 	bl	800c9fc <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800da2e:	2110      	movs	r1, #16
 800da30:	68b8      	ldr	r0, [r7, #8]
 800da32:	f7fe ffab 	bl	800c98c <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da40:	2b01      	cmp	r3, #1
 800da42:	d104      	bne.n	800da4e <R3_1_RLDetectionModeDisable+0xca>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800da44:	2140      	movs	r1, #64	; 0x40
 800da46:	68b8      	ldr	r0, [r7, #8]
 800da48:	f7fe ffa0 	bl	800c98c <LL_TIM_CC_EnableChannel>
 800da4c:	e00a      	b.n	800da64 <R3_1_RLDetectionModeDisable+0xe0>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d103      	bne.n	800da64 <R3_1_RLDetectionModeDisable+0xe0>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800da5c:	2140      	movs	r1, #64	; 0x40
 800da5e:	68b8      	ldr	r0, [r7, #8]
 800da60:	f7fe ffa5 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800da6a:	085b      	lsrs	r3, r3, #1
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	4619      	mov	r1, r3
 800da70:	68b8      	ldr	r0, [r7, #8]
 800da72:	f7ff f81f 	bl	800cab4 <LL_TIM_OC_SetCompareCH2>
    
    /*  Channel3 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 800da76:	2260      	movs	r2, #96	; 0x60
 800da78:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da7c:	68b8      	ldr	r0, [r7, #8]
 800da7e:	f7fe ffbd 	bl	800c9fc <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH3);
 800da82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da86:	68b8      	ldr	r0, [r7, #8]
 800da88:	f7fe ff80 	bl	800c98c <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da96:	2b01      	cmp	r3, #1
 800da98:	d105      	bne.n	800daa6 <R3_1_RLDetectionModeDisable+0x122>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800da9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800da9e:	68b8      	ldr	r0, [r7, #8]
 800daa0:	f7fe ff74 	bl	800c98c <LL_TIM_CC_EnableChannel>
 800daa4:	e00b      	b.n	800dabe <R3_1_RLDetectionModeDisable+0x13a>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d104      	bne.n	800dabe <R3_1_RLDetectionModeDisable+0x13a>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800dab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dab8:	68b8      	ldr	r0, [r7, #8]
 800daba:	f7fe ff78 	bl	800c9ae <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dac4:	085b      	lsrs	r3, r3, #1
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4619      	mov	r1, r3
 800daca:	68b8      	ldr	r0, [r7, #8]
 800dacc:	f7ff f800 	bl	800cad0 <LL_TIM_OC_SetCompareCH3>
	
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe feb6 	bl	800c84c <LL_ADC_INJ_SetSequencerDiscont>
                                   LL_ADC_INJ_SEQ_DISCONT_DISABLE);
       
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	4a09      	ldr	r2, [pc, #36]	; (800db08 <R3_1_RLDetectionModeDisable+0x184>)
 800dae4:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	4a08      	ldr	r2, [pc, #32]	; (800db0c <R3_1_RLDetectionModeDisable+0x188>)
 800daea:	611a      	str	r2, [r3, #16]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4a08      	ldr	r2, [pc, #32]	; (800db10 <R3_1_RLDetectionModeDisable+0x18c>)
 800daf0:	609a      	str	r2, [r3, #8]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	4a07      	ldr	r2, [pc, #28]	; (800db14 <R3_1_RLDetectionModeDisable+0x190>)
 800daf6:	605a      	str	r2, [r3, #4]
    
    pHandle->_Super.RLDetectionMode = false;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  }
}
 800db00:	bf00      	nop
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	0800d039 	.word	0x0800d039
 800db0c:	0800d343 	.word	0x0800d343
 800db10:	0800d3fb 	.word	0x0800d3fb
 800db14:	0800d54d 	.word	0x0800d54d

0800db18 <R3_1_RLDetectionModeSetDuty>:
  * @param  hDuty: Duty cycle to apply, written in uint16_t.
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
uint16_t R3_1_RLDetectionModeSetDuty(PWMC_Handle_t *pHdl, uint16_t hDuty)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	807b      	strh	r3, [r7, #2]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;

  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800db38:	461a      	mov	r2, r3
 800db3a:	887b      	ldrh	r3, [r7, #2]
 800db3c:	fb02 f303 	mul.w	r3, r2, r3
 800db40:	0c1b      	lsrs	r3, r3, #16
 800db42:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	b29a      	uxth	r2, r3
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	2203      	movs	r2, #3
 800db50:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db58:	4619      	mov	r1, r3
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f7fe ff9c 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>
  
  /* Limit for update event */
  /* Check the status flag. If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4))
 800db60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7fe ff34 	bl	800c9d2 <LL_TIM_CC_IsEnabledChannel>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <R3_1_RLDetectionModeSetDuty+0x5e>
  {
    hAux = MC_DURATION;
 800db70:	2301      	movs	r3, #1
 800db72:	82fb      	strh	r3, [r7, #22]
 800db74:	e001      	b.n	800db7a <R3_1_RLDetectionModeSetDuty+0x62>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800db76:	2300      	movs	r3, #0
 800db78:	82fb      	strh	r3, [r7, #22]
  }
  if (pHandle->_Super.SWerror == 1u)
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db80:	2b01      	cmp	r3, #1
 800db82:	d105      	bne.n	800db90 <R3_1_RLDetectionModeSetDuty+0x78>
  {
    hAux = MC_DURATION;
 800db84:	2301      	movs	r3, #1
 800db86:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  }
  return hAux;
 800db90:	8afb      	ldrh	r3, [r7, #22]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
	...

0800db9c <R3_1_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60bb      	str	r3, [r7, #8]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800dbbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f7fe fef3 	bl	800c9ae <LL_TIM_CC_DisableChannel>
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	617b      	str	r3, [r7, #20]
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	4a0d      	ldr	r2, [pc, #52]	; (800dc10 <R3_1_RLGetPhaseCurrents+0x74>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	db08      	blt.n	800dbf2 <R3_1_RLGetPhaseCurrents+0x56>
  {
    if (wAux < INT16_MAX)
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	dd05      	ble.n	800dbf6 <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800dbea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dbee:	617b      	str	r3, [r7, #20]
 800dbf0:	e001      	b.n	800dbf6 <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800dbf2:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <R3_1_RLGetPhaseCurrents+0x78>)
 800dbf4:	617b      	str	r3, [r7, #20]
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	b21a      	sxth	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = ( int16_t )( wAux );
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	b21a      	sxth	r2, r3
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	805a      	strh	r2, [r3, #2]

}
 800dc06:	bf00      	nop
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	ffff8002 	.word	0xffff8002
 800dc14:	ffff8001 	.word	0xffff8001

0800dc18 <R3_1_RLTurnOnLowSides>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{  
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
 800dc30:	2100      	movs	r1, #0
 800dc32:	68b8      	ldr	r0, [r7, #8]
 800dc34:	f7fe ff30 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800dc38:	68b8      	ldr	r0, [r7, #8]
 800dc3a:	f7fe ff85 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800dc3e:	bf00      	nop
 800dc40:	68b8      	ldr	r0, [r7, #8]
 800dc42:	f7fe ff8f 	bl	800cb64 <LL_TIM_IsActiveFlag_UPDATE>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d0f9      	beq.n	800dc40 <R3_1_RLTurnOnLowSides+0x28>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800dc4c:	68b8      	ldr	r0, [r7, #8]
 800dc4e:	f7fe ff7b 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
 800dc52:	68b8      	ldr	r0, [r7, #8]
 800dc54:	f7fe ff58 	bl	800cb08 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d124      	bne.n	800dcb0 <R3_1_RLTurnOnLowSides+0x98>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc6c:	689a      	ldr	r2, [r3, #8]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	4619      	mov	r1, r3
 800dc78:	4610      	mov	r0, r2
 800dc7a:	f7fe ffc4 	bl	800cc06 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc84:	68da      	ldr	r2, [r3, #12]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc8c:	699b      	ldr	r3, [r3, #24]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f7fe ffc6 	bl	800cc22 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc9c:	691a      	ldr	r2, [r3, #16]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	4619      	mov	r1, r3
 800dca8:	4610      	mov	r0, r2
 800dcaa:	f7fe ffba 	bl	800cc22 <LL_GPIO_ResetOutputPin>
  }
  return; 
 800dcae:	bf00      	nop
 800dcb0:	bf00      	nop
}
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <R3_1_RLSwitchOnPWM>:
  * This function is specific for RL detection phase.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	617b      	str	r3, [r7, #20]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 800dce0:	bf00      	nop
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 0310 	and.w	r3, r3, #16
 800dcea:	2b10      	cmp	r3, #16
 800dcec:	d0f9      	beq.n	800dce2 <R3_1_RLSwitchOnPWM+0x2a>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800dcee:	bf00      	nop
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f003 0310 	and.w	r3, r3, #16
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d0f9      	beq.n	800dcf0 <R3_1_RLSwitchOnPWM+0x38>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800dcfc:	2101      	movs	r1, #1
 800dcfe:	6938      	ldr	r0, [r7, #16]
 800dd00:	f7fe feca 	bl	800ca98 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dd0a:	3b05      	subs	r3, #5
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6938      	ldr	r0, [r7, #16]
 800dd10:	f7fe feec 	bl	800caec <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800dd14:	6938      	ldr	r0, [r7, #16]
 800dd16:	f7fe ff17 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800dd1a:	bf00      	nop
 800dd1c:	6938      	ldr	r0, [r7, #16]
 800dd1e:	f7fe ff21 	bl	800cb64 <LL_TIM_IsActiveFlag_UPDATE>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0f9      	beq.n	800dd1c <R3_1_RLSwitchOnPWM+0x64>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800dd28:	6938      	ldr	r0, [r7, #16]
 800dd2a:	f7fe ff0d 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800dd3a:	6938      	ldr	r0, [r7, #16]
 800dd3c:	f7fe fee4 	bl	800cb08 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d14f      	bne.n	800ddee <R3_1_RLSwitchOnPWM+0x136>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	6a1a      	ldr	r2, [r3, #32]
 800dd52:	f240 5355 	movw	r3, #1365	; 0x555
 800dd56:	4013      	ands	r3, r2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d024      	beq.n	800dda6 <R3_1_RLSwitchOnPWM+0xee>
    {
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd62:	689a      	ldr	r2, [r3, #8]
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7fe ff49 	bl	800cc06 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f7fe ff3d 	bl	800cc06 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd92:	691a      	ldr	r2, [r3, #16]
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd9a:	69db      	ldr	r3, [r3, #28]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7fe ff3f 	bl	800cc22 <LL_GPIO_ResetOutputPin>
 800dda4:	e023      	b.n	800ddee <R3_1_RLSwitchOnPWM+0x136>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4610      	mov	r0, r2
 800ddba:	f7fe ff32 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddc4:	68da      	ldr	r2, [r3, #12]
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	4610      	mov	r0, r2
 800ddd2:	f7fe ff26 	bl	800cc22 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dddc:	691a      	ldr	r2, [r3, #16]
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7fe ff1a 	bl	800cc22 <LL_GPIO_ResetOutputPin>
    }
  }
  
  /* Clear JEOC Flag */
  LL_ADC_ClearFlag_JEOS(ADCx);
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7fe fd7e 	bl	800c8f0 <LL_ADC_ClearFlag_JEOS>
    
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f7fe fea7 	bl	800cb48 <LL_TIM_ClearFlag_UPDATE>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800ddfa:	6938      	ldr	r0, [r7, #16]
 800ddfc:	f7fe fed3 	bl	800cba6 <LL_TIM_EnableIT_UPDATE>

  return; 
 800de00:	bf00      	nop
}
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <__libc_init_array>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	4d0d      	ldr	r5, [pc, #52]	; (800de40 <__libc_init_array+0x38>)
 800de0c:	4c0d      	ldr	r4, [pc, #52]	; (800de44 <__libc_init_array+0x3c>)
 800de0e:	1b64      	subs	r4, r4, r5
 800de10:	10a4      	asrs	r4, r4, #2
 800de12:	2600      	movs	r6, #0
 800de14:	42a6      	cmp	r6, r4
 800de16:	d109      	bne.n	800de2c <__libc_init_array+0x24>
 800de18:	4d0b      	ldr	r5, [pc, #44]	; (800de48 <__libc_init_array+0x40>)
 800de1a:	4c0c      	ldr	r4, [pc, #48]	; (800de4c <__libc_init_array+0x44>)
 800de1c:	f000 f82e 	bl	800de7c <_init>
 800de20:	1b64      	subs	r4, r4, r5
 800de22:	10a4      	asrs	r4, r4, #2
 800de24:	2600      	movs	r6, #0
 800de26:	42a6      	cmp	r6, r4
 800de28:	d105      	bne.n	800de36 <__libc_init_array+0x2e>
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de30:	4798      	blx	r3
 800de32:	3601      	adds	r6, #1
 800de34:	e7ee      	b.n	800de14 <__libc_init_array+0xc>
 800de36:	f855 3b04 	ldr.w	r3, [r5], #4
 800de3a:	4798      	blx	r3
 800de3c:	3601      	adds	r6, #1
 800de3e:	e7f2      	b.n	800de26 <__libc_init_array+0x1e>
 800de40:	0800e2e0 	.word	0x0800e2e0
 800de44:	0800e2e0 	.word	0x0800e2e0
 800de48:	0800e2e0 	.word	0x0800e2e0
 800de4c:	0800e2e4 	.word	0x0800e2e4

0800de50 <memcpy>:
 800de50:	440a      	add	r2, r1
 800de52:	4291      	cmp	r1, r2
 800de54:	f100 33ff 	add.w	r3, r0, #4294967295
 800de58:	d100      	bne.n	800de5c <memcpy+0xc>
 800de5a:	4770      	bx	lr
 800de5c:	b510      	push	{r4, lr}
 800de5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de66:	4291      	cmp	r1, r2
 800de68:	d1f9      	bne.n	800de5e <memcpy+0xe>
 800de6a:	bd10      	pop	{r4, pc}

0800de6c <memset>:
 800de6c:	4402      	add	r2, r0
 800de6e:	4603      	mov	r3, r0
 800de70:	4293      	cmp	r3, r2
 800de72:	d100      	bne.n	800de76 <memset+0xa>
 800de74:	4770      	bx	lr
 800de76:	f803 1b01 	strb.w	r1, [r3], #1
 800de7a:	e7f9      	b.n	800de70 <memset+0x4>

0800de7c <_init>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr

0800de88 <_fini>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr
