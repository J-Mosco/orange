
HVSD 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800f068  0800f068  0001f068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f54c  0800f54c  0002062c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f54c  0800f54c  0001f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f554  0800f554  0002062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f554  0800f554  0001f554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000062c  20000000  0800f55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  2000062c  0800fb88  0002062c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a7c  0800fb88  00021a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029912  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000658d  00000000  00000000  00049f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  00050500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e80  00000000  00000000  00052688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e467  00000000  00000000  00054508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029746  00000000  00000000  0008296f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7078  00000000  00000000  000ac0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a312d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009168  00000000  00000000  001a3180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000062c 	.word	0x2000062c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f050 	.word	0x0800f050

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000630 	.word	0x20000630
 800021c:	0800f050 	.word	0x0800f050

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ASPEP_ComputeHeaderCRC>:
  * table because the amount of input data is not a multiple of 8 bits.
  *
  * The resulting CRC is written in bits 28 to 31 of @p header and the whole header is returned.
  */
static void ASPEP_ComputeHeaderCRC(uint32_t *headerPtr)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint8_t crc = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
  uint32_t header = *headerPtr;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60bb      	str	r3, [r7, #8]

#ifndef CRC4_PER_NIBBLE
  header &= 0x0fffffffU;
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80005dc:	60bb      	str	r3, [r7, #8]

  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4053      	eors	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <ASPEP_ComputeHeaderCRC+0x84>)
 80005ec:	5c9b      	ldrb	r3, [r3, r2]
 80005ee:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4053      	eors	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <ASPEP_ComputeHeaderCRC+0x84>)
 8000600:	5c9b      	ldrb	r3, [r3, r2]
 8000602:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	b2da      	uxtb	r2, r3
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	4053      	eors	r3, r2
 800060e:	b2db      	uxtb	r3, r3
 8000610:	461a      	mov	r2, r3
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <ASPEP_ComputeHeaderCRC+0x84>)
 8000614:	5c9b      	ldrb	r3, [r3, r2]
 8000616:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000618:	7bfa      	ldrb	r2, [r7, #15]
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	0e1b      	lsrs	r3, r3, #24
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	4053      	eors	r3, r2
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <ASPEP_ComputeHeaderCRC+0x88>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 16U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 20U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0xfU)];
#endif /* CRC4_PER_NIBBLE */

  *headerPtr |= (uint32_t)crc << 28;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	071b      	lsls	r3, r3, #28
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
  return;
 800063a:	bf00      	nop
}
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	0800f070 	.word	0x0800f070
 800064c:	0800f170 	.word	0x0800f170

08000650 <ASPEP_CheckHeaderCRC>:
  * and true is returned. If the result is not 0, false is returned.
  *
  * @sa ASPEP_ComputeHeaderCRC
  */
static bool ASPEP_CheckHeaderCRC(uint32_t header)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint8_t crc = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

#ifndef CRC4_PER_NIBBLE
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4053      	eors	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <ASPEP_CheckHeaderCRC+0x74>)
 800066a:	5c9b      	ldrb	r3, [r3, r2]
 800066c:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	b2da      	uxtb	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4053      	eors	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <ASPEP_CheckHeaderCRC+0x74>)
 800067e:	5c9b      	ldrb	r3, [r3, r2]
 8000680:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	b2da      	uxtb	r2, r3
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <ASPEP_CheckHeaderCRC+0x74>)
 8000692:	5c9b      	ldrb	r3, [r3, r2]
 8000694:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	0e1b      	lsrs	r3, r3, #24
 800069a:	b2da      	uxtb	r2, r3
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4053      	eors	r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <ASPEP_CheckHeaderCRC+0x74>)
 80006a6:	5c9b      	ldrb	r3, [r3, r2]
 80006a8:	73fb      	strb	r3, [r7, #15]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 20U) & 0xfU)];
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0xfU)];
  crc = crc ^ (uint8_t)((header >> 28) & 0xf);
#endif /* CRC4_PER_NIBBLE */

  return (crc == 0U);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	0800f070 	.word	0x0800f070

080006c8 <ASPEP_start>:

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	6952      	ldr	r2, [r2, #20]
 80006d8:	4610      	mov	r0, r2
 80006da:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	6950      	ldr	r0, [r2, #20]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	f102 011c 	add.w	r1, r2, #28
 8000702:	2204      	movs	r2, #4
 8000704:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3320      	adds	r3, #32
 800071c:	60fb      	str	r3, [r7, #12]
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	011a      	lsls	r2, r3, #4
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	01db      	lsls	r3, r3, #7
 800072a:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	789b      	ldrb	r3, [r3, #2]
 8000738:	039b      	lsls	r3, r3, #14
 800073a:	431a      	orrs	r2, r3
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	055b      	lsls	r3, r3, #21
 8000742:	4313      	orrs	r3, r2
 8000744:	f043 0205 	orr.w	r2, r3, #5
    *packet = (BEACON
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	601a      	str	r2, [r3, #0]

    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f103 0220 	add.w	r2, r3, #32
 8000752:	2304      	movs	r3, #4
 8000754:	2100      	movs	r1, #0
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f992 	bl	8000a80 <ASPEP_TXframeProcess>
#ifdef NULL_PTR_ASP
  }
#endif
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <ASPEP_sendNack>:

static void ASPEP_sendNack(ASPEP_Handle_t *pHandle, uint8_t errorInfo)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3320      	adds	r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	021a      	lsls	r2, r3, #8
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	041b      	lsls	r3, r3, #16
 800077e:	4313      	orrs	r3, r2
 8000780:	f043 020f 	orr.w	r2, r3, #15
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	601a      	str	r2, [r3, #0]
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f103 0220 	add.w	r2, r3, #32
 800078e:	2304      	movs	r3, #4
 8000790:	2100      	movs	r1, #0
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f974 	bl	8000a80 <ASPEP_TXframeProcess>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <ASPEP_sendPing>:

void ASPEP_sendPing(ASPEP_Handle_t *pHandle, uint8_t cBit, uint16_t packetNumber)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3320      	adds	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	72fb      	strb	r3, [r7, #11]
    uint8_t ipID = pHandle->liid & 0xFU;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	72bb      	strb	r3, [r7, #10]
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	011a      	lsls	r2, r3, #4
              | (uint32_t)((uint32_t)cBit << 5U)
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	015b      	lsls	r3, r3, #5
 80007d6:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)Nbit << 6U)
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)Nbit << 7U)
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	01db      	lsls	r3, r3, #7
 80007e2:	431a      	orrs	r2, r3
              | (uint32_t)((uint32_t)ipID << 8U)
 80007e4:	7abb      	ldrb	r3, [r7, #10]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	431a      	orrs	r2, r3
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	031b      	lsls	r3, r3, #12
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f043 0206 	orr.w	r2, r3, #6
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	601a      	str	r2, [r3, #0]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f103 0220 	add.w	r2, r3, #32
 80007fe:	2304      	movs	r3, #4
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f93c 	bl	8000a80 <ASPEP_TXframeProcess>
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <ASPEP_getBuffer>:

bool ASPEP_getBuffer(MCTL_Handle_t *pSupHandle, void **buffer,  uint8_t syncAsync)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
  bool result = true;
 800081e:	2301      	movs	r3, #1
 8000820:	75fb      	strb	r3, [r7, #23]
    result = false;
  }
  else
  {
#endif
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	613b      	str	r3, [r7, #16]

    if (MCTL_SYNC == syncAsync)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b0a      	cmp	r3, #10
 800082a:	d111      	bne.n	8000850 <ASPEP_getBuffer+0x40>
    {
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000832:	2b01      	cmp	r3, #1
 8000834:	d809      	bhi.n	800084a <ASPEP_getBuffer+0x3a>
      {
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	1d1a      	adds	r2, r3, #4
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	601a      	str	r2, [r3, #0]
        pHandle->syncBuffer.state = writeLock;
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	2201      	movs	r2, #1
 8000844:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000848:	e036      	b.n	80008b8 <ASPEP_getBuffer+0xa8>
      }
      else
      {
        result = false;
 800084a:	2300      	movs	r3, #0
 800084c:	75fb      	strb	r3, [r7, #23]
 800084e:	e033      	b.n	80008b8 <ASPEP_getBuffer+0xa8>
      }
    }
    else /* Asynchronous buffer request */
    {
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000856:	2b01      	cmp	r3, #1
 8000858:	d907      	bls.n	800086a <ASPEP_getBuffer+0x5a>
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000860:	2b01      	cmp	r3, #1
 8000862:	d902      	bls.n	800086a <ASPEP_getBuffer+0x5a>
      {
        result = false;
 8000864:	2300      	movs	r3, #0
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	e026      	b.n	80008b8 <ASPEP_getBuffer+0xa8>
      }
      else
      {
        if (pHandle->asyncBufferA.state <= writeLock)
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000870:	2b01      	cmp	r3, #1
 8000872:	d80e      	bhi.n	8000892 <ASPEP_getBuffer+0x82>
        {
          pHandle->asyncBufferA.state = writeLock;
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	641a      	str	r2, [r3, #64]	; 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	1d1a      	adds	r2, r3, #4
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e012      	b.n	80008b8 <ASPEP_getBuffer+0xa8>
#ifdef MCP_DEBUG_METRICS
          pHandle->asyncBufferA.RequestedNumber++;
#endif
        }
        else if (pHandle->asyncBufferB.state <= writeLock)
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000898:	2b01      	cmp	r3, #1
 800089a:	d80d      	bhi.n	80008b8 <ASPEP_getBuffer+0xa8>
        {
          pHandle->asyncBufferB.state = writeLock;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2201      	movs	r2, #1
 80008a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b2:	1d1a      	adds	r2, r3, #4
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	601a      	str	r2, [r3, #0]
      }
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <ASPEP_CheckBeacon>:

bool ASPEP_CheckBeacon (ASPEP_Handle_t * pHandle)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b087      	sub	sp, #28
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  bool result = true;
 80008ce:	2301      	movs	r3, #1
 80008d0:	75fb      	strb	r3, [r7, #23]
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	331c      	adds	r3, #28
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	613b      	str	r3, [r7, #16]
  ASPEP_Capabilities_def MasterCapabilities;
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	733b      	strb	r3, [r7, #12]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7f1b      	ldrb	r3, [r3, #28]
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	723b      	strb	r3, [r7, #8]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7f5b      	ldrb	r3, [r3, #29]
 80008f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	727b      	strb	r3, [r7, #9]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	0b9b      	lsrs	r3, r3, #14
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000908:	b2db      	uxtb	r3, r3
 800090a:	72bb      	strb	r3, [r7, #10]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	0d5b      	lsrs	r3, r3, #21
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000916:	b2db      	uxtb	r3, r3
 8000918:	72fb      	strb	r3, [r7, #11]

  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800091a:	7a3a      	ldrb	r2, [r7, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000922:	4293      	cmp	r3, r2
 8000924:	bf28      	it	cs
 8000926:	4613      	movcs	r3, r2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000930:	7a7a      	ldrb	r2, [r7, #9]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8000938:	4293      	cmp	r3, r2
 800093a:	bf28      	it	cs
 800093c:	4613      	movcs	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000946:	7aba      	ldrb	r2, [r7, #10]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800094e:	4293      	cmp	r3, r2
 8000950:	bf28      	it	cs
 8000952:	4613      	movcs	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800095c:	7afa      	ldrb	r2, [r7, #11]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000964:	4293      	cmp	r3, r2
 8000966:	bf28      	it	cs
 8000968:	4613      	movcs	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000972:	7a3a      	ldrb	r2, [r7, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800097a:	429a      	cmp	r2, r3
 800097c:	d117      	bne.n	80009ae <ASPEP_CheckBeacon+0xe8>
   /* Data packet the master can send is bigger than slave can receive */
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800097e:	7a7a      	ldrb	r2, [r7, #9]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8000986:	429a      	cmp	r2, r3
 8000988:	d811      	bhi.n	80009ae <ASPEP_CheckBeacon+0xe8>
   /* Sync packet size alignement is required in order for the master to be able to store it, and to not request a
    * response bigger than slave capability */
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8000990:	7abb      	ldrb	r3, [r7, #10]
 8000992:	429a      	cmp	r2, r3
 8000994:	d10b      	bne.n	80009ae <ASPEP_CheckBeacon+0xe8>
   /* Async packet the slave can send is bigger than the master can receive (but master must not request a bigger
    * packet than slave can transmit */
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d105      	bne.n	80009ae <ASPEP_CheckBeacon+0xe8>
   /* For the time being, master version has to match slave version */
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009a2:	7b3a      	ldrb	r2, [r7, #12]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d001      	beq.n	80009b2 <ASPEP_CheckBeacon+0xec>
  {
    result = false;
 80009ae:	2300      	movs	r3, #0
 80009b0:	75fb      	strb	r3, [r7, #23]
  }

  return (result);
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <ASPEP_sendPacket>:
 uint16_t txDataLength Size of useful data in byte

  */

uint8_t ASPEP_sendPacket(MCTL_Handle_t *pSupHandle, void *txBuffer, uint16_t txDataLength, uint8_t syncAsync)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	460b      	mov	r3, r1
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	4613      	mov	r3, r2
 80009d4:	717b      	strb	r3, [r7, #5]
  uint8_t result = ASPEP_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t *packet;
    uint32_t *header;
    uint32_t tmpHeader;
    uint16_t txDataLengthTemp;

    txDataLengthTemp = txDataLength;
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	84bb      	strh	r3, [r7, #36]	; 0x24
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	623b      	str	r3, [r7, #32]

    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d13f      	bne.n	8000a6e <ASPEP_sendPacket+0xae>
    {
      /*We must add packet header on  */
      /* | [0101|0011] | Length 13b | Reserved |CRCH 4b| */
      packet = (uint8_t *)txBuffer; //cstat !MISRAC2012-Rule-11.5
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	61fb      	str	r3, [r7, #28]
      header = (uint32_t *)txBuffer; //cstat !MISRAC2012-Rule-11.5
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	61bb      	str	r3, [r7, #24]
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	3b04      	subs	r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80009fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009fe:	011a      	lsls	r2, r3, #4
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
      *header = tmpHeader;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10d      	bne.n	8000a32 <ASPEP_sendPacket+0x72>
      {
        /* TODO : Compute real CRC*/
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	22ca      	movs	r2, #202	; 0xca
 8000a1e:	701a      	strb	r2, [r3, #0]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a22:	3301      	adds	r3, #1
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	22fe      	movs	r2, #254	; 0xfe
 8000a2a:	701a      	strb	r2, [r3, #0]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a2e:	3302      	adds	r3, #2
 8000a30:	84bb      	strh	r3, [r7, #36]	; 0x24
      }
      if (MCTL_SYNC == syncAsync)
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	2b0a      	cmp	r3, #10
 8000a36:	d10a      	bne.n	8000a4e <ASPEP_sendPacket+0x8e>
      {
        if (pSupHandle->MCP_PacketAvailable)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	7c1b      	ldrb	r3, [r3, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <ASPEP_sendPacket+0x88>
        {
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	741a      	strb	r2, [r3, #16]
 8000a46:	e002      	b.n	8000a4e <ASPEP_sendPacket+0x8e>
        }
        else
        {
          result = MCTL_SYNC_NOT_EXPECTED;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      if (ASPEP_OK == result) /* Send packet only if no error detected so far*/
 8000a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10e      	bne.n	8000a74 <ASPEP_sendPacket+0xb4>
      {
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	3304      	adds	r3, #4
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	7979      	ldrb	r1, [r7, #5]
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	6a38      	ldr	r0, [r7, #32]
 8000a62:	f000 f80d 	bl	8000a80 <ASPEP_TXframeProcess>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a6c:	e002      	b.n	8000a74 <ASPEP_sendPacket+0xb4>
      }
    }
    else
    {
      result = ASPEP_NOT_CONNECTED;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ASPEP_TXframeProcess>:
dataType can be Synchronous (answer to Master packet), Asynchronous or a CTL packet

  */

uint8_t ASPEP_TXframeProcess(ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	72fb      	strb	r3, [r7, #11]
 8000a90:	4613      	mov	r3, r2
 8000a92:	813b      	strh	r3, [r7, #8]
  uint8_t result = ASPEP_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]
  }
  else
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fd93 	bl	80005c4 <ASPEP_ComputeHeaderCRC>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d12b      	bne.n	8000b02 <ASPEP_TXframeProcess+0x82>
    {
      if (MCTL_ASYNC == dataType)
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	d108      	bne.n	8000ac2 <ASPEP_TXframeProcess+0x42>
      {
        /* In ASYNC, two flipflop buffers are used, the txBuffer points always to lastRequestedAsyncBuff->buffer */
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	719a      	strb	r2, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	649a      	str	r2, [r3, #72]	; 0x48
 8000ac0:	e015      	b.n	8000aee <ASPEP_TXframeProcess+0x6e>
#ifdef MCP_DEBUG_METRICS
        pHandle->lastRequestedAsyncBuff->SentNumber++;
#endif
      }
      else if (MCTL_SYNC == dataType)
 8000ac2:	7afb      	ldrb	r3, [r7, #11]
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d109      	bne.n	8000adc <ASPEP_TXframeProcess+0x5c>
      {
        pHandle->syncBuffer.state = readLock;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2203      	movs	r2, #3
 8000acc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	649a      	str	r2, [r3, #72]	; 0x48
 8000ada:	e008      	b.n	8000aee <ASPEP_TXframeProcess+0x6e>
      }
      else
      {
        pHandle->ctrlBuffer.state = readLock;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f103 0220 	add.w	r2, r3, #32
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	649a      	str	r2, [r3, #72]	; 0x48
  __ASM volatile ("cpsie i" : : : "memory");
 8000aee:	b662      	cpsie	i
}
 8000af0:	bf00      	nop
      }
      /* Enable HF task It */
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	6950      	ldr	r0, [r2, #20]
 8000afa:	893a      	ldrh	r2, [r7, #8]
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4798      	blx	r3
 8000b00:	e03f      	b.n	8000b82 <ASPEP_TXframeProcess+0x102>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b02:	b662      	cpsie	i
}
 8000b04:	bf00      	nop
    }
    else /* HW resource busy, saving packet to sent it once resource will be freed*/
    {
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      /* Lock buffer can be freed here */
      if (MCTL_ASYNC == dataType)
 8000b06:	7afb      	ldrb	r3, [r7, #11]
 8000b08:	2b09      	cmp	r3, #9
 8000b0a:	d118      	bne.n	8000b3e <ASPEP_TXframeProcess+0xbe>
      {
        /* Check that the buffer received is the one expected - probably useless */
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d001      	beq.n	8000b1c <ASPEP_TXframeProcess+0x9c>
        {
          result = ASPEP_BUFFER_ERROR;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	75fb      	strb	r3, [r7, #23]
        }
        if (NULL == pHandle->asyncNextBuffer)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d103      	bne.n	8000b2c <ASPEP_TXframeProcess+0xac>
        {
          /* Required to keep the right sending order */
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44
        }
      else
      {
        /* nothing to do */
      }
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2202      	movs	r2, #2
 8000b32:	719a      	strb	r2, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	893a      	ldrh	r2, [r7, #8]
 8000b3a:	809a      	strh	r2, [r3, #4]
 8000b3c:	e021      	b.n	8000b82 <ASPEP_TXframeProcess+0x102>
#ifdef MCP_DEBUG_METRICS
        pHandle->lastRequestedAsyncBuff->PendingNumber++;
#endif
      }
      else if (MCTL_SYNC == dataType)
 8000b3e:	7afb      	ldrb	r3, [r7, #11]
 8000b40:	2b0a      	cmp	r3, #10
 8000b42:	d10f      	bne.n	8000b64 <ASPEP_TXframeProcess+0xe4>
      {
        if (pHandle -> syncBuffer.state != writeLock)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d002      	beq.n	8000b54 <ASPEP_TXframeProcess+0xd4>
        {
          result = ASPEP_BUFFER_ERROR;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	75fb      	strb	r3, [r7, #23]
 8000b52:	e016      	b.n	8000b82 <ASPEP_TXframeProcess+0x102>
        }
        else
        {
          pHandle->syncBuffer.state = pending;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2202      	movs	r2, #2
 8000b58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	893a      	ldrh	r2, [r7, #8]
 8000b60:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000b62:	e00e      	b.n	8000b82 <ASPEP_TXframeProcess+0x102>
        }
      }
      else if(ASPEP_CTRL == dataType)
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10b      	bne.n	8000b82 <ASPEP_TXframeProcess+0x102>
      {
        if (pHandle->ctrlBuffer.state != available)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <ASPEP_TXframeProcess+0xfa>
        {
          result = ASPEP_BUFFER_ERROR;
 8000b74:	2303      	movs	r3, #3
 8000b76:	75fb      	strb	r3, [r7, #23]
 8000b78:	e003      	b.n	8000b82 <ASPEP_TXframeProcess+0x102>
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      }
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d104      	bne.n	8000ba8 <ASPEP_HWDataTransmittedIT+0x1c>
    {
      pHandle->ctrlBuffer.state = available;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ba6:	e005      	b.n	8000bb4 <ASPEP_HWDataTransmittedIT+0x28>
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bac:	60fb      	str	r3, [r7, #12]
      tempBuff->state = available;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	719a      	strb	r2, [r3, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d112      	bne.n	8000be4 <ASPEP_HWDataTransmittedIT+0x58>
    {
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	649a      	str	r2, [r3, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6950      	ldr	r0, [r2, #20]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000bd8:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000be2:	e051      	b.n	8000c88 <ASPEP_HWDataTransmittedIT+0xfc>
    else if (pHandle->ctrlBuffer.state == pending)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d112      	bne.n	8000c14 <ASPEP_HWDataTransmittedIT+0x88>
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f103 0220 	add.w	r2, r3, #32
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	649a      	str	r2, [r3, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6950      	ldr	r0, [r2, #20]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	f102 0120 	add.w	r1, r2, #32
 8000c06:	2204      	movs	r2, #4
 8000c08:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000c12:	e039      	b.n	8000c88 <ASPEP_HWDataTransmittedIT+0xfc>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
      if (pHandle->asyncNextBuffer != NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d02e      	beq.n	8000c7e <ASPEP_HWDataTransmittedIT+0xf2>
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	649a      	str	r2, [r3, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6950      	ldr	r0, [r2, #20]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c3c:	6811      	ldr	r1, [r2, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c42:	8892      	ldrh	r2, [r2, #4]
 8000c44:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d004      	beq.n	8000c5a <ASPEP_HWDataTransmittedIT+0xce>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d10d      	bne.n	8000c76 <ASPEP_HWDataTransmittedIT+0xea>
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3330      	adds	r3, #48	; 0x30
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3338      	adds	r3, #56	; 0x38
 8000c64:	4413      	add	r3, r2
                          - (uint32_t) pHandle->asyncNextBuffer; //cstat !MISRAC2012-Rule-11.4
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6c52      	ldr	r2, [r2, #68]	; 0x44
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	60bb      	str	r3, [r7, #8]
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	645a      	str	r2, [r3, #68]	; 0x44
        {
 8000c74:	e006      	b.n	8000c84 <ASPEP_HWDataTransmittedIT+0xf8>
          pHandle->asyncNextBuffer = NULL;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c7c:	e002      	b.n	8000c84 <ASPEP_HWDataTransmittedIT+0xf8>
        pHandle->lockBuffer = NULL;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	649a      	str	r2, [r3, #72]	; 0x48
  __ASM volatile ("cpsie i" : : : "memory");
 8000c84:	b662      	cpsie	i
}
 8000c86:	bf00      	nop
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint8_t *result = NULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	331c      	adds	r3, #28
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
    uint16_t packetNumber;
    bool validCRCData = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	72fb      	strb	r3, [r7, #11]

    *packetLength = 0;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
    if (pHandle->NewPacketAvailable)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80d6 	beq.w	8000e6c <ASPEP_RXframeProcess+0x1dc>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d070      	beq.n	8000db4 <ASPEP_RXframeProcess+0x124>
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	f300 80b9 	bgt.w	8000e4a <ASPEP_RXframeProcess+0x1ba>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <ASPEP_RXframeProcess+0x52>
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d03f      	beq.n	8000d60 <ASPEP_RXframeProcess+0xd0>
          }
          break;
        }

        default:
          break;
 8000ce0:	e0b3      	b.n	8000e4a <ASPEP_RXframeProcess+0x1ba>
          if (BEACON == pHandle->rxPacketType)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d12b      	bne.n	8000d42 <ASPEP_RXframeProcess+0xb2>
            if (ASPEP_CheckBeacon(pHandle) == true)
 8000cea:	6938      	ldr	r0, [r7, #16]
 8000cec:	f7ff fdeb 	bl	80008c6 <ASPEP_CheckBeacon>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d01e      	beq.n	8000d34 <ASPEP_RXframeProcess+0xa4>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	015b      	lsls	r3, r3, #5
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	819a      	strh	r2, [r3, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	81da      	strh	r2, [r3, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	015b      	lsls	r3, r3, #5
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	336c      	adds	r3, #108	; 0x6c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f7ff fce7 	bl	800070e <ASPEP_sendBeacon>
          break;
 8000d40:	e085      	b.n	8000e4e <ASPEP_RXframeProcess+0x1be>
          else if (PING == pHandle->rxPacketType)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	f040 8081 	bne.w	8000e4e <ASPEP_RXframeProcess+0x1be>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	0b1b      	lsrs	r3, r3, #12
 8000d50:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000d52:	893b      	ldrh	r3, [r7, #8]
 8000d54:	461a      	mov	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	6938      	ldr	r0, [r7, #16]
 8000d5a:	f7ff fd21 	bl	80007a0 <ASPEP_sendPing>
          break;
 8000d5e:	e076      	b.n	8000e4e <ASPEP_RXframeProcess+0x1be>
          if (BEACON == pHandle->rxPacketType)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d113      	bne.n	8000d90 <ASPEP_RXframeProcess+0x100>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000d68:	6938      	ldr	r0, [r7, #16]
 8000d6a:	f7ff fdac 	bl	80008c6 <ASPEP_CheckBeacon>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f083 0301 	eor.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <ASPEP_RXframeProcess+0xf2>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	336c      	adds	r3, #108	; 0x6c
 8000d86:	4619      	mov	r1, r3
 8000d88:	6938      	ldr	r0, [r7, #16]
 8000d8a:	f7ff fcc0 	bl	800070e <ASPEP_sendBeacon>
          break;
 8000d8e:	e060      	b.n	8000e52 <ASPEP_RXframeProcess+0x1c2>
          else if (PING == pHandle->rxPacketType)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d15c      	bne.n	8000e52 <ASPEP_RXframeProcess+0x1c2>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	0b1b      	lsrs	r3, r3, #12
 8000d9c:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000d9e:	893b      	ldrh	r3, [r7, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2101      	movs	r1, #1
 8000da4:	6938      	ldr	r0, [r7, #16]
 8000da6:	f7ff fcfb 	bl	80007a0 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2202      	movs	r2, #2
 8000dae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
          break;
 8000db2:	e04e      	b.n	8000e52 <ASPEP_RXframeProcess+0x1c2>
          if (BEACON == pHandle->rxPacketType)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d118      	bne.n	8000dee <ASPEP_RXframeProcess+0x15e>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000dbc:	6938      	ldr	r0, [r7, #16]
 8000dbe:	f7ff fd82 	bl	80008c6 <ASPEP_CheckBeacon>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d004      	beq.n	8000dd8 <ASPEP_RXframeProcess+0x148>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000dd6:	e003      	b.n	8000de0 <ASPEP_RXframeProcess+0x150>
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	336c      	adds	r3, #108	; 0x6c
 8000de4:	4619      	mov	r1, r3
 8000de6:	6938      	ldr	r0, [r7, #16]
 8000de8:	f7ff fc91 	bl	800070e <ASPEP_sendBeacon>
          break;
 8000dec:	e033      	b.n	8000e56 <ASPEP_RXframeProcess+0x1c6>
          else if (PING == pHandle->rxPacketType)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d109      	bne.n	8000e0a <ASPEP_RXframeProcess+0x17a>
            packetNumber = pHandle->rxHeader[1];
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	7f5b      	ldrb	r3, [r3, #29]
 8000dfa:	813b      	strh	r3, [r7, #8]
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000dfc:	893b      	ldrh	r3, [r7, #8]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2101      	movs	r1, #1
 8000e02:	6938      	ldr	r0, [r7, #16]
 8000e04:	f7ff fccc 	bl	80007a0 <ASPEP_sendPing>
          break;
 8000e08:	e025      	b.n	8000e56 <ASPEP_RXframeProcess+0x1c6>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	d121      	bne.n	8000e56 <ASPEP_RXframeProcess+0x1c6>
            if (validCRCData)
 8000e12:	7afb      	ldrb	r3, [r7, #11]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d013      	beq.n	8000e40 <ASPEP_RXframeProcess+0x1b0>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	741a      	strb	r2, [r3, #16]
              *packetLength = pHandle->rxLength;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	801a      	strh	r2, [r3, #0]
              result = pHandle->rxBuffer;
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	617b      	str	r3, [r7, #20]
          break;
 8000e3e:	e00a      	b.n	8000e56 <ASPEP_RXframeProcess+0x1c6>
              ASPEP_sendNack (pHandle, ASPEP_BAD_CRC_DATA);
 8000e40:	2105      	movs	r1, #5
 8000e42:	6938      	ldr	r0, [r7, #16]
 8000e44:	f7ff fc8e 	bl	8000764 <ASPEP_sendNack>
          break;
 8000e48:	e005      	b.n	8000e56 <ASPEP_RXframeProcess+0x1c6>
          break;
 8000e4a:	bf00      	nop
 8000e4c:	e004      	b.n	8000e58 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000e4e:	bf00      	nop
 8000e50:	e002      	b.n	8000e58 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000e52:	bf00      	nop
 8000e54:	e000      	b.n	8000e58 <ASPEP_RXframeProcess+0x1c8>
          break;
 8000e56:	bf00      	nop
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	6950      	ldr	r0, [r2, #20]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	f102 011c 	add.w	r1, r2, #28
 8000e66:	2204      	movs	r2, #4
 8000e68:	4798      	blx	r3
 8000e6a:	e015      	b.n	8000e98 <ASPEP_RXframeProcess+0x208>
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d010      	beq.n	8000e98 <ASPEP_RXframeProcess+0x208>
    {
      ASPEP_sendNack(pHandle, pHandle->badPacketFlag);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6938      	ldr	r0, [r7, #16]
 8000e80:	f7ff fc70 	bl	8000764 <ASPEP_sendNack>
      /* ASPEP_RXframeProcess can be called before reception of another packet */
      pHandle->badPacketFlag = ASPEP_OK;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        * DMA will be configured to receive next packet as soon as HW IP RX line is free to receive new packet
        * It is important to note that we will detect only the NEXT free line transition, it means the next packet will
        * be lost but the end of this lost packet will generate the IDLE interrupt
        * the IDLE interrupt will call ASPEP_HWDMAReset (in charge of the IP_aspep driver to call it at the appropriate
        * time)*/
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	6952      	ldr	r2, [r2, #20]
 8000e94:	4610      	mov	r0, r2
 8000e96:	4798      	blx	r3
      /* Nothing to do, no response is due to the master */
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
 8000e98:	697b      	ldr	r3, [r7, #20]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000ea2:	b590      	push	{r4, r7, lr}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <ASPEP_HWDataReceivedIT+0x18>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d05f      	beq.n	8000f78 <ASPEP_HWDataReceivedIT+0xd6>
          * processed in ASPEP_RXframeProcess */
        break;
      }

      default:
        break;
 8000eb8:	e067      	b.n	8000f8a <ASPEP_HWDataReceivedIT+0xe8>
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	331c      	adds	r3, #28
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fbc5 	bl	8000650 <ASPEP_CheckHeaderCRC>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d04f      	beq.n	8000f6c <ASPEP_HWDataReceivedIT+0xca>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7f1b      	ldrb	r3, [r3, #28]
 8000ed0:	f003 020f 	and.w	r2, r3, #15
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	669a      	str	r2, [r3, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d802      	bhi.n	8000ee6 <ASPEP_HWDataReceivedIT+0x44>
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d239      	bcs.n	8000f58 <ASPEP_HWDataReceivedIT+0xb6>
 8000ee4:	e03d      	b.n	8000f62 <ASPEP_HWDataReceivedIT+0xc0>
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d13b      	bne.n	8000f62 <ASPEP_HWDataReceivedIT+0xc0>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	331c      	adds	r3, #28
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <ASPEP_HWDataReceivedIT+0x6c>
                pHandle->NewPacketAvailable = true;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
              break;
 8000f0c:	e033      	b.n	8000f76 <ASPEP_HWDataReceivedIT+0xd4>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d817      	bhi.n	8000f4e <ASPEP_HWDataReceivedIT+0xac>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6950      	ldr	r0, [r2, #20]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6994      	ldr	r4, [r2, #24]
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000f36:	b292      	uxth	r2, r2
 8000f38:	0052      	lsls	r2, r2, #1
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	440a      	add	r2, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	4621      	mov	r1, r4
 8000f42:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
              break;
 8000f4c:	e013      	b.n	8000f76 <ASPEP_HWDataReceivedIT+0xd4>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
              break;
 8000f56:	e00e      	b.n	8000f76 <ASPEP_HWDataReceivedIT+0xd4>
              pHandle->NewPacketAvailable = true;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
              break;
 8000f60:	e009      	b.n	8000f76 <ASPEP_HWDataReceivedIT+0xd4>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
              break;
 8000f6a:	e004      	b.n	8000f76 <ASPEP_HWDataReceivedIT+0xd4>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8000f74:	e009      	b.n	8000f8a <ASPEP_HWDataReceivedIT+0xe8>
 8000f76:	e008      	b.n	8000f8a <ASPEP_HWDataReceivedIT+0xe8>
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        pHandle->NewPacketAvailable = true;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        break;
 8000f88:	bf00      	nop
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}

08000f92 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6950      	ldr	r0, [r2, #20]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	f102 011c 	add.w	r1, r2, #28
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b089      	sub	sp, #36	; 0x24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	332c      	adds	r3, #44	; 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ea:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	40d3      	lsrs	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	211f      	movs	r1, #31
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 011f 	and.w	r1, r3, #31
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	431a      	orrs	r2, r3
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001160:	b480      	push	{r7}
 8001162:	b08d      	sub	sp, #52	; 0x34
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	330c      	adds	r3, #12
 8001170:	4619      	mov	r1, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800117c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	fa92 f2a2 	rbit	r2, r2
 8001184:	617a      	str	r2, [r7, #20]
  return result;
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	40d3      	lsrs	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011a0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011a4:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	fa91 f1a1 	rbit	r1, r1
 80011ac:	61f9      	str	r1, [r7, #28]
  return result;
 80011ae:	69f9      	ldr	r1, [r7, #28]
 80011b0:	fab1 f181 	clz	r1, r1
 80011b4:	b2c9      	uxtb	r1, r1
 80011b6:	40cb      	lsrs	r3, r1
 80011b8:	2107      	movs	r1, #7
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011c8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011cc:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d0:	fa91 f1a1 	rbit	r1, r1
 80011d4:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80011d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d8:	fab1 f181 	clz	r1, r1
 80011dc:	b2c9      	uxtb	r1, r1
 80011de:	40cb      	lsrs	r3, r1
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	431a      	orrs	r2, r3
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80011ec:	bf00      	nop
 80011ee:	3734      	adds	r7, #52	; 0x34
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LL_DMA_SetDataTransferDirection+0x44>)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001218:	4908      	ldr	r1, [pc, #32]	; (800123c <LL_DMA_SetDataTransferDirection+0x44>)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	440b      	add	r3, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	440b      	add	r3, r1
 8001226:	4619      	mov	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	0800f180 	.word	0x0800f180

08001240 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LL_DMA_SetMode+0x44>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001260:	4908      	ldr	r1, [pc, #32]	; (8001284 <LL_DMA_SetMode+0x44>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	440b      	add	r3, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	440b      	add	r3, r1
 800126e:	4619      	mov	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	0800f180 	.word	0x0800f180

08001288 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <LL_DMA_SetPeriphIncMode+0x44>)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <LL_DMA_SetPeriphIncMode+0x44>)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	440b      	add	r3, r1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	440b      	add	r3, r1
 80012b6:	4619      	mov	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	0800f180 	.word	0x0800f180

080012d0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LL_DMA_SetMemoryIncMode+0x44>)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012f0:	4908      	ldr	r1, [pc, #32]	; (8001314 <LL_DMA_SetMemoryIncMode+0x44>)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	440b      	add	r3, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	440b      	add	r3, r1
 80012fe:	4619      	mov	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0800f180 	.word	0x0800f180

08001318 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <LL_DMA_SetPeriphSize+0x44>)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001338:	4908      	ldr	r1, [pc, #32]	; (800135c <LL_DMA_SetPeriphSize+0x44>)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	440b      	add	r3, r1
 8001346:	4619      	mov	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	0800f180 	.word	0x0800f180

08001360 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LL_DMA_SetMemorySize+0x44>)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001380:	4908      	ldr	r1, [pc, #32]	; (80013a4 <LL_DMA_SetMemorySize+0x44>)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	440b      	add	r3, r1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	440b      	add	r3, r1
 800138e:	4619      	mov	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	0800f180 	.word	0x0800f180

080013a8 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LL_DMA_SetStreamPriorityLevel+0x44>)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013c8:	4908      	ldr	r1, [pc, #32]	; (80013ec <LL_DMA_SetStreamPriorityLevel+0x44>)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	440b      	add	r3, r1
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	440b      	add	r3, r1
 80013d6:	4619      	mov	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	0800f180 	.word	0x0800f180

080013f0 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LL_DMA_SetChannelSelection+0x44>)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 52f0 	bic.w	r2, r3, #503316480	; 0x1e000000
 8001410:	4908      	ldr	r1, [pc, #32]	; (8001434 <LL_DMA_SetChannelSelection+0x44>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	440b      	add	r3, r1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	440b      	add	r3, r1
 800141e:	4619      	mov	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	0800f180 	.word	0x0800f180

08001438 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <LL_DMA_DisableFifoMode+0x3c>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <LL_DMA_DisableFifoMode+0x3c>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	440a      	add	r2, r1
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	440a      	add	r2, r1
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6153      	str	r3, [r2, #20]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	0800f180 	.word	0x0800f180

08001478 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <LL_RCC_HSI_Enable+0x1c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <LL_RCC_HSI_Enable+0x1c>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <LL_RCC_HSI_IsReady+0x20>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40023800 	.word	0x40023800

080014bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <LL_RCC_SetSysClkSource+0x24>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 0203 	bic.w	r2, r3, #3
 80014f8:	4904      	ldr	r1, [pc, #16]	; (800150c <LL_RCC_SetSysClkSource+0x24>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800

08001510 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LL_RCC_GetSysClkSource+0x18>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	4904      	ldr	r1, [pc, #16]	; (8001550 <LL_RCC_SetAHBPrescaler+0x24>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40023800 	.word	0x40023800

08001554 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40023800 	.word	0x40023800

0800157c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40023800 	.word	0x40023800

080015a4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <LL_RCC_SetTIMPrescaler+0x28>)
 80015ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015b6:	4905      	ldr	r1, [pc, #20]	; (80015cc <LL_RCC_SetTIMPrescaler+0x28>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40023800 	.word	0x40023800

080015d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <LL_RCC_PLL_Enable+0x1c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <LL_RCC_PLL_Enable+0x1c>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <LL_RCC_PLL_IsReady+0x24>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800162c:	4013      	ands	r3, r2
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4311      	orrs	r1, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	0192      	lsls	r2, r2, #6
 8001638:	430a      	orrs	r2, r1
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40023800 	.word	0x40023800
 8001660:	ffbf8000 	.word	0xffbf8000

08001664 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800166e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800

08001694 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800169e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40023800 	.word	0x40023800

080016c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 0207 	bic.w	r2, r3, #7
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40023c00 	.word	0x40023c00

080016ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <LL_FLASH_GetLatency+0x18>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001718:	4904      	ldr	r1, [pc, #16]	; (800172c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40007000 	.word	0x40007000

08001730 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000

08001758 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d01c      	beq.n	80017c2 <LL_TIM_OC_DisableFast+0x4a>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d017      	beq.n	80017be <LL_TIM_OC_DisableFast+0x46>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b10      	cmp	r3, #16
 8001792:	d012      	beq.n	80017ba <LL_TIM_OC_DisableFast+0x42>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2b40      	cmp	r3, #64	; 0x40
 8001798:	d00d      	beq.n	80017b6 <LL_TIM_OC_DisableFast+0x3e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d007      	beq.n	80017b2 <LL_TIM_OC_DisableFast+0x3a>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d101      	bne.n	80017ae <LL_TIM_OC_DisableFast+0x36>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e00a      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e008      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_TIM_OC_DisableFast+0x4c>
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3318      	adds	r3, #24
 80017ca:	4619      	mov	r1, r3
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LL_TIM_OC_DisableFast+0x84>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	440b      	add	r3, r1
 80017d4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	4908      	ldr	r1, [pc, #32]	; (8001800 <LL_TIM_OC_DisableFast+0x88>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2304      	movs	r3, #4
 80017e4:	408b      	lsls	r3, r1
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	601a      	str	r2, [r3, #0]

}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	0800f188 	.word	0x0800f188
 8001800:	0800f190 	.word	0x0800f190

08001804 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d01c      	beq.n	800184e <LL_TIM_OC_EnablePreload+0x4a>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b04      	cmp	r3, #4
 8001818:	d017      	beq.n	800184a <LL_TIM_OC_EnablePreload+0x46>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d012      	beq.n	8001846 <LL_TIM_OC_EnablePreload+0x42>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d00d      	beq.n	8001842 <LL_TIM_OC_EnablePreload+0x3e>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182c:	d007      	beq.n	800183e <LL_TIM_OC_EnablePreload+0x3a>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001834:	d101      	bne.n	800183a <LL_TIM_OC_EnablePreload+0x36>
 8001836:	2305      	movs	r3, #5
 8001838:	e00a      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 800183a:	2306      	movs	r3, #6
 800183c:	e008      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_TIM_OC_EnablePreload+0x4c>
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3318      	adds	r3, #24
 8001856:	4619      	mov	r1, r3
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LL_TIM_OC_EnablePreload+0x80>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	440b      	add	r3, r1
 8001860:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <LL_TIM_OC_EnablePreload+0x84>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	4619      	mov	r1, r3
 800186e:	2308      	movs	r3, #8
 8001870:	408b      	lsls	r3, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	0800f188 	.word	0x0800f188
 8001888:	0800f190 	.word	0x0800f190

0800188c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	605a      	str	r2, [r3, #4]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_TIM_SetSlaveMode>:
  *         @arg @ref LL_TIM_SLAVEMODE_GATED
  *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 0207 	bic.w	r2, r3, #7
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_TIM_SetTriggerInput>:
  *         @arg @ref LL_TIM_TS_TI2FP2
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60da      	str	r2, [r3, #12]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60da      	str	r2, [r3, #12]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	615a      	str	r2, [r3, #20]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f005 fde2 	bl	8007594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f826 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f000 fbd8 	bl	8002188 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d8:	f000 fbbe 	bl	8002158 <MX_DMA_Init>
  MX_ADC1_Init();
 80019dc:	f000 f874 	bl	8001ac8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019e0:	f000 fa34 	bl	8001e4c <MX_TIM1_Init>
  MX_DFSDM2_Init();
 80019e4:	f000 f906 	bl	8001bf4 <MX_DFSDM2_Init>
  MX_USART6_UART_Init();
 80019e8:	f000 fb64 	bl	80020b4 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80019ec:	f000 f8fa 	bl	8001be4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_MotorControl_Init();
 80019f0:	f002 f8ba 	bl	8003b68 <MX_MotorControl_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  printf("hello");
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <main+0x4c>)
 80019f6:	f00c fb9d 	bl	800e134 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <main+0x50>)
 8001a00:	f006 fb6a 	bl	80080d8 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8001a04:	2108      	movs	r1, #8
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <main+0x54>)
 8001a08:	f006 fb66 	bl	80080d8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f005 fe33 	bl	8007678 <HAL_Delay>
	  printf("hello");
 8001a12:	e7ef      	b.n	80019f4 <main+0x2c>
 8001a14:	0800f068 	.word	0x0800f068
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fe4d 	bl	80016c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff fe5e 	bl	80016ec <LL_FLASH_GetLatency>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d1fa      	bne.n	8001a2c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a36:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001a3a:	f7ff fe65 	bl	8001708 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a3e:	2010      	movs	r0, #16
 8001a40:	f7ff fd3c 	bl	80014bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001a44:	f7ff fd18 	bl	8001478 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a48:	bf00      	nop
 8001a4a:	f7ff fd25 	bl	8001498 <LL_RCC_HSI_IsReady>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d1fa      	bne.n	8001a4a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 200, LL_RCC_PLLP_DIV_2);
 8001a54:	2300      	movs	r3, #0
 8001a56:	22c8      	movs	r2, #200	; 0xc8
 8001a58:	2110      	movs	r1, #16
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fddc 	bl	8001618 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a60:	f7ff fdb6 	bl	80015d0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a64:	bf00      	nop
 8001a66:	f7ff fdc3 	bl	80015f0 <LL_RCC_PLL_IsReady>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d1fa      	bne.n	8001a66 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001a70:	bf00      	nop
 8001a72:	f7ff fe5d 	bl	8001730 <LL_PWR_IsActiveFlag_VOS>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0fa      	beq.n	8001a72 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fd55 	bl	800152c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001a82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a86:	f7ff fd65 	bl	8001554 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fd76 	bl	800157c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f7ff fd29 	bl	80014e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a96:	bf00      	nop
 8001a98:	f7ff fd3a 	bl	8001510 <LL_RCC_GetSysClkSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d1fa      	bne.n	8001a98 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(100000000);
 8001aa2:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <SystemClock_Config+0xa4>)
 8001aa4:	f007 fcfa 	bl	800949c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	f005 fd95 	bl	80075d8 <HAL_InitTick>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ab4:	f000 fbec 	bl	8002290 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fd73 	bl	80015a4 <LL_RCC_SetTIMPrescaler>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	05f5e100 	.word	0x05f5e100

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	; 0x40
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001afe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b02:	f7ff fdc7 	bl	8001694 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b06:	2004      	movs	r0, #4
 8001b08:	f7ff fdac 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fda9 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b12:	2002      	movs	r0, #2
 8001b14:	f7ff fda6 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <MX_ADC1_Init+0x108>)
 8001b2a:	f006 fcc6 	bl	80084ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001b2e:	23ff      	movs	r3, #255	; 0xff
 8001b30:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b32:	2303      	movs	r3, #3
 8001b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <MX_ADC1_Init+0x10c>)
 8001b40:	f006 fcbb 	bl	80084ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001b44:	2303      	movs	r3, #3
 8001b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <MX_ADC1_Init+0x110>)
 8001b56:	f006 fcb0 	bl	80084ba <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	481b      	ldr	r0, [pc, #108]	; (8001bdc <MX_ADC1_Init+0x114>)
 8001b6e:	f006 fb31 	bl	80081d4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4813      	ldr	r0, [pc, #76]	; (8001bdc <MX_ADC1_Init+0x114>)
 8001b8e:	f006 fb4d 	bl	800822c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b96:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_ADC1_Init+0x114>)
 8001b98:	f7ff facf 	bl	800113a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_ADC1_Init+0x118>)
 8001baa:	f006 faf5 	bl	8008198 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <MX_ADC1_Init+0x114>)
 8001bb8:	f7ff fa89 	bl	80010ce <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <MX_ADC1_Init+0x114>)
 8001bc4:	f7ff facc 	bl	8001160 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3740      	adds	r7, #64	; 0x40
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40012300 	.word	0x40012300

08001be4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8001be8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bec:	f7ff fd3a 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END CRC_Init 1 */
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_filter0.Instance = DFSDM2_Filter0;
 8001bf8:	4b86      	ldr	r3, [pc, #536]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001bfa:	4a87      	ldr	r2, [pc, #540]	; (8001e18 <MX_DFSDM2_Init+0x224>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter0.Init.RegularParam.FastMode = DISABLE;
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter0.Init.RegularParam.DmaMode = DISABLE;
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001c10:	4b80      	ldr	r3, [pc, #512]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c12:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c16:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter0.Init.FilterParam.Oversampling = 256;
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1e:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter0.Init.FilterParam.IntOversampling = 1;
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter0) != HAL_OK)
 8001c26:	487b      	ldr	r0, [pc, #492]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001c28:	f005 ff2c 	bl	8007a84 <HAL_DFSDM_FilterInit>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_DFSDM2_Init+0x42>
  {
    Error_Handler();
 8001c32:	f000 fb2d 	bl	8002290 <Error_Handler>
  }
  hdfsdm2_filter1.Instance = DFSDM2_Filter1;
 8001c36:	4b79      	ldr	r3, [pc, #484]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c38:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <MX_DFSDM2_Init+0x22c>)
 8001c3a:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001c3c:	4b77      	ldr	r3, [pc, #476]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter1.Init.RegularParam.FastMode = DISABLE;
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter1.Init.RegularParam.DmaMode = DISABLE;
 8001c48:	4b74      	ldr	r3, [pc, #464]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c50:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c54:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter1.Init.FilterParam.Oversampling = 256;
 8001c56:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5c:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter1.Init.FilterParam.IntOversampling = 1;
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter1) != HAL_OK)
 8001c64:	486d      	ldr	r0, [pc, #436]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001c66:	f005 ff0d 	bl	8007a84 <HAL_DFSDM_FilterInit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_DFSDM2_Init+0x80>
  {
    Error_Handler();
 8001c70:	f000 fb0e 	bl	8002290 <Error_Handler>
  }
  hdfsdm2_filter2.Instance = DFSDM2_Filter2;
 8001c74:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c76:	4a6c      	ldr	r2, [pc, #432]	; (8001e28 <MX_DFSDM2_Init+0x234>)
 8001c78:	601a      	str	r2, [r3, #0]
  hdfsdm2_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001c7a:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hdfsdm2_filter2.Init.RegularParam.FastMode = DISABLE;
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	721a      	strb	r2, [r3, #8]
  hdfsdm2_filter2.Init.RegularParam.DmaMode = DISABLE;
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	725a      	strb	r2, [r3, #9]
  hdfsdm2_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c8e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c92:	61da      	str	r2, [r3, #28]
  hdfsdm2_filter2.Init.FilterParam.Oversampling = 256;
 8001c94:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	621a      	str	r2, [r3, #32]
  hdfsdm2_filter2.Init.FilterParam.IntOversampling = 1;
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm2_filter2) != HAL_OK)
 8001ca2:	4860      	ldr	r0, [pc, #384]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001ca4:	f005 feee 	bl	8007a84 <HAL_DFSDM_FilterInit>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_DFSDM2_Init+0xbe>
  {
    Error_Handler();
 8001cae:	f000 faef 	bl	8002290 <Error_Handler>
  }
  hdfsdm2_channel0.Instance = DFSDM2_Channel0;
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cb4:	4a5e      	ldr	r2, [pc, #376]	; (8001e30 <MX_DFSDM2_Init+0x23c>)
 8001cb6:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel0.Init.OutputClock.Activation = ENABLE;
 8001cb8:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel0.Init.OutputClock.Divider = 11;
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cc6:	220b      	movs	r2, #11
 8001cc8:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001cd0:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001cd6:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cdc:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001cea:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel0.Init.Awd.Oversampling = 1;
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel0.Init.Offset = 0;
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel0.Init.RightBitShift = 0x00;
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel0) != HAL_OK)
 8001d02:	484a      	ldr	r0, [pc, #296]	; (8001e2c <MX_DFSDM2_Init+0x238>)
 8001d04:	f005 fdce 	bl	80078a4 <HAL_DFSDM_ChannelInit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_DFSDM2_Init+0x11e>
  {
    Error_Handler();
 8001d0e:	f000 fabf 	bl	8002290 <Error_Handler>
  }
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001d12:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <MX_DFSDM2_Init+0x244>)
 8001d16:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001d1e:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 11;
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d26:	220b      	movs	r2, #11
 8001d28:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001d2a:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8001d50:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001d5c:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8001d62:	4834      	ldr	r0, [pc, #208]	; (8001e34 <MX_DFSDM2_Init+0x240>)
 8001d64:	f005 fd9e 	bl	80078a4 <HAL_DFSDM_ChannelInit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_DFSDM2_Init+0x17e>
  {
    Error_Handler();
 8001d6e:	f000 fa8f 	bl	8002290 <Error_Handler>
  }
  hdfsdm2_channel2.Instance = DFSDM2_Channel2;
 8001d72:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d74:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <MX_DFSDM2_Init+0x24c>)
 8001d76:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel2.Init.OutputClock.Activation = ENABLE;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel2.Init.OutputClock.Divider = 11;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d86:	220b      	movs	r2, #11
 8001d88:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001da6:	2204      	movs	r2, #4
 8001da8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel2.Init.Awd.Oversampling = 1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel2.Init.Offset = 0;
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel2.Init.RightBitShift = 0x00;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel2) != HAL_OK)
 8001dc2:	481e      	ldr	r0, [pc, #120]	; (8001e3c <MX_DFSDM2_Init+0x248>)
 8001dc4:	f005 fd6e 	bl	80078a4 <HAL_DFSDM_ChannelInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_DFSDM2_Init+0x1de>
  {
    Error_Handler();
 8001dce:	f000 fa5f 	bl	8002290 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <MX_DFSDM2_Init+0x220>)
 8001dd8:	f005 ff40 	bl	8007c5c <HAL_DFSDM_FilterConfigRegChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_DFSDM2_Init+0x1f2>
  {
    Error_Handler();
 8001de2:	f000 fa55 	bl	8002290 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001de6:	2201      	movs	r2, #1
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <MX_DFSDM2_Init+0x250>)
 8001dea:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_DFSDM2_Init+0x228>)
 8001dec:	f005 ff36 	bl	8007c5c <HAL_DFSDM_FilterConfigRegChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_DFSDM2_Init+0x206>
  {
    Error_Handler();
 8001df6:	f000 fa4b 	bl	8002290 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm2_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4912      	ldr	r1, [pc, #72]	; (8001e48 <MX_DFSDM2_Init+0x254>)
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <MX_DFSDM2_Init+0x230>)
 8001e00:	f005 ff2c 	bl	8007c5c <HAL_DFSDM_FilterConfigRegChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_DFSDM2_Init+0x21a>
  {
    Error_Handler();
 8001e0a:	f000 fa41 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000648 	.word	0x20000648
 8001e18:	40016500 	.word	0x40016500
 8001e1c:	2000069c 	.word	0x2000069c
 8001e20:	40016580 	.word	0x40016580
 8001e24:	200006f0 	.word	0x200006f0
 8001e28:	40016600 	.word	0x40016600
 8001e2c:	20000744 	.word	0x20000744
 8001e30:	40016400 	.word	0x40016400
 8001e34:	2000077c 	.word	0x2000077c
 8001e38:	40016420 	.word	0x40016420
 8001e3c:	200007b4 	.word	0x200007b4
 8001e40:	40016440 	.word	0x40016440
 8001e44:	00010002 	.word	0x00010002
 8001e48:	00020004 	.word	0x00020004

08001e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b09a      	sub	sp, #104	; 0x68
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e66:	2220      	movs	r2, #32
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00c f95a 	bl	800e124 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff fbfe 	bl	8001694 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff fbe3 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB12   ------> TIM1_BKIN
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4879      	ldr	r0, [pc, #484]	; (80020a4 <MX_TIM1_Init+0x258>)
 8001ebe:	f006 fafc 	bl	80084ba <LL_GPIO_Init>

  /* TIM1 DMA Init */

  /* TIM1_CH1_CH2_CH3 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2106      	movs	r1, #6
 8001ec6:	4878      	ldr	r0, [pc, #480]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001ec8:	f7ff fa92 	bl	80013f0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001ecc:	2240      	movs	r2, #64	; 0x40
 8001ece:	2106      	movs	r1, #6
 8001ed0:	4875      	ldr	r0, [pc, #468]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001ed2:	f7ff f991 	bl	80011f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_HIGH);
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	2106      	movs	r1, #6
 8001edc:	4872      	ldr	r0, [pc, #456]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001ede:	f7ff fa63 	bl	80013a8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2106      	movs	r1, #6
 8001ee6:	4870      	ldr	r0, [pc, #448]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001ee8:	f7ff f9aa 	bl	8001240 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2106      	movs	r1, #6
 8001ef0:	486d      	ldr	r0, [pc, #436]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001ef2:	f7ff f9c9 	bl	8001288 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efa:	2106      	movs	r1, #6
 8001efc:	486a      	ldr	r0, [pc, #424]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001efe:	f7ff f9e7 	bl	80012d0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_HALFWORD);
 8001f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f06:	2106      	movs	r1, #6
 8001f08:	4867      	ldr	r0, [pc, #412]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001f0a:	f7ff fa05 	bl	8001318 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_HALFWORD);
 8001f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f12:	2106      	movs	r1, #6
 8001f14:	4864      	ldr	r0, [pc, #400]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001f16:	f7ff fa23 	bl	8001360 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8001f1a:	2106      	movs	r1, #6
 8001f1c:	4862      	ldr	r0, [pc, #392]	; (80020a8 <MX_TIM1_Init+0x25c>)
 8001f1e:	f7ff fa8b 	bl	8001438 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8001f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f3e:	4619      	mov	r1, r3
 8001f40:	485a      	ldr	r0, [pc, #360]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f42:	f006 fcd9 	bl	80088f8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001f46:	4859      	ldr	r0, [pc, #356]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f48:	f7ff fc06 	bl	8001758 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4857      	ldr	r0, [pc, #348]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f50:	f7ff fc58 	bl	8001804 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f54:	2360      	movs	r3, #96	; 0x60
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001f74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	484b      	ldr	r0, [pc, #300]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f7e:	f006 fd55 	bl	8008a2c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001f82:	2101      	movs	r1, #1
 8001f84:	4849      	ldr	r0, [pc, #292]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f86:	f7ff fbf7 	bl	8001778 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	4847      	ldr	r0, [pc, #284]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f8e:	f7ff fc39 	bl	8001804 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001f92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f96:	461a      	mov	r2, r3
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4844      	ldr	r0, [pc, #272]	; (80020ac <MX_TIM1_Init+0x260>)
 8001f9c:	f006 fd46 	bl	8008a2c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	4842      	ldr	r0, [pc, #264]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fa4:	f7ff fbe8 	bl	8001778 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	483f      	ldr	r0, [pc, #252]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fae:	f7ff fc29 	bl	8001804 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001fb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	483b      	ldr	r0, [pc, #236]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fbe:	f006 fd35 	bl	8008a2c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8001fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc6:	4839      	ldr	r0, [pc, #228]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fc8:	f7ff fbd6 	bl	8001778 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	4836      	ldr	r0, [pc, #216]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fd2:	f7ff fc17 	bl	8001804 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	4832      	ldr	r0, [pc, #200]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fe2:	f006 fd23 	bl	8008a2c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8001fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fea:	4830      	ldr	r0, [pc, #192]	; (80020ac <MX_TIM1_Init+0x260>)
 8001fec:	f7ff fbc4 	bl	8001778 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR1);
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	482e      	ldr	r0, [pc, #184]	; (80020ac <MX_TIM1_Init+0x260>)
 8001ff4:	f7ff fc70 	bl	80018d8 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	482c      	ldr	r0, [pc, #176]	; (80020ac <MX_TIM1_Init+0x260>)
 8001ffc:	f7ff fc59 	bl	80018b2 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8002000:	482a      	ldr	r0, [pc, #168]	; (80020ac <MX_TIM1_Init+0x260>)
 8002002:	f7ff fc8c 	bl	800191e <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8002006:	4829      	ldr	r0, [pc, #164]	; (80020ac <MX_TIM1_Init+0x260>)
 8002008:	f7ff fc99 	bl	800193e <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800200c:	2100      	movs	r1, #0
 800200e:	4827      	ldr	r0, [pc, #156]	; (80020ac <MX_TIM1_Init+0x260>)
 8002010:	f7ff fc3c 	bl	800188c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002014:	4825      	ldr	r0, [pc, #148]	; (80020ac <MX_TIM1_Init+0x260>)
 8002016:	f7ff fc72 	bl	80018fe <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	481a      	ldr	r0, [pc, #104]	; (80020ac <MX_TIM1_Init+0x260>)
 8002044:	f006 fd33 	bl	8008aae <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002048:	2002      	movs	r0, #2
 800204a:	f7ff fb0b 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff fb08 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  PB15   ------> TIM1_CH3N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002054:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800205a:	2302      	movs	r3, #2
 800205c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_TIM1_Init+0x258>)
 8002074:	f006 fa21 	bl	80084ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002078:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800207c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800207e:	2302      	movs	r3, #2
 8002080:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_TIM1_Init+0x264>)
 8002098:	f006 fa0f 	bl	80084ba <LL_GPIO_Init>

}
 800209c:	bf00      	nop
 800209e:	3768      	adds	r7, #104	; 0x68
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40026400 	.word	0x40026400
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40020000 	.word	0x40020000

080020b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08e      	sub	sp, #56	; 0x38
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80020de:	2020      	movs	r0, #32
 80020e0:	f7ff fad8 	bl	8001694 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fabd 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80020ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020f0:	2302      	movs	r3, #2
 80020f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002100:	2308      	movs	r3, #8
 8002102:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4810      	ldr	r0, [pc, #64]	; (800214c <MX_USART6_UART_Init+0x98>)
 800210a:	f006 f9d6 	bl	80084ba <LL_GPIO_Init>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 12500000;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_USART6_UART_Init+0x9c>)
 8002110:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800211e:	230c      	movs	r3, #12
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4808      	ldr	r0, [pc, #32]	; (8002154 <MX_USART6_UART_Init+0xa0>)
 8002134:	f007 f90e 	bl	8009354 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <MX_USART6_UART_Init+0xa0>)
 800213a:	f7ff fc20 	bl	800197e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART6_UART_Init+0xa0>)
 8002140:	f7ff fc0d 	bl	800195e <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3738      	adds	r7, #56	; 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020000 	.word	0x40020000
 8002150:	00bebc20 	.word	0x00bebc20
 8002154:	40011400 	.word	0x40011400

08002158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800215c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002160:	f7ff fa80 	bl	8001664 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002164:	f7fe ff2a 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8002168:	4603      	mov	r3, r0
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ff7a 	bl	8001068 <NVIC_EncodePriority>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	2045      	movs	r0, #69	; 0x45
 800217a:	f7fe ff4b 	bl	8001014 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800217e:	2045      	movs	r0, #69	; 0x45
 8002180:	f7fe ff2a 	bl	8000fd8 <__NVIC_EnableIRQ>

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800219e:	2004      	movs	r0, #4
 80021a0:	f7ff fa60 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7ff fa5d 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021aa:	2002      	movs	r0, #2
 80021ac:	f7ff fa5a 	bl	8001664 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80021b0:	2008      	movs	r0, #8
 80021b2:	f7ff fa57 	bl	8001664 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_8);
 80021b6:	f242 110c 	movw	r1, #8460	; 0x210c
 80021ba:	4832      	ldr	r0, [pc, #200]	; (8002284 <MX_GPIO_Init+0xfc>)
 80021bc:	f7ff fbf5 	bl	80019aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_8);
 80021c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c4:	4830      	ldr	r0, [pc, #192]	; (8002288 <MX_GPIO_Init+0x100>)
 80021c6:	f7ff fbf0 	bl	80019aa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_8;
 80021ca:	f242 130c 	movw	r3, #8460	; 0x210c
 80021ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021d0:	2301      	movs	r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	463b      	mov	r3, r7
 80021e2:	4619      	mov	r1, r3
 80021e4:	4827      	ldr	r0, [pc, #156]	; (8002284 <MX_GPIO_Init+0xfc>)
 80021e6:	f006 f968 	bl	80084ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021ee:	2302      	movs	r3, #2
 80021f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021fe:	2302      	movs	r3, #2
 8002200:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	463b      	mov	r3, r7
 8002204:	4619      	mov	r1, r3
 8002206:	481f      	ldr	r0, [pc, #124]	; (8002284 <MX_GPIO_Init+0xfc>)
 8002208:	f006 f957 	bl	80084ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800220c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002210:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	463b      	mov	r3, r7
 800221c:	4619      	mov	r1, r3
 800221e:	4819      	ldr	r0, [pc, #100]	; (8002284 <MX_GPIO_Init+0xfc>)
 8002220:	f006 f94b 	bl	80084ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002224:	2304      	movs	r3, #4
 8002226:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002230:	463b      	mov	r3, r7
 8002232:	4619      	mov	r1, r3
 8002234:	4815      	ldr	r0, [pc, #84]	; (800228c <MX_GPIO_Init+0x104>)
 8002236:	f006 f940 	bl	80084ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800223a:	2340      	movs	r3, #64	; 0x40
 800223c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800223e:	2302      	movs	r3, #2
 8002240:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800224e:	2302      	movs	r3, #2
 8002250:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	463b      	mov	r3, r7
 8002254:	4619      	mov	r1, r3
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_GPIO_Init+0x100>)
 8002258:	f006 f92f 	bl	80084ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800225c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002260:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002262:	2301      	movs	r3, #1
 8002264:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	463b      	mov	r3, r7
 8002274:	4619      	mov	r1, r3
 8002276:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_GPIO_Init+0x100>)
 8002278:	f006 f91f 	bl	80084ba <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40020800 	.word	0x40020800
 8002288:	40020400 	.word	0x40020400
 800228c:	40020c00 	.word	0x40020c00

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	e7fe      	b.n	8002298 <Error_Handler+0x8>

0800229a <MC_ProfilerCommand>:

/**
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	4603      	mov	r3, r0
 80022a6:	81fb      	strh	r3, [r7, #14]
 80022a8:	4613      	mov	r3, r2
 80022aa:	81bb      	strh	r3, [r7, #12]
  return MCP_CMD_UNKNOWN;
 80022ac:	2302      	movs	r3, #2
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <MC_APP_BootHook>:
 *
 *
 *
 */
__weak void MC_APP_BootHook(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <MC_APP_PostMediumFrequencyHook_M1>:
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
   */

/* USER SECTION BEGIN PostMediumFrequencyHookM1 */

/* USER SECTION END PostMediumFrequencyHookM1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWMC_Handle_t *pPWMHandle )
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pSTC = pSTC;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	601a      	str	r2, [r3, #0]
    pHandle->pFOCVars = pFOCVars;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	605a      	str	r2, [r3, #4]
    pHandle->pPWM = pPWMHandle;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalSpeed = 0;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	81da      	strh	r2, [r3, #14]
    pHandle->hFinalTorque = 0;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	821a      	strh	r2, [r3, #16]
    pHandle->hDurationms = 0;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	779a      	strb	r2, [r3, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	761a      	strb	r2, [r3, #24]
    pHandle->State = IDLE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	765a      	strb	r2, [r3, #25]
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	835a      	strh	r2, [r3, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	839a      	strh	r2, [r3, #28]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	81da      	strh	r2, [r3, #14]
    pHandle->hDurationms = hDurationms;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	883a      	ldrh	r2, [r7, #0]
 8002358:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	77da      	strb	r2, [r3, #31]

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	807b      	strh	r3, [r7, #2]
 800237e:	4613      	mov	r3, r2
 8002380:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	731a      	strb	r2, [r3, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	821a      	strh	r2, [r3, #16]
    pHandle->hDurationms = hDurationms;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	883a      	ldrh	r2, [r7, #0]
 8002392:	82da      	strh	r2, [r3, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	77da      	strb	r2, [r3, #31]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	731a      	strb	r2, [r3, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80023bc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	825a      	strh	r2, [r3, #18]
    pHandle->Iqdref.d = Iqdref.d;
 80023c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	829a      	strh	r2, [r3, #20]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	779a      	strb	r2, [r3, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	77da      	strb	r2, [r3, #31]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  bool RetVal;

  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f8f6 	bl	80025de <MCI_GetSTMState>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <MCI_StartMotor+0x3e>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f8fc 	bl	80025f6 <MCI_GetOccurredFaults>
 80023fe:	4603      	mov	r3, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10e      	bne.n	8002422 <MCI_StartMotor+0x3e>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f902 	bl	800260e <MCI_GetCurrentFaults>
 800240a:	4603      	mov	r3, r0
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800240c:	2b00      	cmp	r3, #0
 800240e:	d108      	bne.n	8002422 <MCI_StartMotor+0x3e>
  {
    pHandle->DirectCommand = MCI_START;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	761a      	strb	r2, [r3, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	779a      	strb	r2, [r3, #30]
    RetVal = true;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <MCI_StartMotor+0x42>
  }
  else
  {
    /* reject the command as the condition are not met */
    RetVal = false;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  }

  return (RetVal);
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor(MCI_Handle_t * pHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  bool RetVal;
  bool status;
  MCI_State_t State;

  State = MCI_GetSTMState(pHandle);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8d0 	bl	80025de <MCI_GetSTMState>
 800243e:	4603      	mov	r3, r0
 8002440:	737b      	strb	r3, [r7, #13]
  if (IDLE == State  || ICLWAIT == State)
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <MCI_StopMotor+0x1e>
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d102      	bne.n	8002454 <MCI_StopMotor+0x24>
  {
    status = false;
 800244e:	2300      	movs	r3, #0
 8002450:	73bb      	strb	r3, [r7, #14]
 8002452:	e001      	b.n	8002458 <MCI_StopMotor+0x28>
  }
  else
  {
    status = true;
 8002454:	2301      	movs	r3, #1
 8002456:	73bb      	strb	r3, [r7, #14]
  }

  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8cc 	bl	80025f6 <MCI_GetOccurredFaults>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10e      	bne.n	8002482 <MCI_StopMotor+0x52>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8d2 	bl	800260e <MCI_GetCurrentFaults>
 800246a:	4603      	mov	r3, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <MCI_StopMotor+0x52>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002470:	7bbb      	ldrb	r3, [r7, #14]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <MCI_StopMotor+0x52>
       status == true )
  {
    pHandle->DirectCommand = MCI_STOP;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2205      	movs	r2, #5
 800247a:	761a      	strb	r2, [r3, #24]
    RetVal = true;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e001      	b.n	8002486 <MCI_StopMotor+0x56>
  }
  else
  {
    /* reject the command as the condition are not met */
    RetVal = false;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  }

  return (RetVal);
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  bool RetVal;

  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8a0 	bl	80025de <MCI_GetSTMState>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b0b      	cmp	r3, #11
 80024a2:	d10e      	bne.n	80024c2 <MCI_FaultAcknowledged+0x32>
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8b2 	bl	800260e <MCI_GetCurrentFaults>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <MCI_FaultAcknowledged+0x32>
  {
    pHandle->PastFaults = MC_NO_FAULTS;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	839a      	strh	r2, [r3, #28]
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	761a      	strb	r2, [r3, #24]
    RetVal = true;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e001      	b.n	80024c6 <MCI_FaultAcknowledged+0x36>
  }
  else
  {
    /* reject the command as the conditions are not met */
    RetVal = false;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  }
  return (RetVal);
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <MCI_FaultProcessing>:
 * @param hSetErrors Bit field reporting faults currently present
 * @param hResetErrors Bit field reporting faults to be cleared
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	803b      	strh	r3, [r7, #0]
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8b5a      	ldrh	r2, [r3, #26]
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4013      	ands	r3, r2
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	835a      	strh	r2, [r3, #26]
  pHandle->PastFaults |= hSetErrors;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8b9a      	ldrh	r2, [r3, #28]
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	4313      	orrs	r3, r2
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	839a      	strh	r2, [r3, #28]

  return;
 800250c:	bf00      	nop
}
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7f9b      	ldrb	r3, [r3, #30]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d156      	bne.n	80025d6 <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
      switch (pHandle->lastCommand)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d036      	beq.n	80025a2 <MCI_ExecBufferedCommands+0x8a>
 8002534:	2b03      	cmp	r3, #3
 8002536:	dc43      	bgt.n	80025c0 <MCI_ExecBufferedCommands+0xa8>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <MCI_ExecBufferedCommands+0x2a>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d018      	beq.n	8002572 <MCI_ExecBufferedCommands+0x5a>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
          break;
        }
        default:
          break;
 8002540:	e03e      	b.n	80025c0 <MCI_ExecBufferedCommands+0xa8>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2103      	movs	r1, #3
 8002552:	4618      	mov	r0, r3
 8002554:	f008 ff5a 	bl	800b40c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8adb      	ldrh	r3, [r3, #22]
 8002566:	461a      	mov	r2, r3
 8002568:	f008 ff66 	bl	800b438 <STC_ExecRamp>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
          break;
 8002570:	e027      	b.n	80025c2 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2104      	movs	r1, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f008 ff42 	bl	800b40c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8adb      	ldrh	r3, [r3, #22]
 8002596:	461a      	mov	r2, r3
 8002598:	f008 ff4e 	bl	800b438 <STC_ExecRamp>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]
          break;
 80025a0:	e00f      	b.n	80025c2 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	3310      	adds	r3, #16
 80025b4:	3212      	adds	r2, #18
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
          break;
 80025be:	e000      	b.n	80025c2 <MCI_ExecBufferedCommands+0xaa>
          break;
 80025c0:	bf00      	nop
      }

      if (commandHasBeenExecuted)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	779a      	strb	r2, [r3, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80025ce:	e002      	b.n	80025d6 <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	779a      	strb	r2, [r3, #30]
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return (pHandle->State);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7e5b      	ldrb	r3, [r3, #25]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return ((uint16_t)pHandle->PastFaults);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8b9b      	ldrh	r3, [r3, #28]
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  return ((uint16_t)pHandle->CurrentFaults);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8b5b      	ldrh	r3, [r3, #26]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <MCI_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8b9b      	ldrh	r3, [r3, #28]
 8002632:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8b5b      	ldrh	r3, [r3, #26]
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  return (LocalFaultState);
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
  *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
  */
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7fdb      	ldrb	r3, [r3, #31]
#endif
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	81fb      	strh	r3, [r7, #14]
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7b1b      	ldrb	r3, [r3, #12]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d018      	beq.n	80026ac <MCI_GetImposedMotorDirection+0x46>
 800267a:	2b03      	cmp	r3, #3
 800267c:	dc1f      	bgt.n	80026be <MCI_GetImposedMotorDirection+0x58>
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <MCI_GetImposedMotorDirection+0x22>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d009      	beq.n	800269a <MCI_GetImposedMotorDirection+0x34>
          retVal = -1;
        }
        break;

      default:
        break;
 8002686:	e01a      	b.n	80026be <MCI_GetImposedMotorDirection+0x58>
        if (pHandle->hFinalSpeed < 0)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da17      	bge.n	80026c2 <MCI_GetImposedMotorDirection+0x5c>
          retVal = -1;
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	81fb      	strh	r3, [r7, #14]
        break;
 8002698:	e013      	b.n	80026c2 <MCI_GetImposedMotorDirection+0x5c>
        if (pHandle->hFinalTorque < 0)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da10      	bge.n	80026c6 <MCI_GetImposedMotorDirection+0x60>
          retVal = -1;
 80026a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a8:	81fb      	strh	r3, [r7, #14]
        break;
 80026aa:	e00c      	b.n	80026c6 <MCI_GetImposedMotorDirection+0x60>
        if (pHandle->Iqdref.q < 0)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da09      	bge.n	80026ca <MCI_GetImposedMotorDirection+0x64>
          retVal = -1;
 80026b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ba:	81fb      	strh	r3, [r7, #14]
        break;
 80026bc:	e005      	b.n	80026ca <MCI_GetImposedMotorDirection+0x64>
        break;
 80026be:	bf00      	nop
 80026c0:	e004      	b.n	80026cc <MCI_GetImposedMotorDirection+0x66>
        break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <MCI_GetImposedMotorDirection+0x66>
        break;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <MCI_GetImposedMotorDirection+0x66>
        break;
 80026ca:	bf00      	nop
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
 80026cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in
  *         the unit defined by #SPEED_UNIT.
  */
__weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
#endif
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <MCI_GetLastRampFinalTorque>:
  *         digit.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hFinalTorque;
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
#endif
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <MCI_GetLastRampFinalDuration>:
  *         user .
  * @param  pHandle Pointer on the component instance to work on.
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8adb      	ldrh	r3, [r3, #22]
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f008 ff19 	bl	800b56c <STC_StopRamp>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f008 fe06 	bl	800b360 <STC_GetSpeedSensor>
 8002754:	60f8      	str	r0, [r7, #12]
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f008 ff3c 	bl	800b5d4 <SPD_GetAvrgMecSpeedUnit>
 800275c:	4603      	mov	r3, r0
 800275e:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
 8002760:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f008 fe1c 	bl	800b3b6 <STC_GetMecSpeedRefUnit>
 800277e:	4603      	mov	r3, r0
#endif
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	6810      	ldr	r0, [r2, #0]
 800279a:	6018      	str	r0, [r3, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	89ba      	ldrh	r2, [r7, #12]
 80027a0:	f362 030f 	bfi	r3, r2, #0, #16
 80027a4:	89fa      	ldrh	r2, [r7, #14]
 80027a6:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	3204      	adds	r2, #4
 80027c8:	6810      	ldr	r0, [r2, #0]
 80027ca:	6018      	str	r0, [r3, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	89ba      	ldrh	r2, [r7, #12]
 80027d0:	f362 030f 	bfi	r3, r2, #0, #16
 80027d4:	89fa      	ldrh	r2, [r7, #14]
 80027d6:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	320c      	adds	r2, #12
 80027f8:	6810      	ldr	r0, [r2, #0]
 80027fa:	6018      	str	r0, [r3, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	89ba      	ldrh	r2, [r7, #12]
 8002800:	f362 030f 	bfi	r3, r2, #0, #16
 8002804:	89fa      	ldrh	r2, [r7, #14]
 8002806:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	3210      	adds	r2, #16
 8002828:	6810      	ldr	r0, [r2, #0]
 800282a:	6018      	str	r0, [r3, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	89ba      	ldrh	r2, [r7, #12]
 8002830:	f362 030f 	bfi	r3, r2, #0, #16
 8002834:	89fa      	ldrh	r2, [r7, #14]
 8002836:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	3216      	adds	r2, #22
 8002858:	6810      	ldr	r0, [r2, #0]
 800285a:	6018      	str	r0, [r3, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	89ba      	ldrh	r2, [r7, #12]
 8002860:	f362 030f 	bfi	r3, r2, #0, #16
 8002864:	89fa      	ldrh	r2, [r7, #14]
 8002866:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	321a      	adds	r2, #26
 8002888:	6810      	ldr	r0, [r2, #0]
 800288a:	6018      	str	r0, [r3, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	89ba      	ldrh	r2, [r7, #12]
 8002890:	f362 030f 	bfi	r3, r2, #0, #16
 8002894:	89fa      	ldrh	r2, [r7, #14]
 8002896:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
#endif
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685c      	ldr	r4, [r3, #4]
 80028d2:	4610      	mov	r0, r2
 80028d4:	f008 ff8b 	bl	800b7ee <STC_GetDefaultIqdref>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	8222      	strh	r2, [r4, #16]
 80028de:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80028e2:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  int32_t b_divSQRT3_tmp;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 80028f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028f8:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80028fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800290a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290e:	461a      	mov	r2, r3
 8002910:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	425a      	negs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	13db      	asrs	r3, r3, #15
 8002928:	613b      	str	r3, [r7, #16]
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002930:	db03      	blt.n	800293a <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8002932:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002936:	83fb      	strh	r3, [r7, #30]
 8002938:	e009      	b.n	800294e <MCM_Clarke+0x62>
  }
  else if (wbeta_tmp < (-32768))
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002940:	da03      	bge.n	800294a <MCM_Clarke+0x5e>
  {
    hbeta_tmp =  ((int16_t)-32768);
 8002942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002946:	83fb      	strh	r3, [r7, #30]
 8002948:	e001      	b.n	800294e <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 800294e:	8bfb      	ldrh	r3, [r7, #30]
 8002950:	817b      	strh	r3, [r7, #10]

  if (((int16_t )-32768) == Output.beta)
 8002952:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002956:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800295a:	d102      	bne.n	8002962 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 800295c:	f248 0301 	movw	r3, #32769	; 0x8001
 8002960:	817b      	strh	r3, [r7, #10]
  }

  return (Output);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	89ba      	ldrh	r2, [r7, #12]
 800296a:	f362 030f 	bfi	r3, r2, #0, #16
 800296e:	89fa      	ldrh	r2, [r7, #14]
 8002970:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002974:	4618      	mov	r0, r3
 8002976:	3724      	adds	r7, #36	; 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park(alphabeta_t Input, int16_t Theta)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  int32_t q_tmp_2;
  int32_t wqd_tmp;
  int16_t hqd_tmp;
  Trig_Components Local_Vector_Components;

  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800298c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f8af 	bl	8002af4 <MCM_Trig_Functions>
 8002996:	4603      	mov	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800299a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800299e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 80029a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  /*Iq component in Q1.15 Format */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80029b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	13db      	asrs	r3, r3, #15
 80029be:	623b      	str	r3, [r7, #32]
#else
  wqd_tmp = (q_tmp_1 - q_tmp_2) / 32768;
#endif

  /* Check saturation of Iq */
  if (wqd_tmp > INT16_MAX)
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c6:	db03      	blt.n	80029d0 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 80029c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80029cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029ce:	e009      	b.n	80029e4 <MCM_Park+0x64>
  }
  else if (wqd_tmp < (-32768))
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80029d6:	da03      	bge.n	80029e0 <MCM_Park+0x60>
  {
    hqd_tmp = ((int16_t)-32768);
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029de:	e001      	b.n	80029e4 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ((int16_t)wqd_tmp);
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 80029e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e6:	823b      	strh	r3, [r7, #16]

  if (((int16_t )-32768) == Output.q)
 80029e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80029f0:	d102      	bne.n	80029f8 <MCM_Park+0x78>
  {
    Output.q = -32767;
 80029f2:	f248 0301 	movw	r3, #32769	; 0x8001
 80029f6:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 80029f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	61bb      	str	r3, [r7, #24]
  /*Id component in Q1.15 Format */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	13db      	asrs	r3, r3, #15
 8002a1c:	623b      	str	r3, [r7, #32]
#else
  wqd_tmp = (d_tmp_1 + d_tmp_2) / 32768;
#endif

  /* Check saturation of Id */
  if (wqd_tmp > INT16_MAX)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	db03      	blt.n	8002a2e <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8002a26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a2c:	e009      	b.n	8002a42 <MCM_Park+0xc2>
  }
  else if (wqd_tmp < (-32768))
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002a34:	da03      	bge.n	8002a3e <MCM_Park+0xbe>
  {
    hqd_tmp = ((int16_t)-32768);
 8002a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a3c:	e001      	b.n	8002a42 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8002a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a44:	827b      	strh	r3, [r7, #18]

  if (((int16_t)-32768) == Output.d)
 8002a46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a4a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002a4e:	d102      	bne.n	8002a56 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8002a50:	f248 0301 	movw	r3, #32769	; 0x8001
 8002a54:	827b      	strh	r3, [r7, #18]
  }

  return (Output);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	8aba      	ldrh	r2, [r7, #20]
 8002a5e:	f362 030f 	bfi	r3, r2, #0, #16
 8002a62:	8afa      	ldrh	r2, [r7, #22]
 8002a64:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3730      	adds	r7, #48	; 0x30
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
  int32_t beta_tmp1;
  int32_t beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f837 	bl	8002af4 <MCM_Trig_Functions>
 8002a86:	4603      	mov	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8002a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a8e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	623b      	str	r3, [r7, #32]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	4413      	add	r3, r2
 8002aac:	13db      	asrs	r3, r3, #15
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	81bb      	strh	r3, [r7, #12]
#else
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) / 32768);
#endif

  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8002ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ab6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	61bb      	str	r3, [r7, #24]
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	13db      	asrs	r3, r3, #15
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	81fb      	strh	r3, [r7, #14]
#else
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) / 32768);
#endif

  return (Output);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	8aba      	ldrh	r2, [r7, #20]
 8002ae2:	f362 030f 	bfi	r3, r2, #0, #16
 8002ae6:	8afa      	ldrh	r2, [r7, #22]
 8002ae8:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions(int16_t hAngle)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b06:	617b      	str	r3, [r7, #20]
  uhindex = (uint16_t)shindex;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	827b      	strh	r3, [r7, #18]
  uhindex /= ((uint16_t)64);
 8002b0c:	8a7b      	ldrh	r3, [r7, #18]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	827b      	strh	r3, [r7, #18]

  switch (((uint16_t)uhindex) & SIN_MASK)
 8002b12:	8a7b      	ldrh	r3, [r7, #18]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b1c:	d01f      	beq.n	8002b5e <MCM_Trig_Functions+0x6a>
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	d85f      	bhi.n	8002be4 <MCM_Trig_Functions+0xf0>
 8002b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b28:	d008      	beq.n	8002b3c <MCM_Trig_Functions+0x48>
 8002b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2e:	d859      	bhi.n	8002be4 <MCM_Trig_Functions+0xf0>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d029      	beq.n	8002b88 <MCM_Trig_Functions+0x94>
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d03f      	beq.n	8002bba <MCM_Trig_Functions+0xc6>
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    }

    default:
      break;
 8002b3a:	e053      	b.n	8002be4 <MCM_Trig_Functions+0xf0>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b3c:	8a7b      	ldrh	r3, [r7, #18]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002b44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b48:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b4a:	8a7b      	ldrh	r3, [r7, #18]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002b56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b5a:	813b      	strh	r3, [r7, #8]
      break;
 8002b5c:	e043      	b.n	8002be6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b5e:	8a7b      	ldrh	r3, [r7, #18]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002b6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b6e:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002b78:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	425b      	negs	r3, r3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	813b      	strh	r3, [r7, #8]
      break;
 8002b86:	e02e      	b.n	8002be6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b88:	8a7b      	ldrh	r3, [r7, #18]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002b90:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	425b      	negs	r3, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002baa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	813b      	strh	r3, [r7, #8]
      break;
 8002bb8:	e015      	b.n	8002be6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002bba:	8a7b      	ldrh	r3, [r7, #18]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002bc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	425b      	negs	r3, r3
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8002bd4:	8a7b      	ldrh	r3, [r7, #18]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <MCM_Trig_Functions+0x110>)
 8002bdc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002be0:	813b      	strh	r3, [r7, #8]
      break;
 8002be2:	e000      	b.n	8002be6 <MCM_Trig_Functions+0xf2>
      break;
 8002be4:	bf00      	nop
  }
  return (Local_Components);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	89ba      	ldrh	r2, [r7, #12]
 8002bee:	f362 030f 	bfi	r3, r2, #0, #16
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	0800f234 	.word	0x0800f234

08002c08 <MCM_Sqrt>:
  *         for negative int32_t.
  * @param  Input int32_t number
  * @retval int32_t Square root of Input (0 if Input<0)
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  int32_t wtemprootnew;

  if (wInput > 0)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	dd28      	ble.n	8002c68 <MCM_Sqrt+0x60>
  {
  uint8_t biter = 0u;
 8002c16:	2300      	movs	r3, #0
 8002c18:	74fb      	strb	r3, [r7, #19]
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c20:	dc02      	bgt.n	8002c28 <MCM_Sqrt+0x20>
    {
      wtemproot = ((int32_t)128);
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e002      	b.n	8002c2e <MCM_Sqrt+0x26>
    }
    else
    {
      wtemproot = ((int32_t)8192);
 8002c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c2c:	60fb      	str	r3, [r7, #12]
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	0fda      	lsrs	r2, r3, #31
 8002c3c:	4413      	add	r3, r2
 8002c3e:	105b      	asrs	r3, r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d002      	beq.n	8002c50 <MCM_Sqrt+0x48>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <MCM_Sqrt+0x4e>
      {
        biter = 6U;
 8002c50:	2306      	movs	r3, #6
 8002c52:	74fb      	strb	r3, [r7, #19]
 8002c54:	e004      	b.n	8002c60 <MCM_Sqrt+0x58>
      }
      else
      {
        biter ++;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	74fb      	strb	r3, [r7, #19]
        wtemproot = wtemprootnew;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	60fb      	str	r3, [r7, #12]
      }
    }
    while (biter < 6U);
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d9e3      	bls.n	8002c2e <MCM_Sqrt+0x26>
 8002c66:	e001      	b.n	8002c6c <MCM_Sqrt+0x64>

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  }

  return (wtemprootnew);
 8002c6c:	697b      	ldr	r3, [r7, #20]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_GPIO_LockPin>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 808d 	beq.w	8002dde <MCboot+0x12a>
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8002cc4:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <MCboot+0x134>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]

    /**********************************************************/
    /*    PWM and current sensing component initialization    */
    /**********************************************************/
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002cca:	4b48      	ldr	r3, [pc, #288]	; (8002dec <MCboot+0x138>)
 8002ccc:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <MCboot+0x13c>)
 8002cce:	601a      	str	r2, [r3, #0]
    R3_1_Init(&PWM_Handle_M1);
 8002cd0:	4847      	ldr	r0, [pc, #284]	; (8002df0 <MCboot+0x13c>)
 8002cd2:	f00a f98f 	bl	800cff4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8002cd6:	4847      	ldr	r0, [pc, #284]	; (8002df4 <MCboot+0x140>)
 8002cd8:	f7fd fcf6 	bl	80006c8 <ASPEP_start>

    /* USER CODE END MCboot 1 */
    /**************************************/
    /*    Start timers synchronously      */
    /**************************************/
    startTimers();
 8002cdc:	f007 feba 	bl	800aa54 <startTimers>

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002ce0:	4845      	ldr	r0, [pc, #276]	; (8002df8 <MCboot+0x144>)
 8002ce2:	f007 fc0b 	bl	800a4fc <PID_HandleInit>

    /******************************************************/
    /*   Main speed sensor component initialization       */
    /******************************************************/
    STO_PLL_Init (&STO_PLL_M1);
 8002ce6:	4845      	ldr	r0, [pc, #276]	; (8002dfc <MCboot+0x148>)
 8002ce8:	f008 fd9c 	bl	800b824 <STO_PLL_Init>

    /******************************************************/
    /*   Speed & torque component initialization          */
    /******************************************************/
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <MCboot+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <MCboot+0x148>)
 8002cf2:	4941      	ldr	r1, [pc, #260]	; (8002df8 <MCboot+0x144>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f008 faf4 	bl	800b2e2 <STC_Init>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8002cfa:	4842      	ldr	r0, [pc, #264]	; (8002e04 <MCboot+0x150>)
 8002cfc:	f009 fc5a 	bl	800c5b4 <VSS_Init>

    /**************************************/
    /*   Rev-up component initialization  */
    /**************************************/
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <MCboot+0x14c>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <MCboot+0x138>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <MCboot+0x154>)
 8002d0c:	4a3d      	ldr	r2, [pc, #244]	; (8002e04 <MCboot+0x150>)
 8002d0e:	483f      	ldr	r0, [pc, #252]	; (8002e0c <MCboot+0x158>)
 8002d10:	f008 f91a 	bl	800af48 <RUC_Init>

    /********************************************************/
    /*   PID component initialization: current regulation   */
    /********************************************************/
    PID_HandleInit(&PIDIqHandle_M1);
 8002d14:	483e      	ldr	r0, [pc, #248]	; (8002e10 <MCboot+0x15c>)
 8002d16:	f007 fbf1 	bl	800a4fc <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002d1a:	483e      	ldr	r0, [pc, #248]	; (8002e14 <MCboot+0x160>)
 8002d1c:	f007 fbee 	bl	800a4fc <PID_HandleInit>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    RVBS_Init(&BusVoltageSensor_M1);
 8002d20:	483d      	ldr	r0, [pc, #244]	; (8002e18 <MCboot+0x164>)
 8002d22:	f007 fefb 	bl	800ab1c <RVBS_Init>

    /*************************************************/
    /*   Power measurement component initialization  */
    /*************************************************/
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <MCboot+0x168>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <MCboot+0x164>)
 8002d2c:	60da      	str	r2, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <MCboot+0x168>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a3b      	ldr	r2, [pc, #236]	; (8002e20 <MCboot+0x16c>)
 8002d34:	609a      	str	r2, [r3, #8]

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    NTC_Init(&TempSensor_M1);
 8002d36:	483b      	ldr	r0, [pc, #236]	; (8002e24 <MCboot+0x170>)
 8002d38:	f007 fb43 	bl	800a3c2 <NTC_Init>

    /*******************************************************/
    /*   Feed forward component initialization             */
    /*******************************************************/
    FF_Init(pFF[M1],&(BusVoltageSensor_M1._Super),pPIDId[M1],pPIDIq[M1]);
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <MCboot+0x174>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <MCboot+0x178>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <MCboot+0x17c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4933      	ldr	r1, [pc, #204]	; (8002e18 <MCboot+0x164>)
 8002d4a:	f006 fcaf 	bl	80096ac <FF_Init>

    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <MCboot+0x180>)
 8002d50:	4a39      	ldr	r2, [pc, #228]	; (8002e38 <MCboot+0x184>)
 8002d52:	601a      	str	r2, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8002d54:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <MCboot+0x180>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f007 ffda 	bl	800ad12 <REMNG_Init>

    FOC_Clear(M1);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 fb80 	bl	8003464 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <MCboot+0x16c>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <MCboot+0x14c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4c2b      	ldr	r4, [pc, #172]	; (8002e20 <MCboot+0x16c>)
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 fd3b 	bl	800b7ee <STC_GetDefaultIqdref>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	6123      	str	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <MCboot+0x14c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f008 fd34 	bl	800b7ee <STC_GetDefaultIqdref>
 8002d86:	4603      	mov	r3, r0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <MCboot+0x16c>)
 8002d90:	829a      	strh	r2, [r3, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <MCboot+0x14c>)
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <MCboot+0x138>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <MCboot+0x16c>)
 8002d9c:	4827      	ldr	r0, [pc, #156]	; (8002e3c <MCboot+0x188>)
 8002d9e:	f7ff fa9a 	bl	80022d6 <MCI_Init>
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <MCboot+0x14c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f008 fd21 	bl	800b7ee <STC_GetDefaultIqdref>
 8002dac:	4603      	mov	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	4619      	mov	r1, r3
 8002db8:	4820      	ldr	r0, [pc, #128]	; (8002e3c <MCboot+0x188>)
 8002dba:	f7ff fada 	bl	8002372 <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <MCboot+0x188>)
 8002dc2:	601a      	str	r2, [r3, #0]

    ICL_Init(&ICL_M1, &(BusVoltageSensor_M1._Super), &ICLDOUTParamsM1);
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <MCboot+0x18c>)
 8002dc6:	4914      	ldr	r1, [pc, #80]	; (8002e18 <MCboot+0x164>)
 8002dc8:	481e      	ldr	r0, [pc, #120]	; (8002e44 <MCboot+0x190>)
 8002dca:	f006 fe03 	bl	80099d4 <ICL_Init>
    Mci[M1].State = ICLWAIT;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <MCboot+0x188>)
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	765a      	strb	r2, [r3, #25]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002dd4:	f7ff fa71 	bl	80022ba <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <MCboot+0x134>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
  }
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000856 	.word	0x20000856
 8002dec:	20000848 	.word	0x20000848
 8002df0:	20000178 	.word	0x20000178
 8002df4:	200004fc 	.word	0x200004fc
 8002df8:	20000010 	.word	0x20000010
 8002dfc:	20000240 	.word	0x20000240
 8002e00:	200004bc 	.word	0x200004bc
 8002e04:	20000208 	.word	0x20000208
 8002e08:	20000368 	.word	0x20000368
 8002e0c:	20000100 	.word	0x20000100
 8002e10:	2000003c 	.word	0x2000003c
 8002e14:	20000068 	.word	0x20000068
 8002e18:	200003b8 	.word	0x200003b8
 8002e1c:	200004cc 	.word	0x200004cc
 8002e20:	20000820 	.word	0x20000820
 8002e24:	20000390 	.word	0x20000390
 8002e28:	200004d0 	.word	0x200004d0
 8002e2c:	200004c8 	.word	0x200004c8
 8002e30:	200004c4 	.word	0x200004c4
 8002e34:	2000084c 	.word	0x2000084c
 8002e38:	200003e4 	.word	0x200003e4
 8002e3c:	20000800 	.word	0x20000800
 8002e40:	200004b0 	.word	0x200004b0
 8002e44:	2000037c 	.word	0x2000037c

08002e48 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  if (0U == bMCBootCompleted)
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <MC_RunMotorControlTasks+0x1c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <MC_RunMotorControlTasks+0x16>
    /* Nothing to do */
  }
  else
  {
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8002e56:	f000 f835 	bl	8002ec4 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8002e5a:	f000 fd8f 	bl	800397c <TSK_SafetyTask>

  }
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000856 	.word	0x20000856

08002e68 <TSK_MF_StopProcessing>:
/**
 * @brief Performs stop process and update the state machine.This function
 *        shall be called only during medium frequency task
 */
void TSK_MF_StopProcessing(  MCI_Handle_t * pHandle, uint8_t motor)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <TSK_MF_StopProcessing+0x50>)
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00a fcbb 	bl	800d7f8 <R3_1_SwitchOffPWM>

  FOC_Clear(motor);
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 faed 	bl	8003464 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <TSK_MF_StopProcessing+0x54>)
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f007 fd25 	bl	800a8e2 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002e98:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e9c:	f000 fc22 	bl	80036e4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <TSK_MF_StopProcessing+0x58>)
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3319      	adds	r3, #25
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
  return;
 8002eae:	bf00      	nop
}
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000848 	.word	0x20000848
 8002ebc:	200004cc 	.word	0x200004cc
 8002ec0:	20000800 	.word	0x20000800

08002ec4 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8002ec4:	b598      	push	{r3, r4, r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (((uint8_t)1) == bMCBootCompleted)
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <MC_Scheduler+0xbc>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d154      	bne.n	8002f7c <MC_Scheduler+0xb8>
  {
    if(hMFTaskCounterM1 > 0u)
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <MC_Scheduler+0xc0>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <MC_Scheduler+0x24>
    {
      hMFTaskCounterM1--;
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <MC_Scheduler+0xc0>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <MC_Scheduler+0xc0>)
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	e031      	b.n	8002f4c <MC_Scheduler+0x88>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 8002ee8:	f000 f858 	bl	8002f9c <TSK_MediumFrequencyTaskM1>

      /* Applicative hook at end of Medium Frequency for Motor 1 */
      MC_APP_PostMediumFrequencyHook_M1();
 8002eec:	f7ff f9ec 	bl	80022c8 <MC_APP_PostMediumFrequencyHook_M1>

      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <MC_Scheduler+0xc4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <MC_Scheduler+0xc4>)
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	; (8002f8c <MC_Scheduler+0xc8>)
 8002efc:	4610      	mov	r0, r2
 8002efe:	4798      	blx	r3
 8002f00:	4603      	mov	r3, r0
 8002f02:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f04:	6053      	str	r3, [r2, #4]
                                                                                &MCP_Over_UartA.rxLength);
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01b      	beq.n	8002f46 <MC_Scheduler+0x82>
        /* Nothing to do */
      }
      else
      {
        /* Synchronous answer */
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f16:	6810      	ldr	r0, [r2, #0]
 8002f18:	220a      	movs	r2, #10
 8002f1a:	491d      	ldr	r1, [pc, #116]	; (8002f90 <MC_Scheduler+0xcc>)
 8002f1c:	4798      	blx	r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <MC_Scheduler+0x82>
        {
          /* no buffer available to build the answer ... should not occur */
        }
        else
        {
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002f2a:	4817      	ldr	r0, [pc, #92]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f2c:	f006 fde2 	bl	8009af4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685c      	ldr	r4, [r3, #4]
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f3c:	6899      	ldr	r1, [r3, #8]
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MC_Scheduler+0xc4>)
 8002f40:	89da      	ldrh	r2, [r3, #14]
 8002f42:	230a      	movs	r3, #10
 8002f44:	47a0      	blx	r4
      }

      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MC_Scheduler+0xc0>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0U)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MC_Scheduler+0xd0>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <MC_Scheduler+0xa0>
    {
      hBootCapDelayCounterM1--;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <MC_Scheduler+0xd0>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MC_Scheduler+0xd0>)
 8002f62:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0U)
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MC_Scheduler+0xd4>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <MC_Scheduler+0xb8>
    {
      hStopPermanencyCounterM1--;
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <MC_Scheduler+0xd4>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <MC_Scheduler+0xd4>)
 8002f7a:	801a      	strh	r2, [r3, #0]
    /* Nothing to do */
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8002f7c:	bf00      	nop
 8002f7e:	bd98      	pop	{r3, r4, r7, pc}
 8002f80:	20000856 	.word	0x20000856
 8002f84:	20000850 	.word	0x20000850
 8002f88:	20000570 	.word	0x20000570
 8002f8c:	2000057c 	.word	0x2000057c
 8002f90:	20000578 	.word	0x20000578
 8002f94:	20000852 	.word	0x20000852
 8002f98:	20000854 	.word	0x20000854

08002f9c <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  int16_t wAux = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	823b      	strh	r3, [r7, #16]
  ICL_State_t ICLstate = ICL_Exec(&ICL_M1);
 8002fa6:	4891      	ldr	r0, [pc, #580]	; (80031ec <TSK_MediumFrequencyTaskM1+0x250>)
 8002fa8:	f006 fd28 	bl	80099fc <ICL_Exec>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75bb      	strb	r3, [r7, #22]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	488e      	ldr	r0, [pc, #568]	; (80031f0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002fb8:	f008 fea3 	bl	800bd02 <STO_PLL_CalcAvrgMecSpeedUnit>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	757b      	strb	r3, [r7, #21]
  PQD_CalcElMotorPower(pMPM[M1]);
 8002fc0:	4b8c      	ldr	r3, [pc, #560]	; (80031f4 <TSK_MediumFrequencyTaskM1+0x258>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f007 fc4d 	bl	800a864 <PQD_CalcElMotorPower>

  if ( !ICLFaultTreatedM1 && (ICLstate == ICL_ACTIVE)){
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f083 0301 	eor.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <TSK_MediumFrequencyTaskM1+0x4a>
 8002fda:	7dbb      	ldrb	r3, [r7, #22]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d102      	bne.n	8002fe6 <TSK_MediumFrequencyTaskM1+0x4a>
    ICLFaultTreatedM1 = true;
 8002fe0:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
  }

  if ((MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS) && ICLFaultTreatedM1)
 8002fe6:	4885      	ldr	r0, [pc, #532]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8002fe8:	f7ff fb11 	bl	800260e <MCI_GetCurrentFaults>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 821f 	bne.w	8003432 <TSK_MediumFrequencyTaskM1+0x496>
 8002ff4:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8219 	beq.w	8003432 <TSK_MediumFrequencyTaskM1+0x496>
  {
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003000:	487e      	ldr	r0, [pc, #504]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003002:	f7ff faf8 	bl	80025f6 <MCI_GetOccurredFaults>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 81fa 	bne.w	8003402 <TSK_MediumFrequencyTaskM1+0x466>
    {
      switch (Mci[M1].State)
 800300e:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003010:	7e5b      	ldrb	r3, [r3, #25]
 8003012:	2b13      	cmp	r3, #19
 8003014:	f200 81f9 	bhi.w	800340a <TSK_MediumFrequencyTaskM1+0x46e>
 8003018:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <TSK_MediumFrequencyTaskM1+0x84>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003081 	.word	0x08003081
 8003024:	0800340b 	.word	0x0800340b
 8003028:	0800340b 	.word	0x0800340b
 800302c:	0800340b 	.word	0x0800340b
 8003030:	080031b9 	.word	0x080031b9
 8003034:	0800340b 	.word	0x0800340b
 8003038:	08003385 	.word	0x08003385
 800303c:	0800340b 	.word	0x0800340b
 8003040:	080033bb 	.word	0x080033bb
 8003044:	0800340b 	.word	0x0800340b
 8003048:	080033fb 	.word	0x080033fb
 800304c:	080033e5 	.word	0x080033e5
 8003050:	08003071 	.word	0x08003071
 8003054:	0800340b 	.word	0x0800340b
 8003058:	0800340b 	.word	0x0800340b
 800305c:	0800340b 	.word	0x0800340b
 8003060:	0800315f 	.word	0x0800315f
 8003064:	080030f9 	.word	0x080030f9
 8003068:	0800340b 	.word	0x0800340b
 800306c:	080032cd 	.word	0x080032cd
      {
        case ICLWAIT:
        {
          if (ICL_INACTIVE == ICLstate)
 8003070:	7dbb      	ldrb	r3, [r7, #22]
 8003072:	2b04      	cmp	r3, #4
 8003074:	f040 81cb 	bne.w	800340e <TSK_MediumFrequencyTaskM1+0x472>
          {
            /* If ICL is Inactive, move to IDLE */
            Mci[M1].State = IDLE;
 8003078:	4b60      	ldr	r3, [pc, #384]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 800307a:	2200      	movs	r2, #0
 800307c:	765a      	strb	r2, [r3, #25]
          }
          break;
 800307e:	e1c6      	b.n	800340e <TSK_MediumFrequencyTaskM1+0x472>
        }

        case IDLE:
        {
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003082:	7e1b      	ldrb	r3, [r3, #24]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d004      	beq.n	8003092 <TSK_MediumFrequencyTaskM1+0xf6>
 8003088:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 800308a:	7e1b      	ldrb	r3, [r3, #24]
 800308c:	2b03      	cmp	r3, #3
 800308e:	f040 81c0 	bne.w	8003412 <TSK_MediumFrequencyTaskM1+0x476>
          {
            {
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8003092:	485a      	ldr	r0, [pc, #360]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003094:	f7ff fae7 	bl	8002666 <MCI_GetImposedMotorDirection>
 8003098:	4603      	mov	r3, r0
 800309a:	4619      	mov	r1, r3
 800309c:	4858      	ldr	r0, [pc, #352]	; (8003200 <TSK_MediumFrequencyTaskM1+0x264>)
 800309e:	f007 ffa9 	bl	800aff4 <RUC_Clear>
            }

           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <TSK_MediumFrequencyTaskM1+0x12c>
           {
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ffcc 	bl	8004058 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 80030c0:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80030c2:	2211      	movs	r2, #17
 80030c4:	765a      	strb	r2, [r3, #25]
          }
          else
          {
            /* nothing to be done, FW stays in IDLE state */
          }
          break;
 80030c6:	e1a4      	b.n	8003412 <TSK_MediumFrequencyTaskM1+0x476>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80030c8:	4b4e      	ldr	r3, [pc, #312]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ffbd 	bl	8004058 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00a fa82 	bl	800d5ee <R3_1_TurnOnLowSides>
             TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 80030ea:	2014      	movs	r0, #20
 80030ec:	f000 fad4 	bl	8003698 <TSK_SetChargeBootCapDelayM1>
             Mci[M1].State = CHARGE_BOOT_CAP;
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80030f2:	2210      	movs	r2, #16
 80030f4:	765a      	strb	r2, [r3, #25]
          break;
 80030f6:	e18c      	b.n	8003412 <TSK_MediumFrequencyTaskM1+0x476>
        }

        case OFFSET_CALIB:
          {
            if (MCI_STOP == Mci[M1].DirectCommand)
 80030f8:	4b40      	ldr	r3, [pc, #256]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80030fa:	7e1b      	ldrb	r3, [r3, #24]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d104      	bne.n	800310a <TSK_MediumFrequencyTaskM1+0x16e>
            {
              TSK_MF_StopProcessing(&Mci[M1], M1);
 8003100:	2100      	movs	r1, #0
 8003102:	483e      	ldr	r0, [pc, #248]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003104:	f7ff feb0 	bl	8002e68 <TSK_MF_StopProcessing>
              else
              {
                /* nothing to be done, FW waits for offset calibration to finish */
              }
            }
            break;
 8003108:	e185      	b.n	8003416 <TSK_MediumFrequencyTaskM1+0x47a>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ffa1 	bl	8004058 <PWMC_CurrentReadingCalibr>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 817c 	beq.w	8003416 <TSK_MediumFrequencyTaskM1+0x47a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003120:	7e1b      	ldrb	r3, [r3, #24]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d10e      	bne.n	8003144 <TSK_MediumFrequencyTaskM1+0x1a8>
                  FOC_Clear(M1);
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f99c 	bl	8003464 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <TSK_MediumFrequencyTaskM1+0x258>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f007 fbd6 	bl	800a8e2 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003138:	2200      	movs	r2, #0
 800313a:	761a      	strb	r2, [r3, #24]
                  Mci[M1].State = IDLE;
 800313c:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 800313e:	2200      	movs	r2, #0
 8003140:	765a      	strb	r2, [r3, #25]
            break;
 8003142:	e168      	b.n	8003416 <TSK_MediumFrequencyTaskM1+0x47a>
                  R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8003144:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f00a fa4f 	bl	800d5ee <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8003150:	2014      	movs	r0, #20
 8003152:	f000 faa1 	bl	8003698 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003158:	2210      	movs	r2, #16
 800315a:	765a      	strb	r2, [r3, #25]
            break;
 800315c:	e15b      	b.n	8003416 <TSK_MediumFrequencyTaskM1+0x47a>
          }

        case CHARGE_BOOT_CAP:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 8003160:	7e1b      	ldrb	r3, [r3, #24]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d104      	bne.n	8003170 <TSK_MediumFrequencyTaskM1+0x1d4>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 8003166:	2100      	movs	r1, #0
 8003168:	4824      	ldr	r0, [pc, #144]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 800316a:	f7ff fe7d 	bl	8002e68 <TSK_MF_StopProcessing>
            else
            {
              /* nothing to be done, FW waits for bootstrap capacitor to charge */
            }
          }
          break;
 800316e:	e154      	b.n	800341a <TSK_MediumFrequencyTaskM1+0x47e>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8003170:	f000 faa2 	bl	80036b8 <TSK_ChargeBootCapDelayHasElapsedM1>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 814f 	beq.w	800341a <TSK_MediumFrequencyTaskM1+0x47e>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f00a fb39 	bl	800d7f8 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <TSK_MediumFrequencyTaskM1+0x26c>)
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <TSK_MediumFrequencyTaskM1+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	491f      	ldr	r1, [pc, #124]	; (8003210 <TSK_MediumFrequencyTaskM1+0x274>)
 8003194:	4618      	mov	r0, r3
 8003196:	f008 f8d2 	bl	800b33e <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 800319a:	4815      	ldr	r0, [pc, #84]	; (80031f0 <TSK_MediumFrequencyTaskM1+0x254>)
 800319c:	f008 ffa1 	bl	800c0e2 <STO_PLL_Clear>
              FOC_Clear( M1 );
 80031a0:	2000      	movs	r0, #0
 80031a2:	f000 f95f 	bl	8003464 <FOC_Clear>
                Mci[M1].State = START;
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80031a8:	2204      	movs	r2, #4
 80031aa:	765a      	strb	r2, [r3, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <TSK_MediumFrequencyTaskM1+0x268>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ff45 	bl	8004040 <PWMC_SwitchOnPWM>
          break;
 80031b6:	e130      	b.n	800341a <TSK_MediumFrequencyTaskM1+0x47e>
        }

        case START:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 80031b8:	4b10      	ldr	r3, [pc, #64]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80031ba:	7e1b      	ldrb	r3, [r3, #24]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d104      	bne.n	80031ca <TSK_MediumFrequencyTaskM1+0x22e>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 80031c0:	2100      	movs	r1, #0
 80031c2:	480e      	ldr	r0, [pc, #56]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80031c4:	f7ff fe50 	bl	8002e68 <TSK_MF_StopProcessing>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
              Mci[M1].State = SWITCH_OVER;
            }
          }
          break;
 80031c8:	e129      	b.n	800341e <TSK_MediumFrequencyTaskM1+0x482>
            bool ObserverConverged = false;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
            if(! RUC_Exec(&RevUpControlM1))
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <TSK_MediumFrequencyTaskM1+0x264>)
 80031d0:	f007 ff8c 	bl	800b0ec <RUC_Exec>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d019      	beq.n	8003214 <TSK_MediumFrequencyTaskM1+0x278>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2110      	movs	r1, #16
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <TSK_MediumFrequencyTaskM1+0x260>)
 80031e6:	f7ff f973 	bl	80024d0 <MCI_FaultProcessing>
 80031ea:	e021      	b.n	8003230 <TSK_MediumFrequencyTaskM1+0x294>
 80031ec:	2000037c 	.word	0x2000037c
 80031f0:	20000240 	.word	0x20000240
 80031f4:	200004cc 	.word	0x200004cc
 80031f8:	200004e4 	.word	0x200004e4
 80031fc:	20000800 	.word	0x20000800
 8003200:	20000100 	.word	0x20000100
 8003204:	20000848 	.word	0x20000848
 8003208:	20000820 	.word	0x20000820
 800320c:	200004bc 	.word	0x200004bc
 8003210:	20000208 	.word	0x20000208
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8003214:	4b8b      	ldr	r3, [pc, #556]	; (8003444 <TSK_MediumFrequencyTaskM1+0x4a8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f008 fa8c 	bl	800b736 <STC_CalcTorqueReference>
 800321e:	4603      	mov	r3, r0
 8003220:	813b      	strh	r3, [r7, #8]
             IqdRef.d = FOCVars[M1].UserIdref;
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <TSK_MediumFrequencyTaskM1+0x4ac>)
 8003224:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003228:	817b      	strh	r3, [r7, #10]
             FOCVars[M1].Iqdref = IqdRef;
 800322a:	4a87      	ldr	r2, [pc, #540]	; (8003448 <TSK_MediumFrequencyTaskM1+0x4ac>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6113      	str	r3, [r2, #16]
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8003230:	f107 030e 	add.w	r3, r7, #14
 8003234:	4619      	mov	r1, r3
 8003236:	4885      	ldr	r0, [pc, #532]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003238:	f009 fabd 	bl	800c7b6 <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 800323c:	4884      	ldr	r0, [pc, #528]	; (8003450 <TSK_MediumFrequencyTaskM1+0x4b4>)
 800323e:	f007 ffc3 	bl	800b1c8 <RUC_FirstAccelerationStageReached>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <TSK_MediumFrequencyTaskM1+0x2d8>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8003248:	f107 030e 	add.w	r3, r7, #14
 800324c:	4619      	mov	r1, r3
 800324e:	4881      	ldr	r0, [pc, #516]	; (8003454 <TSK_MediumFrequencyTaskM1+0x4b8>)
 8003250:	f009 f81c 	bl	800c28c <STO_PLL_IsObserverConverged>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8003258:	487f      	ldr	r0, [pc, #508]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800325a:	f7ff fa04 	bl	8002666 <MCI_GetImposedMotorDirection>
 800325e:	4603      	mov	r3, r0
 8003260:	b25b      	sxtb	r3, r3
 8003262:	4619      	mov	r1, r3
 8003264:	487b      	ldr	r0, [pc, #492]	; (8003454 <TSK_MediumFrequencyTaskM1+0x4b8>)
 8003266:	f009 f995 	bl	800c594 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	4619      	mov	r1, r3
 800326e:	4877      	ldr	r0, [pc, #476]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003270:	f009 fbd8 	bl	800ca24 <VSS_SetStartTransition>
            if (ObserverConverged)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80d1 	beq.w	800341e <TSK_MediumFrequencyTaskM1+0x482>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800327c:	4875      	ldr	r0, [pc, #468]	; (8003454 <TSK_MediumFrequencyTaskM1+0x4b8>)
 800327e:	f008 f99c 	bl	800b5ba <SPD_GetElAngle>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <TSK_MediumFrequencyTaskM1+0x4ac>)
 8003288:	4611      	mov	r1, r2
 800328a:	6858      	ldr	r0, [r3, #4]
 800328c:	f7ff fb78 	bl	8002980 <MCM_Park>
 8003290:	4603      	mov	r3, r0
 8003292:	607b      	str	r3, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8003294:	4b71      	ldr	r3, [pc, #452]	; (800345c <TSK_MediumFrequencyTaskM1+0x4c0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f007 fd3a 	bl	800ad12 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 800329e:	4b6f      	ldr	r3, [pc, #444]	; (800345c <TSK_MediumFrequencyTaskM1+0x4c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <TSK_MediumFrequencyTaskM1+0x4ac>)
 80032a4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80032a8:	4611      	mov	r1, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f007 fd7f 	bl	800adb0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 80032b2:	4b6a      	ldr	r3, [pc, #424]	; (800345c <TSK_MediumFrequencyTaskM1+0x4c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80032ba:	4611      	mov	r1, r2
 80032bc:	2219      	movs	r2, #25
 80032be:	4618      	mov	r0, r3
 80032c0:	f007 fd76 	bl	800adb0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032c6:	2213      	movs	r2, #19
 80032c8:	765a      	strb	r2, [r3, #25]
          break;
 80032ca:	e0a8      	b.n	800341e <TSK_MediumFrequencyTaskM1+0x482>
        }

        case SWITCH_OVER:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032ce:	7e1b      	ldrb	r3, [r3, #24]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d104      	bne.n	80032de <TSK_MediumFrequencyTaskM1+0x342>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 80032d4:	2100      	movs	r1, #0
 80032d6:	4860      	ldr	r0, [pc, #384]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032d8:	f7ff fdc6 	bl	8002e68 <TSK_MF_StopProcessing>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
                Mci[M1].State = RUN;
              }
            }
          }
          break;
 80032dc:	e0a1      	b.n	8003422 <TSK_MediumFrequencyTaskM1+0x486>
            if(! RUC_Exec(&RevUpControlM1))
 80032de:	485c      	ldr	r0, [pc, #368]	; (8003450 <TSK_MediumFrequencyTaskM1+0x4b4>)
 80032e0:	f007 ff04 	bl	800b0ec <RUC_Exec>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <TSK_MediumFrequencyTaskM1+0x360>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2110      	movs	r1, #16
 80032f4:	4858      	ldr	r0, [pc, #352]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80032f6:	f7ff f8eb 	bl	80024d0 <MCI_FaultProcessing>
          break;
 80032fa:	e092      	b.n	8003422 <TSK_MediumFrequencyTaskM1+0x486>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80032fc:	1cbb      	adds	r3, r7, #2
 80032fe:	4619      	mov	r1, r3
 8003300:	4852      	ldr	r0, [pc, #328]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 8003302:	f009 fa58 	bl	800c7b6 <VSS_CalcAvrgMecSpeedUnit>
 8003306:	4603      	mov	r3, r0
 8003308:	753b      	strb	r3, [r7, #20]
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 800330a:	4850      	ldr	r0, [pc, #320]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 800330c:	f009 fbae 	bl	800ca6c <VSS_TransitionEnded>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]
              LoopClosed = LoopClosed || tempBool;
 8003314:	7d3b      	ldrb	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <TSK_MediumFrequencyTaskM1+0x384>
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <TSK_MediumFrequencyTaskM1+0x388>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <TSK_MediumFrequencyTaskM1+0x38a>
 8003324:	2300      	movs	r3, #0
 8003326:	753b      	strb	r3, [r7, #20]
 8003328:	7d3b      	ldrb	r3, [r7, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	753b      	strb	r3, [r7, #20]
              if (true ==  LoopClosed)
 8003330:	7d3b      	ldrb	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <TSK_MediumFrequencyTaskM1+0x486>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <TSK_MediumFrequencyTaskM1+0x4ac>)
 8003338:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800333c:	461c      	mov	r4, r3
 800333e:	4848      	ldr	r0, [pc, #288]	; (8003460 <TSK_MediumFrequencyTaskM1+0x4c4>)
 8003340:	f007 f963 	bl	800a60a <PID_GetKIDivisor>
 8003344:	4603      	mov	r3, r0
 8003346:	b21b      	sxth	r3, r3
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8003348:	fb04 f303 	mul.w	r3, r4, r3
 800334c:	4619      	mov	r1, r3
 800334e:	4844      	ldr	r0, [pc, #272]	; (8003460 <TSK_MediumFrequencyTaskM1+0x4c4>)
 8003350:	f007 f92b 	bl	800a5aa <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <TSK_MediumFrequencyTaskM1+0x4a8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	493e      	ldr	r1, [pc, #248]	; (8003454 <TSK_MediumFrequencyTaskM1+0x4b8>)
 800335a:	4618      	mov	r0, r3
 800335c:	f007 ffef 	bl	800b33e <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8003360:	2000      	movs	r0, #0
 8003362:	f000 f925 	bl	80035b0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8003366:	2000      	movs	r0, #0
 8003368:	f000 f93e 	bl	80035e8 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <TSK_MediumFrequencyTaskM1+0x4a8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f008 f90e 	bl	800b592 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8003376:	4838      	ldr	r0, [pc, #224]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003378:	f7ff f8ce 	bl	8002518 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 800337e:	2206      	movs	r2, #6
 8003380:	765a      	strb	r2, [r3, #25]
          break;
 8003382:	e04e      	b.n	8003422 <TSK_MediumFrequencyTaskM1+0x486>
        }

        case RUN:
        {
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003386:	7e1b      	ldrb	r3, [r3, #24]
 8003388:	2b05      	cmp	r3, #5
 800338a:	d104      	bne.n	8003396 <TSK_MediumFrequencyTaskM1+0x3fa>
          {
            TSK_MF_StopProcessing(&Mci[M1], M1);
 800338c:	2100      	movs	r1, #0
 800338e:	4832      	ldr	r0, [pc, #200]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003390:	f7ff fd6a 	bl	8002e68 <TSK_MF_StopProcessing>
              {
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
              }

          }
          break;
 8003394:	e047      	b.n	8003426 <TSK_MediumFrequencyTaskM1+0x48a>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8003396:	4830      	ldr	r0, [pc, #192]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003398:	f7ff f8be 	bl	8002518 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800339c:	2000      	movs	r0, #0
 800339e:	f000 f923 	bl	80035e8 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03b      	beq.n	8003426 <TSK_MediumFrequencyTaskM1+0x48a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2120      	movs	r1, #32
 80033b2:	4829      	ldr	r0, [pc, #164]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033b4:	f7ff f88c 	bl	80024d0 <MCI_FaultProcessing>
          break;
 80033b8:	e035      	b.n	8003426 <TSK_MediumFrequencyTaskM1+0x48a>
        }

        case STOP:
        {
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80033ba:	f000 f9a3 	bl	8003704 <TSK_StopPermanencyTimeHasElapsedM1>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d032      	beq.n	800342a <TSK_MediumFrequencyTaskM1+0x48e>
          {

            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <TSK_MediumFrequencyTaskM1+0x4a8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4920      	ldr	r1, [pc, #128]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f007 ffb7 	bl	800b33e <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 80033d0:	481e      	ldr	r0, [pc, #120]	; (800344c <TSK_MediumFrequencyTaskM1+0x4b0>)
 80033d2:	f009 f8fa 	bl	800c5ca <VSS_Clear>

            /* USER CODE BEGIN MediumFrequencyTask M1 5 */

            /* USER CODE END MediumFrequencyTask M1 5 */
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033d8:	2200      	movs	r2, #0
 80033da:	761a      	strb	r2, [r3, #24]
            Mci[M1].State = IDLE;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033de:	2200      	movs	r2, #0
 80033e0:	765a      	strb	r2, [r3, #25]
          }
          else
          {
            /* nothing to do, FW waits for to stop */
          }
          break;
 80033e2:	e022      	b.n	800342a <TSK_MediumFrequencyTaskM1+0x48e>
        }

        case FAULT_OVER:
        {
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033e6:	7e1b      	ldrb	r3, [r3, #24]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d120      	bne.n	800342e <TSK_MediumFrequencyTaskM1+0x492>
          {
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	761a      	strb	r2, [r3, #24]
            Mci[M1].State = IDLE;
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	765a      	strb	r2, [r3, #25]
          else
          {
            /* nothing to do, FW stays in FAULT_OVER state until acknowledgement */
          }
        }
        break;
 80033f8:	e019      	b.n	800342e <TSK_MediumFrequencyTaskM1+0x492>

        case FAULT_NOW:
        {
          Mci[M1].State = FAULT_OVER;
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 80033fc:	220b      	movs	r2, #11
 80033fe:	765a      	strb	r2, [r3, #25]
        }
        break;
 8003400:	e016      	b.n	8003430 <TSK_MediumFrequencyTaskM1+0x494>
          break;
       }
    }
    else
    {
      Mci[M1].State = FAULT_OVER;
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003404:	220b      	movs	r2, #11
 8003406:	765a      	strb	r2, [r3, #25]
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003408:	e017      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800340a:	bf00      	nop
 800340c:	e015      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800340e:	bf00      	nop
 8003410:	e013      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003412:	bf00      	nop
 8003414:	e011      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
            break;
 8003416:	bf00      	nop
 8003418:	e00f      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800341a:	bf00      	nop
 800341c:	e00d      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800341e:	bf00      	nop
 8003420:	e00b      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003422:	bf00      	nop
 8003424:	e009      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 8003426:	bf00      	nop
 8003428:	e007      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
          break;
 800342a:	bf00      	nop
 800342c:	e005      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
        break;
 800342e:	bf00      	nop
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003430:	e003      	b.n	800343a <TSK_MediumFrequencyTaskM1+0x49e>
    }
  }
  else
  {
    Mci[M1].State = FAULT_NOW;
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <TSK_MediumFrequencyTaskM1+0x4bc>)
 8003434:	220a      	movs	r2, #10
 8003436:	765a      	strb	r2, [r3, #25]
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	bf00      	nop
 8003444:	200004bc 	.word	0x200004bc
 8003448:	20000820 	.word	0x20000820
 800344c:	20000208 	.word	0x20000208
 8003450:	20000100 	.word	0x20000100
 8003454:	20000240 	.word	0x20000240
 8003458:	20000800 	.word	0x20000800
 800345c:	2000084c 	.word	0x2000084c
 8003460:	20000010 	.word	0x20000010

08003464 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
 800346e:	2300      	movs	r3, #0
 8003470:	82bb      	strh	r3, [r7, #20]
 8003472:	2300      	movs	r3, #0
 8003474:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
 8003476:	2300      	movs	r3, #0
 8003478:	823b      	strh	r3, [r7, #16]
 800347a:	2300      	movs	r3, #0
 800347c:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
 800347e:	2300      	movs	r3, #0
 8003480:	81bb      	strh	r3, [r7, #12]
 8003482:	2300      	movs	r3, #0
 8003484:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	4a43      	ldr	r2, [pc, #268]	; (8003598 <FOC_Clear+0x134>)
 800348a:	2126      	movs	r1, #38	; 0x26
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	461a      	mov	r2, r3
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4a3e      	ldr	r2, [pc, #248]	; (8003598 <FOC_Clear+0x134>)
 80034a0:	2126      	movs	r1, #38	; 0x26
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	461a      	mov	r2, r3
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4a38      	ldr	r2, [pc, #224]	; (8003598 <FOC_Clear+0x134>)
 80034b8:	2126      	movs	r1, #38	; 0x26
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	330c      	adds	r3, #12
 80034c2:	461a      	mov	r2, r3
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	6010      	str	r0, [r2, #0]
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	4a32      	ldr	r2, [pc, #200]	; (8003598 <FOC_Clear+0x134>)
 80034d0:	2126      	movs	r1, #38	; 0x26
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3310      	adds	r3, #16
 80034da:	461a      	mov	r2, r3
 80034dc:	f107 0310 	add.w	r3, r7, #16
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	6010      	str	r0, [r2, #0]
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <FOC_Clear+0x134>)
 80034e8:	2126      	movs	r1, #38	; 0x26
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	331e      	adds	r3, #30
 80034f2:	2200      	movs	r2, #0
 80034f4:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	4a27      	ldr	r2, [pc, #156]	; (8003598 <FOC_Clear+0x134>)
 80034fa:	2126      	movs	r1, #38	; 0x26
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3310      	adds	r3, #16
 8003504:	3306      	adds	r3, #6
 8003506:	f107 0210 	add.w	r2, r7, #16
 800350a:	6810      	ldr	r0, [r2, #0]
 800350c:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <FOC_Clear+0x134>)
 8003512:	2126      	movs	r1, #38	; 0x26
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3318      	adds	r3, #24
 800351c:	3302      	adds	r3, #2
 800351e:	f107 020c 	add.w	r2, r7, #12
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <FOC_Clear+0x134>)
 800352a:	2126      	movs	r1, #38	; 0x26
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3320      	adds	r3, #32
 8003534:	2200      	movs	r2, #0
 8003536:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <FOC_Clear+0x138>)
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f007 f831 	bl	800a5aa <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <FOC_Clear+0x13c>)
 800354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f007 f829 	bl	800a5aa <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <FOC_Clear+0x140>)
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	4618      	mov	r0, r3
 8003562:	f007 ff0e 	bl	800b382 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <FOC_Clear+0x144>)
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fd5a 	bl	8004028 <PWMC_SwitchOffPWM>

  if (NULL == pFF[bMotor])
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <FOC_Clear+0x148>)
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d006      	beq.n	800358e <FOC_Clear+0x12a>
  {
    /* Nothing to do */
  }
  else
  {
    FF_Clear(pFF[bMotor]);
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <FOC_Clear+0x148>)
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	4618      	mov	r0, r3
 800358a:	f006 f8b1 	bl	80096f0 <FF_Clear>
  }

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000820 	.word	0x20000820
 800359c:	200004c4 	.word	0x200004c4
 80035a0:	200004c8 	.word	0x200004c8
 80035a4:	200004bc 	.word	0x200004bc
 80035a8:	20000848 	.word	0x20000848
 80035ac:	200004d0 	.word	0x200004d0

080035b0 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
    if (M_NONE == bMotor)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2bff      	cmp	r3, #255	; 0xff
 80035be:	d00c      	beq.n	80035da <FOC_InitAdditionalMethods+0x2a>
    {
      /* Nothing to do */
    }
    else
    {
      if (NULL == pFF[bMotor])
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <FOC_InitAdditionalMethods+0x34>)
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <FOC_InitAdditionalMethods+0x2a>
      {
        /* Nothing to do */
      }
      else
      {
        FF_InitFOCAdditionalMethods(pFF[bMotor]);
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <FOC_InitAdditionalMethods+0x34>)
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f006 f9bb 	bl	8009950 <FF_InitFOCAdditionalMethods>
      }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200004d0 	.word	0x200004d0

080035e8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	4a25      	ldr	r2, [pc, #148]	; (800368c <FOC_CalcCurrRef+0xa4>)
 80035f6:	2126      	movs	r1, #38	; 0x26
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d13d      	bne.n	8003682 <FOC_CalcCurrRef+0x9a>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	4a21      	ldr	r2, [pc, #132]	; (8003690 <FOC_CalcCurrRef+0xa8>)
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	79fc      	ldrb	r4, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f008 f890 	bl	800b736 <STC_CalcTorqueReference>
 8003616:	4603      	mov	r3, r0
 8003618:	4619      	mov	r1, r3
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <FOC_CalcCurrRef+0xa4>)
 800361c:	2326      	movs	r3, #38	; 0x26
 800361e:	fb04 f303 	mul.w	r3, r4, r3
 8003622:	4413      	add	r3, r2
 8003624:	331e      	adds	r3, #30
 8003626:	460a      	mov	r2, r1
 8003628:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800362a:	79fa      	ldrb	r2, [r7, #7]
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	4917      	ldr	r1, [pc, #92]	; (800368c <FOC_CalcCurrRef+0xa4>)
 8003630:	2026      	movs	r0, #38	; 0x26
 8003632:	fb00 f202 	mul.w	r2, r0, r2
 8003636:	440a      	add	r2, r1
 8003638:	321e      	adds	r2, #30
 800363a:	f9b2 0000 	ldrsh.w	r0, [r2]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <FOC_CalcCurrRef+0xa4>)
 8003640:	2126      	movs	r1, #38	; 0x26
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3310      	adds	r3, #16
 800364a:	4602      	mov	r2, r0
 800364c:	801a      	strh	r2, [r3, #0]

    if (NULL == pFF[bMotor])
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <FOC_CalcCurrRef+0xac>)
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <FOC_CalcCurrRef+0x9a>
    {
      /* Nothing to do */
    }
    else
    {
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <FOC_CalcCurrRef+0xac>)
 800365e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <FOC_CalcCurrRef+0xa8>)
 8003668:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <FOC_CalcCurrRef+0xa4>)
 800366e:	2426      	movs	r4, #38	; 0x26
 8003670:	fb04 f303 	mul.w	r3, r4, r3
 8003674:	440b      	add	r3, r1
 8003676:	3310      	adds	r3, #16
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	460b      	mov	r3, r1
 800367c:	4619      	mov	r1, r3
 800367e:	f006 f847 	bl	8009710 <FF_VqdffComputation>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	20000820 	.word	0x20000820
 8003690:	200004bc 	.word	0x200004bc
 8003694:	200004d0 	.word	0x200004d0

08003698 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 80036a2:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <TSK_SetChargeBootCapDelayM1+0x1c>)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	8013      	strh	r3, [r2, #0]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	20000852 	.word	0x20000852

080036b8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  bool retVal = false;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 80036cc:	2301      	movs	r3, #1
 80036ce:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80036d0:	79fb      	ldrb	r3, [r7, #7]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000852 	.word	0x20000852

080036e4 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 80036ee:	4a04      	ldr	r2, [pc, #16]	; (8003700 <TSK_SetStopPermanencyTimeM1+0x1c>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	8013      	strh	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000854 	.word	0x20000854

08003704 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
  bool retVal = false;
 800370a:	2300      	movs	r3, #0
 800370c:	71fb      	strb	r3, [r7, #7]
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8003718:	2301      	movs	r3, #1
 800371a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 800371c:	79fb      	ldrb	r3, [r7, #7]
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000854 	.word	0x20000854

08003730 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <TSK_HighFrequencyTask+0xe8>)
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	321a      	adds	r2, #26
 8003742:	6810      	ldr	r0, [r2, #0]
 8003744:	6018      	str	r0, [r3, #0]
  if (SWITCH_OVER == Mci[M1].State)
 8003746:	4b35      	ldr	r3, [pc, #212]	; (800381c <TSK_HighFrequencyTask+0xec>)
 8003748:	7e5b      	ldrb	r3, [r3, #25]
 800374a:	2b13      	cmp	r3, #19
 800374c:	d113      	bne.n	8003776 <TSK_HighFrequencyTask+0x46>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <TSK_HighFrequencyTask+0xf0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f007 fbb6 	bl	800aec4 <REMNG_RampCompleted>
 8003758:	4603      	mov	r3, r0
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <TSK_HighFrequencyTask+0x46>
    {
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8003764:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <TSK_HighFrequencyTask+0xf0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f007 faeb 	bl	800ad44 <REMNG_Calc>
 800376e:	4603      	mov	r3, r0
 8003770:	b21a      	sxth	r2, r3
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <TSK_HighFrequencyTask+0xe8>)
 8003774:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8003776:	f000 f861 	bl	800383c <FOC_CurrControllerM1>
 800377a:	4603      	mov	r3, r0
 800377c:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_DURATION)
 800377e:	8abb      	ldrh	r3, [r7, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d105      	bne.n	8003790 <TSK_HighFrequencyTask+0x60>
  {
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	2101      	movs	r1, #1
 8003788:	4824      	ldr	r0, [pc, #144]	; (800381c <TSK_HighFrequencyTask+0xec>)
 800378a:	f7fe fea1 	bl	80024d0 <MCI_FaultProcessing>
 800378e:	e030      	b.n	80037f2 <TSK_HighFrequencyTask+0xc2>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8003790:	4824      	ldr	r0, [pc, #144]	; (8003824 <TSK_HighFrequencyTask+0xf4>)
 8003792:	f007 fd19 	bl	800b1c8 <RUC_FirstAccelerationStageReached>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <TSK_HighFrequencyTask+0xe8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 80037a0:	4821      	ldr	r0, [pc, #132]	; (8003828 <TSK_HighFrequencyTask+0xf8>)
 80037a2:	f005 fe8b 	bl	80094bc <VBS_GetAvBusVoltage_d>
 80037a6:	4603      	mov	r3, r0
 80037a8:	823b      	strh	r3, [r7, #16]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	4619      	mov	r1, r3
 80037b0:	481e      	ldr	r0, [pc, #120]	; (800382c <TSK_HighFrequencyTask+0xfc>)
 80037b2:	f008 f891 	bl	800b8d8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 80037b6:	481d      	ldr	r0, [pc, #116]	; (800382c <TSK_HighFrequencyTask+0xfc>)
 80037b8:	f008 fc28 	bl	800c00c <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	f083 0301 	eor.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <TSK_HighFrequencyTask+0x9e>
    {
      STO_ResetPLL(&STO_PLL_M1);
 80037c8:	4818      	ldr	r0, [pc, #96]	; (800382c <TSK_HighFrequencyTask+0xfc>)
 80037ca:	f008 fe87 	bl	800c4dc <STO_ResetPLL>
    }
    /*  only for sensor-less */
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <TSK_HighFrequencyTask+0xec>)
 80037d0:	7e5b      	ldrb	r3, [r3, #25]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d003      	beq.n	80037de <TSK_HighFrequencyTask+0xae>
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <TSK_HighFrequencyTask+0xec>)
 80037d8:	7e5b      	ldrb	r3, [r3, #25]
 80037da:	2b13      	cmp	r3, #19
 80037dc:	d109      	bne.n	80037f2 <TSK_HighFrequencyTask+0xc2>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80037de:	4813      	ldr	r0, [pc, #76]	; (800382c <TSK_HighFrequencyTask+0xfc>)
 80037e0:	f007 feeb 	bl	800b5ba <SPD_GetElAngle>
 80037e4:	4603      	mov	r3, r0
 80037e6:	80fb      	strh	r3, [r7, #6]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80037e8:	1dbb      	adds	r3, r7, #6
 80037ea:	4619      	mov	r1, r3
 80037ec:	4810      	ldr	r0, [pc, #64]	; (8003830 <TSK_HighFrequencyTask+0x100>)
 80037ee:	f008 ff2c 	bl	800c64a <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <TSK_HighFrequencyTask+0x104>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <TSK_HighFrequencyTask+0x104>)
 80037fa:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <TSK_HighFrequencyTask+0x108>)
 80037fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <TSK_HighFrequencyTask+0xdc>
  {
    /* Nothing to do */
  }
  else
  {
    MCPA_dataLog (&MCPA_UART_A);
 8003806:	480c      	ldr	r0, [pc, #48]	; (8003838 <TSK_HighFrequencyTask+0x108>)
 8003808:	f006 fb30 	bl	8009e6c <MCPA_dataLog>
  }

  return (bMotorNbr);
 800380c:	7dfb      	ldrb	r3, [r7, #23]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000820 	.word	0x20000820
 800381c:	20000800 	.word	0x20000800
 8003820:	2000084c 	.word	0x2000084c
 8003824:	20000100 	.word	0x20000100
 8003828:	200003b8 	.word	0x200003b8
 800382c:	20000240 	.word	0x20000240
 8003830:	20000208 	.word	0x20000208
 8003834:	20001a68 	.word	0x20001a68
 8003838:	20000580 	.word	0x20000580

0800383c <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <FOC_CurrControllerM1+0x124>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f007 fd8a 	bl	800b360 <STC_GetSpeedSensor>
 800384c:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 800384e:	69f8      	ldr	r0, [r7, #28]
 8003850:	f007 feb3 	bl	800b5ba <SPD_GetElAngle>
 8003854:	4603      	mov	r3, r0
 8003856:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8003858:	69f8      	ldr	r0, [r7, #28]
 800385a:	f007 fed5 	bl	800b608 <SPD_GetInstElSpeedDpp>
 800385e:	2300      	movs	r3, #0
 8003860:	b29a      	uxth	r2, r3
 8003862:	8b7b      	ldrh	r3, [r7, #26]
 8003864:	4413      	add	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <FOC_CurrControllerM1+0x128>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f107 020c 	add.w	r2, r7, #12
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f999 	bl	8003bac <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff f836 	bl	80028ec <MCM_Clarke>
 8003880:	4603      	mov	r3, r0
 8003882:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003884:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003888:	4619      	mov	r1, r3
 800388a:	68b8      	ldr	r0, [r7, #8]
 800388c:	f7ff f878 	bl	8002980 <MCM_Park>
 8003890:	4603      	mov	r3, r0
 8003892:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <FOC_CurrControllerM1+0x12c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a34      	ldr	r2, [pc, #208]	; (800396c <FOC_CurrControllerM1+0x130>)
 800389a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800389e:	4611      	mov	r1, r2
 80038a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80038a4:	1a8a      	subs	r2, r1, r2
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f006 ff47 	bl	800a73c <PI_Controller>
 80038ae:	4603      	mov	r3, r0
 80038b0:	823b      	strh	r3, [r7, #16]
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <FOC_CurrControllerM1+0x134>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2d      	ldr	r2, [pc, #180]	; (800396c <FOC_CurrControllerM1+0x130>)
 80038b8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80038bc:	4611      	mov	r1, r2
 80038be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038c2:	1a8a      	subs	r2, r1, r2
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f006 ff38 	bl	800a73c <PI_Controller>
 80038cc:	4603      	mov	r3, r0
 80038ce:	827b      	strh	r3, [r7, #18]
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <FOC_CurrControllerM1+0x138>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6939      	ldr	r1, [r7, #16]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 ffb2 	bl	8009840 <FF_VqdConditioning>
 80038dc:	4603      	mov	r3, r0
 80038de:	613b      	str	r3, [r7, #16]
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80038e0:	6939      	ldr	r1, [r7, #16]
 80038e2:	4825      	ldr	r0, [pc, #148]	; (8003978 <FOC_CurrControllerM1+0x13c>)
 80038e4:	f005 fe1b 	bl	800951e <Circle_Limitation>
 80038e8:	4603      	mov	r3, r0
 80038ea:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80038ec:	69f8      	ldr	r0, [r7, #28]
 80038ee:	f007 fe8b 	bl	800b608 <SPD_GetInstElSpeedDpp>
 80038f2:	2300      	movs	r3, #0
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	4413      	add	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80038fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003902:	4619      	mov	r1, r3
 8003904:	6938      	ldr	r0, [r7, #16]
 8003906:	f7ff f8b3 	bl	8002a70 <MCM_Rev_Park>
 800390a:	4603      	mov	r3, r0
 800390c:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <FOC_CurrControllerM1+0x128>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f957 	bl	8003bc8 <PWMC_SetPhaseVoltage>
 800391a:	4603      	mov	r3, r0
 800391c:	833b      	strh	r3, [r7, #24]

  FOCVars[M1].Vqd = Vqd;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <FOC_CurrControllerM1+0x130>)
 8003920:	3316      	adds	r3, #22
 8003922:	f107 0210 	add.w	r2, r7, #16
 8003926:	6810      	ldr	r0, [r2, #0]
 8003928:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <FOC_CurrControllerM1+0x130>)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6013      	str	r3, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003930:	4a0e      	ldr	r2, [pc, #56]	; (800396c <FOC_CurrControllerM1+0x130>)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6053      	str	r3, [r2, #4]
  FOCVars[M1].Iqd = Iqd;
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <FOC_CurrControllerM1+0x130>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	60d3      	str	r3, [r2, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <FOC_CurrControllerM1+0x130>)
 800393e:	331a      	adds	r3, #26
 8003940:	1d3a      	adds	r2, r7, #4
 8003942:	6810      	ldr	r0, [r2, #0]
 8003944:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <FOC_CurrControllerM1+0x130>)
 8003948:	8b7b      	ldrh	r3, [r7, #26]
 800394a:	8413      	strh	r3, [r2, #32]

  FF_DataProcess(pFF[M1]);
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <FOC_CurrControllerM1+0x138>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f005 ffc1 	bl	80098d8 <FF_DataProcess>
  return(hCodeError);
 8003956:	8b3b      	ldrh	r3, [r7, #24]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200004bc 	.word	0x200004bc
 8003964:	20000848 	.word	0x20000848
 8003968:	200004c4 	.word	0x200004c4
 800396c:	20000820 	.word	0x20000820
 8003970:	200004c8 	.word	0x200004c8
 8003974:	200004d0 	.word	0x200004d0
 8003978:	200003fc 	.word	0x200003fc

0800397c <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (1U == bMCBootCompleted)
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <TSK_SafetyTask+0x1c>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d104      	bne.n	8003994 <TSK_SafetyTask+0x18>
  {
    TSK_SafetyTask_PWMOFF(M1);
 800398a:	2000      	movs	r0, #0
 800398c:	f000 f806 	bl	800399c <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv();
 8003990:	f002 fd1a 	bl	80063c8 <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000856 	.word	0x20000856

0800399c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
 80039a6:	2300      	movs	r3, #0
 80039a8:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 80039aa:	230e      	movs	r3, #14
 80039ac:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	3310      	adds	r3, #16
 80039b4:	443b      	add	r3, r7
 80039b6:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <TSK_SafetyTask_PWMOFF+0x108>)
 80039be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f006 fd2b 	bl	800a41e <NTC_CalcAvTemp>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4023      	ands	r3, r4
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b21a      	sxth	r2, r3
 80039d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <TSK_SafetyTask_PWMOFF+0x10c>)
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb70 	bl	80040c8 <PWMC_CheckOverCurrent>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	3310      	adds	r3, #16
 80039fe:	443b      	add	r3, r7
 8003a00:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8003a04:	4829      	ldr	r0, [pc, #164]	; (8003aac <TSK_SafetyTask_PWMOFF+0x110>)
 8003a06:	f007 f8cc 	bl	800aba2 <RVBS_CalcAvVbus>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4023      	ands	r3, r4
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b21a      	sxth	r2, r3
 8003a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	81fb      	strh	r3, [r7, #14]
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <TSK_SafetyTask_PWMOFF+0x114>)
 8003a22:	1898      	adds	r0, r3, r2
 8003a24:	89fb      	ldrh	r3, [r7, #14]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	89fb      	ldrh	r3, [r7, #14]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fe fd4f 	bl	80024d0 <MCI_FaultProcessing>

  if ((M1 == bMotor) && (MC_UNDER_VOLT == (CodeReturn & MC_UNDER_VOLT)) && ICLFaultTreatedM1){
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10c      	bne.n	8003a52 <TSK_SafetyTask_PWMOFF+0xb6>
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <TSK_SafetyTask_PWMOFF+0xb6>
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <TSK_SafetyTask_PWMOFF+0x118>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <TSK_SafetyTask_PWMOFF+0xb6>
    ICLFaultTreatedM1 = false;
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <TSK_SafetyTask_PWMOFF+0x118>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
  }

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	015b      	lsls	r3, r3, #5
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <TSK_SafetyTask_PWMOFF+0x114>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fde3 	bl	8002626 <MCI_GetFaultState>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d019      	beq.n	8003a9a <TSK_SafetyTask_PWMOFF+0xfe>
  {
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <TSK_SafetyTask_PWMOFF+0x10c>)
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fada 	bl	8004028 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <TSK_SafetyTask_PWMOFF+0x11c>)
 8003a76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <TSK_SafetyTask_PWMOFF+0xe8>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
 8003a7e:	480e      	ldr	r0, [pc, #56]	; (8003ab8 <TSK_SafetyTask_PWMOFF+0x11c>)
 8003a80:	f006 fb46 	bl	800a110 <MCPA_flushDataLog>
    }
    FOC_Clear(bMotor);
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fcec 	bl	8003464 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <TSK_SafetyTask_PWMOFF+0x120>)
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f006 ff24 	bl	800a8e2 <PQD_Clear>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200004c0 	.word	0x200004c0
 8003aa8:	20000848 	.word	0x20000848
 8003aac:	200003b8 	.word	0x200003b8
 8003ab0:	20000800 	.word	0x20000800
 8003ab4:	200004e4 	.word	0x200004e4
 8003ab8:	20000580 	.word	0x20000580
 8003abc:	200004cc 	.word	0x200004cc

08003ac0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <TSK_HardwareFaultTask+0x1c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f009 fe95 	bl	800d7f8 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <TSK_HardwareFaultTask+0x20>)
 8003ad4:	f7fe fcfc 	bl	80024d0 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000848 	.word	0x20000848
 8003ae0:	20000800 	.word	0x20000800

08003ae4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 8003ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aec:	481b      	ldr	r0, [pc, #108]	; (8003b5c <mc_lock_pins+0x78>)
 8003aee:	f7ff f8c4 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8003af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af6:	4819      	ldr	r0, [pc, #100]	; (8003b5c <mc_lock_pins+0x78>)
 8003af8:	f7ff f8bf 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
 8003afc:	2140      	movs	r1, #64	; 0x40
 8003afe:	4817      	ldr	r0, [pc, #92]	; (8003b5c <mc_lock_pins+0x78>)
 8003b00:	f7ff f8bb 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8003b04:	2101      	movs	r1, #1
 8003b06:	4816      	ldr	r0, [pc, #88]	; (8003b60 <mc_lock_pins+0x7c>)
 8003b08:	f7ff f8b7 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 8003b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b10:	4812      	ldr	r0, [pc, #72]	; (8003b5c <mc_lock_pins+0x78>)
 8003b12:	f7ff f8b2 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8003b16:	2102      	movs	r1, #2
 8003b18:	4811      	ldr	r0, [pc, #68]	; (8003b60 <mc_lock_pins+0x7c>)
 8003b1a:	f7ff f8ae 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	480e      	ldr	r0, [pc, #56]	; (8003b5c <mc_lock_pins+0x78>)
 8003b22:	f7ff f8aa 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ICL_SHUT_OUT_GPIO_Port, M1_ICL_SHUT_OUT_Pin);
 8003b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b2a:	480e      	ldr	r0, [pc, #56]	; (8003b64 <mc_lock_pins+0x80>)
 8003b2c:	f7ff f8a5 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8003b30:	2101      	movs	r1, #1
 8003b32:	480a      	ldr	r0, [pc, #40]	; (8003b5c <mc_lock_pins+0x78>)
 8003b34:	f7ff f8a1 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4808      	ldr	r0, [pc, #32]	; (8003b5c <mc_lock_pins+0x78>)
 8003b3c:	f7ff f89d 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8003b40:	2102      	movs	r1, #2
 8003b42:	4808      	ldr	r0, [pc, #32]	; (8003b64 <mc_lock_pins+0x80>)
 8003b44:	f7ff f899 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 8003b48:	2104      	movs	r1, #4
 8003b4a:	4806      	ldr	r0, [pc, #24]	; (8003b64 <mc_lock_pins+0x80>)
 8003b4c:	f7ff f895 	bl	8002c7a <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8003b50:	2101      	movs	r1, #1
 8003b52:	4804      	ldr	r0, [pc, #16]	; (8003b64 <mc_lock_pins+0x80>)
 8003b54:	f7ff f891 	bl	8002c7a <LL_GPIO_LockPin>
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020800 	.word	0x40020800

08003b68 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8003b6c:	f004 face 	bl	800810c <HAL_RCC_GetHCLKFreq>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <MX_MotorControl_Init+0x38>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	09db      	lsrs	r3, r3, #7
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fe79 	bl	8007872 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <MX_MotorControl_Init+0x3c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f003 fe55 	bl	800783a <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8003b90:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_MotorControl_Init+0x40>)
 8003b92:	f7ff f88f 	bl	8002cb4 <MCboot>
  mc_lock_pins();
 8003b96:	f7ff ffa5 	bl	8003ae4 <mc_lock_pins>
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	10624dd3 	.word	0x10624dd3
 8003ba4:	200005c0 	.word	0x200005c0
 8003ba8:	200019e4 	.word	0x200019e4

08003bac <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6839      	ldr	r1, [r7, #0]
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003bd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	623b      	str	r3, [r7, #32]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003be2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003bee:	fb03 f202 	mul.w	r2, r3, r2
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	07db      	lsls	r3, r3, #31
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]

    wX = wUBeta;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    wY = (wUBeta + wUAlpha) / 2;
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4413      	add	r3, r2
 8003c06:	0fda      	lsrs	r2, r3, #31
 8003c08:	4413      	add	r3, r2
 8003c0a:	105b      	asrs	r3, r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
    wZ = (wUBeta - wUAlpha) / 2;
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	0fda      	lsrs	r2, r3, #31
 8003c16:	4413      	add	r3, r2
 8003c18:	105b      	asrs	r3, r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f280 80c3 	bge.w	8003daa <PWMC_SetPhaseVoltage+0x1e2>
    {
      if (wZ < 0)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da3e      	bge.n	8003ca8 <PWMC_SetPhaseVoltage+0xe0>
      {
        pHandle->Sector = SECTOR_5;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da03      	bge.n	8003c50 <PWMC_SetPhaseVoltage+0x88>
 8003c48:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003c4c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003c50:	149b      	asrs	r3, r3, #18
 8003c52:	440b      	add	r3, r1
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        wTimePhB = wTimePhA + (wZ / 131072);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da03      	bge.n	8003c64 <PWMC_SetPhaseVoltage+0x9c>
 8003c5c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003c60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c64:	145b      	asrs	r3, r3, #17
 8003c66:	461a      	mov	r2, r3
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	4413      	add	r3, r2
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da03      	bge.n	8003c7c <PWMC_SetPhaseVoltage+0xb4>
 8003c74:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003c78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c7c:	145b      	asrs	r3, r3, #17
 8003c7e:	425b      	negs	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	4413      	add	r3, r2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24

        pHandle->lowDuty = (uint16_t)wTimePhC;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003ca6:	e142      	b.n	8003f2e <PWMC_SetPhaseVoltage+0x366>
      }
      else /* wZ >= 0 */
        if (wX <= 0)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	dc3e      	bgt.n	8003d2c <PWMC_SetPhaseVoltage+0x164>
        {
          pHandle->Sector = SECTOR_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da03      	bge.n	8003cd4 <PWMC_SetPhaseVoltage+0x10c>
 8003ccc:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003cd0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003cd4:	149b      	asrs	r3, r3, #18
 8003cd6:	440b      	add	r3, r1
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhB = wTimePhA + (wZ / 131072);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da03      	bge.n	8003ce8 <PWMC_SetPhaseVoltage+0x120>
 8003ce0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003ce4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ce8:	145b      	asrs	r3, r3, #17
 8003cea:	461a      	mov	r2, r3
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	4413      	add	r3, r2
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
          wTimePhC = wTimePhB - (wX / 131072);
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da03      	bge.n	8003d00 <PWMC_SetPhaseVoltage+0x138>
 8003cf8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003cfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d00:	145b      	asrs	r3, r3, #17
 8003d02:	425b      	negs	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	4413      	add	r3, r2
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24

          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003d2a:	e100      	b.n	8003f2e <PWMC_SetPhaseVoltage+0x366>
        }
        else /* wX > 0 */
        {
          pHandle->Sector = SECTOR_3;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	4619      	mov	r1, r3
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da03      	bge.n	8003d52 <PWMC_SetPhaseVoltage+0x18a>
 8003d4a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003d4e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003d52:	149b      	asrs	r3, r3, #18
 8003d54:	440b      	add	r3, r1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhC = wTimePhA - (wY / 131072);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da03      	bge.n	8003d66 <PWMC_SetPhaseVoltage+0x19e>
 8003d5e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d66:	145b      	asrs	r3, r3, #17
 8003d68:	425b      	negs	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	4413      	add	r3, r2
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
          wTimePhB = wTimePhC + (wX / 131072);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da03      	bge.n	8003d80 <PWMC_SetPhaseVoltage+0x1b8>
 8003d78:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003d7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d80:	145b      	asrs	r3, r3, #17
 8003d82:	461a      	mov	r2, r3
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	4413      	add	r3, r2
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28

          pHandle->lowDuty = (uint16_t)wTimePhB;
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003da8:	e0c1      	b.n	8003f2e <PWMC_SetPhaseVoltage+0x366>
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db3e      	blt.n	8003e2e <PWMC_SetPhaseVoltage+0x266>
      {
        pHandle->Sector = SECTOR_2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da03      	bge.n	8003dd6 <PWMC_SetPhaseVoltage+0x20e>
 8003dce:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003dd2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003dd6:	149b      	asrs	r3, r3, #18
 8003dd8:	440b      	add	r3, r1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        wTimePhB = wTimePhA + (wZ / 131072);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da03      	bge.n	8003dea <PWMC_SetPhaseVoltage+0x222>
 8003de2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003de6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dea:	145b      	asrs	r3, r3, #17
 8003dec:	461a      	mov	r2, r3
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	4413      	add	r3, r2
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
        wTimePhC = wTimePhA - (wY / 131072);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da03      	bge.n	8003e02 <PWMC_SetPhaseVoltage+0x23a>
 8003dfa:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003dfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e02:	145b      	asrs	r3, r3, #17
 8003e04:	425b      	negs	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	4413      	add	r3, r2
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003e2c:	e07f      	b.n	8003f2e <PWMC_SetPhaseVoltage+0x366>
      }
      else /* wZ < 0 */
        if ( wX <= 0 )
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dc3e      	bgt.n	8003eb2 <PWMC_SetPhaseVoltage+0x2ea>
        {
          pHandle->Sector = SECTOR_6;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2205      	movs	r2, #5
 8003e38:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da03      	bge.n	8003e5a <PWMC_SetPhaseVoltage+0x292>
 8003e52:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003e56:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003e5a:	149b      	asrs	r3, r3, #18
 8003e5c:	440b      	add	r3, r1
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhC = wTimePhA - (wY / 131072);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da03      	bge.n	8003e6e <PWMC_SetPhaseVoltage+0x2a6>
 8003e66:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003e6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e6e:	145b      	asrs	r3, r3, #17
 8003e70:	425b      	negs	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	4413      	add	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
          wTimePhB = wTimePhC + (wX / 131072);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da03      	bge.n	8003e88 <PWMC_SetPhaseVoltage+0x2c0>
 8003e80:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003e84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e88:	145b      	asrs	r3, r3, #17
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	4413      	add	r3, r2
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28

          pHandle->lowDuty = (uint16_t)wTimePhA;
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003eb0:	e03d      	b.n	8003f2e <PWMC_SetPhaseVoltage+0x366>
        }
        else /* wX > 0 */
        {
          pHandle->Sector = SECTOR_1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da03      	bge.n	8003ed8 <PWMC_SetPhaseVoltage+0x310>
 8003ed0:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003ed4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ed8:	149b      	asrs	r3, r3, #18
 8003eda:	440b      	add	r3, r1
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
          wTimePhB = wTimePhA + (wZ / 131072);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da03      	bge.n	8003eec <PWMC_SetPhaseVoltage+0x324>
 8003ee4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003ee8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003eec:	145b      	asrs	r3, r3, #17
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	4413      	add	r3, r2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
          wTimePhC = wTimePhB - (wX / 131072);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da03      	bge.n	8003f04 <PWMC_SetPhaseVoltage+0x33c>
 8003efc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8003f00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f04:	145b      	asrs	r3, r3, #17
 8003f06:	425b      	negs	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	4413      	add	r3, r2
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24

          pHandle->lowDuty = (uint16_t)wTimePhA;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	dd02      	ble.n	8003f3a <PWMC_SetPhaseVoltage+0x372>
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	e000      	b.n	8003f3c <PWMC_SetPhaseVoltage+0x374>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	dd02      	ble.n	8003f4c <PWMC_SetPhaseVoltage+0x384>
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	e000      	b.n	8003f4e <PWMC_SetPhaseVoltage+0x386>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dd02      	ble.n	8003f60 <PWMC_SetPhaseVoltage+0x398>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	e000      	b.n	8003f62 <PWMC_SetPhaseVoltage+0x39a>
 8003f60:	2200      	movs	r2, #0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

    if (1U == pHandle->DTTest)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d14f      	bne.n	8004012 <PWMC_SetPhaseVoltage+0x44a>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	dd09      	ble.n	8003f90 <PWMC_SetPhaseVoltage+0x3c8>
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f86:	4413      	add	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f8e:	e008      	b.n	8003fa2 <PWMC_SetPhaseVoltage+0x3da>
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dd0b      	ble.n	8003fc4 <PWMC_SetPhaseVoltage+0x3fc>
      {
        pHandle->CntPhB += pHandle->DTCompCnt;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fb8:	4413      	add	r3, r2
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003fc2:	e00a      	b.n	8003fda <PWMC_SetPhaseVoltage+0x412>
      }
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }

      if (pHandle->Ic > 0)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dd0b      	ble.n	8003ffc <PWMC_SetPhaseVoltage+0x434>
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003ffa:	e00a      	b.n	8004012 <PWMC_SetPhaseVoltage+0x44a>
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	4603      	mov	r3, r0
 800401c:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
 800401e:	89fb      	ldrh	r3, [r7, #14]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3730      	adds	r7, #48	; 0x30
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ffda 	bl	8004028 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
      retVal = true;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e01d      	b.n	80040be <PWMC_CurrentReadingCalibr+0x66>
    }
    else if (CRC_EXEC == action)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d11a      	bne.n	80040be <PWMC_CurrentReadingCalibr+0x66>
    {
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800408e:	2b00      	cmp	r3, #0
 8004090:	d013      	beq.n	80040ba <PWMC_CurrentReadingCalibr+0x62>
      {
        pHandle->OffCalibrWaitTimeCounter--;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d108      	bne.n	80040be <PWMC_CurrentReadingCalibr+0x66>
        {
          pHandle->pFctCurrReadingCalib(pHandle);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
          retVal = true;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e001      	b.n	80040be <PWMC_CurrentReadingCalibr+0x66>
        }
      }
      else
      {
        retVal = true;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      /* Nothing to do */
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <PWMC_CheckOverCurrent>:
  *	@param  pHandle: Handler of the current instance of the PWM component.
  * @retval #MC_BREAK_IN if an overcurrent has occurred since last call,
  *         and #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	4603      	mov	r3, r0
#endif
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61bb      	str	r3, [r7, #24]
    uint8_t * txData = pHandle->txBuffer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	617b      	str	r3, [r7, #20]
    int16_t rxLength = pHandle->rxLength;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	899b      	ldrh	r3, [r3, #12]
 8004102:	827b      	strh	r3, [r7, #18]
    uint16_t size = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	813b      	strh	r3, [r7, #8]
    uint8_t number_of_item =0;
 8004108:	2300      	movs	r3, #0
 800410a:	747b      	strb	r3, [r7, #17]
    pHandle->txLength = 0;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	81da      	strh	r2, [r3, #14]
    uint8_t accessResult;
    while (rxLength > 0)
 8004112:	e050      	b.n	80041b6 <RI_SetRegCommandParser+0xd4>
    {
       number_of_item++;
 8004114:	7c7b      	ldrb	r3, [r7, #17]
 8004116:	3301      	adds	r3, #1
 8004118:	747b      	strb	r3, [r7, #17]
      dataElementID = (uint16_t *) rxData;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	60fb      	str	r3, [r7, #12]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800411e:	8a7b      	ldrh	r3, [r7, #18]
 8004120:	3b02      	subs	r3, #2
 8004122:	b29b      	uxth	r3, r3
 8004124:	827b      	strh	r3, [r7, #18]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8818      	ldrh	r0, [r3, #0]
 8004130:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004134:	f107 0208 	add.w	r2, r7, #8
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	f000 f897 	bl	800426c <RI_SetReg>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]

      /* Prepare next data*/
      rxLength = (int16_t) (rxLength - size);
 8004142:	8a7a      	ldrh	r2, [r7, #18]
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	827b      	strh	r3, [r7, #18]
      rxData = rxData+size;
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	461a      	mov	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4413      	add	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
      /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8004156:	7c7b      	ldrb	r3, [r7, #17]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <RI_SetRegCommandParser+0x88>
 800415c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <RI_SetRegCommandParser+0x88>
      {
        retVal = accessResult;
 8004164:	7afb      	ldrb	r3, [r7, #11]
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e025      	b.n	80041b6 <RI_SetRegCommandParser+0xd4>
      }
      else
      {/* Store the result for each access to be able to report failling access */
        if (txSyncFreeSpace !=0 )
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01e      	beq.n	80041ae <RI_SetRegCommandParser+0xcc>
        {
          *txData = accessResult;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	7afa      	ldrb	r2, [r7, #11]
 8004174:	701a      	strb	r2, [r3, #0]
          txData = txData+1;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
          pHandle->txLength++;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	89db      	ldrh	r3, [r3, #14]
 8004180:	3301      	adds	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	81da      	strh	r2, [r3, #14]
          txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	3b01      	subs	r3, #1
 800418c:	807b      	strh	r3, [r7, #2]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800418e:	7afb      	ldrb	r3, [r7, #11]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <RI_SetRegCommandParser+0xb6>
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	e000      	b.n	800419a <RI_SetRegCommandParser+0xb8>
 8004198:	2301      	movs	r3, #1
 800419a:	77fb      	strb	r3, [r7, #31]
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	2b07      	cmp	r3, #7
 80041a0:	d002      	beq.n	80041a8 <RI_SetRegCommandParser+0xc6>
 80041a2:	7afb      	ldrb	r3, [r7, #11]
 80041a4:	2b0a      	cmp	r3, #10
 80041a6:	d106      	bne.n	80041b6 <RI_SetRegCommandParser+0xd4>
          { /* From this point we are not able to continue to decode CMD buffer*/
            /* We stop the parsing */
            rxLength = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	827b      	strh	r3, [r7, #18]
 80041ac:	e003      	b.n	80041b6 <RI_SetRegCommandParser+0xd4>
        }
        else
        {
          /* Stop parsing the cmd buffer as no space to answer */
          /* If we reach this state, chances are high the command was badly formated or received */
          rxLength = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	827b      	strh	r3, [r7, #18]
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80041b2:	2308      	movs	r3, #8
 80041b4:	77fb      	strb	r3, [r7, #31]
    while (rxLength > 0)
 80041b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	dcaa      	bgt.n	8004114 <RI_SetRegCommandParser+0x32>
        }
      }
    }
    /* If all accesses are fine, just one global MCP_CMD_OK is required*/
      if (MCP_CMD_OK == retVal)
 80041be:	7ffb      	ldrb	r3, [r7, #31]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <RI_SetRegCommandParser+0xe8>
    {
      pHandle->txLength = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	81da      	strh	r2, [r3, #14]
      /* Nothing to do */
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <RI_GetRegCommandParser>:

__weak uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_NOK;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
  }
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
    uint8_t * txData = pHandle->txBuffer;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	617b      	str	r3, [r7, #20]
    uint16_t size = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	817b      	strh	r3, [r7, #10]
    uint16_t rxLength = pHandle->rxLength;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	899b      	ldrh	r3, [r3, #12]
 80041f8:	827b      	strh	r3, [r7, #18]
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	823b      	strh	r3, [r7, #16]

    pHandle->txLength = 0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	81da      	strh	r2, [r3, #14]

    while (rxLength > 0U)
 8004204:	e029      	b.n	800425a <RI_GetRegCommandParser+0x86>
    {
      dataElementID = (uint16_t *) rxData;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	60fb      	str	r3, [r7, #12]
      rxLength = rxLength-MCP_ID_SIZE;
 800420a:	8a7b      	ldrh	r3, [r7, #18]
 800420c:	3b02      	subs	r3, #2
 800420e:	827b      	strh	r3, [r7, #18]
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3302      	adds	r3, #2
 8004214:	61bb      	str	r3, [r7, #24]
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8818      	ldrh	r0, [r3, #0]
 800421a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800421e:	f107 020a 	add.w	r2, r7, #10
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	f000 fd58 	bl	8004cd8 <RI_GetReg>
 8004228:	4603      	mov	r3, r0
 800422a:	77fb      	strb	r3, [r7, #31]
      if (retVal == MCP_CMD_OK )
 800422c:	7ffb      	ldrb	r3, [r7, #31]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d111      	bne.n	8004256 <RI_GetRegCommandParser+0x82>
      {
        txData = txData+size;
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	461a      	mov	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4413      	add	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
        pHandle->txLength += size;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	89da      	ldrh	r2, [r3, #14]
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	4413      	add	r3, r2
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	81da      	strh	r2, [r3, #14]
        freeSpaceS16 = freeSpaceS16-size;
 800424a:	8a3a      	ldrh	r2, [r7, #16]
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	b29b      	uxth	r3, r3
 8004252:	823b      	strh	r3, [r7, #16]
 8004254:	e001      	b.n	800425a <RI_GetRegCommandParser+0x86>
      }
      else
      {
        rxLength = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	827b      	strh	r3, [r7, #18]
    while (rxLength > 0U)
 800425a:	8a7b      	ldrh	r3, [r7, #18]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1d2      	bne.n	8004206 <RI_GetRegCommandParser+0x32>
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8004260:	7ffb      	ldrb	r3, [r7, #31]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <RI_SetReg>:

uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b09c      	sub	sp, #112	; 0x70
 8004270:	af00      	add	r7, sp, #0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	4603      	mov	r3, r0
 800427a:	81fb      	strh	r3, [r7, #14]
 800427c:	4613      	mov	r3, r2
 800427e:	81bb      	strh	r3, [r7, #12]
  uint8_t retVal = MCP_CMD_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    uint8_t motorID;
    uint8_t typeID;

    typeID = (uint8_t)dataID & TYPE_MASK;
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004298:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    motorID = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    MCI_Handle_t *pMCIN = &Mci[motorID];
 80042a2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	4a44      	ldr	r2, [pc, #272]	; (80043bc <RI_SetReg+0x150>)
 80042aa:	4413      	add	r3, r2
 80042ac:	667b      	str	r3, [r7, #100]	; 0x64

    switch (typeID)
 80042ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80042b2:	3b08      	subs	r3, #8
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	f200 84fa 	bhi.w	8004cae <RI_SetReg+0xa42>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <RI_SetReg+0x54>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	08004345 	.word	0x08004345
 80042c4:	08004caf 	.word	0x08004caf
 80042c8:	08004caf 	.word	0x08004caf
 80042cc:	08004caf 	.word	0x08004caf
 80042d0:	08004caf 	.word	0x08004caf
 80042d4:	08004caf 	.word	0x08004caf
 80042d8:	08004caf 	.word	0x08004caf
 80042dc:	08004caf 	.word	0x08004caf
 80042e0:	080043c1 	.word	0x080043c1
 80042e4:	08004caf 	.word	0x08004caf
 80042e8:	08004caf 	.word	0x08004caf
 80042ec:	08004caf 	.word	0x08004caf
 80042f0:	08004caf 	.word	0x08004caf
 80042f4:	08004caf 	.word	0x08004caf
 80042f8:	08004caf 	.word	0x08004caf
 80042fc:	08004caf 	.word	0x08004caf
 8004300:	080049fd 	.word	0x080049fd
 8004304:	08004caf 	.word	0x08004caf
 8004308:	08004caf 	.word	0x08004caf
 800430c:	08004caf 	.word	0x08004caf
 8004310:	08004caf 	.word	0x08004caf
 8004314:	08004caf 	.word	0x08004caf
 8004318:	08004caf 	.word	0x08004caf
 800431c:	08004caf 	.word	0x08004caf
 8004320:	08004abb 	.word	0x08004abb
 8004324:	08004caf 	.word	0x08004caf
 8004328:	08004caf 	.word	0x08004caf
 800432c:	08004caf 	.word	0x08004caf
 8004330:	08004caf 	.word	0x08004caf
 8004334:	08004caf 	.word	0x08004caf
 8004338:	08004caf 	.word	0x08004caf
 800433c:	08004caf 	.word	0x08004caf
 8004340:	08004ad9 	.word	0x08004ad9
    { //cstat !MISRAC2012-Rule-16.1
      case TYPE_DATA_8BIT:
      {
        switch (regID)
 8004344:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004348:	2bc8      	cmp	r3, #200	; 0xc8
 800434a:	d029      	beq.n	80043a0 <RI_SetReg+0x134>
 800434c:	2bc8      	cmp	r3, #200	; 0xc8
 800434e:	dc2b      	bgt.n	80043a8 <RI_SetReg+0x13c>
 8004350:	2b48      	cmp	r3, #72	; 0x48
 8004352:	d002      	beq.n	800435a <RI_SetReg+0xee>
 8004354:	2b88      	cmp	r3, #136	; 0x88
 8004356:	d004      	beq.n	8004362 <RI_SetReg+0xf6>
 8004358:	e026      	b.n	80043a8 <RI_SetReg+0x13c>
        {
          case MC_REG_STATUS:
          {
            retVal = MCP_ERROR_RO_REG;
 800435a:	2304      	movs	r3, #4
 800435c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004360:	e027      	b.n	80043b2 <RI_SetReg+0x146>
          }

          case MC_REG_CONTROL_MODE:
          {
            uint8_t regdata8 = *data;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800436a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800436e:	2b04      	cmp	r3, #4
 8004370:	d108      	bne.n	8004384 <RI_SetReg+0x118>
            {
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8004372:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004374:	f7fe fa97 	bl	80028a6 <MCI_GetTeref>
 8004378:	4603      	mov	r3, r0
 800437a:	2200      	movs	r2, #0
 800437c:	4619      	mov	r1, r3
 800437e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004380:	f7fd fff7 	bl	8002372 <MCI_ExecTorqueRamp>
            else
            {
              /* Nothing to do */
            }

            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8004384:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004388:	2b03      	cmp	r3, #3
 800438a:	d111      	bne.n	80043b0 <RI_SetReg+0x144>
            {
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 800438c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800438e:	f7fe f9ed 	bl	800276c <MCI_GetMecSpeedRefUnit>
 8004392:	4603      	mov	r3, r0
 8004394:	2200      	movs	r2, #0
 8004396:	4619      	mov	r1, r3
 8004398:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800439a:	f7fd ffcd 	bl	8002338 <MCI_ExecSpeedRamp>
            else
            {
              /* Nothing to do */
            }

            break;
 800439e:	e007      	b.n	80043b0 <RI_SetReg+0x144>
          }

          case MC_REG_RUC_STAGE_NBR:
          {
            retVal = MCP_ERROR_RO_REG;
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80043a6:	e004      	b.n	80043b2 <RI_SetReg+0x146>
          }
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 80043a8:	2305      	movs	r3, #5
 80043aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80043ae:	e000      	b.n	80043b2 <RI_SetReg+0x146>
            break;
 80043b0:	bf00      	nop
          }
        }
        *size = 1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	801a      	strh	r2, [r3, #0]
        break;
 80043b8:	f000 bc80 	b.w	8004cbc <RI_SetReg+0xa50>
 80043bc:	20000800 	.word	0x20000800
      }

      case TYPE_DATA_16BIT:
      {
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        switch (regID)
 80043c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043ca:	f641 3258 	movw	r2, #7000	; 0x1b58
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f000 8212 	beq.w	80047f8 <RI_SetReg+0x58c>
 80043d4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80043d8:	4293      	cmp	r3, r2
 80043da:	f300 82fe 	bgt.w	80049da <RI_SetReg+0x76e>
 80043de:	f641 1210 	movw	r2, #6416	; 0x1910
 80043e2:	4293      	cmp	r3, r2
 80043e4:	f000 82ed 	beq.w	80049c2 <RI_SetReg+0x756>
 80043e8:	f641 1210 	movw	r2, #6416	; 0x1910
 80043ec:	4293      	cmp	r3, r2
 80043ee:	f300 82f4 	bgt.w	80049da <RI_SetReg+0x76e>
 80043f2:	f641 02d0 	movw	r2, #6352	; 0x18d0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f000 82d7 	beq.w	80049aa <RI_SetReg+0x73e>
 80043fc:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004400:	4293      	cmp	r3, r2
 8004402:	f300 82ea 	bgt.w	80049da <RI_SetReg+0x76e>
 8004406:	f241 6250 	movw	r2, #5712	; 0x1650
 800440a:	4293      	cmp	r3, r2
 800440c:	f000 82c2 	beq.w	8004994 <RI_SetReg+0x728>
 8004410:	f241 6250 	movw	r2, #5712	; 0x1650
 8004414:	4293      	cmp	r3, r2
 8004416:	f300 82e0 	bgt.w	80049da <RI_SetReg+0x76e>
 800441a:	f241 6210 	movw	r2, #5648	; 0x1610
 800441e:	4293      	cmp	r3, r2
 8004420:	f000 82ad 	beq.w	800497e <RI_SetReg+0x712>
 8004424:	f241 6210 	movw	r2, #5648	; 0x1610
 8004428:	4293      	cmp	r3, r2
 800442a:	f300 82d6 	bgt.w	80049da <RI_SetReg+0x76e>
 800442e:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004432:	4293      	cmp	r3, r2
 8004434:	f000 8298 	beq.w	8004968 <RI_SetReg+0x6fc>
 8004438:	f241 52d0 	movw	r2, #5584	; 0x15d0
 800443c:	4293      	cmp	r3, r2
 800443e:	f300 82cc 	bgt.w	80049da <RI_SetReg+0x76e>
 8004442:	f241 5290 	movw	r2, #5520	; 0x1590
 8004446:	4293      	cmp	r3, r2
 8004448:	f000 8283 	beq.w	8004952 <RI_SetReg+0x6e6>
 800444c:	f241 5290 	movw	r2, #5520	; 0x1590
 8004450:	4293      	cmp	r3, r2
 8004452:	f300 82c2 	bgt.w	80049da <RI_SetReg+0x76e>
 8004456:	f241 5250 	movw	r2, #5456	; 0x1550
 800445a:	4293      	cmp	r3, r2
 800445c:	f000 826e 	beq.w	800493c <RI_SetReg+0x6d0>
 8004460:	f241 5250 	movw	r2, #5456	; 0x1550
 8004464:	4293      	cmp	r3, r2
 8004466:	f300 82b8 	bgt.w	80049da <RI_SetReg+0x76e>
 800446a:	f241 5210 	movw	r2, #5392	; 0x1510
 800446e:	4293      	cmp	r3, r2
 8004470:	f000 8259 	beq.w	8004926 <RI_SetReg+0x6ba>
 8004474:	f241 5210 	movw	r2, #5392	; 0x1510
 8004478:	4293      	cmp	r3, r2
 800447a:	f300 82ae 	bgt.w	80049da <RI_SetReg+0x76e>
 800447e:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004482:	4293      	cmp	r3, r2
 8004484:	f000 8244 	beq.w	8004910 <RI_SetReg+0x6a4>
 8004488:	f241 42d0 	movw	r2, #5328	; 0x14d0
 800448c:	4293      	cmp	r3, r2
 800448e:	f300 82a4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004492:	f241 4290 	movw	r2, #5264	; 0x1490
 8004496:	4293      	cmp	r3, r2
 8004498:	f000 822f 	beq.w	80048fa <RI_SetReg+0x68e>
 800449c:	f241 4290 	movw	r2, #5264	; 0x1490
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f300 829a 	bgt.w	80049da <RI_SetReg+0x76e>
 80044a6:	f241 4250 	movw	r2, #5200	; 0x1450
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f000 821a 	beq.w	80048e4 <RI_SetReg+0x678>
 80044b0:	f241 4250 	movw	r2, #5200	; 0x1450
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f300 8290 	bgt.w	80049da <RI_SetReg+0x76e>
 80044ba:	f241 0250 	movw	r2, #4176	; 0x1050
 80044be:	4293      	cmp	r3, r2
 80044c0:	f000 820c 	beq.w	80048dc <RI_SetReg+0x670>
 80044c4:	f241 0250 	movw	r2, #4176	; 0x1050
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f300 8286 	bgt.w	80049da <RI_SetReg+0x76e>
 80044ce:	f241 0210 	movw	r2, #4112	; 0x1010
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f000 8202 	beq.w	80048dc <RI_SetReg+0x670>
 80044d8:	f241 0210 	movw	r2, #4112	; 0x1010
 80044dc:	4293      	cmp	r3, r2
 80044de:	f300 827c 	bgt.w	80049da <RI_SetReg+0x76e>
 80044e2:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 80044e6:	f000 81f9 	beq.w	80048dc <RI_SetReg+0x670>
 80044ea:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 80044ee:	f300 8274 	bgt.w	80049da <RI_SetReg+0x76e>
 80044f2:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 80044f6:	f000 81f1 	beq.w	80048dc <RI_SetReg+0x670>
 80044fa:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 80044fe:	f300 826c 	bgt.w	80049da <RI_SetReg+0x76e>
 8004502:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004506:	f000 826c 	beq.w	80049e2 <RI_SetReg+0x776>
 800450a:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 800450e:	f300 8264 	bgt.w	80049da <RI_SetReg+0x76e>
 8004512:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004516:	f000 8264 	beq.w	80049e2 <RI_SetReg+0x776>
 800451a:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 800451e:	f300 825c 	bgt.w	80049da <RI_SetReg+0x76e>
 8004522:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004526:	f000 81d5 	beq.w	80048d4 <RI_SetReg+0x668>
 800452a:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 800452e:	f300 8254 	bgt.w	80049da <RI_SetReg+0x76e>
 8004532:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004536:	f000 81cd 	beq.w	80048d4 <RI_SetReg+0x668>
 800453a:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 800453e:	f300 824c 	bgt.w	80049da <RI_SetReg+0x76e>
 8004542:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004546:	f000 81c5 	beq.w	80048d4 <RI_SetReg+0x668>
 800454a:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 800454e:	f300 8244 	bgt.w	80049da <RI_SetReg+0x76e>
 8004552:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004556:	f000 81bd 	beq.w	80048d4 <RI_SetReg+0x668>
 800455a:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 800455e:	f300 823c 	bgt.w	80049da <RI_SetReg+0x76e>
 8004562:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004566:	f000 81b5 	beq.w	80048d4 <RI_SetReg+0x668>
 800456a:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 800456e:	f300 8234 	bgt.w	80049da <RI_SetReg+0x76e>
 8004572:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8004576:	f000 81ad 	beq.w	80048d4 <RI_SetReg+0x668>
 800457a:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 800457e:	f300 822c 	bgt.w	80049da <RI_SetReg+0x76e>
 8004582:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8004586:	f000 8159 	beq.w	800483c <RI_SetReg+0x5d0>
 800458a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 800458e:	f300 8224 	bgt.w	80049da <RI_SetReg+0x76e>
 8004592:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8004596:	f000 8151 	beq.w	800483c <RI_SetReg+0x5d0>
 800459a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800459e:	f300 821c 	bgt.w	80049da <RI_SetReg+0x76e>
 80045a2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80045a6:	f000 8149 	beq.w	800483c <RI_SetReg+0x5d0>
 80045aa:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80045ae:	f300 8214 	bgt.w	80049da <RI_SetReg+0x76e>
 80045b2:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80045b6:	f000 8141 	beq.w	800483c <RI_SetReg+0x5d0>
 80045ba:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80045be:	f300 820c 	bgt.w	80049da <RI_SetReg+0x76e>
 80045c2:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80045c6:	f000 812c 	beq.w	8004822 <RI_SetReg+0x5b6>
 80045ca:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80045ce:	f300 8204 	bgt.w	80049da <RI_SetReg+0x76e>
 80045d2:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80045d6:	f000 8117 	beq.w	8004808 <RI_SetReg+0x59c>
 80045da:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80045de:	f300 81fc 	bgt.w	80049da <RI_SetReg+0x76e>
 80045e2:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80045e6:	f000 810b 	beq.w	8004800 <RI_SetReg+0x594>
 80045ea:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80045ee:	f300 81f4 	bgt.w	80049da <RI_SetReg+0x76e>
 80045f2:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80045f6:	f000 8103 	beq.w	8004800 <RI_SetReg+0x594>
 80045fa:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80045fe:	f300 81ec 	bgt.w	80049da <RI_SetReg+0x76e>
 8004602:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004606:	f000 80fb 	beq.w	8004800 <RI_SetReg+0x594>
 800460a:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800460e:	f300 81e4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004612:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8004616:	f000 80f3 	beq.w	8004800 <RI_SetReg+0x594>
 800461a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800461e:	f300 81dc 	bgt.w	80049da <RI_SetReg+0x76e>
 8004622:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8004626:	f000 80eb 	beq.w	8004800 <RI_SetReg+0x594>
 800462a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800462e:	f300 81d4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004632:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004636:	f000 80e3 	beq.w	8004800 <RI_SetReg+0x594>
 800463a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800463e:	f300 81cc 	bgt.w	80049da <RI_SetReg+0x76e>
 8004642:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 8004646:	f000 80db 	beq.w	8004800 <RI_SetReg+0x594>
 800464a:	f5b3 6ff2 	cmp.w	r3, #1936	; 0x790
 800464e:	f300 81c4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004652:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8004656:	f000 80cf 	beq.w	80047f8 <RI_SetReg+0x58c>
 800465a:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800465e:	f300 81bc 	bgt.w	80049da <RI_SetReg+0x76e>
 8004662:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8004666:	f000 80c7 	beq.w	80047f8 <RI_SetReg+0x58c>
 800466a:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 800466e:	f300 81b4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004672:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8004676:	f000 8120 	beq.w	80048ba <RI_SetReg+0x64e>
 800467a:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800467e:	f300 81ac 	bgt.w	80049da <RI_SetReg+0x76e>
 8004682:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004686:	f000 810b 	beq.w	80048a0 <RI_SetReg+0x634>
 800468a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800468e:	f300 81a4 	bgt.w	80049da <RI_SetReg+0x76e>
 8004692:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8004696:	f000 80ea 	beq.w	800486e <RI_SetReg+0x602>
 800469a:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 800469e:	f300 819c 	bgt.w	80049da <RI_SetReg+0x76e>
 80046a2:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80046a6:	f000 80c9 	beq.w	800483c <RI_SetReg+0x5d0>
 80046aa:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80046ae:	f300 8194 	bgt.w	80049da <RI_SetReg+0x76e>
 80046b2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80046b6:	f000 8093 	beq.w	80047e0 <RI_SetReg+0x574>
 80046ba:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80046be:	f300 818c 	bgt.w	80049da <RI_SetReg+0x76e>
 80046c2:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80046c6:	d07f      	beq.n	80047c8 <RI_SetReg+0x55c>
 80046c8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80046cc:	f300 8185 	bgt.w	80049da <RI_SetReg+0x76e>
 80046d0:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80046d4:	d06c      	beq.n	80047b0 <RI_SetReg+0x544>
 80046d6:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80046da:	f300 817e 	bgt.w	80049da <RI_SetReg+0x76e>
 80046de:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80046e2:	d059      	beq.n	8004798 <RI_SetReg+0x52c>
 80046e4:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80046e8:	f300 8177 	bgt.w	80049da <RI_SetReg+0x76e>
 80046ec:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80046f0:	d046      	beq.n	8004780 <RI_SetReg+0x514>
 80046f2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80046f6:	f300 8170 	bgt.w	80049da <RI_SetReg+0x76e>
 80046fa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80046fe:	d033      	beq.n	8004768 <RI_SetReg+0x4fc>
 8004700:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004704:	f300 8169 	bgt.w	80049da <RI_SetReg+0x76e>
 8004708:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800470c:	d020      	beq.n	8004750 <RI_SetReg+0x4e4>
 800470e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004712:	f300 8162 	bgt.w	80049da <RI_SetReg+0x76e>
 8004716:	2b90      	cmp	r3, #144	; 0x90
 8004718:	d002      	beq.n	8004720 <RI_SetReg+0x4b4>
 800471a:	2bd0      	cmp	r3, #208	; 0xd0
 800471c:	d00c      	beq.n	8004738 <RI_SetReg+0x4cc>
 800471e:	e15c      	b.n	80049da <RI_SetReg+0x76e>
        {
          case MC_REG_SPEED_KP:
          {
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8004720:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004724:	4ab1      	ldr	r2, [pc, #708]	; (80049ec <RI_SetReg+0x780>)
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f005 ff02 	bl	800a53a <PID_SetKP>
            break;
 8004736:	e155      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KI:
          {
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8004738:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800473c:	4aab      	ldr	r2, [pc, #684]	; (80049ec <RI_SetReg+0x780>)
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f005 ff05 	bl	800a558 <PID_SetKI>
            break;
 800474e:	e149      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KD:
          {
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8004750:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004754:	4aa5      	ldr	r2, [pc, #660]	; (80049ec <RI_SetReg+0x780>)
 8004756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f005 ffac 	bl	800a6be <PID_SetKD>
            break;
 8004766:	e13d      	b.n	80049e4 <RI_SetReg+0x778>
          }
          case MC_REG_I_Q_KP:
          {
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8004768:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800476c:	4aa0      	ldr	r2, [pc, #640]	; (80049f0 <RI_SetReg+0x784>)
 800476e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004772:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f005 fede 	bl	800a53a <PID_SetKP>
            break;
 800477e:	e131      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KI:
          {
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8004780:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004784:	4a9a      	ldr	r2, [pc, #616]	; (80049f0 <RI_SetReg+0x784>)
 8004786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800478e:	4611      	mov	r1, r2
 8004790:	4618      	mov	r0, r3
 8004792:	f005 fee1 	bl	800a558 <PID_SetKI>
            break;
 8004796:	e125      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KD:
          {
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8004798:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800479c:	4a94      	ldr	r2, [pc, #592]	; (80049f0 <RI_SetReg+0x784>)
 800479e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f005 ff88 	bl	800a6be <PID_SetKD>
            break;
 80047ae:	e119      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KP:
          {
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80047b0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047b4:	4a8f      	ldr	r2, [pc, #572]	; (80049f4 <RI_SetReg+0x788>)
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f005 feba 	bl	800a53a <PID_SetKP>
            break;
 80047c6:	e10d      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KI:
          {
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80047c8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047cc:	4a89      	ldr	r2, [pc, #548]	; (80049f4 <RI_SetReg+0x788>)
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f005 febd 	bl	800a558 <PID_SetKI>
            break;
 80047de:	e101      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KD:
          {
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80047e0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80047e4:	4a83      	ldr	r2, [pc, #524]	; (80049f4 <RI_SetReg+0x788>)
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f005 ff64 	bl	800a6be <PID_SetKD>
            break;
 80047f6:	e0f5      	b.n	80049e4 <RI_SetReg+0x778>

          case MC_REG_BUS_VOLTAGE:
          case MC_REG_HEATS_TEMP:
          case MC_REG_MOTOR_POWER:
          {
            retVal = MCP_ERROR_RO_REG;
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80047fe:	e0f1      	b.n	80049e4 <RI_SetReg+0x778>
          case MC_REG_I_Q_MEAS:
          case MC_REG_I_D_MEAS:

          case MC_REG_FLUXWK_BUS_MEAS:
          {
            retVal = MCP_ERROR_RO_REG;
 8004800:	2304      	movs	r3, #4
 8004802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004806:	e0ed      	b.n	80049e4 <RI_SetReg+0x778>
          }
          case MC_REG_I_Q_REF:
          {
            qd_t currComp;
            currComp = MCI_GetIqdref(pMCIN);
 8004808:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800480a:	f7fe f804 	bl	8002816 <MCI_GetIqdref>
 800480e:	4603      	mov	r3, r0
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
            currComp.q = (int16_t)regdata16;
 8004812:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004816:	863b      	strh	r3, [r7, #48]	; 0x30
            MCI_SetCurrentReferences(pMCIN,currComp);
 8004818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800481a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800481c:	f7fd fdc6 	bl	80023ac <MCI_SetCurrentReferences>
            break;
 8004820:	e0e0      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_REF:
          {
            qd_t currComp;
            currComp = MCI_GetIqdref(pMCIN);
 8004822:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004824:	f7fd fff7 	bl	8002816 <MCI_GetIqdref>
 8004828:	4603      	mov	r3, r0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
            currComp.d = (int16_t)regdata16;
 800482c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004830:	85fb      	strh	r3, [r7, #46]	; 0x2e
            MCI_SetCurrentReferences(pMCIN,currComp);
 8004832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004834:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004836:	f7fd fdb9 	bl	80023ac <MCI_SetCurrentReferences>
            break;
 800483a:	e0d3      	b.n	80049e4 <RI_SetReg+0x778>

          case MC_REG_STOPLL_C1:
          {
            int16_t hC1;
            int16_t hC2;
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800483c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004840:	4a6d      	ldr	r2, [pc, #436]	; (80049f8 <RI_SetReg+0x78c>)
 8004842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800484a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fe09 	bl	800c466 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8004854:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004858:	4a67      	ldr	r2, [pc, #412]	; (80049f8 <RI_SetReg+0x78c>)
 800485a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485e:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 8004862:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004866:	4618      	mov	r0, r3
 8004868:	f007 fe13 	bl	800c492 <STO_PLL_SetObserverGains>
            break;
 800486c:	e0ba      	b.n	80049e4 <RI_SetReg+0x778>

          case MC_REG_STOPLL_C2:
          {
            int16_t hC1;
            int16_t hC2;
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800486e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004872:	4a61      	ldr	r2, [pc, #388]	; (80049f8 <RI_SetReg+0x78c>)
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800487c:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8004880:	4618      	mov	r0, r3
 8004882:	f007 fdf0 	bl	800c466 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8004886:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800488a:	4a5b      	ldr	r2, [pc, #364]	; (80049f8 <RI_SetReg+0x78c>)
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8004894:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004898:	4618      	mov	r0, r3
 800489a:	f007 fdfa 	bl	800c492 <STO_PLL_SetObserverGains>
            break;
 800489e:	e0a1      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KI:
          {
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80048a0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048a4:	4a54      	ldr	r2, [pc, #336]	; (80049f8 <RI_SetReg+0x78c>)
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	3334      	adds	r3, #52	; 0x34
 80048ac:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f005 fe50 	bl	800a558 <PID_SetKI>
            break;
 80048b8:	e094      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KP:
          {
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80048ba:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048be:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <RI_SetReg+0x78c>)
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	3334      	adds	r3, #52	; 0x34
 80048c6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 fe34 	bl	800a53a <PID_SetKP>
            break;
 80048d2:	e087      	b.n	80049e4 <RI_SetReg+0x778>
          case MC_REG_STOPLL_I_ALPHA:
          case MC_REG_STOPLL_I_BETA:
          case MC_REG_STOPLL_BEMF_ALPHA:
          case MC_REG_STOPLL_BEMF_BETA:
          {
            retVal = MCP_ERROR_RO_REG;
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80048da:	e083      	b.n	80049e4 <RI_SetReg+0x778>
          case MC_REG_FF_VQ:
          case MC_REG_FF_VD:
          case MC_REG_FF_VQ_PIOUT:
          case MC_REG_FF_VD_PIOUT:
          {
            retVal = MCP_ERROR_RO_REG;
 80048dc:	2304      	movs	r3, #4
 80048de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80048e2:	e07f      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80048e4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048e8:	4a40      	ldr	r2, [pc, #256]	; (80049ec <RI_SetReg+0x780>)
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f005 fe73 	bl	800a5de <PID_SetKPDivisorPOW2>
            break;
 80048f8:	e074      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80048fa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <RI_SetReg+0x780>)
 8004900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004904:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f005 fe96 	bl	800a63a <PID_SetKIDivisorPOW2>
            break;
 800490e:	e069      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_SPEED_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8004910:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <RI_SetReg+0x780>)
 8004916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f005 fef5 	bl	800a70e <PID_SetKDDivisorPOW2>
            break;
 8004924:	e05e      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8004926:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800492a:	4a32      	ldr	r2, [pc, #200]	; (80049f4 <RI_SetReg+0x788>)
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f005 fe52 	bl	800a5de <PID_SetKPDivisorPOW2>
            break;
 800493a:	e053      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 800493c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <RI_SetReg+0x788>)
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f005 fe75 	bl	800a63a <PID_SetKIDivisorPOW2>
            break;
 8004950:	e048      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_D_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8004952:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004956:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <RI_SetReg+0x788>)
 8004958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f005 fed4 	bl	800a70e <PID_SetKDDivisorPOW2>
            break;
 8004966:	e03d      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KP_DIV:
          {
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8004968:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <RI_SetReg+0x784>)
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f005 fe31 	bl	800a5de <PID_SetKPDivisorPOW2>
            break;
 800497c:	e032      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KI_DIV:
          {
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800497e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <RI_SetReg+0x784>)
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f005 fe54 	bl	800a63a <PID_SetKIDivisorPOW2>
            break;
 8004992:	e027      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_I_Q_KD_DIV:
          {
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8004994:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <RI_SetReg+0x784>)
 800499a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f005 feb3 	bl	800a70e <PID_SetKDDivisorPOW2>
            break;
 80049a8:	e01c      	b.n	80049e4 <RI_SetReg+0x778>
          }
          case MC_REG_STOPLL_KI_DIV:
          {
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80049aa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <RI_SetReg+0x78c>)
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	3334      	adds	r3, #52	; 0x34
 80049b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f005 fe3d 	bl	800a63a <PID_SetKIDivisorPOW2>
            break;
 80049c0:	e010      	b.n	80049e4 <RI_SetReg+0x778>
          }

          case MC_REG_STOPLL_KP_DIV:
          {
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80049c2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <RI_SetReg+0x78c>)
 80049c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049cc:	3334      	adds	r3, #52	; 0x34
 80049ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f005 fe03 	bl	800a5de <PID_SetKPDivisorPOW2>
            break;
 80049d8:	e004      	b.n	80049e4 <RI_SetReg+0x778>
          }

          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 80049da:	2305      	movs	r3, #5
 80049dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 80049e0:	e000      	b.n	80049e4 <RI_SetReg+0x778>
            break;
 80049e2:	bf00      	nop
          }
        }
        *size = 2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	801a      	strh	r2, [r3, #0]
        break;
 80049ea:	e167      	b.n	8004cbc <RI_SetReg+0xa50>
 80049ec:	200005b4 	.word	0x200005b4
 80049f0:	200004c4 	.word	0x200004c4
 80049f4:	200004c8 	.word	0x200004c8
 80049f8:	200005b0 	.word	0x200005b0
      }

      case TYPE_DATA_32BIT:
      {
        uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38

        switch (regID)
 8004a02:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a06:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004a0a:	d046      	beq.n	8004a9a <RI_SetReg+0x82e>
 8004a0c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004a10:	dc4b      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a12:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004a16:	d038      	beq.n	8004a8a <RI_SetReg+0x81e>
 8004a18:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004a1c:	dc45      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a1e:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8004a22:	d02a      	beq.n	8004a7a <RI_SetReg+0x80e>
 8004a24:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8004a28:	dc3f      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a2a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004a2e:	d020      	beq.n	8004a72 <RI_SetReg+0x806>
 8004a30:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004a34:	dc39      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a36:	2bd8      	cmp	r3, #216	; 0xd8
 8004a38:	d01b      	beq.n	8004a72 <RI_SetReg+0x806>
 8004a3a:	2bd8      	cmp	r3, #216	; 0xd8
 8004a3c:	dc35      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a3e:	2b98      	cmp	r3, #152	; 0x98
 8004a40:	d009      	beq.n	8004a56 <RI_SetReg+0x7ea>
 8004a42:	2b98      	cmp	r3, #152	; 0x98
 8004a44:	dc31      	bgt.n	8004aaa <RI_SetReg+0x83e>
 8004a46:	2b18      	cmp	r3, #24
 8004a48:	d001      	beq.n	8004a4e <RI_SetReg+0x7e2>
 8004a4a:	2b58      	cmp	r3, #88	; 0x58
 8004a4c:	d12d      	bne.n	8004aaa <RI_SetReg+0x83e>
        {

          case MC_REG_FAULTS_FLAGS:
          case MC_REG_SPEED_MEAS:
          {
            retVal = MCP_ERROR_RO_REG;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004a54:	e02d      	b.n	8004ab2 <RI_SetReg+0x846>
          }

          case MC_REG_SPEED_REF:
          {
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	4a9b      	ldr	r2, [pc, #620]	; (8004cc8 <RI_SetReg+0xa5c>)
 8004a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8004a60:	17db      	asrs	r3, r3, #31
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	b21b      	sxth	r3, r3
 8004a66:	2200      	movs	r2, #0
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004a6c:	f7fd fc64 	bl	8002338 <MCI_ExecSpeedRamp>
            break;
 8004a70:	e01f      	b.n	8004ab2 <RI_SetReg+0x846>
          }
          case MC_REG_STOPLL_EST_BEMF:
          case MC_REG_STOPLL_OBS_BEMF:
          {
            retVal = MCP_ERROR_RO_REG;
 8004a72:	2304      	movs	r3, #4
 8004a74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004a78:	e01b      	b.n	8004ab2 <RI_SetReg+0x846>
          }
          case MC_REG_FF_1Q:
          {
            pFF[motorID]->wConstant_1Q = (int32_t)regdata32;
 8004a7a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004a7e:	4a93      	ldr	r2, [pc, #588]	; (8004ccc <RI_SetReg+0xa60>)
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a86:	611a      	str	r2, [r3, #16]
            break;
 8004a88:	e013      	b.n	8004ab2 <RI_SetReg+0x846>
          }

          case MC_REG_FF_1D:
          {
            pFF[motorID]->wConstant_1D = (int32_t)regdata32;
 8004a8a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004a8e:	4a8f      	ldr	r2, [pc, #572]	; (8004ccc <RI_SetReg+0xa60>)
 8004a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	60da      	str	r2, [r3, #12]
            break;
 8004a98:	e00b      	b.n	8004ab2 <RI_SetReg+0x846>
          }

          case MC_REG_FF_2:
          {
            pFF[motorID]->wConstant_2 = (int32_t)regdata32;
 8004a9a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004a9e:	4a8b      	ldr	r2, [pc, #556]	; (8004ccc <RI_SetReg+0xa60>)
 8004aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa6:	615a      	str	r2, [r3, #20]
            break;
 8004aa8:	e003      	b.n	8004ab2 <RI_SetReg+0x846>
          }

          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004aaa:	2305      	movs	r3, #5
 8004aac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            break;
 8004ab0:	bf00      	nop
          }
        }
        *size = 4;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	801a      	strh	r2, [r3, #0]
        break;
 8004ab8:	e100      	b.n	8004cbc <RI_SetReg+0xa50>
      }
      case TYPE_DATA_STRING:
      {
        const char_t *charData = (const char_t *)data;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
        char_t *dummy = (char_t *)data ;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        retVal = MCP_ERROR_RO_REG;
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        /* Used to compute String length stored in RXBUFF even if Reg does not exist*/
        /* It allows to jump to the next command in the buffer */
        (void)RI_MovString (charData, dummy, size, dataAvailable);
 8004ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ad2:	f001 f8dd 	bl	8005c90 <RI_MovString>
        break;
 8004ad6:	e0f1      	b.n	8004cbc <RI_SetReg+0xa50>
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8004ae0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	801a      	strh	r2, [r3, #0]
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	65fb      	str	r3, [r7, #92]	; 0x5c
        rawData++;
 8004af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af2:	3301      	adds	r3, #1
 8004af4:	65fb      	str	r3, [r7, #92]	; 0x5c
        rawData++;
 8004af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af8:	3301      	adds	r3, #1
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (*size > dataAvailable )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	dd06      	ble.n	8004b18 <RI_SetReg+0x8ac>
        { /* The decoded size of the raw structure can not match with transmitted buffer, error in buffer construction*/
          *size = 0;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	801a      	strh	r2, [r3, #0]
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8004b10:	230a      	movs	r3, #10
 8004b12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              retVal = MCP_ERROR_UNKNOWN_REG;
              break;
            }
          }
        }
        break;
 8004b16:	e0d1      	b.n	8004cbc <RI_SetReg+0xa50>
          switch (regID)
 8004b18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b1c:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8004b20:	f000 80ab 	beq.w	8004c7a <RI_SetReg+0xa0e>
 8004b24:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8004b28:	f300 80bc 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b2c:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8004b30:	f000 80ab 	beq.w	8004c8a <RI_SetReg+0xa1e>
 8004b34:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8004b38:	f300 80b4 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b3c:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8004b40:	d049      	beq.n	8004bd6 <RI_SetReg+0x96a>
 8004b42:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8004b46:	f300 80ad 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b4a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8004b4e:	d032      	beq.n	8004bb6 <RI_SetReg+0x94a>
 8004b50:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8004b54:	f300 80a6 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b58:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8004b5c:	d016      	beq.n	8004b8c <RI_SetReg+0x920>
 8004b5e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8004b62:	f300 809f 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b66:	2be8      	cmp	r3, #232	; 0xe8
 8004b68:	d00c      	beq.n	8004b84 <RI_SetReg+0x918>
 8004b6a:	2be8      	cmp	r3, #232	; 0xe8
 8004b6c:	f300 809a 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b70:	2ba8      	cmp	r3, #168	; 0xa8
 8004b72:	d007      	beq.n	8004b84 <RI_SetReg+0x918>
 8004b74:	2ba8      	cmp	r3, #168	; 0xa8
 8004b76:	f300 8095 	bgt.w	8004ca4 <RI_SetReg+0xa38>
 8004b7a:	2b28      	cmp	r3, #40	; 0x28
 8004b7c:	d002      	beq.n	8004b84 <RI_SetReg+0x918>
 8004b7e:	2b68      	cmp	r3, #104	; 0x68
 8004b80:	f040 8090 	bne.w	8004ca4 <RI_SetReg+0xa38>
              retVal = MCP_ERROR_RO_REG;
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004b8a:	e08f      	b.n	8004cac <RI_SetReg+0xa40>
              rpm = *(int32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8004b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b94:	889b      	ldrh	r3, [r3, #4]
 8004b96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9c:	4a4a      	ldr	r2, [pc, #296]	; (8004cc8 <RI_SetReg+0xa5c>)
 8004b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8004ba2:	17db      	asrs	r3, r3, #31
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004bac:	4619      	mov	r1, r3
 8004bae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bb0:	f7fd fbc2 	bl	8002338 <MCI_ExecSpeedRamp>
              break;
 8004bb4:	e07a      	b.n	8004cac <RI_SetReg+0xa40>
              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	653b      	str	r3, [r7, #80]	; 0x50
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8004bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbe:	889b      	ldrh	r3, [r3, #4]
 8004bc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004bd0:	f7fd fbcf 	bl	8002372 <MCI_ExecTorqueRamp>
              break;
 8004bd4:	e06a      	b.n	8004cac <RI_SetReg+0xa40>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8004bd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8004be2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <RI_SetReg+0x98c>
 8004bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d903      	bls.n	8004c00 <RI_SetReg+0x994>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8004bf8:	230a      	movs	r3, #10
 8004bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004bfe:	e055      	b.n	8004cac <RI_SetReg+0xa40>
                for (i = 0; i <nbrOfPhase; i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8004c06:	e031      	b.n	8004c6c <RI_SetReg+0xa00>
                rpm = *(int32_t *) &rawData[i * 8U]; //cstat !MISRAC2012-Rule-11.3
 8004c08:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c10:	4413      	add	r3, r2
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8004c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c18:	b21b      	sxth	r3, r3
 8004c1a:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <RI_SetReg+0xa5c>)
 8004c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c20:	17db      	asrs	r3, r3, #31
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	837b      	strh	r3, [r7, #26]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8004c28:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	3304      	adds	r3, #4
 8004c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c32:	4413      	add	r3, r2
 8004c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c38:	83bb      	strh	r3, [r7, #28]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8004c3a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	3306      	adds	r3, #6
 8004c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	833b      	strh	r3, [r7, #24]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8004c4a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004c4e:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <RI_SetReg+0xa64>)
 8004c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c54:	f107 0218 	add.w	r2, r7, #24
 8004c58:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f006 faca 	bl	800b1f6 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8004c62:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004c66:	3301      	adds	r3, #1
 8004c68:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8004c6c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8004c70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3c7      	bcc.n	8004c08 <RI_SetReg+0x99c>
              break;
 8004c78:	e018      	b.n	8004cac <RI_SetReg+0xa40>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8004c7a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004c7c:	4815      	ldr	r0, [pc, #84]	; (8004cd4 <RI_SetReg+0xa68>)
 8004c7e:	f005 fad9 	bl	800a234 <MCPA_cfgLog>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004c88:	e010      	b.n	8004cac <RI_SetReg+0xa40>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c90:	82bb      	strh	r3, [r7, #20]
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
 8004c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c98:	82fb      	strh	r3, [r7, #22]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8004c9a:	6979      	ldr	r1, [r7, #20]
 8004c9c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c9e:	f7fd fb85 	bl	80023ac <MCI_SetCurrentReferences>
              break;
 8004ca2:	e003      	b.n	8004cac <RI_SetReg+0xa40>
              retVal = MCP_ERROR_UNKNOWN_REG;
 8004ca4:	2305      	movs	r3, #5
 8004ca6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
              break;
 8004caa:	bf00      	nop
        break;
 8004cac:	e006      	b.n	8004cbc <RI_SetReg+0xa50>
      }

      default:
      {
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 8004cae:	2307      	movs	r3, #7
 8004cb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        *size =0; /* From this point we are not able anymore to decode the RX buffer*/
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	801a      	strh	r2, [r3, #0]
        break;
 8004cba:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8004cbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3770      	adds	r7, #112	; 0x70
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	2aaaaaab 	.word	0x2aaaaaab
 8004ccc:	200004d0 	.word	0x200004d0
 8004cd0:	200005ac 	.word	0x200005ac
 8004cd4:	20000580 	.word	0x20000580

08004cd8 <RI_GetReg>:

uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t freeSpace)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b0b6      	sub	sp, #216	; 0xd8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	81fb      	strh	r3, [r7, #14]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	81bb      	strh	r3, [r7, #12]
  uint8_t retVal = MCP_CMD_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d04:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    BusVoltageSensor_Handle_t* BusVoltageSensor[NBR_OF_MOTORS]={ &BusVoltageSensor_M1._Super};
 8004d08:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <RI_GetReg+0x16c>)
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t motorID = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

    MCI_Handle_t *pMCIN = &Mci[motorID];
 8004d12:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004d16:	015b      	lsls	r3, r3, #5
 8004d18:	4a4b      	ldr	r2, [pc, #300]	; (8004e48 <RI_GetReg+0x170>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    switch (typeID)
 8004d20:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004d24:	3b08      	subs	r3, #8
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f200 87a6 	bhi.w	8005c78 <RI_GetReg+0xfa0>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <RI_GetReg+0x5c>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004db9 	.word	0x08004db9
 8004d38:	08005c79 	.word	0x08005c79
 8004d3c:	08005c79 	.word	0x08005c79
 8004d40:	08005c79 	.word	0x08005c79
 8004d44:	08005c79 	.word	0x08005c79
 8004d48:	08005c79 	.word	0x08005c79
 8004d4c:	08005c79 	.word	0x08005c79
 8004d50:	08005c79 	.word	0x08005c79
 8004d54:	08004e51 	.word	0x08004e51
 8004d58:	08005c79 	.word	0x08005c79
 8004d5c:	08005c79 	.word	0x08005c79
 8004d60:	08005c79 	.word	0x08005c79
 8004d64:	08005c79 	.word	0x08005c79
 8004d68:	08005c79 	.word	0x08005c79
 8004d6c:	08005c79 	.word	0x08005c79
 8004d70:	08005c79 	.word	0x08005c79
 8004d74:	08005717 	.word	0x08005717
 8004d78:	08005c79 	.word	0x08005c79
 8004d7c:	08005c79 	.word	0x08005c79
 8004d80:	08005c79 	.word	0x08005c79
 8004d84:	08005c79 	.word	0x08005c79
 8004d88:	08005c79 	.word	0x08005c79
 8004d8c:	08005c79 	.word	0x08005c79
 8004d90:	08005c79 	.word	0x08005c79
 8004d94:	0800589f 	.word	0x0800589f
 8004d98:	08005c79 	.word	0x08005c79
 8004d9c:	08005c79 	.word	0x08005c79
 8004da0:	08005c79 	.word	0x08005c79
 8004da4:	08005c79 	.word	0x08005c79
 8004da8:	08005c79 	.word	0x08005c79
 8004dac:	08005c79 	.word	0x08005c79
 8004db0:	08005c79 	.word	0x08005c79
 8004db4:	08005947 	.word	0x08005947
    {
      case TYPE_DATA_8BIT:
      {
        if (freeSpace > 0U)
 8004db8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d03b      	beq.n	8004e38 <RI_GetReg+0x160>
        {
          switch (regID)
 8004dc0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004dc4:	2bc8      	cmp	r3, #200	; 0xc8
 8004dc6:	d018      	beq.n	8004dfa <RI_GetReg+0x122>
 8004dc8:	2bc8      	cmp	r3, #200	; 0xc8
 8004dca:	dc2c      	bgt.n	8004e26 <RI_GetReg+0x14e>
 8004dcc:	2b48      	cmp	r3, #72	; 0x48
 8004dce:	d002      	beq.n	8004dd6 <RI_GetReg+0xfe>
 8004dd0:	2b88      	cmp	r3, #136	; 0x88
 8004dd2:	d009      	beq.n	8004de8 <RI_GetReg+0x110>
 8004dd4:	e027      	b.n	8004e26 <RI_GetReg+0x14e>
          {
            case MC_REG_STATUS:
            {
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004dd6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004dda:	f7fd fc00 	bl	80025de <MCI_GetSTMState>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	701a      	strb	r2, [r3, #0]
              break;
 8004de6:	e022      	b.n	8004e2e <RI_GetReg+0x156>
            }

            case MC_REG_CONTROL_MODE:
            {
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004de8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004dec:	f7fd fc2f 	bl	800264e <MCI_GetControlMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	701a      	strb	r2, [r3, #0]
              break;
 8004df8:	e019      	b.n	8004e2e <RI_GetReg+0x156>
            }

            case MC_REG_RUC_STAGE_NBR:
            {
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8004dfa:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <RI_GetReg+0x174>)
 8004e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <RI_GetReg+0x146>
 8004e08:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8004e0c:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <RI_GetReg+0x174>)
 8004e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f006 fa25 	bl	800b262 <RUC_GetNumberOfPhases>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	e000      	b.n	8004e20 <RI_GetReg+0x148>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	701a      	strb	r2, [r3, #0]
              break;
 8004e24:	e003      	b.n	8004e2e <RI_GetReg+0x156>
            }

            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 8004e26:	2305      	movs	r3, #5
 8004e28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 8004e2c:	bf00      	nop
            }
          }
          *size = 1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 8004e34:	f000 bf24 	b.w	8005c80 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8004e3e:	f000 bf1f 	b.w	8005c80 <RI_GetReg+0xfa8>
 8004e42:	bf00      	nop
 8004e44:	200003b8 	.word	0x200003b8
 8004e48:	20000800 	.word	0x20000800
 8004e4c:	200005ac 	.word	0x200005ac
      }
      case TYPE_DATA_16BIT:
      {
        uint16_t *regdataU16 = (uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int16_t *regdata16 = (int16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        if (freeSpace >= 2U)
 8004e5c:	89bb      	ldrh	r3, [r7, #12]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	f240 8455 	bls.w	800570e <RI_GetReg+0xa36>
        {
          switch (regID)
 8004e64:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004e68:	f641 1210 	movw	r2, #6416	; 0x1910
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f000 8436 	beq.w	80056de <RI_GetReg+0xa06>
 8004e72:	f641 1210 	movw	r2, #6416	; 0x1910
 8004e76:	4293      	cmp	r3, r2
 8004e78:	f300 8440 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004e7c:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	f000 841d 	beq.w	80056c0 <RI_GetReg+0x9e8>
 8004e86:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f300 8436 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004e90:	f241 6250 	movw	r2, #5712	; 0x1650
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f000 8405 	beq.w	80056a4 <RI_GetReg+0x9cc>
 8004e9a:	f241 6250 	movw	r2, #5712	; 0x1650
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f300 842c 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004ea4:	f241 6210 	movw	r2, #5648	; 0x1610
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	f000 83ed 	beq.w	8005688 <RI_GetReg+0x9b0>
 8004eae:	f241 6210 	movw	r2, #5648	; 0x1610
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	f300 8422 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004eb8:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	f000 83d5 	beq.w	800566c <RI_GetReg+0x994>
 8004ec2:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f300 8418 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004ecc:	f241 5290 	movw	r2, #5520	; 0x1590
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f000 83bd 	beq.w	8005650 <RI_GetReg+0x978>
 8004ed6:	f241 5290 	movw	r2, #5520	; 0x1590
 8004eda:	4293      	cmp	r3, r2
 8004edc:	f300 840e 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004ee0:	f241 5250 	movw	r2, #5456	; 0x1550
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	f000 83a5 	beq.w	8005634 <RI_GetReg+0x95c>
 8004eea:	f241 5250 	movw	r2, #5456	; 0x1550
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	f300 8404 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004ef4:	f241 5210 	movw	r2, #5392	; 0x1510
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	f000 838d 	beq.w	8005618 <RI_GetReg+0x940>
 8004efe:	f241 5210 	movw	r2, #5392	; 0x1510
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f300 83fa 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f08:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f000 8375 	beq.w	80055fc <RI_GetReg+0x924>
 8004f12:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f300 83f0 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f1c:	f241 4290 	movw	r2, #5264	; 0x1490
 8004f20:	4293      	cmp	r3, r2
 8004f22:	f000 835d 	beq.w	80055e0 <RI_GetReg+0x908>
 8004f26:	f241 4290 	movw	r2, #5264	; 0x1490
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	f300 83e6 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f30:	f241 4250 	movw	r2, #5200	; 0x1450
 8004f34:	4293      	cmp	r3, r2
 8004f36:	f000 8345 	beq.w	80055c4 <RI_GetReg+0x8ec>
 8004f3a:	f241 4250 	movw	r2, #5200	; 0x1450
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f300 83dc 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f44:	f241 0250 	movw	r2, #4176	; 0x1050
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	f000 832b 	beq.w	80055a4 <RI_GetReg+0x8cc>
 8004f4e:	f241 0250 	movw	r2, #4176	; 0x1050
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f300 83d2 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f58:	f241 0210 	movw	r2, #4112	; 0x1010
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	f000 8311 	beq.w	8005584 <RI_GetReg+0x8ac>
 8004f62:	f241 0210 	movw	r2, #4112	; 0x1010
 8004f66:	4293      	cmp	r3, r2
 8004f68:	f300 83c8 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f6c:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8004f70:	f000 82f8 	beq.w	8005564 <RI_GetReg+0x88c>
 8004f74:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8004f78:	f300 83c0 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f7c:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 8004f80:	f000 82e0 	beq.w	8005544 <RI_GetReg+0x86c>
 8004f84:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 8004f88:	f300 83b8 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f8c:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004f90:	f000 83b8 	beq.w	8005704 <RI_GetReg+0xa2c>
 8004f94:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004f98:	f300 83b0 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004f9c:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004fa0:	f000 83b0 	beq.w	8005704 <RI_GetReg+0xa2c>
 8004fa4:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8004fa8:	f300 83a8 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004fac:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004fb0:	f000 826c 	beq.w	800548c <RI_GetReg+0x7b4>
 8004fb4:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004fb8:	f300 83a0 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004fbc:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004fc0:	f000 8254 	beq.w	800546c <RI_GetReg+0x794>
 8004fc4:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8004fc8:	f300 8398 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004fcc:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004fd0:	f000 823c 	beq.w	800544c <RI_GetReg+0x774>
 8004fd4:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8004fd8:	f300 8390 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004fdc:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004fe0:	f000 8224 	beq.w	800542c <RI_GetReg+0x754>
 8004fe4:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8004fe8:	f300 8388 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004fec:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004ff0:	f000 820e 	beq.w	8005410 <RI_GetReg+0x738>
 8004ff4:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004ff8:	f300 8380 	bgt.w	80056fc <RI_GetReg+0xa24>
 8004ffc:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005000:	f000 81f8 	beq.w	80053f4 <RI_GetReg+0x71c>
 8005004:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005008:	f300 8378 	bgt.w	80056fc <RI_GetReg+0xa24>
 800500c:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005010:	f000 81e4 	beq.w	80053dc <RI_GetReg+0x704>
 8005014:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005018:	f300 8370 	bgt.w	80056fc <RI_GetReg+0xa24>
 800501c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005020:	f000 81d0 	beq.w	80053c4 <RI_GetReg+0x6ec>
 8005024:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005028:	f300 8368 	bgt.w	80056fc <RI_GetReg+0xa24>
 800502c:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005030:	f000 81bc 	beq.w	80053ac <RI_GetReg+0x6d4>
 8005034:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005038:	f300 8360 	bgt.w	80056fc <RI_GetReg+0xa24>
 800503c:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005040:	f000 81a8 	beq.w	8005394 <RI_GetReg+0x6bc>
 8005044:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005048:	f300 8358 	bgt.w	80056fc <RI_GetReg+0xa24>
 800504c:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005050:	f000 8194 	beq.w	800537c <RI_GetReg+0x6a4>
 8005054:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005058:	f300 8350 	bgt.w	80056fc <RI_GetReg+0xa24>
 800505c:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005060:	f000 8180 	beq.w	8005364 <RI_GetReg+0x68c>
 8005064:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005068:	f300 8348 	bgt.w	80056fc <RI_GetReg+0xa24>
 800506c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005070:	f000 816c 	beq.w	800534c <RI_GetReg+0x674>
 8005074:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005078:	f300 8340 	bgt.w	80056fc <RI_GetReg+0xa24>
 800507c:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005080:	f000 8158 	beq.w	8005334 <RI_GetReg+0x65c>
 8005084:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005088:	f300 8338 	bgt.w	80056fc <RI_GetReg+0xa24>
 800508c:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005090:	f000 8144 	beq.w	800531c <RI_GetReg+0x644>
 8005094:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005098:	f300 8330 	bgt.w	80056fc <RI_GetReg+0xa24>
 800509c:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80050a0:	f000 8130 	beq.w	8005304 <RI_GetReg+0x62c>
 80050a4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80050a8:	f300 8328 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050ac:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80050b0:	f000 811c 	beq.w	80052ec <RI_GetReg+0x614>
 80050b4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80050b8:	f300 8320 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050c0:	f000 8108 	beq.w	80052d4 <RI_GetReg+0x5fc>
 80050c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050c8:	f300 8318 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050cc:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80050d0:	f000 80f2 	beq.w	80052b8 <RI_GetReg+0x5e0>
 80050d4:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80050d8:	f300 8310 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050dc:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80050e0:	f000 80da 	beq.w	8005298 <RI_GetReg+0x5c0>
 80050e4:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80050e8:	f300 8308 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050ec:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80050f0:	f000 8219 	beq.w	8005526 <RI_GetReg+0x84e>
 80050f4:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80050f8:	f300 8300 	bgt.w	80056fc <RI_GetReg+0xa24>
 80050fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005100:	f000 8202 	beq.w	8005508 <RI_GetReg+0x830>
 8005104:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005108:	f300 82f8 	bgt.w	80056fc <RI_GetReg+0xa24>
 800510c:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8005110:	f000 81e8 	beq.w	80054e4 <RI_GetReg+0x80c>
 8005114:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8005118:	f300 82f0 	bgt.w	80056fc <RI_GetReg+0xa24>
 800511c:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8005120:	f000 81c4 	beq.w	80054ac <RI_GetReg+0x7d4>
 8005124:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8005128:	f300 82e8 	bgt.w	80056fc <RI_GetReg+0xa24>
 800512c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8005130:	f000 80a4 	beq.w	800527c <RI_GetReg+0x5a4>
 8005134:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8005138:	f300 82e0 	bgt.w	80056fc <RI_GetReg+0xa24>
 800513c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8005140:	f000 808e 	beq.w	8005260 <RI_GetReg+0x588>
 8005144:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8005148:	f300 82d8 	bgt.w	80056fc <RI_GetReg+0xa24>
 800514c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8005150:	d078      	beq.n	8005244 <RI_GetReg+0x56c>
 8005152:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8005156:	f300 82d1 	bgt.w	80056fc <RI_GetReg+0xa24>
 800515a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800515e:	d063      	beq.n	8005228 <RI_GetReg+0x550>
 8005160:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8005164:	f300 82ca 	bgt.w	80056fc <RI_GetReg+0xa24>
 8005168:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800516c:	d04e      	beq.n	800520c <RI_GetReg+0x534>
 800516e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8005172:	f300 82c3 	bgt.w	80056fc <RI_GetReg+0xa24>
 8005176:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800517a:	d039      	beq.n	80051f0 <RI_GetReg+0x518>
 800517c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005180:	f300 82bc 	bgt.w	80056fc <RI_GetReg+0xa24>
 8005184:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8005188:	d024      	beq.n	80051d4 <RI_GetReg+0x4fc>
 800518a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800518e:	f300 82b5 	bgt.w	80056fc <RI_GetReg+0xa24>
 8005192:	2b90      	cmp	r3, #144	; 0x90
 8005194:	d002      	beq.n	800519c <RI_GetReg+0x4c4>
 8005196:	2bd0      	cmp	r3, #208	; 0xd0
 8005198:	d00e      	beq.n	80051b8 <RI_GetReg+0x4e0>
 800519a:	e2af      	b.n	80056fc <RI_GetReg+0xa24>
          {
            case MC_REG_SPEED_KP:
            {
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 800519c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051a0:	4acb      	ldr	r2, [pc, #812]	; (80054d0 <RI_GetReg+0x7f8>)
 80051a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f005 f9e5 	bl	800a576 <PID_GetKP>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b4:	801a      	strh	r2, [r3, #0]
              break;
 80051b6:	e2a6      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KI:
            {
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80051b8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051bc:	4ac4      	ldr	r2, [pc, #784]	; (80054d0 <RI_GetReg+0x7f8>)
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f005 f9e4 	bl	800a590 <PID_GetKI>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d0:	801a      	strh	r2, [r3, #0]
              break;
 80051d2:	e298      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KD:
            {
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80051d4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051d8:	4abd      	ldr	r2, [pc, #756]	; (80054d0 <RI_GetReg+0x7f8>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	4618      	mov	r0, r3
 80051e0:	f005 fa7c 	bl	800a6dc <PID_GetKD>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ec:	801a      	strh	r2, [r3, #0]
              break;
 80051ee:	e28a      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KP:
            {
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80051f0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80051f4:	4ab7      	ldr	r2, [pc, #732]	; (80054d4 <RI_GetReg+0x7fc>)
 80051f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 f9bb 	bl	800a576 <PID_GetKP>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005208:	801a      	strh	r2, [r3, #0]
              break;
 800520a:	e27c      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KI:
            {
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800520c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005210:	4ab0      	ldr	r2, [pc, #704]	; (80054d4 <RI_GetReg+0x7fc>)
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	4618      	mov	r0, r3
 8005218:	f005 f9ba 	bl	800a590 <PID_GetKI>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	801a      	strh	r2, [r3, #0]
              break;
 8005226:	e26e      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_Q_KD:
            {
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8005228:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800522c:	4aa9      	ldr	r2, [pc, #676]	; (80054d4 <RI_GetReg+0x7fc>)
 800522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005232:	4618      	mov	r0, r3
 8005234:	f005 fa52 	bl	800a6dc <PID_GetKD>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005240:	801a      	strh	r2, [r3, #0]
              break;
 8005242:	e260      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KP:
            {
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8005244:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005248:	4aa3      	ldr	r2, [pc, #652]	; (80054d8 <RI_GetReg+0x800>)
 800524a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524e:	4618      	mov	r0, r3
 8005250:	f005 f991 	bl	800a576 <PID_GetKP>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800525c:	801a      	strh	r2, [r3, #0]
              break;
 800525e:	e252      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KI:
            {
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8005260:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005264:	4a9c      	ldr	r2, [pc, #624]	; (80054d8 <RI_GetReg+0x800>)
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	4618      	mov	r0, r3
 800526c:	f005 f990 	bl	800a590 <PID_GetKI>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005278:	801a      	strh	r2, [r3, #0]
              break;
 800527a:	e244      	b.n	8005706 <RI_GetReg+0xa2e>
            }

        case MC_REG_I_D_KD:
            {
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800527c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005280:	4a95      	ldr	r2, [pc, #596]	; (80054d8 <RI_GetReg+0x800>)
 8005282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005286:	4618      	mov	r0, r3
 8005288:	f005 fa28 	bl	800a6dc <PID_GetKD>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005294:	801a      	strh	r2, [r3, #0]
              break;
 8005296:	e236      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_BUS_VOLTAGE:
            {
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8005298:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	33d8      	adds	r3, #216	; 0xd8
 80052a0:	443b      	add	r3, r7
 80052a2:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f004 f914 	bl	80094d4 <VBS_GetAvBusVoltage_V>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052b4:	801a      	strh	r2, [r3, #0]
              break;
 80052b6:	e226      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_HEATS_TEMP:
            {
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80052b8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80052bc:	4a87      	ldr	r2, [pc, #540]	; (80054dc <RI_GetReg+0x804>)
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f005 f8ed 	bl	800a4a2 <NTC_GetAvTemp_C>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d0:	801a      	strh	r2, [r3, #0]
              break;
 80052d2:	e218      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_A:
            {
              *regdata16 = MCI_GetIab(pMCIN).a;
 80052d4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052d8:	f7fd fa56 	bl	8002788 <MCI_GetIab>
 80052dc:	4603      	mov	r3, r0
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80052e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e8:	801a      	strh	r2, [r3, #0]
              break;
 80052ea:	e20c      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_B:
            {
              *regdata16 = MCI_GetIab(pMCIN).b;
 80052ec:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80052f0:	f7fd fa4a 	bl	8002788 <MCI_GetIab>
 80052f4:	4603      	mov	r3, r0
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
 80052f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80052fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005300:	801a      	strh	r2, [r3, #0]
              break;
 8005302:	e200      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_ALPHA_MEAS:
            {
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8005304:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005308:	f7fd fa55 	bl	80027b6 <MCI_GetIalphabeta>
 800530c:	4603      	mov	r3, r0
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
 8005310:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005318:	801a      	strh	r2, [r3, #0]
              break;
 800531a:	e1f4      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_BETA_MEAS:
            {
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800531c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005320:	f7fd fa49 	bl	80027b6 <MCI_GetIalphabeta>
 8005324:	4603      	mov	r3, r0
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
 8005328:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800532c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005330:	801a      	strh	r2, [r3, #0]
              break;
 8005332:	e1e8      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_MEAS:
            {
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8005334:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005338:	f7fd fa55 	bl	80027e6 <MCI_GetIqd>
 800533c:	4603      	mov	r3, r0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005340:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8005344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005348:	801a      	strh	r2, [r3, #0]
              break;
 800534a:	e1dc      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_MEAS:
            {
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800534c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005350:	f7fd fa49 	bl	80027e6 <MCI_GetIqd>
 8005354:	4603      	mov	r3, r0
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
 8005358:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800535c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005360:	801a      	strh	r2, [r3, #0]
              break;
 8005362:	e1d0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_REF:
            {
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8005364:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005368:	f7fd fa55 	bl	8002816 <MCI_GetIqdref>
 800536c:	4603      	mov	r3, r0
 800536e:	647b      	str	r3, [r7, #68]	; 0x44
 8005370:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005378:	801a      	strh	r2, [r3, #0]
              break;
 800537a:	e1c4      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_REF:
            {
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800537c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005380:	f7fd fa49 	bl	8002816 <MCI_GetIqdref>
 8005384:	4603      	mov	r3, r0
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
 8005388:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800538c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005390:	801a      	strh	r2, [r3, #0]
              break;
 8005392:	e1b8      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_V_Q:
            {
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8005394:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005398:	f7fd fa55 	bl	8002846 <MCI_GetVqd>
 800539c:	4603      	mov	r3, r0
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80053a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a8:	801a      	strh	r2, [r3, #0]
              break;
 80053aa:	e1ac      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_D:
            {
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80053ac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80053b0:	f7fd fa49 	bl	8002846 <MCI_GetVqd>
 80053b4:	4603      	mov	r3, r0
 80053b6:	653b      	str	r3, [r7, #80]	; 0x50
 80053b8:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80053bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c0:	801a      	strh	r2, [r3, #0]
              break;
 80053c2:	e1a0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_ALPHA:
            {
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80053c4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80053c8:	f7fd fa55 	bl	8002876 <MCI_GetValphabeta>
 80053cc:	4603      	mov	r3, r0
 80053ce:	657b      	str	r3, [r7, #84]	; 0x54
 80053d0:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 80053d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d8:	801a      	strh	r2, [r3, #0]
              break;
 80053da:	e194      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_V_BETA:
            {
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80053dc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80053e0:	f7fd fa49 	bl	8002876 <MCI_GetValphabeta>
 80053e4:	4603      	mov	r3, r0
 80053e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053e8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80053ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053f0:	801a      	strh	r2, [r3, #0]
              break;
 80053f2:	e188      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_EL_ANGLE:
            {
              //cstat !MISRAC2012-Rule-11.3
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80053f4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80053f8:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <RI_GetReg+0x808>)
 80053fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fe:	4618      	mov	r0, r3
 8005400:	f006 f8db 	bl	800b5ba <SPD_GetElAngle>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800540c:	801a      	strh	r2, [r3, #0]
              break;
 800540e:	e17a      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_ROT_SPEED:
            {
              //cstat !MISRAC2012-Rule-11.3
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8005410:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005414:	4a32      	ldr	r2, [pc, #200]	; (80054e0 <RI_GetReg+0x808>)
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	4618      	mov	r0, r3
 800541c:	f006 f96c 	bl	800b6f8 <SPD_GetS16Speed>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005428:	801a      	strh	r2, [r3, #0]
              break;
 800542a:	e16c      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_I_ALPHA:
            {
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800542c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <RI_GetReg+0x808>)
 8005432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005436:	4618      	mov	r0, r3
 8005438:	f006 fff2 	bl	800c420 <STO_PLL_GetEstimatedCurrent>
 800543c:	4603      	mov	r3, r0
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005440:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005448:	801a      	strh	r2, [r3, #0]
              break;
 800544a:	e15c      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_I_BETA:
            {
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 800544c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005450:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <RI_GetReg+0x808>)
 8005452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005456:	4618      	mov	r0, r3
 8005458:	f006 ffe2 	bl	800c420 <STO_PLL_GetEstimatedCurrent>
 800545c:	4603      	mov	r3, r0
 800545e:	663b      	str	r3, [r7, #96]	; 0x60
 8005460:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8005464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005468:	801a      	strh	r2, [r3, #0]
              break;
 800546a:	e14c      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_STOPLL_BEMF_ALPHA:
            {
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800546c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <RI_GetReg+0x808>)
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	4618      	mov	r0, r3
 8005478:	f006 ffb7 	bl	800c3ea <STO_PLL_GetEstimatedBemf>
 800547c:	4603      	mov	r3, r0
 800547e:	667b      	str	r3, [r7, #100]	; 0x64
 8005480:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8005484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005488:	801a      	strh	r2, [r3, #0]
              break;
 800548a:	e13c      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_BEMF_BETA:
            {
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 800548c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <RI_GetReg+0x808>)
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	4618      	mov	r0, r3
 8005498:	f006 ffa7 	bl	800c3ea <STO_PLL_GetEstimatedBemf>
 800549c:	4603      	mov	r3, r0
 800549e:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80054a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a8:	801a      	strh	r2, [r3, #0]
              break;
 80054aa:	e12c      	b.n	8005706 <RI_GetReg+0xa2e>

            case MC_REG_STOPLL_C1:
            {
              int16_t hC1;
              int16_t hC2;
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80054ac:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80054b0:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <RI_GetReg+0x808>)
 80054b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80054ba:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80054be:	4618      	mov	r0, r3
 80054c0:	f006 ffd1 	bl	800c466 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80054c4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80054c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054cc:	801a      	strh	r2, [r3, #0]
              break;
 80054ce:	e11a      	b.n	8005706 <RI_GetReg+0xa2e>
 80054d0:	200005b4 	.word	0x200005b4
 80054d4:	200004c4 	.word	0x200004c4
 80054d8:	200004c8 	.word	0x200004c8
 80054dc:	200004c0 	.word	0x200004c0
 80054e0:	200005b0 	.word	0x200005b0

            case MC_REG_STOPLL_C2:
            {
              int16_t hC1;
              int16_t hC2;
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80054e4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80054e8:	4ac5      	ldr	r2, [pc, #788]	; (8005800 <RI_GetReg+0xb28>)
 80054ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ee:	f107 0220 	add.w	r2, r7, #32
 80054f2:	f107 0122 	add.w	r1, r7, #34	; 0x22
 80054f6:	4618      	mov	r0, r3
 80054f8:	f006 ffb5 	bl	800c466 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 80054fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	801a      	strh	r2, [r3, #0]
              break;
 8005506:	e0fe      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KI:
            {
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8005508:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800550c:	4abc      	ldr	r2, [pc, #752]	; (8005800 <RI_GetReg+0xb28>)
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	3334      	adds	r3, #52	; 0x34
 8005514:	4618      	mov	r0, r3
 8005516:	f005 f83b 	bl	800a590 <PID_GetKI>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005522:	801a      	strh	r2, [r3, #0]
              break;
 8005524:	e0ef      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KP:
            {
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8005526:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800552a:	4ab5      	ldr	r2, [pc, #724]	; (8005800 <RI_GetReg+0xb28>)
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	3334      	adds	r3, #52	; 0x34
 8005532:	4618      	mov	r0, r3
 8005534:	f005 f81f 	bl	800a576 <PID_GetKP>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005540:	801a      	strh	r2, [r3, #0]
              break;
 8005542:	e0e0      	b.n	8005706 <RI_GetReg+0xa2e>
            case MC_REG_DAC_USER2:
              break;

            case MC_REG_FF_VQ:
            {
              *regdata16 = FF_GetVqdff(pFF[motorID]).q;
 8005544:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005548:	4aae      	ldr	r2, [pc, #696]	; (8005804 <RI_GetReg+0xb2c>)
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	4618      	mov	r0, r3
 8005550:	f004 fa18 	bl	8009984 <FF_GetVqdff>
 8005554:	4603      	mov	r3, r0
 8005556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005558:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800555c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005560:	801a      	strh	r2, [r3, #0]
              break;
 8005562:	e0d0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VD:
            {
              *regdata16 = FF_GetVqdff(pFF[motorID]).d;
 8005564:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005568:	4aa6      	ldr	r2, [pc, #664]	; (8005804 <RI_GetReg+0xb2c>)
 800556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556e:	4618      	mov	r0, r3
 8005570:	f004 fa08 	bl	8009984 <FF_GetVqdff>
 8005574:	4603      	mov	r3, r0
 8005576:	673b      	str	r3, [r7, #112]	; 0x70
 8005578:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800557c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005580:	801a      	strh	r2, [r3, #0]
              break;
 8005582:	e0c0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VQ_PIOUT:
            {
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).q;
 8005584:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005588:	4a9e      	ldr	r2, [pc, #632]	; (8005804 <RI_GetReg+0xb2c>)
 800558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558e:	4618      	mov	r0, r3
 8005590:	f004 fa0c 	bl	80099ac <FF_GetVqdAvPIout>
 8005594:	4603      	mov	r3, r0
 8005596:	677b      	str	r3, [r7, #116]	; 0x74
 8005598:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a0:	801a      	strh	r2, [r3, #0]
              break;
 80055a2:	e0b0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_FF_VD_PIOUT:
            {
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).d;
 80055a4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055a8:	4a96      	ldr	r2, [pc, #600]	; (8005804 <RI_GetReg+0xb2c>)
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f004 f9fc 	bl	80099ac <FF_GetVqdAvPIout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 80055bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055c0:	801a      	strh	r2, [r3, #0]
              break;
 80055c2:	e0a0      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KP_DIV:
            {
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80055c4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055c8:	4a8f      	ldr	r2, [pc, #572]	; (8005808 <RI_GetReg+0xb30>)
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f004 fff9 	bl	800a5c6 <PID_GetKPDivisorPOW2>
 80055d4:	4603      	mov	r3, r0
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055dc:	801a      	strh	r2, [r3, #0]
              break;
 80055de:	e092      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KI_DIV:
            {
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 80055e0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80055e4:	4a88      	ldr	r2, [pc, #544]	; (8005808 <RI_GetReg+0xb30>)
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f005 f819 	bl	800a622 <PID_GetKIDivisorPOW2>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055f8:	801a      	strh	r2, [r3, #0]
              break;
 80055fa:	e084      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_SPEED_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80055fc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005600:	4a81      	ldr	r2, [pc, #516]	; (8005808 <RI_GetReg+0xb30>)
 8005602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005606:	4618      	mov	r0, r3
 8005608:	f005 f875 	bl	800a6f6 <PID_GetKDDivisorPOW2>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005614:	801a      	strh	r2, [r3, #0]
              break;
 8005616:	e076      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            case MC_REG_I_D_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8005618:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800561c:	4a7b      	ldr	r2, [pc, #492]	; (800580c <RI_GetReg+0xb34>)
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	4618      	mov	r0, r3
 8005624:	f004 ffcf 	bl	800a5c6 <PID_GetKPDivisorPOW2>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005630:	801a      	strh	r2, [r3, #0]
              break;
 8005632:	e068      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8005634:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005638:	4a74      	ldr	r2, [pc, #464]	; (800580c <RI_GetReg+0xb34>)
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	4618      	mov	r0, r3
 8005640:	f004 ffef 	bl	800a622 <PID_GetKIDivisorPOW2>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800564c:	801a      	strh	r2, [r3, #0]
              break;
 800564e:	e05a      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_D_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8005650:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005654:	4a6d      	ldr	r2, [pc, #436]	; (800580c <RI_GetReg+0xb34>)
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	4618      	mov	r0, r3
 800565c:	f005 f84b 	bl	800a6f6 <PID_GetKDDivisorPOW2>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005668:	801a      	strh	r2, [r3, #0]
              break;
 800566a:	e04c      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800566c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005670:	4a67      	ldr	r2, [pc, #412]	; (8005810 <RI_GetReg+0xb38>)
 8005672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005676:	4618      	mov	r0, r3
 8005678:	f004 ffa5 	bl	800a5c6 <PID_GetKPDivisorPOW2>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005684:	801a      	strh	r2, [r3, #0]
              break;
 8005686:	e03e      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8005688:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800568c:	4a60      	ldr	r2, [pc, #384]	; (8005810 <RI_GetReg+0xb38>)
 800568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005692:	4618      	mov	r0, r3
 8005694:	f004 ffc5 	bl	800a622 <PID_GetKIDivisorPOW2>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a0:	801a      	strh	r2, [r3, #0]
              break;
 80056a2:	e030      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_I_Q_KD_DIV:
            {
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80056a4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80056a8:	4a59      	ldr	r2, [pc, #356]	; (8005810 <RI_GetReg+0xb38>)
 80056aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f005 f821 	bl	800a6f6 <PID_GetKDDivisorPOW2>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056bc:	801a      	strh	r2, [r3, #0]
              break;
 80056be:	e022      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KI_DIV:
            {
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80056c0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80056c4:	4a4e      	ldr	r2, [pc, #312]	; (8005800 <RI_GetReg+0xb28>)
 80056c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ca:	3334      	adds	r3, #52	; 0x34
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 ffa8 	bl	800a622 <PID_GetKIDivisorPOW2>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056da:	801a      	strh	r2, [r3, #0]
              break;
 80056dc:	e013      	b.n	8005706 <RI_GetReg+0xa2e>
            }

            case MC_REG_STOPLL_KP_DIV:
            {
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80056de:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80056e2:	4a47      	ldr	r2, [pc, #284]	; (8005800 <RI_GetReg+0xb28>)
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	3334      	adds	r3, #52	; 0x34
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 ff6b 	bl	800a5c6 <PID_GetKPDivisorPOW2>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f8:	801a      	strh	r2, [r3, #0]
              break;
 80056fa:	e004      	b.n	8005706 <RI_GetReg+0xa2e>
            }
            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 80056fc:	2305      	movs	r3, #5
 80056fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 8005702:	e000      	b.n	8005706 <RI_GetReg+0xa2e>
              break;
 8005704:	bf00      	nop
            }
          }
          *size = 2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 800570c:	e2b8      	b.n	8005c80 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800570e:	2308      	movs	r3, #8
 8005710:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8005714:	e2b4      	b.n	8005c80 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_32BIT:
      {
        uint32_t *regdataU32 = (uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t *regdata32 = (int32_t *)data; //cstat !MISRAC2012-Rule-11.3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        if (freeSpace >= 4U)
 8005722:	89bb      	ldrh	r3, [r7, #12]
 8005724:	2b03      	cmp	r3, #3
 8005726:	f240 80b6 	bls.w	8005896 <RI_GetReg+0xbbe>
        {
          switch (regID)
 800572a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800572e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005732:	4293      	cmp	r3, r2
 8005734:	f000 8099 	beq.w	800586a <RI_GetReg+0xb92>
 8005738:	f641 3258 	movw	r2, #7000	; 0x1b58
 800573c:	4293      	cmp	r3, r2
 800573e:	f300 80a2 	bgt.w	8005886 <RI_GetReg+0xbae>
 8005742:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005746:	f000 8086 	beq.w	8005856 <RI_GetReg+0xb7e>
 800574a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800574e:	f300 809a 	bgt.w	8005886 <RI_GetReg+0xbae>
 8005752:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005756:	d074      	beq.n	8005842 <RI_GetReg+0xb6a>
 8005758:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800575c:	f300 8093 	bgt.w	8005886 <RI_GetReg+0xbae>
 8005760:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8005764:	d063      	beq.n	800582e <RI_GetReg+0xb56>
 8005766:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800576a:	f300 808c 	bgt.w	8005886 <RI_GetReg+0xbae>
 800576e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005772:	d04f      	beq.n	8005814 <RI_GetReg+0xb3c>
 8005774:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005778:	f300 8085 	bgt.w	8005886 <RI_GetReg+0xbae>
 800577c:	2bd8      	cmp	r3, #216	; 0xd8
 800577e:	d032      	beq.n	80057e6 <RI_GetReg+0xb0e>
 8005780:	2bd8      	cmp	r3, #216	; 0xd8
 8005782:	f300 8080 	bgt.w	8005886 <RI_GetReg+0xbae>
 8005786:	2b98      	cmp	r3, #152	; 0x98
 8005788:	d01e      	beq.n	80057c8 <RI_GetReg+0xaf0>
 800578a:	2b98      	cmp	r3, #152	; 0x98
 800578c:	dc7b      	bgt.n	8005886 <RI_GetReg+0xbae>
 800578e:	2b18      	cmp	r3, #24
 8005790:	d002      	beq.n	8005798 <RI_GetReg+0xac0>
 8005792:	2b58      	cmp	r3, #88	; 0x58
 8005794:	d009      	beq.n	80057aa <RI_GetReg+0xad2>
 8005796:	e076      	b.n	8005886 <RI_GetReg+0xbae>
          {

            case MC_REG_FAULTS_FLAGS:
            {
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8005798:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800579c:	f7fc ff43 	bl	8002626 <MCI_GetFaultState>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057a6:	601a      	str	r2, [r3, #0]
              break;
 80057a8:	e071      	b.n	800588e <RI_GetReg+0xbb6>
            }

            case MC_REG_SPEED_MEAS:
            {
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80057aa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80057ae:	f7fc ffc8 	bl	8002742 <MCI_GetAvrgMecSpeedUnit>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	461a      	mov	r2, r3
 80057c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c4:	601a      	str	r2, [r3, #0]
              break;
 80057c6:	e062      	b.n	800588e <RI_GetReg+0xbb6>
            }

            case MC_REG_SPEED_REF:
            {
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80057c8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80057cc:	f7fc ffce 	bl	800276c <MCI_GetMecSpeedRefUnit>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	461a      	mov	r2, r3
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e2:	601a      	str	r2, [r3, #0]
              break;
 80057e4:	e053      	b.n	800588e <RI_GetReg+0xbb6>
            }
            case MC_REG_STOPLL_EST_BEMF:
            {
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80057e6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80057ea:	4a05      	ldr	r2, [pc, #20]	; (8005800 <RI_GetReg+0xb28>)
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f006 fe81 	bl	800c4f8 <STO_PLL_GetEstimatedBemfLevel>
 80057f6:	4602      	mov	r2, r0
 80057f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fc:	601a      	str	r2, [r3, #0]
              break;
 80057fe:	e046      	b.n	800588e <RI_GetReg+0xbb6>
 8005800:	200005b0 	.word	0x200005b0
 8005804:	200004d0 	.word	0x200004d0
 8005808:	200005b4 	.word	0x200005b4
 800580c:	200004c8 	.word	0x200004c8
 8005810:	200004c4 	.word	0x200004c4
            }

            case MC_REG_STOPLL_OBS_BEMF:
            {
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8005814:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005818:	4ab8      	ldr	r2, [pc, #736]	; (8005afc <RI_GetReg+0xe24>)
 800581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581e:	4618      	mov	r0, r3
 8005820:	f006 fe77 	bl	800c512 <STO_PLL_GetObservedBemfLevel>
 8005824:	4602      	mov	r2, r0
 8005826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582a:	601a      	str	r2, [r3, #0]
              break;
 800582c:	e02f      	b.n	800588e <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_1Q:
            {
              *regdata32 = pFF[motorID]->wConstant_1Q;
 800582e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005832:	4ab3      	ldr	r2, [pc, #716]	; (8005b00 <RI_GetReg+0xe28>)
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800583e:	601a      	str	r2, [r3, #0]
              break;
 8005840:	e025      	b.n	800588e <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_1D:
            {
              *regdata32 = pFF[motorID]->wConstant_1D;
 8005842:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005846:	4aae      	ldr	r2, [pc, #696]	; (8005b00 <RI_GetReg+0xe28>)
 8005848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005852:	601a      	str	r2, [r3, #0]
              break;
 8005854:	e01b      	b.n	800588e <RI_GetReg+0xbb6>
            }

            case MC_REG_FF_2:
            {
              *regdata32 = pFF[motorID]->wConstant_2;
 8005856:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800585a:	4aa9      	ldr	r2, [pc, #676]	; (8005b00 <RI_GetReg+0xe28>)
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005866:	601a      	str	r2, [r3, #0]
              break;
 8005868:	e011      	b.n	800588e <RI_GetReg+0xbb6>
            }
            case MC_REG_MOTOR_POWER:
            {
              FloatToU32 ReadVal;
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800586a:	4ba6      	ldr	r3, [pc, #664]	; (8005b04 <RI_GetReg+0xe2c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f005 f844 	bl	800a8fc <PQD_GetAvrgElMotorPowerW>
 8005874:	eef0 7a40 	vmov.f32	s15, s0
 8005878:	edc7 7a07 	vstr	s15, [r7, #28]
              *regdataU32 = ReadVal.U32_Val;
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005882:	601a      	str	r2, [r3, #0]
              break;
 8005884:	e003      	b.n	800588e <RI_GetReg+0xbb6>
            }
            default:
            {
              retVal = MCP_ERROR_UNKNOWN_REG;
 8005886:	2305      	movs	r3, #5
 8005888:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
              break;
 800588c:	bf00      	nop
            }
          }
          *size = 4;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	801a      	strh	r2, [r3, #0]
        }
        else
        {
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
        }
        break;
 8005894:	e1f4      	b.n	8005c80 <RI_GetReg+0xfa8>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005896:	2308      	movs	r3, #8
 8005898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 800589c:	e1f0      	b.n	8005c80 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_STRING:
      {
        char_t *charData = (char_t *)data;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        switch (regID)
 80058a4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80058a8:	2be0      	cmp	r3, #224	; 0xe0
 80058aa:	d032      	beq.n	8005912 <RI_GetReg+0xc3a>
 80058ac:	2be0      	cmp	r3, #224	; 0xe0
 80058ae:	dc42      	bgt.n	8005936 <RI_GetReg+0xc5e>
 80058b0:	2ba0      	cmp	r3, #160	; 0xa0
 80058b2:	d01e      	beq.n	80058f2 <RI_GetReg+0xc1a>
 80058b4:	2ba0      	cmp	r3, #160	; 0xa0
 80058b6:	dc3e      	bgt.n	8005936 <RI_GetReg+0xc5e>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d002      	beq.n	80058c2 <RI_GetReg+0xbea>
 80058bc:	2b60      	cmp	r3, #96	; 0x60
 80058be:	d00c      	beq.n	80058da <RI_GetReg+0xc02>
 80058c0:	e039      	b.n	8005936 <RI_GetReg+0xc5e>
        {
          case MC_REG_FW_NAME:
            retVal = RI_MovString (FIRMWARE_NAME ,charData, size, freeSpace);
 80058c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80058cc:	488e      	ldr	r0, [pc, #568]	; (8005b08 <RI_GetReg+0xe30>)
 80058ce:	f000 f9df 	bl	8005c90 <RI_MovString>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 80058d8:	e034      	b.n	8005944 <RI_GetReg+0xc6c>

          case MC_REG_CTRL_STAGE_NAME:
          {
            retVal = RI_MovString (CTL_BOARD ,charData, size, freeSpace);
 80058da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80058e4:	4889      	ldr	r0, [pc, #548]	; (8005b0c <RI_GetReg+0xe34>)
 80058e6:	f000 f9d3 	bl	8005c90 <RI_MovString>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 80058f0:	e028      	b.n	8005944 <RI_GetReg+0xc6c>
          }

          case MC_REG_PWR_STAGE_NAME:
          {
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80058f2:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80058f6:	4a86      	ldr	r2, [pc, #536]	; (8005b10 <RI_GetReg+0xe38>)
 80058f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005906:	f000 f9c3 	bl	8005c90 <RI_MovString>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005910:	e018      	b.n	8005944 <RI_GetReg+0xc6c>
          }

          case MC_REG_MOTOR_NAME:
          {
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8005912:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005916:	4a7f      	ldr	r2, [pc, #508]	; (8005b14 <RI_GetReg+0xe3c>)
 8005918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005920:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800592a:	f000 f9b1 	bl	8005c90 <RI_MovString>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005934:	e006      	b.n	8005944 <RI_GetReg+0xc6c>
          }
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005936:	2305      	movs	r3, #5
 8005938:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            *size= 0 ; /* */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	801a      	strh	r2, [r3, #0]
            break;
 8005942:	bf00      	nop
          }
        }
        break;
 8005944:	e19c      	b.n	8005c80 <RI_GetReg+0xfa8>
      }

      case TYPE_DATA_RAW:
      {
        /* First 2 bytes of the answer is reserved to the size */
        uint16_t *rawSize = (uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        uint8_t * rawData = data;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        rawData++;
 8005952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005956:	3301      	adds	r3, #1
 8005958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        rawData++;
 800595c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005960:	3301      	adds	r3, #1
 8005962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        switch (regID)
 8005966:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800596a:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 800596e:	f000 8150 	beq.w	8005c12 <RI_GetReg+0xf3a>
 8005972:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8005976:	f300 8173 	bgt.w	8005c60 <RI_GetReg+0xf88>
 800597a:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 800597e:	f000 80f1 	beq.w	8005b64 <RI_GetReg+0xe8c>
 8005982:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8005986:	f300 816b 	bgt.w	8005c60 <RI_GetReg+0xf88>
 800598a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800598e:	f000 80c9 	beq.w	8005b24 <RI_GetReg+0xe4c>
 8005992:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8005996:	f300 8163 	bgt.w	8005c60 <RI_GetReg+0xf88>
 800599a:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 800599e:	f000 8087 	beq.w	8005ab0 <RI_GetReg+0xdd8>
 80059a2:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80059a6:	f300 815b 	bgt.w	8005c60 <RI_GetReg+0xf88>
 80059aa:	2be8      	cmp	r3, #232	; 0xe8
 80059ac:	d061      	beq.n	8005a72 <RI_GetReg+0xd9a>
 80059ae:	2be8      	cmp	r3, #232	; 0xe8
 80059b0:	f300 8156 	bgt.w	8005c60 <RI_GetReg+0xf88>
 80059b4:	2ba8      	cmp	r3, #168	; 0xa8
 80059b6:	d040      	beq.n	8005a3a <RI_GetReg+0xd62>
 80059b8:	2ba8      	cmp	r3, #168	; 0xa8
 80059ba:	f300 8151 	bgt.w	8005c60 <RI_GetReg+0xf88>
 80059be:	2b28      	cmp	r3, #40	; 0x28
 80059c0:	d002      	beq.n	80059c8 <RI_GetReg+0xcf0>
 80059c2:	2b68      	cmp	r3, #104	; 0x68
 80059c4:	d01a      	beq.n	80059fc <RI_GetReg+0xd24>
 80059c6:	e14b      	b.n	8005c60 <RI_GetReg+0xf88>
        {
          case MC_REG_GLOBAL_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80059c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059cc:	220a      	movs	r2, #10
 80059ce:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80059d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d903      	bls.n	80059e8 <RI_GetReg+0xd10>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            }
            else
            {
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
            }
            break;
 80059e6:	e13f      	b.n	8005c68 <RI_GetReg+0xf90>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ec:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <RI_GetReg+0xe40>)
 80059ee:	6810      	ldr	r0, [r2, #0]
 80059f0:	6851      	ldr	r1, [r2, #4]
 80059f2:	6018      	str	r0, [r3, #0]
 80059f4:	6059      	str	r1, [r3, #4]
 80059f6:	8912      	ldrh	r2, [r2, #8]
 80059f8:	811a      	strh	r2, [r3, #8]
            break;
 80059fa:	e135      	b.n	8005c68 <RI_GetReg+0xf90>
          }

          case MC_REG_MOTOR_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80059fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a00:	223c      	movs	r2, #60	; 0x3c
 8005a02:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d903      	bls.n	8005a1c <RI_GetReg+0xd44>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            else
            {
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
            }
            break;
 8005a1a:	e125      	b.n	8005c68 <RI_GetReg+0xf90>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8005a1c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005a20:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <RI_GetReg+0xe3c>)
 8005a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8005a2a:	223c      	movs	r2, #60	; 0x3c
 8005a2c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005a30:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005a34:	f008 fb68 	bl	800e108 <memcpy>
            break;
 8005a38:	e116      	b.n	8005c68 <RI_GetReg+0xf90>
          }
          case MC_REG_APPLICATION_CONFIG:
          {
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8005a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a3e:	220e      	movs	r2, #14
 8005a40:	801a      	strh	r2, [r3, #0]
            if ((*rawSize) +2  > freeSpace)
 8005a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	db03      	blt.n	8005a5a <RI_GetReg+0xd82>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005a52:	2308      	movs	r3, #8
 8005a54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            }
            else
            {
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
            }
            break;
 8005a58:	e106      	b.n	8005c68 <RI_GetReg+0xf90>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8005a5a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005a5e:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <RI_GetReg+0xe44>)
 8005a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a64:	220e      	movs	r2, #14
 8005a66:	4619      	mov	r1, r3
 8005a68:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005a6c:	f008 fb4c 	bl	800e108 <memcpy>
            break;
 8005a70:	e0fa      	b.n	8005c68 <RI_GetReg+0xf90>
          }
          case MC_REG_FOCFW_CONFIG:
          {
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8005a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a76:	220e      	movs	r2, #14
 8005a78:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	1c9a      	adds	r2, r3, #2
 8005a82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d903      	bls.n	8005a92 <RI_GetReg+0xdba>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            else
            {
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
            }
            break;
 8005a90:	e0ea      	b.n	8005c68 <RI_GetReg+0xf90>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8005a92:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005a96:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <RI_GetReg+0xe48>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8005aa0:	220e      	movs	r2, #14
 8005aa2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005aa6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005aaa:	f008 fb2d 	bl	800e108 <memcpy>
            break;
 8005aae:	e0db      	b.n	8005c68 <RI_GetReg+0xf90>
          }
          case MC_REG_SPEED_RAMP:
          {
            int32_t *rpm = (int32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8005ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint16_t *duration = (uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8005ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005abc:	3304      	adds	r3, #4
 8005abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8005ac2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005ac6:	f7fc fe09 	bl	80026dc <MCI_GetLastRampFinalSpeed>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005adc:	601a      	str	r2, [r3, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8005ade:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005ae2:	f7fc fe15 	bl	8002710 <MCI_GetLastRampFinalDuration>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aee:	801a      	strh	r2, [r3, #0]
            *rawSize = 6;
 8005af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005af4:	2206      	movs	r2, #6
 8005af6:	801a      	strh	r2, [r3, #0]
            break;
 8005af8:	e0b6      	b.n	8005c68 <RI_GetReg+0xf90>
 8005afa:	bf00      	nop
 8005afc:	200005b0 	.word	0x200005b0
 8005b00:	200004d0 	.word	0x200004d0
 8005b04:	200004cc 	.word	0x200004cc
 8005b08:	0800f1b8 	.word	0x0800f1b8
 8005b0c:	0800f198 	.word	0x0800f198
 8005b10:	200004d4 	.word	0x200004d4
 8005b14:	200004dc 	.word	0x200004dc
 8005b18:	0800f1cc 	.word	0x0800f1cc
 8005b1c:	200004e0 	.word	0x200004e0
 8005b20:	200004d8 	.word	0x200004d8
          }
          case MC_REG_TORQUE_RAMP:
          {
            int16_t *torque = (int16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8005b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            uint16_t *duration = (uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8005b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b30:	3302      	adds	r3, #2
 8005b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

            *rawSize = 4;
 8005b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	801a      	strh	r2, [r3, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8005b3e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005b42:	f7fc fdd8 	bl	80026f6 <MCI_GetLastRampFinalTorque>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b4e:	801a      	strh	r2, [r3, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8005b50:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005b54:	f7fc fddc 	bl	8002710 <MCI_GetLastRampFinalDuration>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b60:	801a      	strh	r2, [r3, #0]
            break;
 8005b62:	e081      	b.n	8005c68 <RI_GetReg+0xf90>
            uint16_t *finalTorque;
            uint16_t *durationms;
            RevUpCtrl_PhaseParams_t revUpPhase;
            uint8_t i;

            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8005b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b68:	2228      	movs	r2, #40	; 0x28
 8005b6a:	801a      	strh	r2, [r3, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8005b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d903      	bls.n	8005b84 <RI_GetReg+0xeac>
            {
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
                durationms  = (uint16_t *)&data[8U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
                *durationms  = revUpPhase.hDurationms;
              }
            }
            break;
 8005b82:	e071      	b.n	8005c68 <RI_GetReg+0xf90>
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005b8a:	e03d      	b.n	8005c08 <RI_GetReg+0xf30>
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8005b8c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8005b90:	4a3e      	ldr	r2, [pc, #248]	; (8005c8c <RI_GetReg+0xfb4>)
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	f107 0210 	add.w	r2, r7, #16
 8005b9a:	f897 10d6 	ldrb.w	r1, [r7, #214]	; 0xd6
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f005 fb6c 	bl	800b27c <RUC_GetPhase>
                rpm = (int32_t *) &data[2U + (i*8U)];  //cstat !MISRAC2012-Rule-11.3
 8005ba4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	3302      	adds	r3, #2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8005bb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bc8:	601a      	str	r2, [r3, #0]
                finalTorque = (uint16_t *)&data[6U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
 8005bca:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	3306      	adds	r3, #6
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8005bda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005be4:	801a      	strh	r2, [r3, #0]
                durationms  = (uint16_t *)&data[8U + (i * 8U)]; //cstat !MISRAC2012-Rule-11.3
 8005be6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005bea:	3301      	adds	r3, #1
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                *durationms  = revUpPhase.hDurationms;
 8005bf6:	8a3a      	ldrh	r2, [r7, #16]
 8005bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bfc:	801a      	strh	r2, [r3, #0]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8005bfe:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005c02:	3301      	adds	r3, #1
 8005c04:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005c08:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d9bd      	bls.n	8005b8c <RI_GetReg+0xeb4>
            break;
 8005c10:	e02a      	b.n	8005c68 <RI_GetReg+0xf90>
          }

          case MC_REG_CURRENT_REF:
          {
            uint16_t *iqref = (uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8005c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            uint16_t *idref = (uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8005c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c1e:	3302      	adds	r3, #2
 8005c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            *rawSize = 4;
 8005c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c28:	2204      	movs	r2, #4
 8005c2a:	801a      	strh	r2, [r3, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8005c2c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005c30:	f7fc fdf1 	bl	8002816 <MCI_GetIqdref>
 8005c34:	4603      	mov	r3, r0
 8005c36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c38:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c42:	801a      	strh	r2, [r3, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8005c44:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005c48:	f7fc fde5 	bl	8002816 <MCI_GetIqdref>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c52:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c5c:	801a      	strh	r2, [r3, #0]
            break;
 8005c5e:	e003      	b.n	8005c68 <RI_GetReg+0xf90>
          case MC_REG_ASYNC_UARTA:
          case MC_REG_ASYNC_UARTB:
          case MC_REG_ASYNC_STLNK:
          default:
          {
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005c60:	2305      	movs	r3, #5
 8005c62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            break;
 8005c66:	bf00      	nop
          }
        }

        /* Size of the answer is size of the data + 2 bytes containing data size*/
        *size = (*rawSize) + 2U;
 8005c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	3302      	adds	r3, #2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	801a      	strh	r2, [r3, #0]
        break;
 8005c76:	e003      	b.n	8005c80 <RI_GetReg+0xfa8>
      }

      default:
      {
        retVal = MCP_ERROR_BAD_DATA_TYPE;
 8005c78:	2307      	movs	r3, #7
 8005c7a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        break;
 8005c7e:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8005c80:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	37d8      	adds	r7, #216	; 0xd8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	200005ac 	.word	0x200005ac

08005c90 <RI_MovString>:
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	807b      	strh	r3, [r7, #2]
  uint8_t retVal = MCP_CMD_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77fb      	strb	r3, [r7, #31]

  const char_t *tempsrcString = srcString;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	61bb      	str	r3, [r7, #24]
  char_t *tempdestString = destString;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	617b      	str	r3, [r7, #20]
  *size= 1U ; /* /0 is the min String size */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	801a      	strh	r2, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8005cb0:	e010      	b.n	8005cd4 <RI_MovString+0x44>
  {
    *tempdestString = *tempsrcString;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f993 2000 	ldrsb.w	r2, [r3]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	701a      	strb	r2, [r3, #0]
    tempdestString++;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
    tempsrcString++;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61bb      	str	r3, [r7, #24]
    *size = *size + 1U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	801a      	strh	r2, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <RI_MovString+0x5c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	dbe2      	blt.n	8005cb2 <RI_MovString+0x22>
  }

  if (*tempsrcString != (char_t)0)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f993 3000 	ldrsb.w	r3, [r3]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <RI_MovString+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
 8005cf6:	2306      	movs	r3, #6
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e002      	b.n	8005d02 <RI_MovString+0x72>
  }
  else
  {
    *tempdestString = (int8_t)0;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
  }

  return (retVal);
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3724      	adds	r7, #36	; 0x24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <RI_GetIDSize>:
uint8_t RI_GetIDSize(uint16_t dataID)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	80fb      	strh	r3, [r7, #6]
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d22:	73bb      	strb	r3, [r7, #14]
  uint8_t result;
  switch (typeID)
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	2b18      	cmp	r3, #24
 8005d28:	d00c      	beq.n	8005d44 <RI_GetIDSize+0x34>
 8005d2a:	2b18      	cmp	r3, #24
 8005d2c:	dc0d      	bgt.n	8005d4a <RI_GetIDSize+0x3a>
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d002      	beq.n	8005d38 <RI_GetIDSize+0x28>
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d003      	beq.n	8005d3e <RI_GetIDSize+0x2e>
 8005d36:	e008      	b.n	8005d4a <RI_GetIDSize+0x3a>
  {
    case TYPE_DATA_8BIT:
    {
      result = 1;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e008      	b.n	8005d50 <RI_GetIDSize+0x40>
    }

    case TYPE_DATA_16BIT:
    {
      result = 2;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	73fb      	strb	r3, [r7, #15]
      break;
 8005d42:	e005      	b.n	8005d50 <RI_GetIDSize+0x40>
    }

    case TYPE_DATA_32BIT:
    {
      result = 4;
 8005d44:	2304      	movs	r3, #4
 8005d46:	73fb      	strb	r3, [r7, #15]
      break;
 8005d48:	e002      	b.n	8005d50 <RI_GetIDSize+0x40>
    }

    default:
    {
      result=0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4e:	bf00      	nop
    }
  }

  return (result);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <RI_GetPtrReg>:

__weak uint8_t RI_GetPtrReg(uint16_t dataID, void **dataPtr)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	80fb      	strh	r3, [r7, #6]
  uint8_t retVal = MCP_CMD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
  }
  else
  {
#endif

    uint8_t vmotorID = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75bb      	strb	r3, [r7, #22]

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
 8005d74:	7dbb      	ldrb	r3, [r7, #22]
 8005d76:	015b      	lsls	r3, r3, #5
 8005d78:	4a82      	ldr	r2, [pc, #520]	; (8005f84 <RI_GetPtrReg+0x224>)
 8005d7a:	4413      	add	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
    uint16_t regID = dataID & REG_MASK;
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	81fb      	strh	r3, [r7, #14]
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8e:	737b      	strb	r3, [r7, #13]

    switch (typeID)
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	f040 80e8 	bne.w	8005f68 <RI_GetPtrReg+0x208>
    {
      case TYPE_DATA_16BIT:
      {
        switch (regID)
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8005d9e:	f000 80d3 	beq.w	8005f48 <RI_GetPtrReg+0x1e8>
 8005da2:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8005da6:	f300 80d8 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005daa:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8005dae:	f000 80c2 	beq.w	8005f36 <RI_GetPtrReg+0x1d6>
 8005db2:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8005db6:	f300 80d0 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005dba:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8005dbe:	f000 80a9 	beq.w	8005f14 <RI_GetPtrReg+0x1b4>
 8005dc2:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8005dc6:	f300 80c8 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005dca:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005dce:	f000 80aa 	beq.w	8005f26 <RI_GetPtrReg+0x1c6>
 8005dd2:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8005dd6:	f300 80c0 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005dda:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005dde:	f000 8092 	beq.w	8005f06 <RI_GetPtrReg+0x1a6>
 8005de2:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8005de6:	f300 80b8 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005dea:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005dee:	f000 8083 	beq.w	8005ef8 <RI_GetPtrReg+0x198>
 8005df2:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8005df6:	f300 80b0 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005dfa:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005dfe:	d074      	beq.n	8005eea <RI_GetPtrReg+0x18a>
 8005e00:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8005e04:	f300 80a9 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e08:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005e0c:	d066      	beq.n	8005edc <RI_GetPtrReg+0x17c>
 8005e0e:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8005e12:	f300 80a2 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e16:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005e1a:	d058      	beq.n	8005ece <RI_GetPtrReg+0x16e>
 8005e1c:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8005e20:	f300 809b 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e24:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005e28:	d04a      	beq.n	8005ec0 <RI_GetPtrReg+0x160>
 8005e2a:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8005e2e:	f300 8094 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e32:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005e36:	d03c      	beq.n	8005eb2 <RI_GetPtrReg+0x152>
 8005e38:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005e3c:	f300 808d 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e40:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005e44:	d02e      	beq.n	8005ea4 <RI_GetPtrReg+0x144>
 8005e46:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8005e4a:	f300 8086 	bgt.w	8005f5a <RI_GetPtrReg+0x1fa>
 8005e4e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005e52:	d021      	beq.n	8005e98 <RI_GetPtrReg+0x138>
 8005e54:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8005e58:	dc7f      	bgt.n	8005f5a <RI_GetPtrReg+0x1fa>
 8005e5a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8005e5e:	d015      	beq.n	8005e8c <RI_GetPtrReg+0x12c>
 8005e60:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8005e64:	dc79      	bgt.n	8005f5a <RI_GetPtrReg+0x1fa>
 8005e66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e6a:	d003      	beq.n	8005e74 <RI_GetPtrReg+0x114>
 8005e6c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8005e70:	d006      	beq.n	8005e80 <RI_GetPtrReg+0x120>
 8005e72:	e072      	b.n	8005f5a <RI_GetPtrReg+0x1fa>
        {
          case MC_REG_I_A:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	601a      	str	r2, [r3, #0]
             break;
 8005e7e:	e072      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_B:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]
            break;
 8005e8a:	e06c      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_ALPHA_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1d1a      	adds	r2, r3, #4
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	601a      	str	r2, [r3, #0]
            break;
 8005e96:	e066      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_BETA_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	1d9a      	adds	r2, r3, #6
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	601a      	str	r2, [r3, #0]
            break;
 8005ea2:	e060      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_Q_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f103 020c 	add.w	r2, r3, #12
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	601a      	str	r2, [r3, #0]
            break;
 8005eb0:	e059      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_D_MEAS:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f103 020e 	add.w	r2, r3, #14
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
            break;
 8005ebe:	e052      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_Q_REF:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f103 0210 	add.w	r2, r3, #16
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	601a      	str	r2, [r3, #0]
            break;
 8005ecc:	e04b      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_I_D_REF:
          {
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f103 0212 	add.w	r2, r3, #18
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	601a      	str	r2, [r3, #0]
            break;
 8005eda:	e044      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }
          case MC_REG_V_Q:
          {
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f103 0216 	add.w	r2, r3, #22
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	601a      	str	r2, [r3, #0]
            break;
 8005ee8:	e03d      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_D:
          {
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f103 0218 	add.w	r2, r3, #24
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	601a      	str	r2, [r3, #0]
            break;
 8005ef6:	e036      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_ALPHA:
          {
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f103 021a 	add.w	r2, r3, #26
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	601a      	str	r2, [r3, #0]
            break;
 8005f04:	e02f      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_V_BETA:
          {
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f103 021c 	add.w	r2, r3, #28
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	601a      	str	r2, [r3, #0]
            break;
 8005f12:	e028      	b.n	8005f66 <RI_GetPtrReg+0x206>
#ifdef NOT_IMPLEMENTED  /* Not yet Implemented */
         stoPLLSensor[vmotorID];
#endif
          case MC_REG_STOPLL_ROT_SPEED:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8005f14:	7dbb      	ldrb	r3, [r7, #22]
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <RI_GetPtrReg+0x228>)
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	f103 020c 	add.w	r2, r3, #12
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	601a      	str	r2, [r3, #0]
            break;
 8005f24:	e01f      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_STOPLL_EL_ANGLE:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hElAngle);
 8005f26:	7dbb      	ldrb	r3, [r7, #22]
 8005f28:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <RI_GetPtrReg+0x228>)
 8005f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	601a      	str	r2, [r3, #0]
            break;
 8005f34:	e017      	b.n	8005f66 <RI_GetPtrReg+0x206>
          case MC_REG_STOPLL_I_BETA:
            break;
#endif
          case MC_REG_STOPLL_BEMF_ALPHA:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_alfa_est);
 8005f36:	7dbb      	ldrb	r3, [r7, #22]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <RI_GetPtrReg+0x228>)
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]
            break;
 8005f46:	e00e      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }

          case MC_REG_STOPLL_BEMF_BETA:
          {
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
 8005f48:	7dbb      	ldrb	r3, [r7, #22]
 8005f4a:	4a0f      	ldr	r2, [pc, #60]	; (8005f88 <RI_GetPtrReg+0x228>)
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	f103 0272 	add.w	r2, r3, #114	; 0x72
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	601a      	str	r2, [r3, #0]
            break;
 8005f58:	e005      	b.n	8005f66 <RI_GetPtrReg+0x206>
          }
          default:
          {
            *dataPtr = &nullData16;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <RI_GetPtrReg+0x22c>)
 8005f5e:	601a      	str	r2, [r3, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8005f60:	2305      	movs	r3, #5
 8005f62:	75fb      	strb	r3, [r7, #23]
            break;
 8005f64:	bf00      	nop
          }
        }
        break;
 8005f66:	e005      	b.n	8005f74 <RI_GetPtrReg+0x214>
      }

      default:
      {
        *dataPtr = &nullData16;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <RI_GetPtrReg+0x22c>)
 8005f6c:	601a      	str	r2, [r3, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8005f6e:	2305      	movs	r3, #5
 8005f70:	75fb      	strb	r3, [r7, #23]
        break;
 8005f72:	bf00      	nop
      }
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000800 	.word	0x20000800
 8005f88:	200005b0 	.word	0x200005b0
 8005f8c:	200019e8 	.word	0x200019e8

08005f90 <LL_ADC_REG_SetSequencerLength>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <LL_ADC_REG_SetSequencerRanks>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b089      	sub	sp, #36	; 0x24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	332c      	adds	r3, #44	; 0x2c
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	fa92 f2a2 	rbit	r2, r2
 8005fda:	617a      	str	r2, [r7, #20]
  return result;
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	fab2 f282 	clz	r2, r2
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	40d3      	lsrs	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	211f      	movs	r1, #31
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	401a      	ands	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 011f 	and.w	r1, r3, #31
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	431a      	orrs	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	3724      	adds	r7, #36	; 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_ADC_SetChannelSamplingTime>:
{
 8006022:	b480      	push	{r7}
 8006024:	b08d      	sub	sp, #52	; 0x34
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	330c      	adds	r3, #12
 8006032:	4619      	mov	r1, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	fa92 f2a2 	rbit	r2, r2
 8006046:	617a      	str	r2, [r7, #20]
  return result;
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	fab2 f282 	clz	r2, r2
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	40d3      	lsrs	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8006062:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8006066:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	fa91 f1a1 	rbit	r1, r1
 800606e:	61f9      	str	r1, [r7, #28]
  return result;
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	fab1 f181 	clz	r1, r1
 8006076:	b2c9      	uxtb	r1, r1
 8006078:	40cb      	lsrs	r3, r1
 800607a:	2107      	movs	r1, #7
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	43db      	mvns	r3, r3
 8006082:	401a      	ands	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800608a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800608e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006092:	fa91 f1a1 	rbit	r1, r1
 8006096:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8006098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800609a:	fab1 f181 	clz	r1, r1
 800609e:	b2c9      	uxtb	r1, r1
 80060a0:	40cb      	lsrs	r3, r1
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	431a      	orrs	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3734      	adds	r7, #52	; 0x34
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610c:	b29b      	uxth	r3, r3
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f06f 0202 	mvn.w	r2, #2
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_ADC_ClearFlag_JEOS>:
  * @rmtoll SR       JEOC           LL_ADC_ClearFlag_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f06f 0204 	mvn.w	r2, #4
 800616a:	601a      	str	r2, [r3, #0]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f023 0220 	bic.w	r2, r3, #32
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_DisableIT_JEOS>:
  * @rmtoll CR1      JEOCIE         LL_ADC_EnableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint8_t handle = 255U;
 80061c0:	23ff      	movs	r3, #255	; 0xff
 80061c2:	73fb      	strb	r3, [r7, #15]
    handle = 0U;
  }
  else
  {
#endif
    uint8_t i = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 80061c8:	e029      	b.n	800621e <RCM_RegisterRegConv+0x66>
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	4a44      	ldr	r2, [pc, #272]	; (80062e0 <RCM_RegisterRegConv+0x128>)
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <RCM_RegisterRegConv+0x28>
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d901      	bls.n	80061e0 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	73fb      	strb	r3, [r7, #15]
      else
      {
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	4a3f      	ldr	r2, [pc, #252]	; (80062e0 <RCM_RegisterRegConv+0x128>)
 80061e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d015      	beq.n	8006218 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80061ec:	7bbb      	ldrb	r3, [r7, #14]
 80061ee:	4a3c      	ldr	r2, [pc, #240]	; (80062e0 <RCM_RegisterRegConv+0x128>)
 80061f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f4:	791a      	ldrb	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	791b      	ldrb	r3, [r3, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d10c      	bne.n	8006218 <RCM_RegisterRegConv+0x60>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <RCM_RegisterRegConv+0x128>)
 8006202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d103      	bne.n	8006218 <RCM_RegisterRegConv+0x60>
        {
          handle = i; /* Reuse the same handle */
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	73fb      	strb	r3, [r7, #15]
          i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8006214:	2304      	movs	r3, #4
 8006216:	73bb      	strb	r3, [r7, #14]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	3301      	adds	r3, #1
 800621c:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d9d2      	bls.n	80061ca <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV)
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d855      	bhi.n	80062d6 <RCM_RegisterRegConv+0x11e>
    {
      RCM_handle_array [handle] = regConv;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	492c      	ldr	r1, [pc, #176]	; (80062e0 <RCM_RegisterRegConv+0x128>)
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <RCM_RegisterRegConv+0x12c>)
 8006238:	2100      	movs	r1, #0
 800623a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff ff49 	bl	80060da <LL_ADC_IsEnabled>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d118      	bne.n	8006280 <RCM_RegisterRegConv+0xc8>
      {
        LL_ADC_DisableIT_EOCS(regConv->regADC);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff90 	bl	8006178 <LL_ADC_DisableIT_EOCS>
        LL_ADC_ClearFlag_EOCS(regConv->regADC);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff6f 	bl	8006140 <LL_ADC_ClearFlag_EOCS>
        LL_ADC_DisableIT_JEOS(regConv->regADC);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff ff96 	bl	8006198 <LL_ADC_DisableIT_JEOS>
        LL_ADC_ClearFlag_JEOS(regConv->regADC);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff73 	bl	800615c <LL_ADC_ClearFlag_JEOS>

        LL_ADC_Enable(regConv->regADC);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff1d 	bl	80060ba <LL_ADC_Enable>
      else
      {
        /* Nothing to do */
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fe82 	bl	8005f90 <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	791b      	ldrb	r3, [r3, #4]
 8006294:	2b09      	cmp	r3, #9
 8006296:	d80d      	bhi.n	80062b4 <RCM_RegisterRegConv+0xfc>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	791b      	ldrb	r3, [r3, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	791b      	ldrb	r3, [r3, #4]
 80062a2:	461a      	mov	r2, r3
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	051b      	lsls	r3, r3, #20
 80062ac:	430b      	orrs	r3, r1
 80062ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062b2:	e00b      	b.n	80062cc <RCM_RegisterRegConv+0x114>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	791b      	ldrb	r3, [r3, #4]
 80062b8:	4619      	mov	r1, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	461a      	mov	r2, r3
 80062c0:	4613      	mov	r3, r2
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	4413      	add	r3, r2
 80062c6:	3b1e      	subs	r3, #30
 80062c8:	051b      	lsls	r3, r3, #20
 80062ca:	430b      	orrs	r3, r1
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6892      	ldr	r2, [r2, #8]
 80062d0:	4619      	mov	r1, r3
 80062d2:	f7ff fea6 	bl	8006022 <LL_ADC_SetChannelSamplingTime>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200019ec 	.word	0x200019ec
 80062e4:	200019fc 	.word	0x200019fc

080062e8 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 80062f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fa:	6818      	ldr	r0, [r3, #0]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	4a31      	ldr	r2, [pc, #196]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006306:	2b09      	cmp	r3, #9
 8006308:	d813      	bhi.n	8006332 <RCM_ExecRegularConv+0x4a>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	4a2d      	ldr	r2, [pc, #180]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 800630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006312:	791b      	ldrb	r3, [r3, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 800631a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631e:	791b      	ldrb	r3, [r3, #4]
 8006320:	461a      	mov	r2, r3
 8006322:	4613      	mov	r3, r2
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	4413      	add	r3, r2
 8006328:	051b      	lsls	r3, r3, #20
 800632a:	430b      	orrs	r3, r1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800632c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006330:	e011      	b.n	8006356 <RCM_ExecRegularConv+0x6e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	4a23      	ldr	r2, [pc, #140]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	4619      	mov	r1, r3
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	461a      	mov	r2, r3
 800634a:	4613      	mov	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	4413      	add	r3, r2
 8006350:	3b1e      	subs	r3, #30
 8006352:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8006354:	430b      	orrs	r3, r1
 8006356:	461a      	mov	r2, r3
 8006358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800635c:	f7ff fe2b 	bl	8005fb6 <LL_ADC_REG_SetSequencerRanks>

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fec8 	bl	8006100 <LL_ADC_REG_ReadConversionData12>

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8006380:	015b      	lsls	r3, r3, #5
 8006382:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8006386:	3378      	adds	r3, #120	; 0x78
 8006388:	461a      	mov	r2, r3
 800638a:	2301      	movs	r3, #1
 800638c:	6013      	str	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 800638e:	bf00      	nop
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff febd 	bl	800611a <LL_ADC_IsActiveFlag_EOCS>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f4      	beq.n	8006390 <RCM_ExecRegularConv+0xa8>
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <RCM_ExecRegularConv+0xdc>)
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fea5 	bl	8006100 <LL_ADC_REG_ReadConversionData12>
 80063b6:	4603      	mov	r3, r0
 80063b8:	81fb      	strh	r3, [r7, #14]
  return retVal;
 80063ba:	89fb      	ldrh	r3, [r7, #14]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200019ec 	.word	0x200019ec

080063c8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80063c8:	b598      	push	{r3, r4, r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80063cc:	4b17      	ldr	r3, [pc, #92]	; (800642c <RCM_ExecUserConv+0x64>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d128      	bne.n	8006426 <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <RCM_ExecUserConv+0x68>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff ff85 	bl	80062e8 <RCM_ExecRegularConv>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <RCM_ExecUserConv+0x6c>)
 80063e4:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <RCM_ExecUserConv+0x64>)
 80063e8:	2202      	movs	r2, #2
 80063ea:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80063ec:	4b10      	ldr	r3, [pc, #64]	; (8006430 <RCM_ExecUserConv+0x68>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <RCM_ExecUserConv+0x70>)
 80063f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d014      	beq.n	8006426 <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <RCM_ExecUserConv+0x64>)
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <RCM_ExecUserConv+0x68>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <RCM_ExecUserConv+0x70>)
 800640a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <RCM_ExecUserConv+0x68>)
 8006410:	7818      	ldrb	r0, [r3, #0]
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <RCM_ExecUserConv+0x6c>)
 8006414:	8819      	ldrh	r1, [r3, #0]
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <RCM_ExecUserConv+0x68>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	4a07      	ldr	r2, [pc, #28]	; (8006438 <RCM_ExecUserConv+0x70>)
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	461a      	mov	r2, r3
 8006424:	47a0      	blx	r4
    else
    {
      /* Nothing to do */
    }
  }
}
 8006426:	bf00      	nop
 8006428:	bd98      	pop	{r3, r4, r7, pc}
 800642a:	bf00      	nop
 800642c:	20001a1e 	.word	0x20001a1e
 8006430:	20001a1f 	.word	0x20001a1f
 8006434:	20001a1c 	.word	0x20001a1c
 8006438:	200019fc 	.word	0x200019fc

0800643c <LL_RCC_SetDFSDMClockSource>:
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_CKDFSDM1SEL, Source);
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <LL_RCC_SetDFSDMClockSource+0x28>)
 8006446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800644a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800644e:	4905      	ldr	r1, [pc, #20]	; (8006464 <LL_RCC_SetDFSDMClockSource+0x28>)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40023800 	.word	0x40023800

08006468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <HAL_MspInit+0x4c>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	4a0f      	ldr	r2, [pc, #60]	; (80064b4 <HAL_MspInit+0x4c>)
 8006478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800647c:	6453      	str	r3, [r2, #68]	; 0x44
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <HAL_MspInit+0x4c>)
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_MspInit+0x4c>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <HAL_MspInit+0x4c>)
 8006494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006498:	6413      	str	r3, [r2, #64]	; 0x40
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_MspInit+0x4c>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800

080064b8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	609a      	str	r2, [r3, #8]
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	611a      	str	r2, [r3, #16]
  if(!(IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM2_Init == 0))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a47      	ldr	r2, [pc, #284]	; (80065f4 <HAL_DFSDM_FilterMspInit+0x13c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	f000 8088 	beq.w	80065ec <HAL_DFSDM_FilterMspInit+0x134>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a45      	ldr	r2, [pc, #276]	; (80065f8 <HAL_DFSDM_FilterMspInit+0x140>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	f000 8082 	beq.w	80065ec <HAL_DFSDM_FilterMspInit+0x134>
 80064e8:	4b44      	ldr	r3, [pc, #272]	; (80065fc <HAL_DFSDM_FilterMspInit+0x144>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d17d      	bne.n	80065ec <HAL_DFSDM_FilterMspInit+0x134>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    LL_RCC_SetDFSDMClockSource(LL_RCC_DFSDM2_CLKSOURCE_PCLK2);
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7ff ffa3 	bl	800643c <LL_RCC_SetDFSDMClockSource>

    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 80064f6:	4b42      	ldr	r3, [pc, #264]	; (8006600 <HAL_DFSDM_FilterMspInit+0x148>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3301      	adds	r3, #1
 80064fc:	4a40      	ldr	r2, [pc, #256]	; (8006600 <HAL_DFSDM_FilterMspInit+0x148>)
 80064fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 8006500:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <HAL_DFSDM_FilterMspInit+0x148>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10d      	bne.n	8006524 <HAL_DFSDM_FilterMspInit+0x6c>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	4b3d      	ldr	r3, [pc, #244]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	4a3c      	ldr	r2, [pc, #240]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006516:	6453      	str	r3, [r2, #68]	; 0x44
 8006518:	4b3a      	ldr	r3, [pc, #232]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	4b36      	ldr	r3, [pc, #216]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	4a35      	ldr	r2, [pc, #212]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 800652e:	f043 0304 	orr.w	r3, r3, #4
 8006532:	6313      	str	r3, [r2, #48]	; 0x30
 8006534:	4b33      	ldr	r3, [pc, #204]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006540:	2300      	movs	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4a2e      	ldr	r2, [pc, #184]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	6313      	str	r3, [r2, #48]	; 0x30
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <HAL_DFSDM_FilterMspInit+0x14c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> DFSDM2_DATIN2
    PB10     ------> DFSDM2_CKOUT
    PC9     ------> DFSDM2_DATIN3
    PB9     ------> DFSDM2_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800655c:	2320      	movs	r3, #32
 800655e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006560:	2302      	movs	r3, #2
 8006562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006568:	2300      	movs	r3, #0
 800656a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800656c:	2303      	movs	r3, #3
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4619      	mov	r1, r3
 8006576:	4824      	ldr	r0, [pc, #144]	; (8006608 <HAL_DFSDM_FilterMspInit+0x150>)
 8006578:	f001 fc1a 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800657c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006582:	2302      	movs	r3, #2
 8006584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658a:	2300      	movs	r3, #0
 800658c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM2;
 800658e:	230a      	movs	r3, #10
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006592:	f107 0314 	add.w	r3, r7, #20
 8006596:	4619      	mov	r1, r3
 8006598:	481c      	ldr	r0, [pc, #112]	; (800660c <HAL_DFSDM_FilterMspInit+0x154>)
 800659a:	f001 fc09 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800659e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a4:	2302      	movs	r3, #2
 80065a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80065b0:	2307      	movs	r3, #7
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4619      	mov	r1, r3
 80065ba:	4813      	ldr	r0, [pc, #76]	; (8006608 <HAL_DFSDM_FilterMspInit+0x150>)
 80065bc:	f001 fbf8 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c6:	2302      	movs	r3, #2
 80065c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80065d2:	2306      	movs	r3, #6
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d6:	f107 0314 	add.w	r3, r7, #20
 80065da:	4619      	mov	r1, r3
 80065dc:	480b      	ldr	r0, [pc, #44]	; (800660c <HAL_DFSDM_FilterMspInit+0x154>)
 80065de:	f001 fbe7 	bl	8007db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <HAL_DFSDM_FilterMspInit+0x144>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	4a04      	ldr	r2, [pc, #16]	; (80065fc <HAL_DFSDM_FilterMspInit+0x144>)
 80065ea:	6013      	str	r3, [r2, #0]
  }

}
 80065ec:	bf00      	nop
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40016100 	.word	0x40016100
 80065f8:	40016180 	.word	0x40016180
 80065fc:	20001a24 	.word	0x20001a24
 8006600:	20001a20 	.word	0x20001a20
 8006604:	40023800 	.word	0x40023800
 8006608:	40020800 	.word	0x40020800
 800660c:	40020400 	.word	0x40020400

08006610 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	; 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
  if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a4d      	ldr	r2, [pc, #308]	; (8006764 <HAL_DFSDM_ChannelMspInit+0x154>)
 800662e:	4293      	cmp	r3, r2
 8006630:	f000 8094 	beq.w	800675c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_DFSDM_ChannelMspInit+0x158>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f000 808e 	beq.w	800675c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a49      	ldr	r2, [pc, #292]	; (800676c <HAL_DFSDM_ChannelMspInit+0x15c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f000 8088 	beq.w	800675c <HAL_DFSDM_ChannelMspInit+0x14c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a47      	ldr	r2, [pc, #284]	; (8006770 <HAL_DFSDM_ChannelMspInit+0x160>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f000 8082 	beq.w	800675c <HAL_DFSDM_ChannelMspInit+0x14c>
 8006658:	4b46      	ldr	r3, [pc, #280]	; (8006774 <HAL_DFSDM_ChannelMspInit+0x164>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d17d      	bne.n	800675c <HAL_DFSDM_ChannelMspInit+0x14c>
  {
  /* USER CODE BEGIN DFSDM2_MspInit 0 */

  /* USER CODE END DFSDM2_MspInit 0 */
    LL_RCC_SetDFSDMClockSource(LL_RCC_DFSDM2_CLKSOURCE_PCLK2);
 8006660:	2000      	movs	r0, #0
 8006662:	f7ff feeb 	bl	800643c <LL_RCC_SetDFSDMClockSource>

    /* Peripheral clock enable */
    HAL_RCC_DFSDM2_CLK_ENABLED++;
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <HAL_DFSDM_ChannelMspInit+0x168>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	4a42      	ldr	r2, [pc, #264]	; (8006778 <HAL_DFSDM_ChannelMspInit+0x168>)
 800666e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM2_CLK_ENABLED==1){
 8006670:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_DFSDM_ChannelMspInit+0x168>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d10d      	bne.n	8006694 <HAL_DFSDM_ChannelMspInit+0x84>
      __HAL_RCC_DFSDM2_CLK_ENABLE();
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 8006682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006686:	6453      	str	r3, [r2, #68]	; 0x44
 8006688:	4b3c      	ldr	r3, [pc, #240]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4a37      	ldr	r2, [pc, #220]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	6313      	str	r3, [r2, #48]	; 0x30
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b0:	2300      	movs	r3, #0
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	4b31      	ldr	r3, [pc, #196]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4a30      	ldr	r2, [pc, #192]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 80066ba:	f043 0302 	orr.w	r3, r3, #2
 80066be:	6313      	str	r3, [r2, #48]	; 0x30
 80066c0:	4b2e      	ldr	r3, [pc, #184]	; (800677c <HAL_DFSDM_ChannelMspInit+0x16c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> DFSDM2_DATIN2
    PB10     ------> DFSDM2_CKOUT
    PC9     ------> DFSDM2_DATIN3
    PB9     ------> DFSDM2_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80066cc:	2320      	movs	r3, #32
 80066ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d0:	2302      	movs	r3, #2
 80066d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d8:	2300      	movs	r3, #0
 80066da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80066dc:	2303      	movs	r3, #3
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4619      	mov	r1, r3
 80066e6:	4826      	ldr	r0, [pc, #152]	; (8006780 <HAL_DFSDM_ChannelMspInit+0x170>)
 80066e8:	f001 fb62 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f2:	2302      	movs	r3, #2
 80066f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM2;
 80066fe:	230a      	movs	r3, #10
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	4619      	mov	r1, r3
 8006708:	481e      	ldr	r0, [pc, #120]	; (8006784 <HAL_DFSDM_ChannelMspInit+0x174>)
 800670a:	f001 fb51 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800670e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006714:	2302      	movs	r3, #2
 8006716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800671c:	2300      	movs	r3, #0
 800671e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8006720:	2307      	movs	r3, #7
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	4619      	mov	r1, r3
 800672a:	4815      	ldr	r0, [pc, #84]	; (8006780 <HAL_DFSDM_ChannelMspInit+0x170>)
 800672c:	f001 fb40 	bl	8007db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006736:	2302      	movs	r3, #2
 8006738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800673e:	2300      	movs	r3, #0
 8006740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8006742:	2306      	movs	r3, #6
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	4619      	mov	r1, r3
 800674c:	480d      	ldr	r0, [pc, #52]	; (8006784 <HAL_DFSDM_ChannelMspInit+0x174>)
 800674e:	f001 fb2f 	bl	8007db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <HAL_DFSDM_ChannelMspInit+0x164>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	4a06      	ldr	r2, [pc, #24]	; (8006774 <HAL_DFSDM_ChannelMspInit+0x164>)
 800675a:	6013      	str	r3, [r2, #0]
  }

}
 800675c:	bf00      	nop
 800675e:	3728      	adds	r7, #40	; 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40016000 	.word	0x40016000
 8006768:	40016020 	.word	0x40016020
 800676c:	40016040 	.word	0x40016040
 8006770:	40016060 	.word	0x40016060
 8006774:	20001a24 	.word	0x20001a24
 8006778:	20001a20 	.word	0x20001a20
 800677c:	40023800 	.word	0x40023800
 8006780:	40020800 	.word	0x40020800
 8006784:	40020400 	.word	0x40020400

08006788 <LL_ADC_IsActiveFlag_JEOS>:
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b04      	cmp	r3, #4
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <LL_TIM_ClearFlag_UPDATE>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f06f 0201 	mvn.w	r2, #1
 80067bc:	611a      	str	r2, [r3, #16]
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <LL_TIM_ClearFlag_BRK>:
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d8:	611a      	str	r2, [r3, #16]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_TIM_IsActiveFlag_BRK>:
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d101      	bne.n	80067fe <LL_TIM_IsActiveFlag_BRK+0x18>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <LL_TIM_IsActiveFlag_BRK+0x1a>
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b04      	cmp	r3, #4
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	bf0c      	ite	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	2300      	movne	r3, #0
 8006896:	b2db      	uxtb	r3, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80068d8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80068fc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006920:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8006928:	68fb      	ldr	r3, [r7, #12]
}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8006952:	b480      	push	{r7}
 8006954:	b089      	sub	sp, #36	; 0x24
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	330c      	adds	r3, #12
 800695e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60bb      	str	r3, [r7, #8]
   return(result);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f043 0310 	orr.w	r3, r3, #16
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	330c      	adds	r3, #12
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	61ba      	str	r2, [r7, #24]
 8006978:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e7      	bne.n	800695a <LL_USART_EnableIT_IDLE+0x8>
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	3724      	adds	r7, #36	; 0x24
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3314      	adds	r3, #20
 80069a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 0301 	orr.w	r3, r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3314      	adds	r3, #20
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	61ba      	str	r2, [r7, #24]
 80069be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e7      	bne.n	80069a0 <LL_USART_EnableIT_ERROR+0x8>
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3724      	adds	r7, #36	; 0x24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 80069de:	b480      	push	{r7}
 80069e0:	b089      	sub	sp, #36	; 0x24
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	330c      	adds	r3, #12
 80069ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	330c      	adds	r3, #12
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	61ba      	str	r2, [r7, #24]
 8006a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e7      	bne.n	80069e6 <LL_USART_DisableIT_IDLE+0x8>
}
 8006a16:	bf00      	nop
 8006a18:	bf00      	nop
 8006a1a:	3724      	adds	r7, #36	; 0x24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <LL_USART_DisableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3314      	adds	r3, #20
 8006a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3314      	adds	r3, #20
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	61ba      	str	r2, [r7, #24]
 8006a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	613b      	str	r3, [r7, #16]
   return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e7      	bne.n	8006a2c <LL_USART_DisableIT_ERROR+0x8>
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	3724      	adds	r7, #36	; 0x24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_USART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b089      	sub	sp, #36	; 0x24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	61ba      	str	r2, [r7, #24]
 8006adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e7      	bne.n	8006abe <LL_USART_EnableDMAReq_RX+0x8>
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	3724      	adds	r7, #36	; 0x24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <LL_USART_DisableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b089      	sub	sp, #36	; 0x24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3314      	adds	r3, #20
 8006b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	61ba      	str	r2, [r7, #24]
 8006b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6979      	ldr	r1, [r7, #20]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e7      	bne.n	8006b04 <LL_USART_DisableDMAReq_RX+0x8>
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	3724      	adds	r7, #36	; 0x24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b2db      	uxtb	r3, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <LL_DMA_DisableStream>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8006b66:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <LL_DMA_DisableStream+0x3c>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4413      	add	r3, r2
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4908      	ldr	r1, [pc, #32]	; (8006b98 <LL_DMA_DisableStream+0x3c>)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	4611      	mov	r1, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	440a      	add	r2, r1
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	0800f47c 	.word	0x0800f47c

08006b9c <LL_DMA_ClearFlag_TC>:
  (((__STREAM_NB__&0x3) == 0U) ? 3 : \
   ((__STREAM_NB__&0x3) == 1U) ? 9 :\
   ((__STREAM_NB__&0x3) == 2U) ? 19 : 25)

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006b9c:	b490      	push	{r4, r7}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d024      	beq.n	8006bf6 <LL_DMA_ClearFlag_TC+0x5a>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Stream".      */
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d901      	bls.n	8006bbc <LL_DMA_ClearFlag_TC+0x20>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	e000      	b.n	8006bbe <LL_DMA_ClearFlag_TC+0x22>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4413      	add	r3, r2
 8006bc0:	461c      	mov	r4, r3

    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d012      	beq.n	8006bf2 <LL_DMA_ClearFlag_TC+0x56>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d00a      	beq.n	8006bec <LL_DMA_ClearFlag_TC+0x50>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d102      	bne.n	8006be6 <LL_DMA_ClearFlag_TC+0x4a>
 8006be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006be4:	e006      	b.n	8006bf4 <LL_DMA_ClearFlag_TC+0x58>
 8006be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bea:	e003      	b.n	8006bf4 <LL_DMA_ClearFlag_TC+0x58>
 8006bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bf0:	e000      	b.n	8006bf4 <LL_DMA_ClearFlag_TC+0x58>
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc90      	pop	{r4, r7}
 8006bfe:	4770      	bx	lr

08006c00 <LL_DMA_ClearFlag_TE>:

__STATIC_INLINE void LL_DMA_ClearFlag_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006c00:	b490      	push	{r4, r7}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d024      	beq.n	8006c5a <LL_DMA_ClearFlag_TE+0x5a>
    /* Nothing to do */
  }
  else
  {
    /* Clear TE bits with bits position depending on parameter "Stream".      */
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3308      	adds	r3, #8
 8006c14:	461a      	mov	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d901      	bls.n	8006c20 <LL_DMA_ClearFlag_TE+0x20>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	e000      	b.n	8006c22 <LL_DMA_ClearFlag_TE+0x22>
 8006c20:	2300      	movs	r3, #0
 8006c22:	4413      	add	r3, r2
 8006c24:	461c      	mov	r4, r3

    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d012      	beq.n	8006c56 <LL_DMA_ClearFlag_TE+0x56>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d00a      	beq.n	8006c50 <LL_DMA_ClearFlag_TE+0x50>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d102      	bne.n	8006c4a <LL_DMA_ClearFlag_TE+0x4a>
 8006c44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c48:	e006      	b.n	8006c58 <LL_DMA_ClearFlag_TE+0x58>
 8006c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c4e:	e003      	b.n	8006c58 <LL_DMA_ClearFlag_TE+0x58>
 8006c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c54:	e000      	b.n	8006c58 <LL_DMA_ClearFlag_TE+0x58>
 8006c56:	2308      	movs	r3, #8
 8006c58:	6023      	str	r3, [r4, #0]
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc90      	pop	{r4, r7}
 8006c62:	4770      	bx	lr

08006c64 <LL_DMA_IsActiveFlag_TC>:

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream )
{
 8006c64:	b490      	push	{r4, r7}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t retVal;
  if (NULL == DMAx)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <LL_DMA_IsActiveFlag_TC+0x16>
  {
    retVal = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e043      	b.n	8006d02 <LL_DMA_IsActiveFlag_TC+0x9e>
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d901      	bls.n	8006c88 <LL_DMA_IsActiveFlag_TC+0x24>
 8006c84:	2304      	movs	r3, #4
 8006c86:	e000      	b.n	8006c8a <LL_DMA_IsActiveFlag_TC+0x26>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4413      	add	r3, r2
 8006c8c:	461c      	mov	r4, r3
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <LL_DMA_IsActiveFlag_TC+0x5c>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d00a      	beq.n	8006cba <LL_DMA_IsActiveFlag_TC+0x56>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d102      	bne.n	8006cb4 <LL_DMA_IsActiveFlag_TC+0x50>
 8006cae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cb2:	e006      	b.n	8006cc2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006cb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cb8:	e003      	b.n	8006cc2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cbe:	e000      	b.n	8006cc2 <LL_DMA_IsActiveFlag_TC+0x5e>
 8006cc0:	2320      	movs	r3, #32
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d012      	beq.n	8006cf4 <LL_DMA_IsActiveFlag_TC+0x90>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d00a      	beq.n	8006cee <LL_DMA_IsActiveFlag_TC+0x8a>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d102      	bne.n	8006ce8 <LL_DMA_IsActiveFlag_TC+0x84>
 8006ce2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ce6:	e006      	b.n	8006cf6 <LL_DMA_IsActiveFlag_TC+0x92>
 8006ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cec:	e003      	b.n	8006cf6 <LL_DMA_IsActiveFlag_TC+0x92>
 8006cee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cf2:	e000      	b.n	8006cf6 <LL_DMA_IsActiveFlag_TC+0x92>
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <LL_DMA_IsActiveFlag_TC+0x9a>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <LL_DMA_IsActiveFlag_TC+0x9c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  }
  return (retVal);
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc90      	pop	{r4, r7}
 8006d0c:	4770      	bx	lr
	...

08006d10 <ADC_IRQHandler>:
  * @param  None
  * @retval None
  */

void ADC_IRQHandler(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8006d14:	4807      	ldr	r0, [pc, #28]	; (8006d34 <ADC_IRQHandler+0x24>)
 8006d16:	f7ff fd37 	bl	8006788 <LL_ADC_IsActiveFlag_JEOS>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <ADC_IRQHandler+0x20>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <ADC_IRQHandler+0x24>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a03      	ldr	r2, [pc, #12]	; (8006d34 <ADC_IRQHandler+0x24>)
 8006d26:	f023 030c 	bic.w	r3, r3, #12
 8006d2a:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8006d2c:	f7fc fd00 	bl	8003730 <TSK_HighFrequencyTask>
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006d30:	bf00      	nop
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40012000 	.word	0x40012000

08006d38 <TIM1_UP_TIM10_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fd32 	bl	80067ae <LL_TIM_ClearFlag_UPDATE>
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8006d4a:	4802      	ldr	r0, [pc, #8]	; (8006d54 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006d4c:	f006 fe66 	bl	800da1c <R3_1_TIMx_UP_IRQHandler>
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_M1_IRQn 1 */
}
 8006d50:	bf00      	nop
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000178 	.word	0x20000178

08006d58 <TIM1_BRK_TIM9_IRQHandler>:
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  * @retval None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fd3e 	bl	80067e6 <LL_TIM_IsActiveFlag_BRK>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <TIM1_BRK_TIM9_IRQHandler+0x2c>
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fd26 	bl	80067ca <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8006d7e:	4803      	ldr	r0, [pc, #12]	; (8006d8c <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8006d80:	f006 fe7f 	bl	800da82 <R3_1_BRK_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8006d84:	f7fc f89e 	bl	8002ec4 <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000178 	.word	0x20000178

08006d90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA_RX_A channel DMACH_RX_A global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 0 */

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
 8006d94:	2105      	movs	r1, #5
 8006d96:	4807      	ldr	r0, [pc, #28]	; (8006db4 <DMA1_Stream5_IRQHandler+0x24>)
 8006d98:	f7ff ff64 	bl	8006c64 <LL_DMA_IsActiveFlag_TC>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <DMA1_Stream5_IRQHandler+0x20>
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
 8006da2:	2105      	movs	r1, #5
 8006da4:	4803      	ldr	r0, [pc, #12]	; (8006db4 <DMA1_Stream5_IRQHandler+0x24>)
 8006da6:	f7ff fef9 	bl	8006b9c <LL_DMA_ClearFlag_TC>
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8006daa:	4803      	ldr	r0, [pc, #12]	; (8006db8 <DMA1_Stream5_IRQHandler+0x28>)
 8006dac:	f7fa f879 	bl	8000ea2 <ASPEP_HWDataReceivedIT>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8006db0:	bf00      	nop
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40026000 	.word	0x40026000
 8006db8:	200004fc 	.word	0x200004fc

08006dbc <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8006dc0:	482d      	ldr	r0, [pc, #180]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006dc2:	f7ff fd6f 	bl	80068a4 <LL_USART_IsActiveFlag_TC>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d009      	beq.n	8006de0 <USART2_IRQHandler+0x24>
  {
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableStream( DMA_TX_A, DMACH_TX_A );
 8006dcc:	2106      	movs	r1, #6
 8006dce:	482b      	ldr	r0, [pc, #172]	; (8006e7c <USART2_IRQHandler+0xc0>)
 8006dd0:	f7ff fec4 	bl	8006b5c <LL_DMA_DisableStream>
    LL_USART_ClearFlag_TC (USARTA);
 8006dd4:	4828      	ldr	r0, [pc, #160]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006dd6:	f7ff fdae 	bl	8006936 <LL_USART_ClearFlag_TC>
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8006dda:	4829      	ldr	r0, [pc, #164]	; (8006e80 <USART2_IRQHandler+0xc4>)
 8006ddc:	f7f9 fed6 	bl	8000b8c <ASPEP_HWDataTransmittedIT>
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8006de0:	4825      	ldr	r0, [pc, #148]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006de2:	f7ff fd39 	bl	8006858 <LL_USART_IsActiveFlag_ORE>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <USART2_IRQHandler+0x48>
 8006dec:	4822      	ldr	r0, [pc, #136]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006dee:	f7ff fd0d 	bl	800680c <LL_USART_IsActiveFlag_FE>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <USART2_IRQHandler+0x48>
 8006df8:	481f      	ldr	r0, [pc, #124]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006dfa:	f7ff fd1a 	bl	8006832 <LL_USART_IsActiveFlag_NE>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d014      	beq.n	8006e2e <USART2_IRQHandler+0x72>
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8006e04:	481c      	ldr	r0, [pc, #112]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e06:	f7ff fe43 	bl	8006a90 <LL_USART_IsEnabledIT_ERROR>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <USART2_IRQHandler+0x72>
  { /* Stopping the debugger will generate an OverRun error*/
    LL_USART_ClearFlag_FE(USARTA);
 8006e10:	4819      	ldr	r0, [pc, #100]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e12:	f7ff fd5a 	bl	80068ca <LL_USART_ClearFlag_FE>
    LL_USART_ClearFlag_ORE(USARTA);
 8006e16:	4818      	ldr	r0, [pc, #96]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e18:	f7ff fd7b 	bl	8006912 <LL_USART_ClearFlag_ORE>
    LL_USART_ClearFlag_NE(USARTA);
 8006e1c:	4816      	ldr	r0, [pc, #88]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e1e:	f7ff fd66 	bl	80068ee <LL_USART_ClearFlag_NE>
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
 8006e22:	4815      	ldr	r0, [pc, #84]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e24:	f7ff fdfe 	bl	8006a24 <LL_USART_DisableIT_ERROR>
    LL_USART_EnableIT_IDLE (USARTA);
 8006e28:	4813      	ldr	r0, [pc, #76]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e2a:	f7ff fd92 	bl	8006952 <LL_USART_EnableIT_IDLE>
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8006e2e:	4812      	ldr	r0, [pc, #72]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e30:	f7ff fd25 	bl	800687e <LL_USART_IsActiveFlag_IDLE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d01b      	beq.n	8006e72 <USART2_IRQHandler+0xb6>
 8006e3a:	480f      	ldr	r0, [pc, #60]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e3c:	f7ff fe15 	bl	8006a6a <LL_USART_IsEnabledIT_IDLE>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d015      	beq.n	8006e72 <USART2_IRQHandler+0xb6>
  { /* Stopping the debugger will generate an OverRun error*/
    LL_USART_DisableIT_IDLE (USARTA);
 8006e46:	480c      	ldr	r0, [pc, #48]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e48:	f7ff fdc9 	bl	80069de <LL_USART_DisableIT_IDLE>
    /* Once the complete unexpected data are received, we enable back the error IT*/
    LL_USART_EnableIT_ERROR (USARTA);
 8006e4c:	480a      	ldr	r0, [pc, #40]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e4e:	f7ff fda3 	bl	8006998 <LL_USART_EnableIT_ERROR>
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
 8006e52:	4809      	ldr	r0, [pc, #36]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e54:	f7ff fe52 	bl	8006afc <LL_USART_DisableDMAReq_RX>
    LL_USART_ReceiveData8(USARTA);
 8006e58:	4807      	ldr	r0, [pc, #28]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e5a:	f7ff fe72 	bl	8006b42 <LL_USART_ReceiveData8>
    LL_USART_EnableDMAReq_RX (USARTA);
 8006e5e:	4806      	ldr	r0, [pc, #24]	; (8006e78 <USART2_IRQHandler+0xbc>)
 8006e60:	f7ff fe29 	bl	8006ab6 <LL_USART_EnableDMAReq_RX>
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
 8006e64:	2105      	movs	r1, #5
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <USART2_IRQHandler+0xc0>)
 8006e68:	f7ff feca 	bl	8006c00 <LL_DMA_ClearFlag_TE>
    ASPEP_HWDMAReset (&aspepOverUartA);
 8006e6c:	4804      	ldr	r0, [pc, #16]	; (8006e80 <USART2_IRQHandler+0xc4>)
 8006e6e:	f7fa f890 	bl	8000f92 <ASPEP_HWDMAReset>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40004400 	.word	0x40004400
 8006e7c:	40026000 	.word	0x40026000
 8006e80:	200004fc 	.word	0x200004fc

08006e84 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8006e88:	f7fc fe1a 	bl	8003ac0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006e8c:	e7fe      	b.n	8006e8c <HardFault_Handler+0x8>
	...

08006e90 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <SysTick_Handler+0x30>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d106      	bne.n	8006eaa <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 8006e9c:	f000 fbcc 	bl	8007638 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8006ea0:	f000 fcf3 	bl	800788a <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <SysTick_Handler+0x30>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <SysTick_Handler+0x30>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <SysTick_Handler+0x30>)
 8006eb4:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8006eb6:	f7fb ffc7 	bl	8002e48 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200005b8 	.word	0x200005b8

08006ec4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e00a      	b.n	8006eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006ed6:	f3af 8000 	nop.w
 8006eda:	4601      	mov	r1, r0
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	60ba      	str	r2, [r7, #8]
 8006ee2:	b2ca      	uxtb	r2, r1
 8006ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	dbf0      	blt.n	8006ed6 <_read+0x12>
	}

return len;
 8006ef4:	687b      	ldr	r3, [r7, #4]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e009      	b.n	8006f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	60ba      	str	r2, [r7, #8]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	dbf1      	blt.n	8006f10 <_write+0x12>
	}
	return len;
 8006f2c:	687b      	ldr	r3, [r7, #4]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <_close>:

int _close(int file)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <_isatty>:

int _isatty(int file)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
	return 1;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <_sbrk+0x5c>)
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <_sbrk+0x60>)
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <_sbrk+0x64>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fbc:	4b11      	ldr	r3, [pc, #68]	; (8007004 <_sbrk+0x64>)
 8006fbe:	4a12      	ldr	r2, [pc, #72]	; (8007008 <_sbrk+0x68>)
 8006fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fc2:	4b10      	ldr	r3, [pc, #64]	; (8007004 <_sbrk+0x64>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4413      	add	r3, r2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d207      	bcs.n	8006fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fd0:	f007 f870 	bl	800e0b4 <__errno>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fda:	f04f 33ff 	mov.w	r3, #4294967295
 8006fde:	e009      	b.n	8006ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <_sbrk+0x64>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <_sbrk+0x64>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	4a05      	ldr	r2, [pc, #20]	; (8007004 <_sbrk+0x64>)
 8006ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20050000 	.word	0x20050000
 8007000:	00000400 	.word	0x00000400
 8007004:	20001a28 	.word	0x20001a28
 8007008:	20001a80 	.word	0x20001a80

0800700c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <SystemInit+0x20>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	4a05      	ldr	r2, [pc, #20]	; (800702c <SystemInit+0x20>)
 8007018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800701c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007020:	bf00      	nop
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000ed00 	.word	0xe000ed00

08007030 <LL_USART_ClearFlag_IDLE>:
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800703e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8007046:	68fb      	ldr	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_USART_ClearFlag_TC>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <LL_USART_EnableIT_IDLE>:
{
 8007070:	b480      	push	{r7}
 8007072:	b089      	sub	sp, #36	; 0x24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	330c      	adds	r3, #12
 800707c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	60bb      	str	r3, [r7, #8]
   return(result);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f043 0310 	orr.w	r3, r3, #16
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	330c      	adds	r3, #12
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	61ba      	str	r2, [r7, #24]
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6979      	ldr	r1, [r7, #20]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	613b      	str	r3, [r7, #16]
   return(result);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e7      	bne.n	8007078 <LL_USART_EnableIT_IDLE+0x8>
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3724      	adds	r7, #36	; 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <LL_USART_EnableIT_TC>:
{
 80070b6:	b480      	push	{r7}
 80070b8:	b089      	sub	sp, #36	; 0x24
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	330c      	adds	r3, #12
 80070c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	e853 3f00 	ldrex	r3, [r3]
 80070ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	330c      	adds	r3, #12
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	61ba      	str	r2, [r7, #24]
 80070dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6979      	ldr	r1, [r7, #20]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	613b      	str	r3, [r7, #16]
   return(result);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e7      	bne.n	80070be <LL_USART_EnableIT_TC+0x8>
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <LL_USART_EnableIT_ERROR>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b089      	sub	sp, #36	; 0x24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3314      	adds	r3, #20
 8007108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	60bb      	str	r3, [r7, #8]
   return(result);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3314      	adds	r3, #20
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	61ba      	str	r2, [r7, #24]
 8007122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	613b      	str	r3, [r7, #16]
   return(result);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e7      	bne.n	8007104 <LL_USART_EnableIT_ERROR+0x8>
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3724      	adds	r7, #36	; 0x24
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <LL_USART_EnableDMAReq_RX>:
{
 8007142:	b480      	push	{r7}
 8007144:	b089      	sub	sp, #36	; 0x24
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3314      	adds	r3, #20
 800714e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60bb      	str	r3, [r7, #8]
   return(result);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3314      	adds	r3, #20
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	61ba      	str	r2, [r7, #24]
 8007168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6979      	ldr	r1, [r7, #20]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	613b      	str	r3, [r7, #16]
   return(result);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e7      	bne.n	800714a <LL_USART_EnableDMAReq_RX+0x8>
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	3724      	adds	r7, #36	; 0x24
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <LL_USART_EnableDMAReq_TX>:
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	; 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3314      	adds	r3, #20
 8007194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	60bb      	str	r3, [r7, #8]
   return(result);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3314      	adds	r3, #20
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	61ba      	str	r2, [r7, #24]
 80071ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6979      	ldr	r1, [r7, #20]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e7      	bne.n	8007190 <LL_USART_EnableDMAReq_TX+0x8>
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	3724      	adds	r7, #36	; 0x24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <LL_DMA_EnableStream>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80071da:	4a0c      	ldr	r2, [pc, #48]	; (800720c <LL_DMA_EnableStream+0x3c>)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	4413      	add	r3, r2
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4908      	ldr	r1, [pc, #32]	; (800720c <LL_DMA_EnableStream+0x3c>)
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	440a      	add	r2, r1
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	4611      	mov	r1, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	440a      	add	r2, r1
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	6013      	str	r3, [r2, #0]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	0800f49c 	.word	0x0800f49c

08007210 <LL_DMA_IsEnabledStream>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 800721a:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <LL_DMA_IsEnabledStream+0x34>)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4413      	add	r3, r2
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	0800f49c 	.word	0x0800f49c

08007248 <LL_DMA_SetDataLength>:
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <LL_DMA_SetDataLength+0x44>)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4413      	add	r3, r2
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	0c1b      	lsrs	r3, r3, #16
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	4908      	ldr	r1, [pc, #32]	; (800728c <LL_DMA_SetDataLength+0x44>)
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	440a      	add	r2, r1
 800726e:	7812      	ldrb	r2, [r2, #0]
 8007270:	4611      	mov	r1, r2
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	4611      	mov	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4313      	orrs	r3, r2
 800727c:	604b      	str	r3, [r1, #4]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	0800f49c 	.word	0x0800f49c

08007290 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800729c:	4a07      	ldr	r2, [pc, #28]	; (80072bc <LL_DMA_SetMemoryAddress+0x2c>)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	461a      	mov	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60d3      	str	r3, [r2, #12]
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	0800f49c 	.word	0x0800f49c

080072c0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80072cc:	4a07      	ldr	r2, [pc, #28]	; (80072ec <LL_DMA_SetPeriphAddress+0x2c>)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6093      	str	r3, [r2, #8]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	0800f49c 	.word	0x0800f49c

080072f0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80072fa:	4a0c      	ldr	r2, [pc, #48]	; (800732c <LL_DMA_EnableIT_TC+0x3c>)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4908      	ldr	r1, [pc, #32]	; (800732c <LL_DMA_EnableIT_TC+0x3c>)
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	440a      	add	r2, r1
 8007310:	7812      	ldrb	r2, [r2, #0]
 8007312:	4611      	mov	r1, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	440a      	add	r2, r1
 8007318:	f043 0310 	orr.w	r3, r3, #16
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	0800f49c 	.word	0x0800f49c

08007330 <LL_DMA_ClearFlag_TC>:
{
 8007330:	b490      	push	{r4, r7}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  if (NULL == DMAx)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d024      	beq.n	800738a <LL_DMA_ClearFlag_TC+0x5a>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3308      	adds	r3, #8
 8007344:	461a      	mov	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d901      	bls.n	8007350 <LL_DMA_ClearFlag_TC+0x20>
 800734c:	2304      	movs	r3, #4
 800734e:	e000      	b.n	8007352 <LL_DMA_ClearFlag_TC+0x22>
 8007350:	2300      	movs	r3, #0
 8007352:	4413      	add	r3, r2
 8007354:	461c      	mov	r4, r3
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <LL_DMA_ClearFlag_TC+0x56>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d00a      	beq.n	8007380 <LL_DMA_ClearFlag_TC+0x50>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d102      	bne.n	800737a <LL_DMA_ClearFlag_TC+0x4a>
 8007374:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007378:	e006      	b.n	8007388 <LL_DMA_ClearFlag_TC+0x58>
 800737a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800737e:	e003      	b.n	8007388 <LL_DMA_ClearFlag_TC+0x58>
 8007380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007384:	e000      	b.n	8007388 <LL_DMA_ClearFlag_TC+0x58>
 8007386:	2320      	movs	r3, #32
 8007388:	6023      	str	r3, [r4, #0]
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bc90      	pop	{r4, r7}
 8007392:	4770      	bx	lr

08007394 <UASPEP_INIT>:

void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle);
void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle);

void UASPEP_INIT(void *pHWHandle)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  UASPEP_DAMCONFIG_TX(pHandle);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f807 	bl	80073b4 <UASPEP_DAMCONFIG_TX>
  UASPEP_DAMCONFIG_RX(pHandle);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f82a 	bl	8007400 <UASPEP_DAMCONFIG_RX>
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UASPEP_DAMCONFIG_TX>:

void UASPEP_DAMCONFIG_TX(UASPEP_Handle_t *pHandle)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fe47 	bl	8007054 <LL_USART_ClearFlag_TC>
    LL_USART_EnableIT_TC(pHandle->USARTx);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fe73 	bl	80070b6 <LL_USART_EnableIT_TC>

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fed7 	bl	8007188 <LL_USART_EnableDMAReq_TX>

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6898      	ldr	r0, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6919      	ldr	r1, [r3, #16]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3304      	adds	r3, #4
 80073e8:	461a      	mov	r2, r3
 80073ea:	f7ff ff69 	bl	80072c0 <LL_DMA_SetPeriphAddress>
    /* Clear UART ISR */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fe2e 	bl	8007054 <LL_USART_ClearFlag_TC>
    /* DMA end of transfer on UART TX channel completion is not activated*/
    /* we prefer to activate UART TC itself to avoid to trig IT while queued data are still to be transmitted */
#ifdef NULL_PTR_USA_ASP_DRV
  }
#endif
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <UASPEP_DAMCONFIG_RX>:

void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Enable DMA end of transfer on UART RX channel completion */
    LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f7ff ff6c 	bl	80072f0 <LL_DMA_EnableIT_TC>
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fe6d 	bl	80070fc <LL_USART_EnableIT_ERROR>

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6858      	ldr	r0, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68d9      	ldr	r1, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3304      	adds	r3, #4
 8007430:	461a      	mov	r2, r3
 8007432:	f7ff ff45 	bl	80072c0 <LL_DMA_SetPeriphAddress>

    /* Clear UART ISR */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fe0a 	bl	8007054 <LL_USART_ClearFlag_TC>

    LL_USART_EnableDMAReq_RX(pHandle->USARTx);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe7c 	bl	8007142 <LL_USART_EnableDMAReq_RX>
#ifdef NULL_PTR_USA_ASP_DRV
  }
#endif
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <UASPEP_SEND_PACKET>:

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	613b      	str	r3, [r7, #16]
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7ff fece 	bl	8007210 <LL_DMA_IsEnabledStream>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d122      	bne.n	80074c0 <UASPEP_SEND_PACKET+0x6e>
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6898      	ldr	r0, [r3, #8]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4619      	mov	r1, r3
 8007486:	f7ff ff03 	bl	8007290 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6898      	ldr	r0, [r3, #8]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	4619      	mov	r1, r3
 8007496:	f7ff fed7 	bl	8007248 <LL_DMA_SetDataLength>
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7ff ff43 	bl	8007330 <LL_DMA_ClearFlag_TC>
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7ff fe8b 	bl	80071d0 <LL_DMA_EnableStream>
    result = true;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
 80074be:	e001      	b.n	80074c4 <UASPEP_SEND_PACKET+0x72>
  }
  else
  {
    result = false;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]
  }
  return result;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	617b      	str	r3, [r7, #20]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6858      	ldr	r0, [r3, #4]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4619      	mov	r1, r3
 80074ec:	f7ff fed0 	bl	8007290 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6858      	ldr	r0, [r3, #4]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	4619      	mov	r1, r3
 80074fc:	f7ff fea4 	bl	8007248 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7ff fe60 	bl	80071d0 <LL_DMA_EnableStream>
}
 8007510:	bf00      	nop
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fd81 	bl	8007030 <LL_USART_ClearFlag_IDLE>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fd9c 	bl	8007070 <LL_USART_EnableIT_IDLE>
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8007540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007544:	480d      	ldr	r0, [pc, #52]	; (800757c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007546:	490e      	ldr	r1, [pc, #56]	; (8007580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007548:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800754a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800754c:	e002      	b.n	8007554 <LoopCopyDataInit>

0800754e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800754e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007552:	3304      	adds	r3, #4

08007554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007558:	d3f9      	bcc.n	800754e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800755a:	4a0b      	ldr	r2, [pc, #44]	; (8007588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800755c:	4c0b      	ldr	r4, [pc, #44]	; (800758c <LoopFillZerobss+0x26>)
  movs r3, #0
 800755e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007560:	e001      	b.n	8007566 <LoopFillZerobss>

08007562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007564:	3204      	adds	r2, #4

08007566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007568:	d3fb      	bcc.n	8007562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800756a:	f7ff fd4f 	bl	800700c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800756e:	f006 fda7 	bl	800e0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007572:	f7fa fa29 	bl	80019c8 <main>
  bx  lr    
 8007576:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007578:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800757c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007580:	2000062c 	.word	0x2000062c
  ldr r2, =_sidata
 8007584:	0800f55c 	.word	0x0800f55c
  ldr r2, =_sbss
 8007588:	2000062c 	.word	0x2000062c
  ldr r4, =_ebss
 800758c:	20001a7c 	.word	0x20001a7c

08007590 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007590:	e7fe      	b.n	8007590 <BusFault_Handler>
	...

08007594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007598:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <HAL_Init+0x40>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a0d      	ldr	r2, [pc, #52]	; (80075d4 <HAL_Init+0x40>)
 800759e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <HAL_Init+0x40>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a0a      	ldr	r2, [pc, #40]	; (80075d4 <HAL_Init+0x40>)
 80075aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075b0:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <HAL_Init+0x40>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a07      	ldr	r2, [pc, #28]	; (80075d4 <HAL_Init+0x40>)
 80075b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075bc:	2003      	movs	r0, #3
 80075be:	f000 f931 	bl	8007824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80075c2:	200f      	movs	r0, #15
 80075c4:	f000 f808 	bl	80075d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80075c8:	f7fe ff4e 	bl	8006468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023c00 	.word	0x40023c00

080075d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075e0:	4b12      	ldr	r3, [pc, #72]	; (800762c <HAL_InitTick+0x54>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4b12      	ldr	r3, [pc, #72]	; (8007630 <HAL_InitTick+0x58>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	4619      	mov	r1, r3
 80075ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80075f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f93b 	bl	8007872 <HAL_SYSTICK_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e00e      	b.n	8007624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b0f      	cmp	r3, #15
 800760a:	d80a      	bhi.n	8007622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800760c:	2200      	movs	r2, #0
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	f000 f911 	bl	800783a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007618:	4a06      	ldr	r2, [pc, #24]	; (8007634 <HAL_InitTick+0x5c>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	e000      	b.n	8007624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	200005bc 	.word	0x200005bc
 8007630:	200005c4 	.word	0x200005c4
 8007634:	200005c0 	.word	0x200005c0

08007638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <HAL_IncTick+0x20>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <HAL_IncTick+0x24>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4413      	add	r3, r2
 8007648:	4a04      	ldr	r2, [pc, #16]	; (800765c <HAL_IncTick+0x24>)
 800764a:	6013      	str	r3, [r2, #0]
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	200005c4 	.word	0x200005c4
 800765c:	20001a2c 	.word	0x20001a2c

08007660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  return uwTick;
 8007664:	4b03      	ldr	r3, [pc, #12]	; (8007674 <HAL_GetTick+0x14>)
 8007666:	681b      	ldr	r3, [r3, #0]
}
 8007668:	4618      	mov	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20001a2c 	.word	0x20001a2c

08007678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007680:	f7ff ffee 	bl	8007660 <HAL_GetTick>
 8007684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d005      	beq.n	800769e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <HAL_Delay+0x44>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800769e:	bf00      	nop
 80076a0:	f7ff ffde 	bl	8007660 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d8f7      	bhi.n	80076a0 <HAL_Delay+0x28>
  {
  }
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200005c4 	.word	0x200005c4

080076c0 <__NVIC_SetPriorityGrouping>:
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <__NVIC_SetPriorityGrouping+0x44>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076dc:	4013      	ands	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076f2:	4a04      	ldr	r2, [pc, #16]	; (8007704 <__NVIC_SetPriorityGrouping+0x44>)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	60d3      	str	r3, [r2, #12]
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	e000ed00 	.word	0xe000ed00

08007708 <__NVIC_GetPriorityGrouping>:
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800770c:	4b04      	ldr	r3, [pc, #16]	; (8007720 <__NVIC_GetPriorityGrouping+0x18>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	f003 0307 	and.w	r3, r3, #7
}
 8007716:	4618      	mov	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	e000ed00 	.word	0xe000ed00

08007724 <__NVIC_SetPriority>:
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007734:	2b00      	cmp	r3, #0
 8007736:	db0a      	blt.n	800774e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	490c      	ldr	r1, [pc, #48]	; (8007770 <__NVIC_SetPriority+0x4c>)
 800773e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	440b      	add	r3, r1
 8007748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800774c:	e00a      	b.n	8007764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4908      	ldr	r1, [pc, #32]	; (8007774 <__NVIC_SetPriority+0x50>)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	3b04      	subs	r3, #4
 800775c:	0112      	lsls	r2, r2, #4
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	440b      	add	r3, r1
 8007762:	761a      	strb	r2, [r3, #24]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	e000e100 	.word	0xe000e100
 8007774:	e000ed00 	.word	0xe000ed00

08007778 <NVIC_EncodePriority>:
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f1c3 0307 	rsb	r3, r3, #7
 8007792:	2b04      	cmp	r3, #4
 8007794:	bf28      	it	cs
 8007796:	2304      	movcs	r3, #4
 8007798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3304      	adds	r3, #4
 800779e:	2b06      	cmp	r3, #6
 80077a0:	d902      	bls.n	80077a8 <NVIC_EncodePriority+0x30>
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3b03      	subs	r3, #3
 80077a6:	e000      	b.n	80077aa <NVIC_EncodePriority+0x32>
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	43da      	mvns	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	401a      	ands	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077c0:	f04f 31ff 	mov.w	r1, #4294967295
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	43d9      	mvns	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d0:	4313      	orrs	r3, r2
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3724      	adds	r7, #36	; 0x24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077f0:	d301      	bcc.n	80077f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077f2:	2301      	movs	r3, #1
 80077f4:	e00f      	b.n	8007816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077f6:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <SysTick_Config+0x40>)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077fe:	210f      	movs	r1, #15
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	f7ff ff8e 	bl	8007724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <SysTick_Config+0x40>)
 800780a:	2200      	movs	r2, #0
 800780c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800780e:	4b04      	ldr	r3, [pc, #16]	; (8007820 <SysTick_Config+0x40>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	e000e010 	.word	0xe000e010

08007824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff47 	bl	80076c0 <__NVIC_SetPriorityGrouping>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	4603      	mov	r3, r0
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800784c:	f7ff ff5c 	bl	8007708 <__NVIC_GetPriorityGrouping>
 8007850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	6978      	ldr	r0, [r7, #20]
 8007858:	f7ff ff8e 	bl	8007778 <NVIC_EncodePriority>
 800785c:	4602      	mov	r2, r0
 800785e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ff5d 	bl	8007724 <__NVIC_SetPriority>
}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ffb0 	bl	80077e0 <SysTick_Config>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800788e:	f000 f802 	bl	8007896 <HAL_SYSTICK_Callback>
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0cf      	b.n	8007a56 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a69      	ldr	r2, [pc, #420]	; (8007a60 <HAL_DFSDM_ChannelInit+0x1bc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00e      	beq.n	80078de <HAL_DFSDM_ChannelInit+0x3a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a67      	ldr	r2, [pc, #412]	; (8007a64 <HAL_DFSDM_ChannelInit+0x1c0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <HAL_DFSDM_ChannelInit+0x3a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a66      	ldr	r2, [pc, #408]	; (8007a68 <HAL_DFSDM_ChannelInit+0x1c4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <HAL_DFSDM_ChannelInit+0x3a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a64      	ldr	r2, [pc, #400]	; (8007a6c <HAL_DFSDM_ChannelInit+0x1c8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d106      	bne.n	80078ec <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80078de:	4b64      	ldr	r3, [pc, #400]	; (8007a70 <HAL_DFSDM_ChannelInit+0x1cc>)
 80078e0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80078e2:	4b64      	ldr	r3, [pc, #400]	; (8007a74 <HAL_DFSDM_ChannelInit+0x1d0>)
 80078e4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80078e6:	4b5e      	ldr	r3, [pc, #376]	; (8007a60 <HAL_DFSDM_ChannelInit+0x1bc>)
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e005      	b.n	80078f8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80078ec:	4b62      	ldr	r3, [pc, #392]	; (8007a78 <HAL_DFSDM_ChannelInit+0x1d4>)
 80078ee:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80078f0:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <HAL_DFSDM_ChannelInit+0x1d8>)
 80078f2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80078f4:	4b62      	ldr	r3, [pc, #392]	; (8007a80 <HAL_DFSDM_ChannelInit+0x1dc>)
 80078f6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f9f3 	bl	8007ce8 <DFSDM_GetChannelFromInstance>
 8007902:	4603      	mov	r3, r0
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4413      	add	r3, r2
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0a0      	b.n	8007a56 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe fe7b 	bl	8006610 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d125      	bne.n	8007978 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	3b01      	subs	r3, #1
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	431a      	orrs	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007986:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8007996:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800799c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 020f 	bic.w	r2, r2, #15
 80079b4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80079dc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6899      	ldr	r1, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	3b01      	subs	r3, #1
 80079ee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f002 0207 	and.w	r2, r2, #7
 8007a08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6859      	ldr	r1, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a34:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f950 	bl	8007ce8 <DFSDM_GetChannelFromInstance>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40016000 	.word	0x40016000
 8007a64:	40016020 	.word	0x40016020
 8007a68:	40016040 	.word	0x40016040
 8007a6c:	40016060 	.word	0x40016060
 8007a70:	20001a30 	.word	0x20001a30
 8007a74:	20001a34 	.word	0x20001a34
 8007a78:	20001a44 	.word	0x20001a44
 8007a7c:	20001a48 	.word	0x20001a48
 8007a80:	40016400 	.word	0x40016400

08007a84 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0d9      	b.n	8007c4a <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a6e      	ldr	r2, [pc, #440]	; (8007c54 <HAL_DFSDM_FilterInit+0x1d0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d109      	bne.n	8007ab4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d003      	beq.n	8007ab0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0ca      	b.n	8007c4a <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a67      	ldr	r2, [pc, #412]	; (8007c58 <HAL_DFSDM_FilterInit+0x1d4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d109      	bne.n	8007ad2 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d003      	beq.n	8007ace <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0bb      	b.n	8007c4a <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe fce4 	bl	80064b8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8007afe:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7a1b      	ldrb	r3, [r3, #8]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e007      	b.n	8007b2a <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007b28:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7a5b      	ldrb	r3, [r3, #9]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d108      	bne.n	8007b44 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8007b62:	f023 0308 	bic.w	r3, r3, #8
 8007b66:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d108      	bne.n	8007b82 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6819      	ldr	r1, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695a      	ldr	r2, [r3, #20]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7c1b      	ldrb	r3, [r3, #16]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d108      	bne.n	8007b9c <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0210 	orr.w	r2, r2, #16
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	e007      	b.n	8007bac <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0210 	bic.w	r2, r2, #16
 8007baa:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7c5b      	ldrb	r3, [r3, #17]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d108      	bne.n	8007bc6 <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0220 	orr.w	r2, r2, #32
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e007      	b.n	8007bd6 <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0220 	bic.w	r2, r2, #32
 8007bd4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8007be4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8007be8:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6959      	ldr	r1, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007bfc:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007c04:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7c1a      	ldrb	r2, [r3, #16]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40016100 	.word	0x40016100
 8007c58:	40016500 	.word	0x40016500

08007c5c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02e      	beq.n	8007cd4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8007c7c:	2bff      	cmp	r3, #255	; 0xff
 8007c7e:	d029      	beq.n	8007cd4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c92:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10d      	bne.n	8007cb6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e00a      	b.n	8007ccc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8007cd2:	e001      	b.n	8007cd8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a24      	ldr	r2, [pc, #144]	; (8007d84 <DFSDM_GetChannelFromInstance+0x9c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <DFSDM_GetChannelFromInstance+0x18>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a23      	ldr	r2, [pc, #140]	; (8007d88 <DFSDM_GetChannelFromInstance+0xa0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d102      	bne.n	8007d06 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e037      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a20      	ldr	r2, [pc, #128]	; (8007d8c <DFSDM_GetChannelFromInstance+0xa4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d003      	beq.n	8007d16 <DFSDM_GetChannelFromInstance+0x2e>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <DFSDM_GetChannelFromInstance+0xa8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d102      	bne.n	8007d1c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8007d16:	2301      	movs	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e02c      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <DFSDM_GetChannelFromInstance+0xac>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <DFSDM_GetChannelFromInstance+0x44>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	; (8007d98 <DFSDM_GetChannelFromInstance+0xb0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d102      	bne.n	8007d32 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e021      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a19      	ldr	r2, [pc, #100]	; (8007d9c <DFSDM_GetChannelFromInstance+0xb4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <DFSDM_GetChannelFromInstance+0x5a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a18      	ldr	r2, [pc, #96]	; (8007da0 <DFSDM_GetChannelFromInstance+0xb8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d102      	bne.n	8007d48 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8007d42:	2303      	movs	r3, #3
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e016      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <DFSDM_GetChannelFromInstance+0xbc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d102      	bne.n	8007d56 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8007d50:	2304      	movs	r3, #4
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e00f      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <DFSDM_GetChannelFromInstance+0xc0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d102      	bne.n	8007d64 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8007d5e:	2305      	movs	r3, #5
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e008      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a11      	ldr	r2, [pc, #68]	; (8007dac <DFSDM_GetChannelFromInstance+0xc4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d102      	bne.n	8007d72 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8007d6c:	2306      	movs	r3, #6
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e001      	b.n	8007d76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8007d72:	2307      	movs	r3, #7
 8007d74:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	40016000 	.word	0x40016000
 8007d88:	40016400 	.word	0x40016400
 8007d8c:	40016020 	.word	0x40016020
 8007d90:	40016420 	.word	0x40016420
 8007d94:	40016040 	.word	0x40016040
 8007d98:	40016440 	.word	0x40016440
 8007d9c:	40016060 	.word	0x40016060
 8007da0:	40016460 	.word	0x40016460
 8007da4:	40016480 	.word	0x40016480
 8007da8:	400164a0 	.word	0x400164a0
 8007dac:	400164c0 	.word	0x400164c0

08007db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b089      	sub	sp, #36	; 0x24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
 8007dca:	e165      	b.n	8008098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007dcc:	2201      	movs	r2, #1
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	f040 8154 	bne.w	8008092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d005      	beq.n	8007e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d130      	bne.n	8007e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	43db      	mvns	r3, r3
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	4013      	ands	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e38:	2201      	movs	r2, #1
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	43db      	mvns	r3, r3
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	4013      	ands	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	091b      	lsrs	r3, r3, #4
 8007e4e:	f003 0201 	and.w	r2, r3, #1
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d017      	beq.n	8007ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	43db      	mvns	r3, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4013      	ands	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d123      	bne.n	8007ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	08da      	lsrs	r2, r3, #3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3208      	adds	r2, #8
 8007eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	220f      	movs	r2, #15
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	08da      	lsrs	r2, r3, #3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3208      	adds	r2, #8
 8007eee:	69b9      	ldr	r1, [r7, #24]
 8007ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	2203      	movs	r2, #3
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 0203 	and.w	r2, r3, #3
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80ae 	beq.w	8008092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	4b5d      	ldr	r3, [pc, #372]	; (80080b0 <HAL_GPIO_Init+0x300>)
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3e:	4a5c      	ldr	r2, [pc, #368]	; (80080b0 <HAL_GPIO_Init+0x300>)
 8007f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f44:	6453      	str	r3, [r2, #68]	; 0x44
 8007f46:	4b5a      	ldr	r3, [pc, #360]	; (80080b0 <HAL_GPIO_Init+0x300>)
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f52:	4a58      	ldr	r2, [pc, #352]	; (80080b4 <HAL_GPIO_Init+0x304>)
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	3302      	adds	r3, #2
 8007f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	220f      	movs	r2, #15
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a4f      	ldr	r2, [pc, #316]	; (80080b8 <HAL_GPIO_Init+0x308>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d025      	beq.n	8007fca <HAL_GPIO_Init+0x21a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a4e      	ldr	r2, [pc, #312]	; (80080bc <HAL_GPIO_Init+0x30c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01f      	beq.n	8007fc6 <HAL_GPIO_Init+0x216>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a4d      	ldr	r2, [pc, #308]	; (80080c0 <HAL_GPIO_Init+0x310>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d019      	beq.n	8007fc2 <HAL_GPIO_Init+0x212>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a4c      	ldr	r2, [pc, #304]	; (80080c4 <HAL_GPIO_Init+0x314>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <HAL_GPIO_Init+0x20e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a4b      	ldr	r2, [pc, #300]	; (80080c8 <HAL_GPIO_Init+0x318>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00d      	beq.n	8007fba <HAL_GPIO_Init+0x20a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a4a      	ldr	r2, [pc, #296]	; (80080cc <HAL_GPIO_Init+0x31c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <HAL_GPIO_Init+0x206>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a49      	ldr	r2, [pc, #292]	; (80080d0 <HAL_GPIO_Init+0x320>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <HAL_GPIO_Init+0x202>
 8007fae:	2306      	movs	r3, #6
 8007fb0:	e00c      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fb2:	2307      	movs	r3, #7
 8007fb4:	e00a      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fb6:	2305      	movs	r3, #5
 8007fb8:	e008      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fba:	2304      	movs	r3, #4
 8007fbc:	e006      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e004      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e002      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <HAL_GPIO_Init+0x21c>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	f002 0203 	and.w	r2, r2, #3
 8007fd2:	0092      	lsls	r2, r2, #2
 8007fd4:	4093      	lsls	r3, r2
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fdc:	4935      	ldr	r1, [pc, #212]	; (80080b4 <HAL_GPIO_Init+0x304>)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	089b      	lsrs	r3, r3, #2
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fea:	4b3a      	ldr	r3, [pc, #232]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800800e:	4a31      	ldr	r2, [pc, #196]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008014:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	43db      	mvns	r3, r3
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4013      	ands	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008038:	4a26      	ldr	r2, [pc, #152]	; (80080d4 <HAL_GPIO_Init+0x324>)
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800803e:	4b25      	ldr	r3, [pc, #148]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	43db      	mvns	r3, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	4013      	ands	r3, r2
 800804c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008062:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <HAL_GPIO_Init+0x324>)
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <HAL_GPIO_Init+0x324>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	43db      	mvns	r3, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4013      	ands	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800808c:	4a11      	ldr	r2, [pc, #68]	; (80080d4 <HAL_GPIO_Init+0x324>)
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	3301      	adds	r3, #1
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	2b0f      	cmp	r3, #15
 800809c:	f67f ae96 	bls.w	8007dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40013800 	.word	0x40013800
 80080b8:	40020000 	.word	0x40020000
 80080bc:	40020400 	.word	0x40020400
 80080c0:	40020800 	.word	0x40020800
 80080c4:	40020c00 	.word	0x40020c00
 80080c8:	40021000 	.word	0x40021000
 80080cc:	40021400 	.word	0x40021400
 80080d0:	40021800 	.word	0x40021800
 80080d4:	40013c00 	.word	0x40013c00

080080d8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4013      	ands	r3, r2
 80080f0:	041a      	lsls	r2, r3, #16
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	43d9      	mvns	r1, r3
 80080f6:	887b      	ldrh	r3, [r7, #2]
 80080f8:	400b      	ands	r3, r1
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	619a      	str	r2, [r3, #24]
}
 8008100:	bf00      	nop
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008110:	4b03      	ldr	r3, [pc, #12]	; (8008120 <HAL_RCC_GetHCLKFreq+0x14>)
 8008112:	681b      	ldr	r3, [r3, #0]
}
 8008114:	4618      	mov	r0, r3
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	200005bc 	.word	0x200005bc

08008124 <LL_ADC_SetCommonClock>:
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	605a      	str	r2, [r3, #4]
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <LL_ADC_REG_SetSequencerLength>:
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <LL_ADC_IsEnabled>:
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80081a6:	480a      	ldr	r0, [pc, #40]	; (80081d0 <LL_ADC_CommonInit+0x38>)
 80081a8:	f7ff ffe2 	bl	8008170 <LL_ADC_IsEnabled>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ffb3 	bl	8008124 <LL_ADC_SetCommonClock>
 80081be:	e001      	b.n	80081c4 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40012000 	.word	0x40012000

080081d4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ffc4 	bl	8008170 <LL_ADC_IsEnabled>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d117      	bne.n	800821e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80081f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	6811      	ldr	r1, [r2, #0]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	6892      	ldr	r2, [r2, #8]
 8008202:	430a      	orrs	r2, r1
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	e001      	b.n	8008222 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff ff98 	bl	8008170 <LL_ADC_IsEnabled>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d12b      	bne.n	800829e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	e005      	b.n	800826e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <LL_ADC_REG_Init+0x80>)
 8008274:	4013      	ands	r3, r2
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	68d2      	ldr	r2, [r2, #12]
 8008282:	4311      	orrs	r1, r2
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	6912      	ldr	r2, [r2, #16]
 8008288:	430a      	orrs	r2, r1
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ff57 	bl	800814a <LL_ADC_REG_SetSequencerLength>
 800829c:	e001      	b.n	80082a2 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	c0fffcfd 	.word	0xc0fffcfd

080082b0 <LL_GPIO_SetPinMode>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	b089      	sub	sp, #36	; 0x24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	fa93 f3a3 	rbit	r3, r3
 80082ca:	613b      	str	r3, [r7, #16]
  return result;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	fab3 f383 	clz	r3, r3
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	2103      	movs	r1, #3
 80082d8:	fa01 f303 	lsl.w	r3, r1, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	401a      	ands	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	fa93 f3a3 	rbit	r3, r3
 80082ea:	61bb      	str	r3, [r7, #24]
  return result;
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	fab3 f383 	clz	r3, r3
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	fa01 f303 	lsl.w	r3, r1, r3
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	601a      	str	r2, [r3, #0]
}
 8008302:	bf00      	nop
 8008304:	3724      	adds	r7, #36	; 0x24
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <LL_GPIO_SetPinOutputType>:
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	43db      	mvns	r3, r3
 8008322:	401a      	ands	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	431a      	orrs	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
}
 8008332:	bf00      	nop
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <LL_GPIO_SetPinSpeed>:
{
 800833e:	b480      	push	{r7}
 8008340:	b089      	sub	sp, #36	; 0x24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	fa93 f3a3 	rbit	r3, r3
 8008358:	613b      	str	r3, [r7, #16]
  return result;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	fab3 f383 	clz	r3, r3
 8008360:	b2db      	uxtb	r3, r3
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	2103      	movs	r1, #3
 8008366:	fa01 f303 	lsl.w	r3, r1, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	401a      	ands	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	fa93 f3a3 	rbit	r3, r3
 8008378:	61bb      	str	r3, [r7, #24]
  return result;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	fab3 f383 	clz	r3, r3
 8008380:	b2db      	uxtb	r3, r3
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	431a      	orrs	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	609a      	str	r2, [r3, #8]
}
 8008390:	bf00      	nop
 8008392:	3724      	adds	r7, #36	; 0x24
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <LL_GPIO_SetPinPull>:
{
 800839c:	b480      	push	{r7}
 800839e:	b089      	sub	sp, #36	; 0x24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	fa93 f3a3 	rbit	r3, r3
 80083b6:	613b      	str	r3, [r7, #16]
  return result;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	fab3 f383 	clz	r3, r3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	2103      	movs	r1, #3
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	43db      	mvns	r3, r3
 80083ca:	401a      	ands	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	fa93 f3a3 	rbit	r3, r3
 80083d6:	61bb      	str	r3, [r7, #24]
  return result;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	fab3 f383 	clz	r3, r3
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	fa01 f303 	lsl.w	r3, r1, r3
 80083e8:	431a      	orrs	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	60da      	str	r2, [r3, #12]
}
 80083ee:	bf00      	nop
 80083f0:	3724      	adds	r7, #36	; 0x24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <LL_GPIO_SetAFPin_0_7>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	b089      	sub	sp, #36	; 0x24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1a      	ldr	r2, [r3, #32]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	fa93 f3a3 	rbit	r3, r3
 8008414:	613b      	str	r3, [r7, #16]
  return result;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	fab3 f383 	clz	r3, r3
 800841c:	b2db      	uxtb	r3, r3
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	210f      	movs	r1, #15
 8008422:	fa01 f303 	lsl.w	r3, r1, r3
 8008426:	43db      	mvns	r3, r3
 8008428:	401a      	ands	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	fa93 f3a3 	rbit	r3, r3
 8008434:	61bb      	str	r3, [r7, #24]
  return result;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	fab3 f383 	clz	r3, r3
 800843c:	b2db      	uxtb	r3, r3
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	fa01 f303 	lsl.w	r3, r1, r3
 8008446:	431a      	orrs	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	3724      	adds	r7, #36	; 0x24
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <LL_GPIO_SetAFPin_8_15>:
{
 8008458:	b480      	push	{r7}
 800845a:	b089      	sub	sp, #36	; 0x24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	0a1b      	lsrs	r3, r3, #8
 800846c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	fa93 f3a3 	rbit	r3, r3
 8008474:	613b      	str	r3, [r7, #16]
  return result;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	fab3 f383 	clz	r3, r3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	210f      	movs	r1, #15
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	401a      	ands	r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	fa93 f3a3 	rbit	r3, r3
 8008496:	61bb      	str	r3, [r7, #24]
  return result;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	fab3 f383 	clz	r3, r3
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	fa01 f303 	lsl.w	r3, r1, r3
 80084a8:	431a      	orrs	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80084ae:	bf00      	nop
 80084b0:	3724      	adds	r7, #36	; 0x24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b088      	sub	sp, #32
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	fa93 f3a3 	rbit	r3, r3
 80084d8:	613b      	str	r3, [r7, #16]
  return result;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	fab3 f383 	clz	r3, r3
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80084e4:	e050      	b.n	8008588 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	2101      	movs	r1, #1
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
 80084f2:	4013      	ands	r3, r2
 80084f4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d042      	beq.n	8008582 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d003      	beq.n	800850c <LL_GPIO_Init+0x52>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d10d      	bne.n	8008528 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	461a      	mov	r2, r3
 8008512:	69b9      	ldr	r1, [r7, #24]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ff12 	bl	800833e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	461a      	mov	r2, r3
 8008520:	69b9      	ldr	r1, [r7, #24]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fef3 	bl	800830e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	461a      	mov	r2, r3
 800852e:	69b9      	ldr	r1, [r7, #24]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ff33 	bl	800839c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d11a      	bne.n	8008574 <LL_GPIO_Init+0xba>
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	fa93 f3a3 	rbit	r3, r3
 8008548:	60bb      	str	r3, [r7, #8]
  return result;
 800854a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800854c:	fab3 f383 	clz	r3, r3
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b07      	cmp	r3, #7
 8008554:	d807      	bhi.n	8008566 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	461a      	mov	r2, r3
 800855c:	69b9      	ldr	r1, [r7, #24]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff ff4b 	bl	80083fa <LL_GPIO_SetAFPin_0_7>
 8008564:	e006      	b.n	8008574 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	461a      	mov	r2, r3
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff ff72 	bl	8008458 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	461a      	mov	r2, r3
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fe97 	bl	80082b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	3301      	adds	r3, #1
 8008586:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1a7      	bne.n	80084e6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <LL_RCC_GetSysClkSource>:
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <LL_RCC_GetSysClkSource+0x18>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 030c 	and.w	r3, r3, #12
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40023800 	.word	0x40023800

080085bc <LL_RCC_GetAHBPrescaler>:
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <LL_RCC_GetAHBPrescaler+0x18>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40023800 	.word	0x40023800

080085d8 <LL_RCC_GetAPB1Prescaler>:
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800

080085f4 <LL_RCC_GetAPB2Prescaler>:
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <LL_RCC_GetAPB2Prescaler+0x18>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008600:	4618      	mov	r0, r3
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40023800 	.word	0x40023800

08008610 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <LL_RCC_PLL_GetMainSource+0x18>)
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800861c:	4618      	mov	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40023800 	.word	0x40023800

0800862c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <LL_RCC_PLL_GetN+0x18>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	099b      	lsrs	r3, r3, #6
 8008636:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40023800 	.word	0x40023800

08008648 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <LL_RCC_PLL_GetP+0x18>)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008654:	4618      	mov	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40023800 	.word	0x40023800

08008664 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <LL_RCC_PLL_GetDivider+0x18>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8008670:	4618      	mov	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40023800 	.word	0x40023800

08008680 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8008688:	f000 f820 	bl	80086cc <RCC_GetSystemClockFreq>
 800868c:	4602      	mov	r2, r0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f840 	bl	800871c <RCC_GetHCLKClockFreq>
 800869c:	4602      	mov	r2, r0
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f84e 	bl	8008748 <RCC_GetPCLK1ClockFreq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f85a 	bl	8008770 <RCC_GetPCLK2ClockFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80086d6:	f7ff ff63 	bl	80085a0 <LL_RCC_GetSysClkSource>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d00c      	beq.n	80086fa <RCC_GetSystemClockFreq+0x2e>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d80f      	bhi.n	8008704 <RCC_GetSystemClockFreq+0x38>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <RCC_GetSystemClockFreq+0x22>
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d003      	beq.n	80086f4 <RCC_GetSystemClockFreq+0x28>
 80086ec:	e00a      	b.n	8008704 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <RCC_GetSystemClockFreq+0x48>)
 80086f0:	607b      	str	r3, [r7, #4]
      break;
 80086f2:	e00a      	b.n	800870a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80086f4:	4b08      	ldr	r3, [pc, #32]	; (8008718 <RCC_GetSystemClockFreq+0x4c>)
 80086f6:	607b      	str	r3, [r7, #4]
      break;
 80086f8:	e007      	b.n	800870a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80086fa:	2008      	movs	r0, #8
 80086fc:	f000 f84c 	bl	8008798 <RCC_PLL_GetFreqDomain_SYS>
 8008700:	6078      	str	r0, [r7, #4]
      break;
 8008702:	e002      	b.n	800870a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8008704:	4b03      	ldr	r3, [pc, #12]	; (8008714 <RCC_GetSystemClockFreq+0x48>)
 8008706:	607b      	str	r3, [r7, #4]
      break;
 8008708:	bf00      	nop
  }

  return frequency;
 800870a:	687b      	ldr	r3, [r7, #4]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	00f42400 	.word	0x00f42400
 8008718:	017d7840 	.word	0x017d7840

0800871c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008724:	f7ff ff4a 	bl	80085bc <LL_RCC_GetAHBPrescaler>
 8008728:	4603      	mov	r3, r0
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	4a04      	ldr	r2, [pc, #16]	; (8008744 <RCC_GetHCLKClockFreq+0x28>)
 8008732:	5cd3      	ldrb	r3, [r2, r3]
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	40d3      	lsrs	r3, r2
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	0800f484 	.word	0x0800f484

08008748 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008750:	f7ff ff42 	bl	80085d8 <LL_RCC_GetAPB1Prescaler>
 8008754:	4603      	mov	r3, r0
 8008756:	0a9b      	lsrs	r3, r3, #10
 8008758:	4a04      	ldr	r2, [pc, #16]	; (800876c <RCC_GetPCLK1ClockFreq+0x24>)
 800875a:	5cd3      	ldrb	r3, [r2, r3]
 800875c:	461a      	mov	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	40d3      	lsrs	r3, r2
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	0800f494 	.word	0x0800f494

08008770 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008778:	f7ff ff3c 	bl	80085f4 <LL_RCC_GetAPB2Prescaler>
 800877c:	4603      	mov	r3, r0
 800877e:	0b5b      	lsrs	r3, r3, #13
 8008780:	4a04      	ldr	r2, [pc, #16]	; (8008794 <RCC_GetPCLK2ClockFreq+0x24>)
 8008782:	5cd3      	ldrb	r3, [r2, r3]
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	40d3      	lsrs	r3, r2
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	0800f494 	.word	0x0800f494

08008798 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	2300      	movs	r3, #0
 80087aa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80087ac:	f7ff ff30 	bl	8008610 <LL_RCC_PLL_GetMainSource>
 80087b0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087be:	d003      	beq.n	80087c8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80087c0:	e005      	b.n	80087ce <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80087c4:	617b      	str	r3, [r7, #20]
      break;
 80087c6:	e005      	b.n	80087d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80087c8:	4b11      	ldr	r3, [pc, #68]	; (8008810 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80087ca:	617b      	str	r3, [r7, #20]
      break;
 80087cc:	e002      	b.n	80087d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80087d0:	617b      	str	r3, [r7, #20]
      break;
 80087d2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d113      	bne.n	8008802 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80087da:	f7ff ff43 	bl	8008664 <LL_RCC_PLL_GetDivider>
 80087de:	4602      	mov	r2, r0
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	fbb3 f4f2 	udiv	r4, r3, r2
 80087e6:	f7ff ff21 	bl	800862c <LL_RCC_PLL_GetN>
 80087ea:	4603      	mov	r3, r0
 80087ec:	fb03 f404 	mul.w	r4, r3, r4
 80087f0:	f7ff ff2a 	bl	8008648 <LL_RCC_PLL_GetP>
 80087f4:	4603      	mov	r3, r0
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	3301      	adds	r3, #1
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8008800:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8008802:	693b      	ldr	r3, [r7, #16]
}
 8008804:	4618      	mov	r0, r3
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd90      	pop	{r4, r7, pc}
 800880c:	00f42400 	.word	0x00f42400
 8008810:	017d7840 	.word	0x017d7840

08008814 <LL_TIM_SetPrescaler>:
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <LL_TIM_SetAutoReload>:
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <LL_TIM_SetRepetitionCounter>:
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <LL_TIM_OC_SetCompareCH1>:
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <LL_TIM_OC_SetCompareCH2>:
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <LL_TIM_OC_SetCompareCH3>:
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <LL_TIM_OC_SetCompareCH4>:
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	f043 0201 	orr.w	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	615a      	str	r2, [r3, #20]
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a3d      	ldr	r2, [pc, #244]	; (8008a00 <LL_TIM_Init+0x108>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d013      	beq.n	8008938 <LL_TIM_Init+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008916:	d00f      	beq.n	8008938 <LL_TIM_Init+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a3a      	ldr	r2, [pc, #232]	; (8008a04 <LL_TIM_Init+0x10c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00b      	beq.n	8008938 <LL_TIM_Init+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a39      	ldr	r2, [pc, #228]	; (8008a08 <LL_TIM_Init+0x110>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d007      	beq.n	8008938 <LL_TIM_Init+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a38      	ldr	r2, [pc, #224]	; (8008a0c <LL_TIM_Init+0x114>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <LL_TIM_Init+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a37      	ldr	r2, [pc, #220]	; (8008a10 <LL_TIM_Init+0x118>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d106      	bne.n	8008946 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2d      	ldr	r2, [pc, #180]	; (8008a00 <LL_TIM_Init+0x108>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d02b      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d027      	beq.n	80089a6 <LL_TIM_Init+0xae>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2a      	ldr	r2, [pc, #168]	; (8008a04 <LL_TIM_Init+0x10c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d023      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <LL_TIM_Init+0x110>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01f      	beq.n	80089a6 <LL_TIM_Init+0xae>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a28      	ldr	r2, [pc, #160]	; (8008a0c <LL_TIM_Init+0x114>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01b      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <LL_TIM_Init+0x118>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d017      	beq.n	80089a6 <LL_TIM_Init+0xae>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <LL_TIM_Init+0x11c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <LL_TIM_Init+0x120>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <LL_TIM_Init+0xae>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a24      	ldr	r2, [pc, #144]	; (8008a1c <LL_TIM_Init+0x124>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a23      	ldr	r2, [pc, #140]	; (8008a20 <LL_TIM_Init+0x128>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <LL_TIM_Init+0xae>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a22      	ldr	r2, [pc, #136]	; (8008a24 <LL_TIM_Init+0x12c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <LL_TIM_Init+0xae>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <LL_TIM_Init+0x130>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d106      	bne.n	80089b4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ff35 	bl	8008830 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff ff21 	bl	8008814 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <LL_TIM_Init+0x108>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d003      	beq.n	80089e2 <LL_TIM_Init+0xea>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a0c      	ldr	r2, [pc, #48]	; (8008a10 <LL_TIM_Init+0x118>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d105      	bne.n	80089ee <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff2f 	bl	800884c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ff72 	bl	80088d8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	40010000 	.word	0x40010000
 8008a04:	40000400 	.word	0x40000400
 8008a08:	40000800 	.word	0x40000800
 8008a0c:	40000c00 	.word	0x40000c00
 8008a10:	40010400 	.word	0x40010400
 8008a14:	40014000 	.word	0x40014000
 8008a18:	40014400 	.word	0x40014400
 8008a1c:	40014800 	.word	0x40014800
 8008a20:	40001800 	.word	0x40001800
 8008a24:	40001c00 	.word	0x40001c00
 8008a28:	40002000 	.word	0x40002000

08008a2c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a42:	d027      	beq.n	8008a94 <LL_TIM_OC_Init+0x68>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4a:	d82a      	bhi.n	8008aa2 <LL_TIM_OC_Init+0x76>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a52:	d018      	beq.n	8008a86 <LL_TIM_OC_Init+0x5a>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5a:	d822      	bhi.n	8008aa2 <LL_TIM_OC_Init+0x76>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d003      	beq.n	8008a6a <LL_TIM_OC_Init+0x3e>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d007      	beq.n	8008a78 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8008a68:	e01b      	b.n	8008aa2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f867 	bl	8008b40 <OC1Config>
 8008a72:	4603      	mov	r3, r0
 8008a74:	75fb      	strb	r3, [r7, #23]
      break;
 8008a76:	e015      	b.n	8008aa4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f8cc 	bl	8008c18 <OC2Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	75fb      	strb	r3, [r7, #23]
      break;
 8008a84:	e00e      	b.n	8008aa4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f935 	bl	8008cf8 <OC3Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75fb      	strb	r3, [r7, #23]
      break;
 8008a92:	e007      	b.n	8008aa4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f99e 	bl	8008dd8 <OC4Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	e000      	b.n	8008aa4 <LL_TIM_OC_Init+0x78>
      break;
 8008aa2:	bf00      	nop
  }

  return result;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	7b12      	ldrb	r2, [r2, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	89d2      	ldrh	r2, [r2, #14]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f023 0201 	bic.w	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f023 0202 	bic.w	r2, r3, #2
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f023 0201 	bic.w	r2, r3, #1
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <OC1Config+0xd0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <OC1Config+0x6a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1b      	ldr	r2, [pc, #108]	; (8008c14 <OC1Config+0xd4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d11e      	bne.n	8008be8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f023 0208 	bic.w	r2, r3, #8
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 0204 	bic.w	r2, r3, #4
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fe34 	bl	8008868 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40010400 	.word	0x40010400

08008c18 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f023 0210 	bic.w	r2, r3, #16
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f023 0220 	bic.w	r2, r3, #32
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f023 0210 	bic.w	r2, r3, #16
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	4313      	orrs	r3, r2
 8008c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a1d      	ldr	r2, [pc, #116]	; (8008cf0 <OC2Config+0xd8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <OC2Config+0x70>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <OC2Config+0xdc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d11f      	bne.n	8008cc8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	019b      	lsls	r3, r3, #6
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	019b      	lsls	r3, r3, #6
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fdd2 	bl	8008884 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40010000 	.word	0x40010000
 8008cf4:	40010400 	.word	0x40010400

08008cf8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <OC3Config+0xd8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <OC3Config+0x6e>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <OC3Config+0xdc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d11f      	bne.n	8008da6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	029b      	lsls	r3, r3, #10
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	029b      	lsls	r3, r3, #10
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	015b      	lsls	r3, r3, #5
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff fd71 	bl	80088a0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	031b      	lsls	r3, r3, #12
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	031b      	lsls	r3, r3, #12
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <OC4Config+0xa8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <OC4Config+0x70>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <OC4Config+0xac>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d107      	bne.n	8008e58 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	019b      	lsls	r3, r3, #6
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fd26 	bl	80088bc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40010400 	.word	0x40010400

08008e88 <LL_USART_IsEnabled>:
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e9c:	bf0c      	ite	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	2300      	movne	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <LL_USART_SetStopBitsLength>:
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	611a      	str	r2, [r3, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <LL_USART_SetHWFlowCtrl>:
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	615a      	str	r2, [r3, #20]
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <LL_USART_SetBaudRate>:
{
 8008efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f00:	b0c0      	sub	sp, #256	; 0x100
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f08:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8008f0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008f10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f1c:	f040 810c 	bne.w	8009138 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008f20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	1891      	adds	r1, r2, r2
 8008f38:	6639      	str	r1, [r7, #96]	; 0x60
 8008f3a:	415b      	adcs	r3, r3
 8008f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008f42:	4621      	mov	r1, r4
 8008f44:	eb12 0801 	adds.w	r8, r2, r1
 8008f48:	4629      	mov	r1, r5
 8008f4a:	eb43 0901 	adc.w	r9, r3, r1
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f62:	4690      	mov	r8, r2
 8008f64:	4699      	mov	r9, r3
 8008f66:	4623      	mov	r3, r4
 8008f68:	eb18 0303 	adds.w	r3, r8, r3
 8008f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f70:	462b      	mov	r3, r5
 8008f72:	eb49 0303 	adc.w	r3, r9, r3
 8008f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f7e:	2200      	movs	r2, #0
 8008f80:	469a      	mov	sl, r3
 8008f82:	4693      	mov	fp, r2
 8008f84:	eb1a 030a 	adds.w	r3, sl, sl
 8008f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f8a:	eb4b 030b 	adc.w	r3, fp, fp
 8008f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f98:	f7f7 f992 	bl	80002c0 <__aeabi_uldivmod>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4b64      	ldr	r3, [pc, #400]	; (8009134 <LL_USART_SetBaudRate+0x238>)
 8008fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	b29c      	uxth	r4, r3
 8008fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fb8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fbc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	6539      	str	r1, [r7, #80]	; 0x50
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	657b      	str	r3, [r7, #84]	; 0x54
 8008fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009004:	464b      	mov	r3, r9
 8009006:	460a      	mov	r2, r1
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009010:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009014:	2200      	movs	r2, #0
 8009016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800901a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800901e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009022:	460b      	mov	r3, r1
 8009024:	18db      	adds	r3, r3, r3
 8009026:	643b      	str	r3, [r7, #64]	; 0x40
 8009028:	4613      	mov	r3, r2
 800902a:	eb42 0303 	adc.w	r3, r2, r3
 800902e:	647b      	str	r3, [r7, #68]	; 0x44
 8009030:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009034:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009038:	f7f7 f942 	bl	80002c0 <__aeabi_uldivmod>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4611      	mov	r1, r2
 8009042:	4b3c      	ldr	r3, [pc, #240]	; (8009134 <LL_USART_SetBaudRate+0x238>)
 8009044:	fba3 2301 	umull	r2, r3, r3, r1
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	2264      	movs	r2, #100	; 0x64
 800904c:	fb02 f303 	mul.w	r3, r2, r3
 8009050:	1acb      	subs	r3, r1, r3
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009058:	4b36      	ldr	r3, [pc, #216]	; (8009134 <LL_USART_SetBaudRate+0x238>)
 800905a:	fba3 2302 	umull	r2, r3, r3, r2
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	b29b      	uxth	r3, r3
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800906a:	b29b      	uxth	r3, r3
 800906c:	4423      	add	r3, r4
 800906e:	b29c      	uxth	r4, r3
 8009070:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009074:	2200      	movs	r2, #0
 8009076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800907a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800907e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8009082:	4642      	mov	r2, r8
 8009084:	464b      	mov	r3, r9
 8009086:	1891      	adds	r1, r2, r2
 8009088:	63b9      	str	r1, [r7, #56]	; 0x38
 800908a:	415b      	adcs	r3, r3
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009092:	4641      	mov	r1, r8
 8009094:	1851      	adds	r1, r2, r1
 8009096:	6339      	str	r1, [r7, #48]	; 0x30
 8009098:	4649      	mov	r1, r9
 800909a:	414b      	adcs	r3, r1
 800909c:	637b      	str	r3, [r7, #52]	; 0x34
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090aa:	4659      	mov	r1, fp
 80090ac:	00cb      	lsls	r3, r1, #3
 80090ae:	4651      	mov	r1, sl
 80090b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090b4:	4651      	mov	r1, sl
 80090b6:	00ca      	lsls	r2, r1, #3
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	4603      	mov	r3, r0
 80090be:	4642      	mov	r2, r8
 80090c0:	189b      	adds	r3, r3, r2
 80090c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090c6:	464b      	mov	r3, r9
 80090c8:	460a      	mov	r2, r1
 80090ca:	eb42 0303 	adc.w	r3, r2, r3
 80090ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090dc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80090e0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80090e4:	460b      	mov	r3, r1
 80090e6:	18db      	adds	r3, r3, r3
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ea:	4613      	mov	r3, r2
 80090ec:	eb42 0303 	adc.w	r3, r2, r3
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80090fa:	f7f7 f8e1 	bl	80002c0 <__aeabi_uldivmod>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <LL_USART_SetBaudRate+0x238>)
 8009104:	fba3 1302 	umull	r1, r3, r3, r2
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	2164      	movs	r1, #100	; 0x64
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	3332      	adds	r3, #50	; 0x32
 8009116:	4a07      	ldr	r2, [pc, #28]	; (8009134 <LL_USART_SetBaudRate+0x238>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	b29b      	uxth	r3, r3
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	b29b      	uxth	r3, r3
 8009126:	4423      	add	r3, r4
 8009128:	b29b      	uxth	r3, r3
 800912a:	461a      	mov	r2, r3
 800912c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009130:	609a      	str	r2, [r3, #8]
}
 8009132:	e107      	b.n	8009344 <LL_USART_SetBaudRate+0x448>
 8009134:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800913c:	2200      	movs	r2, #0
 800913e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009142:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009146:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	1891      	adds	r1, r2, r2
 8009150:	6239      	str	r1, [r7, #32]
 8009152:	415b      	adcs	r3, r3
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
 8009156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800915a:	4641      	mov	r1, r8
 800915c:	1854      	adds	r4, r2, r1
 800915e:	4649      	mov	r1, r9
 8009160:	eb43 0501 	adc.w	r5, r3, r1
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	00eb      	lsls	r3, r5, #3
 800916e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009172:	00e2      	lsls	r2, r4, #3
 8009174:	4614      	mov	r4, r2
 8009176:	461d      	mov	r5, r3
 8009178:	4643      	mov	r3, r8
 800917a:	18e3      	adds	r3, r4, r3
 800917c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009180:	464b      	mov	r3, r9
 8009182:	eb45 0303 	adc.w	r3, r5, r3
 8009186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800918a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800918e:	2200      	movs	r2, #0
 8009190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009194:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80091a4:	4629      	mov	r1, r5
 80091a6:	008b      	lsls	r3, r1, #2
 80091a8:	4621      	mov	r1, r4
 80091aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ae:	4621      	mov	r1, r4
 80091b0:	008a      	lsls	r2, r1, #2
 80091b2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80091b6:	f7f7 f883 	bl	80002c0 <__aeabi_uldivmod>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4b64      	ldr	r3, [pc, #400]	; (8009350 <LL_USART_SetBaudRate+0x454>)
 80091c0:	fba3 2302 	umull	r2, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	b29c      	uxth	r4, r3
 80091cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091da:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	1891      	adds	r1, r2, r2
 80091e4:	61b9      	str	r1, [r7, #24]
 80091e6:	415b      	adcs	r3, r3
 80091e8:	61fb      	str	r3, [r7, #28]
 80091ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091ee:	4641      	mov	r1, r8
 80091f0:	1851      	adds	r1, r2, r1
 80091f2:	6139      	str	r1, [r7, #16]
 80091f4:	4649      	mov	r1, r9
 80091f6:	414b      	adcs	r3, r1
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	f04f 0300 	mov.w	r3, #0
 8009202:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009206:	4659      	mov	r1, fp
 8009208:	00cb      	lsls	r3, r1, #3
 800920a:	4651      	mov	r1, sl
 800920c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009210:	4651      	mov	r1, sl
 8009212:	00ca      	lsls	r2, r1, #3
 8009214:	4610      	mov	r0, r2
 8009216:	4619      	mov	r1, r3
 8009218:	4603      	mov	r3, r0
 800921a:	4642      	mov	r2, r8
 800921c:	189b      	adds	r3, r3, r2
 800921e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009222:	464b      	mov	r3, r9
 8009224:	460a      	mov	r2, r1
 8009226:	eb42 0303 	adc.w	r3, r2, r3
 800922a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800922e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009238:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009248:	4649      	mov	r1, r9
 800924a:	008b      	lsls	r3, r1, #2
 800924c:	4641      	mov	r1, r8
 800924e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009252:	4641      	mov	r1, r8
 8009254:	008a      	lsls	r2, r1, #2
 8009256:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800925a:	f7f7 f831 	bl	80002c0 <__aeabi_uldivmod>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4b3b      	ldr	r3, [pc, #236]	; (8009350 <LL_USART_SetBaudRate+0x454>)
 8009264:	fba3 1302 	umull	r1, r3, r3, r2
 8009268:	095b      	lsrs	r3, r3, #5
 800926a:	2164      	movs	r1, #100	; 0x64
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	3332      	adds	r3, #50	; 0x32
 8009276:	4a36      	ldr	r2, [pc, #216]	; (8009350 <LL_USART_SetBaudRate+0x454>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	b29b      	uxth	r3, r3
 8009280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009284:	b29b      	uxth	r3, r3
 8009286:	4423      	add	r3, r4
 8009288:	b29c      	uxth	r4, r3
 800928a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800928e:	2200      	movs	r2, #0
 8009290:	67bb      	str	r3, [r7, #120]	; 0x78
 8009292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	1891      	adds	r1, r2, r2
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	415b      	adcs	r3, r3
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092a8:	4641      	mov	r1, r8
 80092aa:	1851      	adds	r1, r2, r1
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	4649      	mov	r1, r9
 80092b0:	414b      	adcs	r3, r1
 80092b2:	607b      	str	r3, [r7, #4]
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092c0:	4659      	mov	r1, fp
 80092c2:	00cb      	lsls	r3, r1, #3
 80092c4:	4651      	mov	r1, sl
 80092c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ca:	4651      	mov	r1, sl
 80092cc:	00ca      	lsls	r2, r1, #3
 80092ce:	4610      	mov	r0, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	4642      	mov	r2, r8
 80092d6:	189b      	adds	r3, r3, r2
 80092d8:	673b      	str	r3, [r7, #112]	; 0x70
 80092da:	464b      	mov	r3, r9
 80092dc:	460a      	mov	r2, r1
 80092de:	eb42 0303 	adc.w	r3, r2, r3
 80092e2:	677b      	str	r3, [r7, #116]	; 0x74
 80092e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092e8:	2200      	movs	r2, #0
 80092ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80092fa:	4649      	mov	r1, r9
 80092fc:	008b      	lsls	r3, r1, #2
 80092fe:	4641      	mov	r1, r8
 8009300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009304:	4641      	mov	r1, r8
 8009306:	008a      	lsls	r2, r1, #2
 8009308:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800930c:	f7f6 ffd8 	bl	80002c0 <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <LL_USART_SetBaudRate+0x454>)
 8009316:	fba3 1302 	umull	r1, r3, r3, r2
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	2164      	movs	r1, #100	; 0x64
 800931e:	fb01 f303 	mul.w	r3, r1, r3
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	3332      	adds	r3, #50	; 0x32
 8009328:	4a09      	ldr	r2, [pc, #36]	; (8009350 <LL_USART_SetBaudRate+0x454>)
 800932a:	fba2 2303 	umull	r2, r3, r2, r3
 800932e:	095b      	lsrs	r3, r3, #5
 8009330:	b29b      	uxth	r3, r3
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	b29b      	uxth	r3, r3
 8009338:	4423      	add	r3, r4
 800933a:	b29b      	uxth	r3, r3
 800933c:	461a      	mov	r2, r3
 800933e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800934a:	46bd      	mov	sp, r7
 800934c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009350:	51eb851f 	.word	0x51eb851f

08009354 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009362:	2300      	movs	r3, #0
 8009364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fd8e 	bl	8008e88 <LL_USART_IsEnabled>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d17a      	bne.n	8009468 <LL_USART_Init+0x114>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800937a:	f023 030c 	bic.w	r3, r3, #12
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	6851      	ldr	r1, [r2, #4]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	68d2      	ldr	r2, [r2, #12]
 8009386:	4311      	orrs	r1, r2
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	6912      	ldr	r2, [r2, #16]
 800938c:	4311      	orrs	r1, r2
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	6992      	ldr	r2, [r2, #24]
 8009392:	430a      	orrs	r2, r1
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff fd85 	bl	8008eb0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff fd92 	bl	8008ed6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff f962 	bl	8008680 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2d      	ldr	r2, [pc, #180]	; (8009474 <LL_USART_Init+0x120>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d102      	bne.n	80093ca <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	e03d      	b.n	8009446 <LL_USART_Init+0xf2>
    }
    else if (USARTx == USART2)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a2a      	ldr	r2, [pc, #168]	; (8009478 <LL_USART_Init+0x124>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d102      	bne.n	80093d8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	e036      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a28      	ldr	r2, [pc, #160]	; (800947c <LL_USART_Init+0x128>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d102      	bne.n	80093e6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	e02f      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a25      	ldr	r2, [pc, #148]	; (8009480 <LL_USART_Init+0x12c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d102      	bne.n	80093f4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	e028      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a23      	ldr	r2, [pc, #140]	; (8009484 <LL_USART_Init+0x130>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d102      	bne.n	8009402 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	61bb      	str	r3, [r7, #24]
 8009400:	e021      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a20      	ldr	r2, [pc, #128]	; (8009488 <LL_USART_Init+0x134>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d102      	bne.n	8009410 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	61bb      	str	r3, [r7, #24]
 800940e:	e01a      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a1e      	ldr	r2, [pc, #120]	; (800948c <LL_USART_Init+0x138>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d102      	bne.n	800941e <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	61bb      	str	r3, [r7, #24]
 800941c:	e013      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a1b      	ldr	r2, [pc, #108]	; (8009490 <LL_USART_Init+0x13c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d102      	bne.n	800942c <LL_USART_Init+0xd8>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e00c      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a19      	ldr	r2, [pc, #100]	; (8009494 <LL_USART_Init+0x140>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d102      	bne.n	800943a <LL_USART_Init+0xe6>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	61bb      	str	r3, [r7, #24]
 8009438:	e005      	b.n	8009446 <LL_USART_Init+0xf2>
    }
#endif /* UART9 */
#if defined(UART10)
    else if (USARTx == UART10)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a16      	ldr	r2, [pc, #88]	; (8009498 <LL_USART_Init+0x144>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d101      	bne.n	8009446 <LL_USART_Init+0xf2>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00d      	beq.n	8009468 <LL_USART_Init+0x114>
        && (USART_InitStruct->BaudRate != 0U))
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d009      	beq.n	8009468 <LL_USART_Init+0x114>
    {
      status = SUCCESS;
 8009454:	2300      	movs	r3, #0
 8009456:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	699a      	ldr	r2, [r3, #24]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69b9      	ldr	r1, [r7, #24]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fd4a 	bl	8008efc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009468:	7ffb      	ldrb	r3, [r7, #31]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40011000 	.word	0x40011000
 8009478:	40004400 	.word	0x40004400
 800947c:	40004800 	.word	0x40004800
 8009480:	40011400 	.word	0x40011400
 8009484:	40004c00 	.word	0x40004c00
 8009488:	40005000 	.word	0x40005000
 800948c:	40007800 	.word	0x40007800
 8009490:	40007c00 	.word	0x40007c00
 8009494:	40011800 	.word	0x40011800
 8009498:	40011c00 	.word	0x40011c00

0800949c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80094a4:	4a04      	ldr	r2, [pc, #16]	; (80094b8 <LL_SetSystemCoreClock+0x1c>)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6013      	str	r3, [r2, #0]
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	200005bc 	.word	0x200005bc

080094bc <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in u16Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_d(const BusVoltageSensor_Handle_t *pHandle)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	88db      	ldrh	r3, [r3, #6]
#endif
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	88db      	ldrh	r3, [r3, #6]
 80094e0:	60fb      	str	r3, [r7, #12]
    temp *= pHandle->ConversionFactor;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	885b      	ldrh	r3, [r3, #2]
 80094e6:	461a      	mov	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	60fb      	str	r3, [r7, #12]
    temp /= 65536U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	60fb      	str	r3, [r7, #12]
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	b29b      	uxth	r3, r3
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <VBS_CheckVbus>:
  *         bus voltage and protection threshold values
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t VBS_CheckVbus(const BusVoltageSensor_Handle_t *pHandle)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  {
    temp_faultState = pHandle->FaultState;
  }
  return (temp_faultState);
#else
  return (pHandle->FaultState);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	891b      	ldrh	r3, [r3, #8]
#endif
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b08e      	sub	sp, #56	; 0x38
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  qd_t Local_Vqd = Vqd;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	60fb      	str	r3, [r7, #12]
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8009532:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009536:	f9b7 2000 	ldrsh.w	r2, [r7]
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8009540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009544:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009548:	fb02 f303 	mul.w	r3, r2, r3
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
    square_limit = maxModule * maxModule;
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	fb03 f303 	mul.w	r3, r3, r3
 8009554:	623b      	str	r3, [r7, #32]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	885b      	ldrh	r3, [r3, #2]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	61fb      	str	r3, [r7, #28]
    square_sum = square_q + square_d;
 8009566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	4413      	add	r3, r2
 800956c:	61bb      	str	r3, [r7, #24]

    if (square_sum > square_limit)
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	429a      	cmp	r2, r3
 8009574:	dd35      	ble.n	80095e2 <Circle_Limitation+0xc4>
    {
      if (square_d <= vd_square_limit)
 8009576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	429a      	cmp	r2, r3
 800957c:	dc12      	bgt.n	80095a4 <Circle_Limitation+0x86>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - square_d;
 800957e:	6a3a      	ldr	r2, [r7, #32]
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	617b      	str	r3, [r7, #20]
        new_q = MCM_Sqrt(square_temp);
 8009586:	6978      	ldr	r0, [r7, #20]
 8009588:	f7f9 fb3e 	bl	8002c08 <MCM_Sqrt>
 800958c:	6378      	str	r0, [r7, #52]	; 0x34
#endif
        if (Vqd.q < 0)
 800958e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	da02      	bge.n	800959c <Circle_Limitation+0x7e>
        {
          new_q = -new_q;
 8009596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009598:	425b      	negs	r3, r3
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        new_d = Vqd.d;
 800959c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095a0:	633b      	str	r3, [r7, #48]	; 0x30
 80095a2:	e018      	b.n	80095d6 <Circle_Limitation+0xb8>
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	633b      	str	r3, [r7, #48]	; 0x30
        if (Vqd.d < 0)
 80095aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	da02      	bge.n	80095b8 <Circle_Limitation+0x9a>
        {
          new_d = -new_d;
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	425b      	negs	r3, r3
 80095b6:	633b      	str	r3, [r7, #48]	; 0x30
        }
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
 80095b8:	6a3a      	ldr	r2, [r7, #32]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	617b      	str	r3, [r7, #20]
        new_q = MCM_Sqrt(square_temp);
 80095c0:	6978      	ldr	r0, [r7, #20]
 80095c2:	f7f9 fb21 	bl	8002c08 <MCM_Sqrt>
 80095c6:	6378      	str	r0, [r7, #52]	; 0x34
#endif
        if (Vqd.q < 0)
 80095c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da02      	bge.n	80095d6 <Circle_Limitation+0xb8>
        {
          new_q = - new_q;
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	425b      	negs	r3, r3
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 80095d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d8:	b21b      	sxth	r3, r3
 80095da:	81bb      	strh	r3, [r7, #12]
      Local_Vqd.d = (int16_t)new_d;
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	b21b      	sxth	r3, r3
 80095e0:	81fb      	strh	r3, [r7, #14]
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	2300      	movs	r3, #0
 80095e8:	8a3a      	ldrh	r2, [r7, #16]
 80095ea:	f362 030f 	bfi	r3, r2, #0, #16
 80095ee:	8a7a      	ldrh	r2, [r7, #18]
 80095f0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3738      	adds	r7, #56	; 0x38
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <LL_GPIO_SetOutputPin>:
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	619a      	str	r2, [r3, #24]
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <LL_GPIO_ResetOutputPin>:
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	041a      	lsls	r2, r3, #16
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	619a      	str	r2, [r3, #24]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <DOUT_SetOutputState>:
  * @param pHandle handler address of the digital output component.
  * @param State New requested state
  *
  */
__weak void DOUT_SetOutputState(DOUT_handle_t *pHandle, DOutputState_t State)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	70fb      	strb	r3, [r7, #3]
    /* Nothing to do */
  }
  else
  {
#endif
    if (ACTIVE == State)
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d115      	bne.n	8009674 <DOUT_SetOutputState+0x3e>
    {
      if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7a9b      	ldrb	r3, [r3, #10]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d108      	bne.n	8009662 <DOUT_SetOutputState+0x2c>
      {
        LL_GPIO_SetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	891b      	ldrh	r3, [r3, #8]
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f7ff ffce 	bl	80095fc <LL_GPIO_SetOutputPin>
 8009660:	e01d      	b.n	800969e <DOUT_SetOutputState+0x68>
      }
      else
      {
        LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	891b      	ldrh	r3, [r3, #8]
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7ff ffd3 	bl	8009618 <LL_GPIO_ResetOutputPin>
 8009672:	e014      	b.n	800969e <DOUT_SetOutputState+0x68>
      }
    }
    else if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7a9b      	ldrb	r3, [r3, #10]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d108      	bne.n	800968e <DOUT_SetOutputState+0x58>
    {
      LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	891b      	ldrh	r3, [r3, #8]
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f7ff ffc6 	bl	8009618 <LL_GPIO_ResetOutputPin>
 800968c:	e007      	b.n	800969e <DOUT_SetOutputState+0x68>
    }
    else
    {
      LL_GPIO_SetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	891b      	ldrh	r3, [r3, #8]
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f7ff ffaf 	bl	80095fc <LL_GPIO_SetOutputPin>
    }
    pHandle->OutputState = State;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_DIG_OUT
  }
#endif
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <FF_Init>:
  * @param  pPIDId Id PID structure.
  * @param  pPIDIq Iq PID structure.
  */
__weak void FF_Init(FF_Handle_t *pHandle, BusVoltageSensor_Handle_t *pBusSensor, PID_Handle_t *pPIDId,
                    PID_Handle_t *pPIDIq)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	60da      	str	r2, [r3, #12]
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	611a      	str	r2, [r3, #16]
    pHandle->wConstant_2  = pHandle->wDefConstant_2;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	615a      	str	r2, [r3, #20]

    pHandle->pBus_Sensor = pBusSensor;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	619a      	str	r2, [r3, #24]

    pHandle->pPID_d = pPIDId;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	621a      	str	r2, [r3, #32]

    pHandle->pPID_q = pPIDIq;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	61da      	str	r2, [r3, #28]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <FF_Clear>:
  * @brief  It should be called before each motor start and clears the Feed-forward
  *         internal variables.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_Clear(FF_Handle_t *pHandle)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Vqdff.q = (int16_t)0;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	801a      	strh	r2, [r3, #0]
    pHandle->Vqdff.d = (int16_t)0;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	805a      	strh	r2, [r3, #2]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <FF_VqdffComputation>:
  * @param  Iqdref Iqd reference components used to calculate the Feed-forward
  *         action.
  * @param  pSTC Pointer on speed and torque controller structure.
  */
__weak void FF_VqdffComputation(FF_Handle_t *pHandle, qd_t Iqdref, SpeednTorqCtrl_Handle_t *pSTC)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
    int32_t wtemp1, wtemp2;
    int16_t hSpeed_dpp;
    uint16_t hAvBusVoltage_d;
    SpeednPosFdbk_Handle_t *SpeedSensor;

    SpeedSensor = STC_GetSpeedSensor(pSTC);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 fe1f 	bl	800b360 <STC_GetSpeedSensor>
 8009722:	61b8      	str	r0, [r7, #24]
    hSpeed_dpp = SPD_GetElSpeedDpp(SpeedSensor);
 8009724:	69b8      	ldr	r0, [r7, #24]
 8009726:	f001 ff62 	bl	800b5ee <SPD_GetElSpeedDpp>
 800972a:	4603      	mov	r3, r0
 800972c:	82fb      	strh	r3, [r7, #22]
    hAvBusVoltage_d = VBS_GetAvBusVoltage_d(pHandle->pBus_Sensor) / 2U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fec2 	bl	80094bc <VBS_GetAvBusVoltage_d>
 8009738:	4603      	mov	r3, r0
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	82bb      	strh	r3, [r7, #20]

    if (hAvBusVoltage_d != (uint16_t)0)
 800973e:	8abb      	ldrh	r3, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d070      	beq.n	8009826 <FF_VqdffComputation+0x116>
    {
      /*q-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 8009744:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009748:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800974c:	fb02 f303 	mul.w	r3, r2, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	da02      	bge.n	800975a <FF_VqdffComputation+0x4a>
 8009754:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009758:	337f      	adds	r3, #127	; 0x7f
 800975a:	13db      	asrs	r3, r3, #15
 800975c:	613b      	str	r3, [r7, #16]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	fb03 f202 	mul.w	r2, r3, r2
 8009768:	8abb      	ldrh	r3, [r7, #20]
 800976a:	fb92 f3f3 	sdiv	r3, r2, r3
 800976e:	61fb      	str	r3, [r7, #28]
      wtemp2 *= (int32_t)2;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	61fb      	str	r3, [r7, #28]

      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800977e:	fb03 f202 	mul.w	r2, r3, r2
 8009782:	8abb      	ldrh	r3, [r7, #20]
 8009784:	fb92 f3f3 	sdiv	r3, r2, r3
 8009788:	011b      	lsls	r3, r3, #4
 800978a:	613b      	str	r3, [r7, #16]

      wtemp2 = wtemp1 + wtemp2 + pHandle->VqdAvPIout.q;
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8009798:	4413      	add	r3, r2
 800979a:	61fb      	str	r3, [r7, #28]

      SATURATION_TO_S16(wtemp2)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097a2:	db03      	blt.n	80097ac <FF_VqdffComputation+0x9c>
 80097a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80097a8:	61fb      	str	r3, [r7, #28]
 80097aa:	e005      	b.n	80097b8 <FF_VqdffComputation+0xa8>
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80097b2:	dc01      	bgt.n	80097b8 <FF_VqdffComputation+0xa8>
 80097b4:	4b21      	ldr	r3, [pc, #132]	; (800983c <FF_VqdffComputation+0x12c>)
 80097b6:	61fb      	str	r3, [r7, #28]

      pHandle->Vqdff.q = (int16_t)(wtemp2);
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	b21a      	sxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	801a      	strh	r2, [r3, #0]

      /* d-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80097c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80097c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da02      	bge.n	80097d6 <FF_VqdffComputation+0xc6>
 80097d0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80097d4:	337f      	adds	r3, #127	; 0x7f
 80097d6:	13db      	asrs	r3, r3, #15
 80097d8:	613b      	str	r3, [r7, #16]
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	fb03 f202 	mul.w	r2, r3, r2
 80097e4:	8abb      	ldrh	r3, [r7, #20]
 80097e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80097ea:	61fb      	str	r3, [r7, #28]
      wtemp2 *= (int32_t)2;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	61fb      	str	r3, [r7, #28]

      wtemp2 = (int32_t)pHandle->VqdAvPIout.d - wtemp2;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80097f8:	461a      	mov	r2, r3
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	61fb      	str	r3, [r7, #28]

      SATURATION_TO_S16(wtemp2)
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009806:	db03      	blt.n	8009810 <FF_VqdffComputation+0x100>
 8009808:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	e005      	b.n	800981c <FF_VqdffComputation+0x10c>
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8009816:	dc01      	bgt.n	800981c <FF_VqdffComputation+0x10c>
 8009818:	4b08      	ldr	r3, [pc, #32]	; (800983c <FF_VqdffComputation+0x12c>)
 800981a:	61fb      	str	r3, [r7, #28]

      pHandle->Vqdff.d = (int16_t)(wtemp2);
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	b21a      	sxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	805a      	strh	r2, [r3, #2]
      pHandle->Vqdff.d = (int16_t)0;
    }
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009824:	e005      	b.n	8009832 <FF_VqdffComputation+0x122>
      pHandle->Vqdff.q = (int16_t)0;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	801a      	strh	r2, [r3, #0]
      pHandle->Vqdff.d = (int16_t)0;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	805a      	strh	r2, [r3, #2]
}
 8009832:	bf00      	nop
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	ffff8001 	.word	0xffff8001

08009840 <FF_VqdConditioning>:
  * @param  pHandle Feed-forward structure.
  * @param  Vqd Initial value of Vqd to be manipulated by Feed-forward action .
  * @retval qd_t Vqd conditioned values.
  */
__weak qd_t FF_VqdConditioning(FF_Handle_t *pHandle, qd_t Vqd)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  else
  {
#endif
    int32_t wtemp;

    pHandle->VqdPIout = Vqd;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	605a      	str	r2, [r3, #4]

    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 8009850:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009854:	461a      	mov	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800985c:	4413      	add	r3, r2
 800985e:	617b      	str	r3, [r7, #20]

    SATURATION_TO_S16(wtemp)
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009866:	db03      	blt.n	8009870 <FF_VqdConditioning+0x30>
 8009868:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e005      	b.n	800987c <FF_VqdConditioning+0x3c>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8009876:	dc01      	bgt.n	800987c <FF_VqdConditioning+0x3c>
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <FF_VqdConditioning+0x94>)
 800987a:	617b      	str	r3, [r7, #20]

    lVqd.q = (int16_t)wtemp;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	b21b      	sxth	r3, r3
 8009880:	81bb      	strh	r3, [r7, #12]

    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 8009882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009886:	461a      	mov	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800988e:	4413      	add	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

    SATURATION_TO_S16(wtemp)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009898:	db03      	blt.n	80098a2 <FF_VqdConditioning+0x62>
 800989a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	e005      	b.n	80098ae <FF_VqdConditioning+0x6e>
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80098a8:	dc01      	bgt.n	80098ae <FF_VqdConditioning+0x6e>
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <FF_VqdConditioning+0x94>)
 80098ac:	617b      	str	r3, [r7, #20]

    lVqd.d = (int16_t)wtemp;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
  return (lVqd);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	613b      	str	r3, [r7, #16]
 80098b8:	2300      	movs	r3, #0
 80098ba:	8a3a      	ldrh	r2, [r7, #16]
 80098bc:	f362 030f 	bfi	r3, r2, #0, #16
 80098c0:	8a7a      	ldrh	r2, [r7, #18]
 80098c2:	f362 431f 	bfi	r3, r2, #16, #16
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	ffff8001 	.word	0xffff8001

080098d8 <FF_DataProcess>:
  * @brief  It low-pass filters the Vqd voltage coming from the speed PI. Filter
  *         bandwidth depends on hVqdLowPassFilterBW parameter.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_DataProcess(FF_Handle_t *pHandle)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    int32_t wAux;
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098e4:	3b01      	subs	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]

#ifndef FULL_MISRA_C_COMPLIANCY_FWD_FDB
    /* Computation of average Vqd as output by PI(D) current controllers, used by
       Feed-forward controller algorithm */
    wAux = (int32_t)(pHandle->VqdAvPIout.q) * lowPassFilterBW;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80098ee:	461a      	mov	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
 80098f6:	60bb      	str	r3, [r7, #8]
    wAux += pHandle->VqdPIout.q;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80098fe:	461a      	mov	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4413      	add	r3, r2
 8009904:	60bb      	str	r3, [r7, #8]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800990a:	461a      	mov	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4113      	asrs	r3, r2
 8009910:	b21a      	sxth	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	811a      	strh	r2, [r3, #8]

    wAux = (int32_t)(pHandle->VqdAvPIout.d) * lowPassFilterBW;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800991c:	461a      	mov	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	60bb      	str	r3, [r7, #8]
    wAux += pHandle->VqdPIout.d;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800992c:	461a      	mov	r2, r3
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4413      	add	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.d = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009938:	461a      	mov	r2, r3
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4113      	asrs	r3, r2
 800993e:	b21a      	sxth	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	815a      	strh	r2, [r3, #10]
    pHandle->VqdAvPIout.d = (int16_t)(wAux / (int32_t)(pHandle->hVqdLowPassFilterBW));
#endif
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <FF_InitFOCAdditionalMethods>:
/**
  * @brief  Use this method to initialize FF variables in START_TO_RUN state.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_InitFOCAdditionalMethods(FF_Handle_t *pHandle)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->VqdAvPIout.q = 0;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	811a      	strh	r2, [r3, #8]
    pHandle->VqdAvPIout.d = 0;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	815a      	strh	r2, [r3, #10]
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	2100      	movs	r1, #0
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fe1d 	bl	800a5aa <PID_SetIntegralTerm>
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	2100      	movs	r1, #0
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fe17 	bl	800a5aa <PID_SetIntegralTerm>
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <FF_GetVqdff>:
  *         components.
  * @param  pHandle Feed-forward structure.
  * @retval qd_t Vqd Feed-forward components.
  */
__weak qd_t FF_GetVqdff(const FF_Handle_t *pHandle)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  {
    retqt = pHandle->Vqdff;
  }
  return (retqt);
#else
  return (pHandle->Vqdff);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	2300      	movs	r3, #0
 8009994:	89ba      	ldrh	r2, [r7, #12]
 8009996:	f362 030f 	bfi	r3, r2, #0, #16
 800999a:	89fa      	ldrh	r2, [r7, #14]
 800999c:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <FF_GetVqdAvPIout>:
  *         currents PI regulators.
  * @param  pHandle Feed-forward structure.
  * @retval qd_t Averaged output of qd axes currents PI regulators.
  */
__weak qd_t FF_GetVqdAvPIout(const FF_Handle_t *pHandle)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  {
    retqt = pHandle->VqdAvPIout;
  }
  return (retqt);
#else
  return (pHandle->VqdAvPIout);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	2300      	movs	r3, #0
 80099bc:	89ba      	ldrh	r2, [r7, #12]
 80099be:	f362 030f 	bfi	r3, r2, #0, #16
 80099c2:	89fa      	ldrh	r2, [r7, #14]
 80099c4:	f362 431f 	bfi	r3, r2, #16, #16
#endif
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <ICL_Init>:
  * @param  pHandle: handler of the current instance of the ICL component
  * @param  pVBS the bus voltage sensor used by the ICL.
  * @param  pDOUT the digital output used by the ICL.
  */
__weak void ICL_Init(ICL_Handle_t *pHandle, BusVoltageSensor_Handle_t *pVBS, DOUT_handle_t *pDOUT)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  pHandle->pVBS = pVBS;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	601a      	str	r2, [r3, #0]
  pHandle->pDOUT = pDOUT;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]
  DOUT_SetOutputState(pDOUT, ACTIVE);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff fe21 	bl	8009636 <DOUT_SetOutputState>
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <ICL_Exec>:
  *         called during background task.
  * @param  pHandle handler of the current instance of the ICL component
  * @retval ICLState_t returns the current ICL state machine
  */
__weak ICL_State_t ICL_Exec(ICL_Handle_t *pHandle)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* ICL actions.*/
  switch (pHandle->ICLstate)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7a1b      	ldrb	r3, [r3, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d866      	bhi.n	8009adc <ICL_Exec+0xe0>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <ICL_Exec+0x18>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a25 	.word	0x08009a25
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	08009a4b 	.word	0x08009a4b
 8009a20:	08009ab1 	.word	0x08009ab1
  {
    case ICL_ACTIVATION:
    {
      /* ICL activation: counting the step before pass in ICL_ACTIVE */
      if (pHandle->hICLTicksCounter == 0u)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	895b      	ldrh	r3, [r3, #10]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d107      	bne.n	8009a3c <ICL_Exec+0x40>
      {
        pHandle->ICLstate = ICL_ACTIVE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	721a      	strb	r2, [r3, #8]
        pHandle->hICLTicksCounter = pHandle->hICLChargingDelayTicks;        
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	89da      	ldrh	r2, [r3, #14]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	815a      	strh	r2, [r3, #10]
      else
      {
        pHandle->hICLTicksCounter--;
      }
    }
    break;
 8009a3a:	e054      	b.n	8009ae6 <ICL_Exec+0xea>
        pHandle->hICLTicksCounter--;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	895b      	ldrh	r3, [r3, #10]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	815a      	strh	r2, [r3, #10]
    break;
 8009a48:	e04d      	b.n	8009ae6 <ICL_Exec+0xea>

    case ICL_DEACTIVATION:
    {
      /* ICL deactivation: counting the step before pass in ICL_INACTIVE.*/
      if (pHandle->hICLTicksCounter == 0u)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	895b      	ldrh	r3, [r3, #10]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <ICL_Exec+0x5e>
      {
        pHandle->ICLstate = ICL_INACTIVE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2204      	movs	r2, #4
 8009a56:	721a      	strb	r2, [r3, #8]
      else
      {
        pHandle->hICLTicksCounter--;
      }
    }
    break;
 8009a58:	e045      	b.n	8009ae6 <ICL_Exec+0xea>
        pHandle->hICLTicksCounter--;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	895b      	ldrh	r3, [r3, #10]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	815a      	strh	r2, [r3, #10]
    break;
 8009a66:	e03e      	b.n	8009ae6 <ICL_Exec+0xea>

    case ICL_ACTIVE:
    {
  
      /* ICL is active: if bus is present and capacitor charging time elapsed*/
      if (pHandle->hICLTicksCounter == 0u)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	895b      	ldrh	r3, [r3, #10]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d118      	bne.n	8009aa2 <ICL_Exec+0xa6>
      {
        if (VBS_GetAvBusVoltage_d(pHandle->pVBS) > pHandle->hICLVoltageThreshold){
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fd21 	bl	80094bc <VBS_GetAvBusVoltage_d>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	8a1b      	ldrh	r3, [r3, #16]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d92c      	bls.n	8009ae0 <ICL_Exec+0xe4>
          DOUT_SetOutputState(pHandle->pDOUT, INACTIVE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fdd2 	bl	8009636 <DOUT_SetOutputState>
          pHandle->ICLstate = ICL_DEACTIVATION;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2203      	movs	r2, #3
 8009a96:	721a      	strb	r2, [r3, #8]
          pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	899a      	ldrh	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	815a      	strh	r2, [r3, #10]
      else
      {
          pHandle->hICLTicksCounter--;
      }
    }
    break;
 8009aa0:	e01e      	b.n	8009ae0 <ICL_Exec+0xe4>
          pHandle->hICLTicksCounter--;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	895b      	ldrh	r3, [r3, #10]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	815a      	strh	r2, [r3, #10]
    break;
 8009aae:	e017      	b.n	8009ae0 <ICL_Exec+0xe4>

    case ICL_INACTIVE:
    {
      /* ICL is inactive: if bus is not present activate the ICL */
      if (VBS_CheckVbus(pHandle->pVBS) == MC_UNDER_VOLT)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fd26 	bl	8009506 <VBS_CheckVbus>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d111      	bne.n	8009ae4 <ICL_Exec+0xe8>
      {
        DOUT_SetOutputState(pHandle->pDOUT, ACTIVE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff fdb5 	bl	8009636 <DOUT_SetOutputState>
        pHandle->ICLstate = ICL_ACTIVATION;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	721a      	strb	r2, [r3, #8]
        pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	899a      	ldrh	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	815a      	strh	r2, [r3, #10]
      }
    }
    break;
 8009ada:	e003      	b.n	8009ae4 <ICL_Exec+0xe8>

    case ICL_IDLE:
    default:
    {
    }
    break;
 8009adc:	bf00      	nop
 8009ade:	e002      	b.n	8009ae6 <ICL_Exec+0xea>
    break;
 8009ae0:	bf00      	nop
 8009ae2:	e000      	b.n	8009ae6 <ICL_Exec+0xea>
    break;
 8009ae4:	bf00      	nop
  }

  return pHandle->ICLstate;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	7a1b      	ldrb	r3, [r3, #8]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop

08009af4 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8009af4:	b5b0      	push	{r4, r5, r7, lr}
 8009af6:	b08a      	sub	sp, #40	; 0x28
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	6078      	str	r0, [r7, #4]
  uint16_t *packetHeader;
  uint16_t command;
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	773b      	strb	r3, [r7, #28]
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	61bb      	str	r3, [r7, #24]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	f023 0307 	bic.w	r3, r3, #7
 8009b0e:	83fb      	strh	r3, [r7, #30]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8009b10:	8bfb      	ldrh	r3, [r7, #30]
 8009b12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1a:	d109      	bne.n	8009b30 <MCP_ReceivedPacket+0x3c>
    {
      userCommand = (command >> 3) & 0x1f;
 8009b1c:	8bfb      	ldrh	r3, [r7, #30]
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	773b      	strb	r3, [r7, #28]
      command = MCP_USER_CMD;    	
 8009b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2e:	83fb      	strh	r3, [r7, #30]
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	75fb      	strb	r3, [r7, #23]

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	015b      	lsls	r3, r3, #5
 8009b44:	4ac7      	ldr	r2, [pc, #796]	; (8009e64 <MCP_ReceivedPacket+0x370>)
 8009b46:	4413      	add	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	899b      	ldrh	r3, [r3, #12]
 8009b4e:	3b02      	subs	r3, #2
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	819a      	strh	r2, [r3, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	1c9a      	adds	r2, r3, #2
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	899b      	ldrh	r3, [r3, #12]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	81fb      	strh	r3, [r7, #14]
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	81da      	strh	r2, [r3, #14]

    switch (command)
 8009b72:	8bfb      	ldrh	r3, [r7, #30]
 8009b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b78:	f000 813e 	beq.w	8009df8 <MCP_ReceivedPacket+0x304>
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b80:	f300 815c 	bgt.w	8009e3c <MCP_ReceivedPacket+0x348>
 8009b84:	2b38      	cmp	r3, #56	; 0x38
 8009b86:	f300 80c5 	bgt.w	8009d14 <MCP_ReceivedPacket+0x220>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da4a      	bge.n	8009c24 <MCP_ReceivedPacket+0x130>
 8009b8e:	e155      	b.n	8009e3c <MCP_ReceivedPacket+0x348>
 8009b90:	3b48      	subs	r3, #72	; 0x48
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	f200 8152 	bhi.w	8009e3c <MCP_ReceivedPacket+0x348>
 8009b98:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <MCP_ReceivedPacket+0xac>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009dc3 	.word	0x08009dc3
 8009ba4:	08009e3d 	.word	0x08009e3d
 8009ba8:	08009e3d 	.word	0x08009e3d
 8009bac:	08009e3d 	.word	0x08009e3d
 8009bb0:	08009e3d 	.word	0x08009e3d
 8009bb4:	08009e3d 	.word	0x08009e3d
 8009bb8:	08009e3d 	.word	0x08009e3d
 8009bbc:	08009e3d 	.word	0x08009e3d
 8009bc0:	08009dcf 	.word	0x08009dcf
 8009bc4:	08009e3d 	.word	0x08009e3d
 8009bc8:	08009e3d 	.word	0x08009e3d
 8009bcc:	08009e3d 	.word	0x08009e3d
 8009bd0:	08009e3d 	.word	0x08009e3d
 8009bd4:	08009e3d 	.word	0x08009e3d
 8009bd8:	08009e3d 	.word	0x08009e3d
 8009bdc:	08009e3d 	.word	0x08009e3d
 8009be0:	08009dcf 	.word	0x08009dcf
 8009be4:	08009e3d 	.word	0x08009e3d
 8009be8:	08009e3d 	.word	0x08009e3d
 8009bec:	08009e3d 	.word	0x08009e3d
 8009bf0:	08009e3d 	.word	0x08009e3d
 8009bf4:	08009e3d 	.word	0x08009e3d
 8009bf8:	08009e3d 	.word	0x08009e3d
 8009bfc:	08009e3d 	.word	0x08009e3d
 8009c00:	08009dcf 	.word	0x08009dcf
 8009c04:	08009e3d 	.word	0x08009e3d
 8009c08:	08009e3d 	.word	0x08009e3d
 8009c0c:	08009e3d 	.word	0x08009e3d
 8009c10:	08009e3d 	.word	0x08009e3d
 8009c14:	08009e3d 	.word	0x08009e3d
 8009c18:	08009e3d 	.word	0x08009e3d
 8009c1c:	08009e3d 	.word	0x08009e3d
 8009c20:	08009dd5 	.word	0x08009dd5
 8009c24:	2b38      	cmp	r3, #56	; 0x38
 8009c26:	f200 8109 	bhi.w	8009e3c <MCP_ReceivedPacket+0x348>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <MCP_ReceivedPacket+0x13c>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009d23 	.word	0x08009d23
 8009c34:	08009e3d 	.word	0x08009e3d
 8009c38:	08009e3d 	.word	0x08009e3d
 8009c3c:	08009e3d 	.word	0x08009e3d
 8009c40:	08009e3d 	.word	0x08009e3d
 8009c44:	08009e3d 	.word	0x08009e3d
 8009c48:	08009e3d 	.word	0x08009e3d
 8009c4c:	08009e3d 	.word	0x08009e3d
 8009c50:	08009d37 	.word	0x08009d37
 8009c54:	08009e3d 	.word	0x08009e3d
 8009c58:	08009e3d 	.word	0x08009e3d
 8009c5c:	08009e3d 	.word	0x08009e3d
 8009c60:	08009e3d 	.word	0x08009e3d
 8009c64:	08009e3d 	.word	0x08009e3d
 8009c68:	08009e3d 	.word	0x08009e3d
 8009c6c:	08009e3d 	.word	0x08009e3d
 8009c70:	08009d47 	.word	0x08009d47
 8009c74:	08009e3d 	.word	0x08009e3d
 8009c78:	08009e3d 	.word	0x08009e3d
 8009c7c:	08009e3d 	.word	0x08009e3d
 8009c80:	08009e3d 	.word	0x08009e3d
 8009c84:	08009e3d 	.word	0x08009e3d
 8009c88:	08009e3d 	.word	0x08009e3d
 8009c8c:	08009e3d 	.word	0x08009e3d
 8009c90:	08009d57 	.word	0x08009d57
 8009c94:	08009e3d 	.word	0x08009e3d
 8009c98:	08009e3d 	.word	0x08009e3d
 8009c9c:	08009e3d 	.word	0x08009e3d
 8009ca0:	08009e3d 	.word	0x08009e3d
 8009ca4:	08009e3d 	.word	0x08009e3d
 8009ca8:	08009e3d 	.word	0x08009e3d
 8009cac:	08009e3d 	.word	0x08009e3d
 8009cb0:	08009d69 	.word	0x08009d69
 8009cb4:	08009e3d 	.word	0x08009e3d
 8009cb8:	08009e3d 	.word	0x08009e3d
 8009cbc:	08009e3d 	.word	0x08009e3d
 8009cc0:	08009e3d 	.word	0x08009e3d
 8009cc4:	08009e3d 	.word	0x08009e3d
 8009cc8:	08009e3d 	.word	0x08009e3d
 8009ccc:	08009e3d 	.word	0x08009e3d
 8009cd0:	08009d75 	.word	0x08009d75
 8009cd4:	08009e3d 	.word	0x08009e3d
 8009cd8:	08009e3d 	.word	0x08009e3d
 8009cdc:	08009e3d 	.word	0x08009e3d
 8009ce0:	08009e3d 	.word	0x08009e3d
 8009ce4:	08009e3d 	.word	0x08009e3d
 8009ce8:	08009e3d 	.word	0x08009e3d
 8009cec:	08009e3d 	.word	0x08009e3d
 8009cf0:	08009d8d 	.word	0x08009d8d
 8009cf4:	08009e3d 	.word	0x08009e3d
 8009cf8:	08009e3d 	.word	0x08009e3d
 8009cfc:	08009e3d 	.word	0x08009e3d
 8009d00:	08009e3d 	.word	0x08009e3d
 8009d04:	08009e3d 	.word	0x08009e3d
 8009d08:	08009e3d 	.word	0x08009e3d
 8009d0c:	08009e3d 	.word	0x08009e3d
 8009d10:	08009db7 	.word	0x08009db7
 8009d14:	2b68      	cmp	r3, #104	; 0x68
 8009d16:	f300 8091 	bgt.w	8009e3c <MCP_ReceivedPacket+0x348>
 8009d1a:	2b48      	cmp	r3, #72	; 0x48
 8009d1c:	f6bf af38 	bge.w	8009b90 <MCP_ReceivedPacket+0x9c>
 8009d20:	e08c      	b.n	8009e3c <MCP_ReceivedPacket+0x348>
    {
      case GET_MCP_VERSION:
        pHandle->txLength = 4;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2204      	movs	r2, #4
 8009d26:	81da      	strh	r2, [r3, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
        MCPResponse = MCP_CMD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	777b      	strb	r3, [r7, #29]
      break;
 8009d34:	e085      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      case SET_DATA_ELEMENT:
      {
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8009d36:	89fb      	ldrh	r3, [r7, #14]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fa f9d1 	bl	80040e2 <RI_SetRegCommandParser>
 8009d40:	4603      	mov	r3, r0
 8009d42:	777b      	strb	r3, [r7, #29]
        break;
 8009d44:	e07d      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case GET_DATA_ELEMENT:
      {
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8009d46:	89fb      	ldrh	r3, [r7, #14]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fa fa42 	bl	80041d4 <RI_GetRegCommandParser>
 8009d50:	4603      	mov	r3, r0
 8009d52:	777b      	strb	r3, [r7, #29]
        break;
 8009d54:	e075      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case START_MOTOR:
      {
        MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8009d56:	6938      	ldr	r0, [r7, #16]
 8009d58:	f7f8 fb44 	bl	80023e4 <MCI_StartMotor>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f083 0301 	eor.w	r3, r3, #1
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	777b      	strb	r3, [r7, #29]
        break;
 8009d66:	e06c      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case STOP_MOTOR: /* Todo: Check the pertinance of return value*/
      {
        (void)MCI_StopMotor(pMCI);
 8009d68:	6938      	ldr	r0, [r7, #16]
 8009d6a:	f7f8 fb61 	bl	8002430 <MCI_StopMotor>
        MCPResponse = MCP_CMD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	777b      	strb	r3, [r7, #29]
        break;
 8009d72:	e066      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case STOP_RAMP:
      {
        if (RUN == MCI_GetSTMState(pMCI))
 8009d74:	6938      	ldr	r0, [r7, #16]
 8009d76:	f7f8 fc32 	bl	80025de <MCI_GetSTMState>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b06      	cmp	r3, #6
 8009d7e:	d102      	bne.n	8009d86 <MCP_ReceivedPacket+0x292>
        {
          MCI_StopRamp(pMCI);
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	f7f8 fcd1 	bl	8002728 <MCI_StopRamp>
        }
        MCPResponse = MCP_CMD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	777b      	strb	r3, [r7, #29]
        break;
 8009d8a:	e05a      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case START_STOP:
      {
        /* Queries the STM and a command start or stop depending on the state. */
        if (IDLE == MCI_GetSTMState(pMCI))
 8009d8c:	6938      	ldr	r0, [r7, #16]
 8009d8e:	f7f8 fc26 	bl	80025de <MCI_GetSTMState>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d108      	bne.n	8009daa <MCP_ReceivedPacket+0x2b6>
        {
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8009d98:	6938      	ldr	r0, [r7, #16]
 8009d9a:	f7f8 fb23 	bl	80023e4 <MCI_StartMotor>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f083 0301 	eor.w	r3, r3, #1
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	777b      	strb	r3, [r7, #29]
        else
        {
          (void)MCI_StopMotor(pMCI);
          MCPResponse = MCP_CMD_OK;
        }
        break;
 8009da8:	e04b      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
          (void)MCI_StopMotor(pMCI);
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f7f8 fb40 	bl	8002430 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	777b      	strb	r3, [r7, #29]
        break;
 8009db4:	e045      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case FAULT_ACK:
      {
        (void)MCI_FaultAcknowledged(pMCI);
 8009db6:	6938      	ldr	r0, [r7, #16]
 8009db8:	f7f8 fb6a 	bl	8002490 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	777b      	strb	r3, [r7, #29]
        break;
 8009dc0:	e03f      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }

      case IQDREF_CLEAR:
      {
        MCI_Clear_Iqdref(pMCI);
 8009dc2:	6938      	ldr	r0, [r7, #16]
 8009dc4:	f7f8 fd7d 	bl	80028c2 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	777b      	strb	r3, [r7, #29]
        break;
 8009dcc:	e039      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }
      case PFC_ENABLE:
      case PFC_DISABLE:
      case PFC_FAULT_ACK:
      {
        MCPResponse = MCP_CMD_UNKNOWN;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	777b      	strb	r3, [r7, #29]
        break;
 8009dd2:	e036      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }      
      case PROFILER_CMD:
      {
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	8998      	ldrh	r0, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6859      	ldr	r1, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f103 040e 	add.w	r4, r3, #14
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4623      	mov	r3, r4
 8009dee:	f7f8 fa54 	bl	800229a <MC_ProfilerCommand>
 8009df2:	4603      	mov	r3, r0
 8009df4:	777b      	strb	r3, [r7, #29]
        break;
 8009df6:	e024      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      }
      
      case MCP_USER_CMD:
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8009df8:	7f3b      	ldrb	r3, [r7, #28]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d81b      	bhi.n	8009e36 <MCP_ReceivedPacket+0x342>
 8009dfe:	7f3b      	ldrb	r3, [r7, #28]
 8009e00:	4a19      	ldr	r2, [pc, #100]	; (8009e68 <MCP_ReceivedPacket+0x374>)
 8009e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d015      	beq.n	8009e36 <MCP_ReceivedPacket+0x342>
    	  {
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8009e0a:	7f3b      	ldrb	r3, [r7, #28]
 8009e0c:	4a16      	ldr	r2, [pc, #88]	; (8009e68 <MCP_ReceivedPacket+0x374>)
 8009e0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8998      	ldrh	r0, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6859      	ldr	r1, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f103 050e 	add.w	r5, r3, #14
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	47a0      	blx	r4
 8009e2e:	4603      	mov	r3, r0
 8009e30:	777b      	strb	r3, [r7, #29]
 8009e32:	bf00      	nop
    	  }
    	  else
    	  {
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
    	  }
        break;
 8009e34:	e005      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8009e36:	230d      	movs	r3, #13
 8009e38:	777b      	strb	r3, [r7, #29]
        break;
 8009e3a:	e002      	b.n	8009e42 <MCP_ReceivedPacket+0x34e>
      default :
      {
        MCPResponse = MCP_CMD_UNKNOWN;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	777b      	strb	r3, [r7, #29]
        break;
 8009e40:	bf00      	nop
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	89d2      	ldrh	r2, [r2, #14]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	7f7a      	ldrb	r2, [r7, #29]
 8009e4e:	701a      	strb	r2, [r3, #0]
    pHandle->txLength++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	89db      	ldrh	r3, [r3, #14]
 8009e54:	3301      	adds	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	81da      	strh	r2, [r3, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8009e5c:	bf00      	nop
 8009e5e:	3720      	adds	r7, #32
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bdb0      	pop	{r4, r5, r7, pc}
 8009e64:	20000800 	.word	0x20000800
 8009e68:	200019dc 	.word	0x200019dc

08009e6c <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009e6c:	b590      	push	{r4, r7, lr}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7fda      	ldrb	r2, [r3, #31]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	f040 813a 	bne.w	800a0f8 <MCPA_dataLog+0x28c>
    {
      pHandle->HFIndex = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	77da      	strb	r2, [r3, #31]
      if (0U == pHandle->bufferIndex)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	8b1b      	ldrh	r3, [r3, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d166      	bne.n	8009f60 <MCPA_dataLog+0xf4>
      {
        /* New buffer allocation */

        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	6810      	ldr	r0, [r2, #0]
                                       (void **) &pHandle->currentBuffer, //cstat !MISRAC2012-Rule-11.3
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	f102 0114 	add.w	r1, r2, #20
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009ea2:	2209      	movs	r2, #9
 8009ea4:	4798      	blx	r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f083 0301 	eor.w	r3, r3, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d156      	bne.n	8009f60 <MCPA_dataLog+0xf4>
          pHandle->bufferMissed++;
#endif
        }
        else
        {
          logValue = (uint32_t *) pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	60fb      	str	r3, [r7, #12]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009eb8:	4b94      	ldr	r3, [pc, #592]	; (800a10c <MCPA_dataLog+0x2a0>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]
          pHandle->bufferIndex = 4U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2204      	movs	r2, #4
 8009ec4:	831a      	strh	r2, [r3, #24]
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2020 	strb.w	r2, [r3, #32]
          /* Check if configuration has changed for this new buffer */
          if (pHandle->Mark == pHandle->MarkBuff)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d040      	beq.n	8009f60 <MCPA_dataLog+0xf4>
          {
            /* Nothing to do */
          }
          else
          {
            pHandle->MarkBuff = pHandle->Mark;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            pHandle->HFRateBuff = pHandle->HFRate;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            pHandle->MFRateBuff = pHandle->MFRate;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	8b5a      	ldrh	r2, [r3, #26]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	839a      	strh	r2, [r3, #28]
            /* We store pointer here, so 4 bytes */
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6898      	ldr	r0, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6859      	ldr	r1, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009f30:	461a      	mov	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f004 f8e3 	bl	800e108 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6918      	ldr	r0, [r3, #16]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68d9      	ldr	r1, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009f58:	4413      	add	r3, r2
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f004 f8d4 	bl	800e108 <memcpy>
          }
        }
      }
      /* */
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8b1b      	ldrh	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d071      	beq.n	800a04c <MCPA_dataLog+0x1e0>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	8b1a      	ldrh	r2, [r3, #24]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8b9b      	ldrh	r3, [r3, #28]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d86b      	bhi.n	800a04c <MCPA_dataLog+0x1e0>
      {
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	8b12      	ldrh	r2, [r2, #24]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009f80:	2300      	movs	r3, #0
 8009f82:	75fb      	strb	r3, [r7, #23]
 8009f84:	e014      	b.n	8009fb0 <MCPA_dataLog+0x144>
        {
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	881a      	ldrh	r2, [r3, #0]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	801a      	strh	r2, [r3, #0]
          logValue16++;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	613b      	str	r3, [r7, #16]
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	8b1b      	ldrh	r3, [r3, #24]
 8009fa2:	3302      	adds	r3, #2
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	831a      	strh	r2, [r3, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	3301      	adds	r3, #1
 8009fae:	75fb      	strb	r3, [r7, #23]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fb6:	7dfa      	ldrb	r2, [r7, #23]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d3e4      	bcc.n	8009f86 <MCPA_dataLog+0x11a>
        }
        /* MFRateBuff=254 means we dump MF data once per buffer */
        /* MFRateBuff=255 means we do not dump MF data */
        if (pHandle->MFRateBuff < 254U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009fc2:	2bfd      	cmp	r3, #253	; 0xfd
 8009fc4:	d842      	bhi.n	800a04c <MCPA_dataLog+0x1e0>
        {
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d132      	bne.n	800a03c <MCPA_dataLog+0x1d0>
          {
            pHandle->MFIndex = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2020 	strb.w	r2, [r3, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fe4:	75fb      	strb	r3, [r7, #23]
 8009fe6:	e01d      	b.n	800a024 <MCPA_dataLog+0x1b8>
            {
              /* Dump MF data*/
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	8b12      	ldrh	r2, [r2, #24]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	601a      	str	r2, [r3, #0]
                  logValue32 = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
                  *logValue32 = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
                  break;
              }
#endif
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8b1a      	ldrh	r2, [r3, #24]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6919      	ldr	r1, [r3, #16]
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	440b      	add	r3, r1
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	4413      	add	r3, r2
 800a018:	b29a      	uxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	831a      	strh	r2, [r3, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	3301      	adds	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]
 800a024:	7dfa      	ldrb	r2, [r7, #23]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a02c:	4619      	mov	r1, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a034:	440b      	add	r3, r1
 800a036:	429a      	cmp	r2, r3
 800a038:	dbd6      	blt.n	8009fe8 <MCPA_dataLog+0x17c>
 800a03a:	e007      	b.n	800a04c <MCPA_dataLog+0x1e0>
            }
          }
          else
          {
            pHandle->MFIndex ++;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a042:	3301      	adds	r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f883 2020 	strb.w	r2, [r3, #32]
          }
        }
      }
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8b1a      	ldrh	r2, [r3, #24]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	8b9b      	ldrh	r3, [r3, #28]
 800a054:	429a      	cmp	r2, r3
 800a056:	d955      	bls.n	800a104 <MCPA_dataLog+0x298>
      {
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a05e:	2bfe      	cmp	r3, #254	; 0xfe
 800a060:	d12d      	bne.n	800a0be <MCPA_dataLog+0x252>
        {
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a068:	75fb      	strb	r3, [r7, #23]
 800a06a:	e01d      	b.n	800a0a8 <MCPA_dataLog+0x23c>
          {
            logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	8b12      	ldrh	r2, [r2, #24]
 800a074:	4413      	add	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	601a      	str	r2, [r3, #0]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8b1a      	ldrh	r2, [r3, #24]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6919      	ldr	r1, [r3, #16]
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	440b      	add	r3, r1
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	831a      	strh	r2, [r3, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
 800a0a8:	7dfa      	ldrb	r2, [r7, #23]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0b8:	440b      	add	r3, r1
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	dbd6      	blt.n	800a06c <MCPA_dataLog+0x200>
          }
        }
        /* Buffer is ready to be send*/
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	8b12      	ldrh	r2, [r2, #24]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	801a      	strh	r2, [r3, #0]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685c      	ldr	r4, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6959      	ldr	r1, [r3, #20]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8b1b      	ldrh	r3, [r3, #24]
 800a0e8:	3302      	adds	r3, #2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	2309      	movs	r3, #9
 800a0ee:	47a0      	blx	r4
                                              MCTL_ASYNC);
        pHandle->bufferIndex = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	831a      	strh	r2, [r3, #24]
      pHandle->HFIndex++;
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800a0f6:	e005      	b.n	800a104 <MCPA_dataLog+0x298>
      pHandle->HFIndex++;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7fdb      	ldrb	r3, [r3, #31]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	77da      	strb	r2, [r3, #31]
}
 800a104:	bf00      	nop
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd90      	pop	{r4, r7, pc}
 800a10c:	20001a68 	.word	0x20001a68

0800a110 <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8b1b      	ldrh	r3, [r3, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d04e      	beq.n	800a1be <MCPA_flushDataLog+0xae>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a126:	2bfe      	cmp	r3, #254	; 0xfe
 800a128:	d12d      	bne.n	800a186 <MCPA_flushDataLog+0x76>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a130:	75fb      	strb	r3, [r7, #23]
 800a132:	e01d      	b.n	800a170 <MCPA_flushDataLog+0x60>
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	8b12      	ldrh	r2, [r2, #24]
 800a13c:	4413      	add	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	601a      	str	r2, [r3, #0]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	8b1a      	ldrh	r2, [r3, #24]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6919      	ldr	r1, [r3, #16]
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	440b      	add	r3, r1
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	4413      	add	r3, r2
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	831a      	strh	r2, [r3, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	3301      	adds	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
 800a170:	7dfa      	ldrb	r2, [r7, #23]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a178:	4619      	mov	r1, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a180:	440b      	add	r3, r1
 800a182:	429a      	cmp	r2, r3
 800a184:	dbd6      	blt.n	800a134 <MCPA_flushDataLog+0x24>
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	8b12      	ldrh	r2, [r2, #24]
 800a18e:	4413      	add	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	801a      	strh	r2, [r3, #0]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685c      	ldr	r4, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6959      	ldr	r1, [r3, #20]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	8b1b      	ldrh	r3, [r3, #24]
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	47a0      	blx	r4
    pHandle->bufferIndex = 0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	831a      	strh	r2, [r3, #24]
  }   
}
 800a1be:	bf00      	nop
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd90      	pop	{r4, r7, pc}

0800a1c6 <MCPA_stopDataLog>:

void MCPA_stopDataLog(MCPA_Handle_t *pHandle)
{ 
 800a1c6:	b590      	push	{r4, r7, lr}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  uint16_t *logValue16;  
  
  pHandle->Mark = 0;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8b1b      	ldrh	r3, [r3, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d018      	beq.n	800a210 <MCPA_stopDataLog+0x4a>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	8b12      	ldrh	r2, [r2, #24]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	801a      	strh	r2, [r3, #0]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685c      	ldr	r4, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6959      	ldr	r1, [r3, #20]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8b1b      	ldrh	r3, [r3, #24]
 800a208:	3302      	adds	r3, #2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	2309      	movs	r3, #9
 800a20e:	47a0      	blx	r4
  }     
  pHandle->bufferIndex = 0;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	831a      	strh	r2, [r3, #24]
  pHandle->MarkBuff = 0;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pHandle->HFIndex = 0;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	77da      	strb	r2, [r3, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800a22c:	bf00      	nop
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}

0800a234 <MCPA_cfgLog>:

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint8_t result = MCP_CMD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	75fb      	strb	r3, [r7, #23]
    result = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 800a242:	2300      	movs	r3, #0
 800a244:	82bb      	strh	r3, [r7, #20]
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	60fb      	str	r3, [r7, #12]

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	817b      	strh	r3, [r7, #10]

    if (buffSize == 0)
 800a250:	897b      	ldrh	r3, [r7, #10]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d103      	bne.n	800a25e <MCPA_cfgLog+0x2a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff ffb5 	bl	800a1c6 <MCPA_stopDataLog>
 800a25c:	e08c      	b.n	800a378 <MCPA_cfgLog+0x144>
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	89db      	ldrh	r3, [r3, #14]
 800a264:	897a      	ldrh	r2, [r7, #10]
 800a266:	429a      	cmp	r2, r3
 800a268:	d902      	bls.n	800a270 <MCPA_cfgLog+0x3c>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 800a26a:	2309      	movs	r3, #9
 800a26c:	75fb      	strb	r3, [r7, #23]
 800a26e:	e083      	b.n	800a378 <MCPA_cfgLog+0x144>
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	789a      	ldrb	r2, [r3, #2]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	78da      	ldrb	r2, [r3, #3]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	791a      	ldrb	r2, [r3, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	795a      	ldrb	r2, [r3, #5]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3306      	adds	r3, #6
 800a29c:	60fb      	str	r3, [r7, #12]

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a2ac:	4413      	add	r3, r2
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	7f92      	ldrb	r2, [r2, #30]
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	dc5e      	bgt.n	800a374 <MCPA_cfgLog+0x140>
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	74fb      	strb	r3, [r7, #19]
 800a2ba:	e032      	b.n	800a322 <MCPA_cfgLog+0xee>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	813b      	strh	r3, [r7, #8]
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	7cfb      	ldrb	r3, [r7, #19]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	441a      	add	r2, r3
 800a2cc:	893b      	ldrh	r3, [r7, #8]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fb fd45 	bl	8005d60 <RI_GetPtrReg>
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a2dc:	7cfa      	ldrb	r2, [r7, #19]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d306      	bcc.n	800a2f0 <MCPA_cfgLog+0xbc>
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fb fd13 	bl	8005d10 <RI_GetIDSize>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	e000      	b.n	800a2f2 <MCPA_cfgLog+0xbe>
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	7cfb      	ldrb	r3, [r7, #19]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	701a      	strb	r2, [r3, #0]
        pCfgData++;/* Point to the next UID */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3301      	adds	r3, #1
 800a302:	60fb      	str	r3, [r7, #12]
        pCfgData++;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3301      	adds	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
         logSize = logSize+pHandle->dataSizeTable[i];
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	7cfb      	ldrb	r3, [r7, #19]
 800a310:	4413      	add	r3, r2
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b29a      	uxth	r2, r3
 800a316:	8abb      	ldrh	r3, [r7, #20]
 800a318:	4413      	add	r3, r2
 800a31a:	82bb      	strh	r3, [r7, #20]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800a31c:	7cfb      	ldrb	r3, [r7, #19]
 800a31e:	3301      	adds	r3, #1
 800a320:	74fb      	strb	r3, [r7, #19]
 800a322:	7cfa      	ldrb	r2, [r7, #19]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a32a:	4619      	mov	r1, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a332:	440b      	add	r3, r1
 800a334:	429a      	cmp	r2, r3
 800a336:	dbc1      	blt.n	800a2bc <MCPA_cfgLog+0x88>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 800a338:	897a      	ldrh	r2, [r7, #10]
 800a33a:	8abb      	ldrh	r3, [r7, #20]
 800a33c:	3306      	adds	r3, #6
 800a33e:	429a      	cmp	r2, r3
 800a340:	d202      	bcs.n	800a348 <MCPA_cfgLog+0x114>
     {
       result = MCP_ERROR_NO_TXASYNC_SPACE;
 800a342:	2309      	movs	r3, #9
 800a344:	75fb      	strb	r3, [r7, #23]
 800a346:	e017      	b.n	800a378 <MCPA_cfgLog+0x144>
     }
     else
     {
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 800a348:	897a      	ldrh	r2, [r7, #10]
 800a34a:	8abb      	ldrh	r3, [r7, #20]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b02      	subs	r3, #2
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	835a      	strh	r2, [r3, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
       if (0U == pHandle->Mark)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d105      	bne.n	800a378 <MCPA_cfgLog+0x144>
       {  /* Switch Off condition */
            MCPA_stopDataLog(pHandle);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff2a 	bl	800a1c6 <MCPA_stopDataLog>
 800a372:	e001      	b.n	800a378 <MCPA_cfgLog+0x144>
         }
       }
        }  
     else
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
 800a374:	230a      	movs	r3, #10
 800a376:	75fb      	strb	r3, [r7, #23]
     }
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <NTC_SetFaultState>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState(NTC_Handle_t *pHandle)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	8a1a      	ldrh	r2, [r3, #16]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8b5b      	ldrh	r3, [r3, #26]
 800a392:	429a      	cmp	r2, r3
 800a394:	d902      	bls.n	800a39c <NTC_SetFaultState+0x1a>
    {
      hFault = MC_OVER_TEMP;
 800a396:	2308      	movs	r3, #8
 800a398:	81fb      	strh	r3, [r7, #14]
 800a39a:	e00b      	b.n	800a3b4 <NTC_SetFaultState+0x32>
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	8a1a      	ldrh	r2, [r3, #16]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	8b9b      	ldrh	r3, [r3, #28]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d202      	bcs.n	800a3ae <NTC_SetFaultState+0x2c>
    {
      hFault = MC_NO_ERROR;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	81fb      	strh	r3, [r7, #14]
 800a3ac:	e002      	b.n	800a3b4 <NTC_SetFaultState+0x32>
    }
    else
    {
      hFault = pHandle->hFaultState;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	8adb      	ldrh	r3, [r3, #22]
 800a3b2:	81fb      	strh	r3, [r7, #14]
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
 800a3b4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <NTC_Init>:
  *
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  */
__weak void NTC_Init(NTC_Handle_t *pHandle)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10d      	bne.n	800a3ee <NTC_Init+0x2c>
    {
      /* Need to be register with RegularConvManager */
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fb feee 	bl	80061b8 <RCM_RegisterRegConv>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      NTC_Clear(pHandle);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f80c 	bl	800a404 <NTC_Clear>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800a3ec:	e006      	b.n	800a3fc <NTC_Init+0x3a>
      pHandle->hFaultState = MC_NO_ERROR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	82da      	strh	r2, [r3, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	8a5a      	ldrh	r2, [r3, #18]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	821a      	strh	r2, [r3, #16]
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <NTC_Clear>:
  * @brief Initializes internal average temperature computed value
  *
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  */
__weak void NTC_Clear(NTC_Handle_t *pHandle)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	821a      	strh	r2, [r3, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b086      	sub	sp, #24
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d12e      	bne.n	800a48c <NTC_CalcAvTemp+0x6e>
    {
      uint16_t hAux;
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a434:	4618      	mov	r0, r3
 800a436:	f7fb ff57 	bl	80062e8 <RCM_ExecRegularConv>
 800a43a:	4603      	mov	r3, r0
 800a43c:	82fb      	strh	r3, [r7, #22]

      if (0xFFFFU == hAux)
 800a43e:	8afb      	ldrh	r3, [r7, #22]
 800a440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a444:	4293      	cmp	r3, r2
 800a446:	d019      	beq.n	800a47c <NTC_CalcAvTemp+0x5e>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	8b1b      	ldrh	r3, [r3, #24]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	8a1b      	ldrh	r3, [r3, #16]
 800a454:	461a      	mov	r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	fb02 f303 	mul.w	r3, r2, r3
 800a45c:	613b      	str	r3, [r7, #16]
        wtemp += hAux;
 800a45e:	8afb      	ldrh	r3, [r7, #22]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4413      	add	r3, r2
 800a464:	613b      	str	r3, [r7, #16]
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	8b1b      	ldrh	r3, [r3, #24]
 800a46a:	461a      	mov	r2, r3
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a472:	613b      	str	r3, [r7, #16]

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	b29a      	uxth	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	821a      	strh	r2, [r3, #16]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff80 	bl	800a382 <NTC_SetFaultState>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	82da      	strh	r2, [r3, #22]
 800a48a:	e002      	b.n	800a492 <NTC_CalcAvTemp+0x74>
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	82da      	strh	r2, [r3, #22]
    }
    returnValue = pHandle->hFaultState;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8adb      	ldrh	r3, [r3, #22]
 800a496:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 800a498:	89fb      	ldrh	r3, [r7, #14]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <NTC_GetAvTemp_C>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C(NTC_Handle_t *pHandle)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d117      	bne.n	800a4e2 <NTC_GetAvTemp_C+0x40>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8a1b      	ldrh	r3, [r3, #16]
 800a4b6:	60fb      	str	r3, [r7, #12]
      wTemp -= ((int32_t)pHandle->wV0);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
      wTemp *= pHandle->hSensitivity;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	fb02 f303 	mul.w	r3, r2, r3
 800a4d2:	60fb      	str	r3, [r7, #12]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	141b      	asrs	r3, r3, #16
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a4dc:	4413      	add	r3, r2
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e002      	b.n	800a4e8 <NTC_GetAvTemp_C+0x46>
      wTemp = (wTemp / 65536) + (int32_t)pHandle->hT0;
#endif
    }
    else
    {
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	8a9b      	ldrh	r3, [r3, #20]
 800a4e6:	60fb      	str	r3, [r7, #12]
    }
    returnValue = (int16_t)wTemp;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 800a4ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <PID_HandleInit>:
  * are set to their default values. These default values are the ones 
  * set to the PID_Handle_t::hDefKpGain, PID_Handle_t::hDefKiGain and
  * PID_Handle_t::hDefKdGain fields of the PID_Handle_t structure.
  */
__weak void PID_HandleInit(PID_Handle_t *pHandle)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	809a      	strh	r2, [r3, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	80da      	strh	r2, [r3, #6]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	845a      	strh	r2, [r3, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	609a      	str	r2, [r3, #8]
    pHandle->wPrevProcessVarError = 0;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <PID_SetKP>:
  * @brief  Sets @f$K_{pg}@f$, the numerator of the proportional gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKpGain New @f$K_{pg}@f$ value
  */
__weak void PID_SetKP(PID_Handle_t *pHandle, int16_t hKpGain)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	887a      	ldrh	r2, [r7, #2]
 800a54a:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <PID_SetKI>:
  * @brief  Sets the @f$K_{ig}@f$, the numrerator of the integral gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKiGain new @f$K_{ig}@f$ value
  */
__weak void PID_SetKI(PID_Handle_t *pHandle, int16_t hKiGain)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	887a      	ldrh	r2, [r7, #2]
 800a568:	80da      	strh	r2, [r3, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <PID_GetKP>:
/**
  * @brief  Returns @f$K_{pg}@f$, the numerator of the proportional gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKP(PID_Handle_t *pHandle)
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
#endif
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <PID_GetKI>:
/**
  * @brief  Returns @f$K_{ig}@f$, the numrerator of the integral gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKI(PID_Handle_t *pHandle)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
#endif
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <PID_SetIntegralTerm>:
  * 
  * @attention @p wIntegralTermValue divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetIntegralTerm(PID_Handle_t *pHandle, int32_t wIntegralTermValue)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
 800a5ba:	bf00      	nop
}
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <PID_GetKPDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKPDivisor()
  */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	8b9b      	ldrh	r3, [r3, #28]
#endif
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <PID_SetKPDivisorPOW2>:
  * powers of two. 
  * 
  * This function sets @f$K_{pd}@f$ to 2 to the power of @p hKpDivisorPOW2.
  */
__weak void PID_SetKPDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKpDivisorPOW2)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b083      	sub	sp, #12
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	887a      	ldrh	r2, [r7, #2]
 800a5ee:	839a      	strh	r2, [r3, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800a5f0:	887b      	ldrh	r3, [r7, #2]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	831a      	strh	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <PID_GetKIDivisor>:
  * powers of two. 
  * 
  * @sa PID_GetKIDivisorPOW2()
  */
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8b5b      	ldrh	r3, [r3, #26]
#endif
}
 800a616:	4618      	mov	r0, r3
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <PID_GetKIDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKIDivisor()
  */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8bdb      	ldrh	r3, [r3, #30]
#endif
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <PID_SetKIDivisorPOW2>:
  * accept any 16-bit value. If the limits of the integral term need to be different 
  * use the PID_SetUpperIntegralTermLimit() and PID_SetLowerIntegralTermLimit() functions
  * after this one.
  */
__weak void PID_SetKIDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKiDivisorPOW2)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800a646:	887b      	ldrh	r3, [r7, #2]
 800a648:	2201      	movs	r2, #1
 800a64a:	fa02 f303 	lsl.w	r3, r2, r3
 800a64e:	60fb      	str	r3, [r7, #12]
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	887a      	ldrh	r2, [r7, #2]
 800a654:	83da      	strh	r2, [r3, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	835a      	strh	r2, [r3, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4613      	mov	r3, r2
 800a662:	03db      	lsls	r3, r3, #15
 800a664:	1a9b      	subs	r3, r3, r2
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f81a 	bl	800a6a2 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	461a      	mov	r2, r3
 800a672:	03db      	lsls	r3, r3, #15
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f804 	bl	800a686 <PID_SetLowerIntegralTermLimit>
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <PID_SetLowerIntegralTermLimit>:
  * 
  * @attention @p wLowerLimit divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetLowerIntegralTermLimit(PID_Handle_t *pHandle, int32_t wLowerLimit)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	611a      	str	r2, [r3, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <PID_SetUpperIntegralTermLimit>:
  * 
  * @attention @p wUpperLimit divided by @f$K_{id}@f$ must fit in a 16-bit signed 
  * integer value.
  */
__weak void PID_SetUpperIntegralTermLimit(PID_Handle_t *pHandle, int32_t wUpperLimit)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	60da      	str	r2, [r3, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <PID_SetKD>:
  * @brief  Sets @f$K_{dg}@f$, the numerator of the derivative gain of a PID component
  * @param  pHandle Handle on the PID component
  * @param  hKpGain New @f$K_{dg}@f$ value
  */
__weak void PID_SetKD(PID_Handle_t *pHandle, int16_t hKdGain)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	887a      	ldrh	r2, [r7, #2]
 800a6ce:	845a      	strh	r2, [r3, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <PID_GetKD>:
/**
  * @brief  Returns @f$K_{dg}@f$, the numerator of the derivative gain of a PID component
  * @param  pHandle Handle on the PID component
  */
__weak int16_t PID_GetKD(PID_Handle_t *pHandle)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
#endif
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <PID_GetKDDivisorPOW2>:
  * powers of two. 
  * 
  * @sa PID_GetKDDivisor()
  */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
#endif
}
 800a702:	4618      	mov	r0, r3
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <PID_SetKDDivisorPOW2>:
  * powers of two. 
  * 
  * This function sets @f$K_{dd}@f$ to 2 to the power of @p hKdDivisorPOW2.
  */
__weak void PID_SetKDDivisorPOW2(PID_Handle_t *pHandle, uint16_t hKdDivisorPOW2)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	887a      	ldrh	r2, [r7, #2]
 800a71e:	84da      	strh	r2, [r3, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800a720:	887b      	ldrh	r3, [r7, #2]
 800a722:	2201      	movs	r2, #1
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	b29a      	uxth	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	849a      	strh	r2, [r3, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b08b      	sub	sp, #44	; 0x2c
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
#endif
    int32_t wProportional_Term;
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	8a9b      	ldrh	r3, [r3, #20]
 800a74e:	837b      	strh	r3, [r7, #26]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	8adb      	ldrh	r3, [r3, #22]
 800a754:	833b      	strh	r3, [r7, #24]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a75c:	461a      	mov	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	617b      	str	r3, [r7, #20]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <PI_Controller+0x3c>
    {
      pHandle->wIntegralTerm = 0;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	609a      	str	r2, [r3, #8]
 800a776:	e03a      	b.n	800a7ee <PI_Controller+0xb2>
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a77e:	461a      	mov	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	613b      	str	r3, [r7, #16]
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	4413      	add	r3, r2
 800a790:	623b      	str	r3, [r7, #32]

      if (wIntegral_sum_temp < 0)
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	2b00      	cmp	r3, #0
 800a796:	da0a      	bge.n	800a7ae <PI_Controller+0x72>
      {
        if (pHandle->wIntegralTerm > 0)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd0f      	ble.n	800a7c0 <PI_Controller+0x84>
        {
          if (wIntegral_Term > 0)
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd0c      	ble.n	800a7c0 <PI_Controller+0x84>
          {
            wIntegral_sum_temp = INT32_MAX;
 800a7a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7aa:	623b      	str	r3, [r7, #32]
 800a7ac:	e008      	b.n	800a7c0 <PI_Controller+0x84>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	da04      	bge.n	800a7c0 <PI_Controller+0x84>
        {
          if (wIntegral_Term < 0)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da01      	bge.n	800a7c0 <PI_Controller+0x84>
          {
            wIntegral_sum_temp = -INT32_MAX;
 800a7bc:	4b28      	ldr	r3, [pc, #160]	; (800a860 <PI_Controller+0x124>)
 800a7be:	623b      	str	r3, [r7, #32]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	6a3a      	ldr	r2, [r7, #32]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	dd04      	ble.n	800a7d4 <PI_Controller+0x98>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	609a      	str	r2, [r3, #8]
 800a7d2:	e00c      	b.n	800a7ee <PI_Controller+0xb2>
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	6a3a      	ldr	r2, [r7, #32]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	da04      	bge.n	800a7e8 <PI_Controller+0xac>
      {
        pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691a      	ldr	r2, [r3, #16]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	609a      	str	r2, [r3, #8]
 800a7e6:	e002      	b.n	800a7ee <PI_Controller+0xb2>
      }
      else
      {
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a3a      	ldr	r2, [r7, #32]
 800a7ec:	609a      	str	r2, [r3, #8]
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8b9b      	ldrh	r3, [r3, #28]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	fa43 f202 	asr.w	r2, r3, r2
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	8bc9      	ldrh	r1, [r1, #30]
 800a802:	410b      	asrs	r3, r1
 800a804:	4413      	add	r3, r2
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800a808:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	429a      	cmp	r2, r3
 800a810:	dd08      	ble.n	800a824 <PI_Controller+0xe8>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800a812:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	61fb      	str	r3, [r7, #28]
      wOutput_32 = hUpperOutputLimit;
 800a81c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
 800a822:	e00c      	b.n	800a83e <PI_Controller+0x102>
    }
    else if (wOutput_32 < hLowerOutputLimit)
 800a824:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82a:	429a      	cmp	r2, r3
 800a82c:	da07      	bge.n	800a83e <PI_Controller+0x102>
    {
      wDischarge = hLowerOutputLimit - wOutput_32;
 800a82e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	61fb      	str	r3, [r7, #28]
      wOutput_32 = hLowerOutputLimit;
 800a838:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	441a      	add	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	609a      	str	r2, [r3, #8]
    returnValue = (int16_t)wOutput_32;
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 800a84e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a852:	4618      	mov	r0, r3
 800a854:	372c      	adds	r7, #44	; 0x2c
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	80000001 	.word	0x80000001

0800a864 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	f107 0310 	add.w	r3, r7, #16
 800a874:	320c      	adds	r2, #12
 800a876:	6810      	ldr	r0, [r2, #0]
 800a878:	6018      	str	r0, [r3, #0]
    qd_t Vqd = pHandle->pFOCVars->Vqd;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	3216      	adds	r2, #22
 800a884:	6810      	ldr	r0, [r2, #0]
 800a886:	6018      	str	r0, [r3, #0]

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800a888:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a88c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a890:	fb03 f202 	mul.w	r2, r3, r2
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800a894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a898:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800a8a0:	4413      	add	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]
    wAux /= 65536;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da02      	bge.n	800a8b0 <PQD_CalcElMotorPower+0x4c>
 800a8aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a8ae:	33ff      	adds	r3, #255	; 0xff
 800a8b0:	141b      	asrs	r3, r3, #16
 800a8b2:	617b      	str	r3, [r7, #20]

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	1a5b      	subs	r3, r3, r1
 800a8c8:	111b      	asrs	r3, r3, #4
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	b21a      	sxth	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	801a      	strh	r2, [r3, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 800a8d6:	bf00      	nop
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <PQD_Clear>:
  * This function should be called before each motor start.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_Clear(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  float PowerW=0.0;
 800a904:	f04f 0300 	mov.w	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a910:	461c      	mov	r4, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fddc 	bl	80094d4 <VBS_GetAvBusVoltage_V>
 800a91c:	4603      	mov	r3, r0
 800a91e:	fb04 f303 	mul.w	r3, r4, r3
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a930:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a934:	edc7 7a03 	vstr	s15, [r7, #12]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	ee07 3a90 	vmov	s15, r3
}
 800a93e:	eeb0 0a67 	vmov.f32	s0, s15
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	bd90      	pop	{r4, r7, pc}

0800a948 <LL_TIM_SetTriggerOutput>:
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	605a      	str	r2, [r3, #4]
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <LL_TIM_ClearFlag_CC1>:
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f06f 0202 	mvn.w	r2, #2
 800a97c:	611a      	str	r2, [r3, #16]
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <LL_TIM_IsActiveFlag_CC1>:
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d101      	bne.n	800a9a2 <LL_TIM_IsActiveFlag_CC1+0x18>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e000      	b.n	800a9a4 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <LL_TIM_GenerateEvent_UPDATE>:
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f043 0201 	orr.w	r2, r3, #1
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	615a      	str	r2, [r3, #20]
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <LL_APB1_GRP1_EnableClock>:
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800a9d8:	4b08      	ldr	r3, [pc, #32]	; (800a9fc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a9da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9dc:	4907      	ldr	r1, [pc, #28]	; (800a9fc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <LL_APB1_GRP1_EnableClock+0x2c>)
 800a9e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	40023800 	.word	0x40023800

0800aa00 <LL_APB1_GRP1_IsEnabledClock>:
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800aa08:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800aa0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	bf0c      	ite	eq
 800aa16:	2301      	moveq	r3, #1
 800aa18:	2300      	movne	r3, #0
 800aa1a:	b2db      	uxtb	r3, r3
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	40023800 	.word	0x40023800

0800aa2c <LL_APB1_GRP1_DisableClock>:
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800aa34:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <LL_APB1_GRP1_DisableClock+0x24>)
 800aa36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	43db      	mvns	r3, r3
 800aa3c:	4904      	ldr	r1, [pc, #16]	; (800aa50 <LL_APB1_GRP1_DisableClock+0x24>)
 800aa3e:	4013      	ands	r3, r2
 800aa40:	640b      	str	r3, [r1, #64]	; 0x40
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40023800 	.word	0x40023800

0800aa54 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
 800aa5a:	2001      	movs	r0, #1
 800aa5c:	f7ff ffd0 	bl	800aa00 <LL_APB1_GRP1_IsEnabledClock>
 800aa60:	6078      	str	r0, [r7, #4]
  if ((uint32_t)0 == isTIM2ClockOn)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800aa68:	2001      	movs	r0, #1
 800aa6a:	f7ff ffb1 	bl	800a9d0 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 800aa6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800aa72:	f7ff ff9d 	bl	800a9b0 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f7ff ffd8 	bl	800aa2c <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800aa7c:	e013      	b.n	800aaa6 <startTimers+0x52>
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 800aa7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa88:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 800aa8a:	2120      	movs	r1, #32
 800aa8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800aa90:	f7ff ff5a 	bl	800a948 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 800aa94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800aa98:	f7ff ff8a 	bl	800a9b0 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800aaa2:	f7ff ff51 	bl	800a948 <LL_TIM_SetTriggerOutput>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	603b      	str	r3, [r7, #0]
 800aaba:	4613      	mov	r3, r2
 800aabc:	71fb      	strb	r3, [r7, #7]
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	3301      	adds	r3, #1
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	015b      	lsls	r3, r3, #5
 800aac8:	82bb      	strh	r3, [r7, #20]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff ff4f 	bl	800a96e <LL_TIM_ClearFlag_CC1>
    hCalibrationPeriodCounter = 0u;
 800aad0:	2300      	movs	r3, #0
 800aad2:	82fb      	strh	r3, [r7, #22]
    while (*cnt < NB_CONVERSIONS)
 800aad4:	e018      	b.n	800ab08 <waitForPolarizationEnd+0x5a>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff ff57 	bl	800a98a <LL_TIM_IsActiveFlag_CC1>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d112      	bne.n	800ab08 <waitForPolarizationEnd+0x5a>
      {
        LL_TIM_ClearFlag_CC1(TIMx);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff ff43 	bl	800a96e <LL_TIM_ClearFlag_CC1>
        hCalibrationPeriodCounter++;
 800aae8:	8afb      	ldrh	r3, [r7, #22]
 800aaea:	3301      	adds	r3, #1
 800aaec:	82fb      	strh	r3, [r7, #22]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800aaee:	8afa      	ldrh	r2, [r7, #22]
 800aaf0:	8abb      	ldrh	r3, [r7, #20]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d308      	bcc.n	800ab08 <waitForPolarizationEnd+0x5a>
        {
          if (*cnt < NB_CONVERSIONS)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b0f      	cmp	r3, #15
 800aafe:	d803      	bhi.n	800ab08 <waitForPolarizationEnd+0x5a>
          {
            *SWerror = 1u;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2201      	movs	r2, #1
 800ab04:	801a      	strh	r2, [r3, #0]
            break;
 800ab06:	e005      	b.n	800ab14 <waitForPolarizationEnd+0x66>
    while (*cnt < NB_CONVERSIONS)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	d9e1      	bls.n	800aad6 <waitForPolarizationEnd+0x28>
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <RVBS_Init>:
  * @brief  It initializes bus voltage conversion (ADC, ADC channel, conversion time.
    It must be called only after PWM_Init.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Init(RDivider_Handle_t *pHandle)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	330c      	adds	r3, #12
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fb fb45 	bl	80061b8 <RCM_RegisterRegConv>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Check */
    RVBS_Clear(pHandle);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f804 	bl	800ab46 <RVBS_Clear>
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8b5b      	ldrh	r3, [r3, #26]
 800ab52:	461a      	mov	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8c1b      	ldrh	r3, [r3, #32]
 800ab58:	4413      	add	r3, r2
 800ab5a:	085b      	lsrs	r3, r3, #1
 800ab5c:	81bb      	strh	r3, [r7, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ab5e:	2300      	movs	r3, #0
 800ab60:	81fb      	strh	r3, [r7, #14]
 800ab62:	e009      	b.n	800ab78 <RVBS_Clear+0x32>
    {
      pHandle->aBuffer[index] = aux;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	4413      	add	r3, r2
 800ab6e:	89ba      	ldrh	r2, [r7, #12]
 800ab70:	801a      	strh	r2, [r3, #0]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ab72:	89fb      	ldrh	r3, [r7, #14]
 800ab74:	3301      	adds	r3, #1
 800ab76:	81fb      	strh	r3, [r7, #14]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8b1b      	ldrh	r3, [r3, #24]
 800ab7c:	89fa      	ldrh	r2, [r7, #14]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d3f0      	bcc.n	800ab64 <RVBS_Clear+0x1e>
    }
    pHandle->_Super.LatestConv = aux;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	89ba      	ldrh	r2, [r7, #12]
 800ab86:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	89ba      	ldrh	r2, [r7, #12]
 800ab8c:	80da      	strh	r2, [r3, #6]
    pHandle->index = 0U;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <RVBS_CalcAvVbus>:
  *         value for all STM32 families except STM32F3 in u16Volt format
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbus(RDivider_Handle_t *pHandle)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
#endif
    uint32_t wtemp;
    uint16_t hAux;
    uint8_t i;

    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fb fb99 	bl	80062e8 <RCM_ExecRegularConv>
 800abb6:	4603      	mov	r3, r0
 800abb8:	823b      	strh	r3, [r7, #16]

    if (0xFFFFU == hAux)
 800abba:	8a3b      	ldrh	r3, [r7, #16]
 800abbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d044      	beq.n	800ac4e <RVBS_CalcAvVbus+0xac>
      /* Nothing to do */
    }
    else
    {
      /* Store latest value on buffer */
      pHandle->aBuffer[pHandle->index] = hAux;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	8a3a      	ldrh	r2, [r7, #16]
 800abd4:	801a      	strh	r2, [r3, #0]
      wtemp = 0u;
 800abd6:	2300      	movs	r3, #0
 800abd8:	617b      	str	r3, [r7, #20]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800abda:	2300      	movs	r3, #0
 800abdc:	74fb      	strb	r3, [r7, #19]
 800abde:	e00c      	b.n	800abfa <RVBS_CalcAvVbus+0x58>
      {
        wtemp += pHandle->aBuffer[i];
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe4:	7cfb      	ldrb	r3, [r7, #19]
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	4413      	add	r3, r2
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800abf4:	7cfb      	ldrb	r3, [r7, #19]
 800abf6:	3301      	adds	r3, #1
 800abf8:	74fb      	strb	r3, [r7, #19]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	8b1b      	ldrh	r3, [r3, #24]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	7cfa      	ldrb	r2, [r7, #19]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3ec      	bcc.n	800abe0 <RVBS_CalcAvVbus+0x3e>
      }
      wtemp /= pHandle->LowPassFilterBW;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	8b1b      	ldrh	r3, [r3, #24]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac12:	617b      	str	r3, [r7, #20]
      /* Averaging done over the buffer stored values */
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	80da      	strh	r2, [r3, #6]
      pHandle->_Super.LatestConv = hAux;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8a3a      	ldrh	r2, [r7, #16]
 800ac20:	809a      	strh	r2, [r3, #4]

      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ac28:	461a      	mov	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	8b1b      	ldrh	r3, [r3, #24]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d208      	bcs.n	800ac46 <RVBS_CalcAvVbus+0xa4>
      {
        pHandle->index++;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800ac44:	e003      	b.n	800ac4e <RVBS_CalcAvVbus+0xac>
      }
      else
      {
        pHandle->index = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }

    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f80c 	bl	800ac6c <RVBS_CheckFaultState>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	811a      	strh	r2, [r3, #8]
    tempValue = pHandle->_Super.FaultState;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	891b      	ldrh	r3, [r3, #8]
 800ac60:	81fb      	strh	r3, [r7, #14]
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (tempValue);
 800ac62:	89fb      	ldrh	r3, [r7, #14]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	8b5a      	ldrh	r2, [r3, #26]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	8b9b      	ldrh	r3, [r3, #28]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d114      	bne.n	800acaa <RVBS_CheckFaultState+0x3e>
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	88da      	ldrh	r2, [r3, #6]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8b5b      	ldrh	r3, [r3, #26]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d902      	bls.n	800ac92 <RVBS_CheckFaultState+0x26>
      {
        fault = MC_OVER_VOLT;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	81fb      	strh	r3, [r7, #14]
 800ac90:	e038      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
      }
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	88da      	ldrh	r2, [r3, #6]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8c1b      	ldrh	r3, [r3, #32]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d202      	bcs.n	800aca4 <RVBS_CheckFaultState+0x38>
      {
        fault = MC_UNDER_VOLT;
 800ac9e:	2304      	movs	r3, #4
 800aca0:	81fb      	strh	r3, [r7, #14]
 800aca2:	e02f      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
      }
      else
      {
        fault = MC_NO_ERROR;
 800aca4:	2300      	movs	r3, #0
 800aca6:	81fb      	strh	r3, [r7, #14]
 800aca8:	e02c      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	88da      	ldrh	r2, [r3, #6]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	8c1b      	ldrh	r3, [r3, #32]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d202      	bcs.n	800acbc <RVBS_CheckFaultState+0x50>
      {
        fault = MC_UNDER_VOLT;
 800acb6:	2304      	movs	r3, #4
 800acb8:	81fb      	strh	r3, [r7, #14]
 800acba:	e023      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7f9b      	ldrb	r3, [r3, #30]
 800acc0:	f083 0301 	eor.w	r3, r3, #1
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00e      	beq.n	800ace8 <RVBS_CheckFaultState+0x7c>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	88da      	ldrh	r2, [r3, #6]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8b9b      	ldrh	r3, [r3, #28]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d205      	bcs.n	800ace2 <RVBS_CheckFaultState+0x76>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	779a      	strb	r2, [r3, #30]
          fault = MC_NO_ERROR;
 800acdc:	2300      	movs	r3, #0
 800acde:	81fb      	strh	r3, [r7, #14]
 800ace0:	e010      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
        }
        else{
          fault = MC_OVER_VOLT;
 800ace2:	2302      	movs	r3, #2
 800ace4:	81fb      	strh	r3, [r7, #14]
 800ace6:	e00d      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	88da      	ldrh	r2, [r3, #6]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	8b5b      	ldrh	r3, [r3, #26]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d905      	bls.n	800ad00 <RVBS_CheckFaultState+0x94>
        {
          pHandle->OverVoltageHysteresisUpDir = false;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	779a      	strb	r2, [r3, #30]
          fault = MC_OVER_VOLT;
 800acfa:	2302      	movs	r3, #2
 800acfc:	81fb      	strh	r3, [r7, #14]
 800acfe:	e001      	b.n	800ad04 <RVBS_CheckFaultState+0x98>
        }
        else{
          fault = MC_NO_ERROR;
 800ad00:	2300      	movs	r3, #0
 800ad02:	81fb      	strh	r3, [r7, #14]
      }
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
 800ad04:	89fb      	ldrh	r3, [r7, #14]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init(RampExtMngr_Handle_t *pHandle)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	609a      	str	r2, [r3, #8]
    pHandle->TargetFinal = 0;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	605a      	str	r2, [r3, #4]
    pHandle->RampRemainingStep = 0U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	611a      	str	r2, [r3, #16]
    pHandle->ScalingFactor = 1U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	615a      	str	r2, [r3, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc(RampExtMngr_Handle_t *pHandle)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	60fb      	str	r3, [r7, #12]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d90a      	bls.n	800ad70 <REMNG_Calc+0x2c>
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4413      	add	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	1e5a      	subs	r2, r3, #1
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	e00d      	b.n	800ad8c <REMNG_Calc+0x48>
    }
    else if (1U == pHandle->RampRemainingStep)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d109      	bne.n	800ad8c <REMNG_Calc+0x48>
    {
      /* Set the backup value of TargetFinal. */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6952      	ldr	r2, [r2, #20]
 800ad80:	fb02 f303 	mul.w	r3, r2, r3
 800ad84:	60fb      	str	r3, [r7, #12]
      pHandle->RampRemainingStep = 0U;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	60da      	str	r2, [r3, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	609a      	str	r2, [r3, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6952      	ldr	r2, [r2, #20]
 800ad9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad9e:	60bb      	str	r3, [r7, #8]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
 800ada0:	68bb      	ldr	r3, [r7, #8]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
	...

0800adb0 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp(RampExtMngr_Handle_t *pHandle, int32_t TargetFinal, uint32_t Durationms)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08c      	sub	sp, #48	; 0x30
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  bool retVal = true;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int32_t aux1;
    int32_t current_ref;


    /* Get current state */
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	6952      	ldr	r2, [r2, #20]
 800adca:	fb93 f3f2 	sdiv	r3, r3, r2
 800adce:	627b      	str	r3, [r7, #36]	; 0x24

    if (0U == Durationms)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d114      	bne.n	800ae00 <REMNG_ExecRamp+0x50>
    {
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800add6:	68b8      	ldr	r0, [r7, #8]
 800add8:	f000 f887 	bl	800aeea <getScalingFactor>
 800addc:	4602      	mov	r2, r0
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	615a      	str	r2, [r3, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	461a      	mov	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	fb03 f202 	mul.w	r2, r3, r2
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	609a      	str	r2, [r3, #8]
      pHandle->RampRemainingStep = 0U;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	611a      	str	r2, [r3, #16]
 800adfe:	e059      	b.n	800aeb4 <REMNG_ExecRamp+0x104>
    }
    else
    {
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 f86f 	bl	800aeea <getScalingFactor>
 800ae0c:	6238      	str	r0, [r7, #32]
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800ae0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae10:	f000 f86b 	bl	800aeea <getScalingFactor>
 800ae14:	61f8      	str	r0, [r7, #28]
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800ae16:	68b8      	ldr	r0, [r7, #8]
 800ae18:	f000 f867 	bl	800aeea <getScalingFactor>
 800ae1c:	61b8      	str	r0, [r7, #24]
      uint32_t wScalingFactorMin;

      if (wScalingFactor <  wScalingFactor2)
 800ae1e:	6a3a      	ldr	r2, [r7, #32]
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d209      	bcs.n	800ae3a <REMNG_ExecRamp+0x8a>
      {
        if (wScalingFactor < wScalingFactor3)
 800ae26:	6a3a      	ldr	r2, [r7, #32]
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d202      	bcs.n	800ae34 <REMNG_ExecRamp+0x84>
        {
          wScalingFactorMin = wScalingFactor;
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae32:	e00b      	b.n	800ae4c <REMNG_ExecRamp+0x9c>
        }
        else
        {
          wScalingFactorMin = wScalingFactor3;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae38:	e008      	b.n	800ae4c <REMNG_ExecRamp+0x9c>
        }
      }
      else
      {
        if (wScalingFactor2 < wScalingFactor3)
 800ae3a:	69fa      	ldr	r2, [r7, #28]
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d202      	bcs.n	800ae48 <REMNG_ExecRamp+0x98>
        {
          wScalingFactorMin = wScalingFactor2;
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae46:	e001      	b.n	800ae4c <REMNG_ExecRamp+0x9c>
        }
        else
        {
          wScalingFactorMin = wScalingFactor3;
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }

      pHandle->ScalingFactor = wScalingFactorMin;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae50:	615a      	str	r2, [r3, #20]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	fb03 f202 	mul.w	r2, r3, r2
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	609a      	str	r2, [r3, #8]

      /* Store the TargetFinal to be applied in the last step */
      pHandle->TargetFinal = TargetFinal;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	605a      	str	r2, [r3, #4]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	617b      	str	r3, [r7, #20]
      aux /= 1000U;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4a12      	ldr	r2, [pc, #72]	; (800aec0 <REMNG_ExecRamp+0x110>)
 800ae78:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7c:	099b      	lsrs	r3, r3, #6
 800ae7e:	617b      	str	r3, [r7, #20]
      pHandle->RampRemainingStep = aux;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	6952      	ldr	r2, [r2, #20]
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	613b      	str	r3, [r7, #16]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	461a      	mov	r2, r3
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeac:	613b      	str	r3, [r7, #16]
      pHandle->IncDecAmount = aux1;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	611a      	str	r2, [r3, #16]
    }
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return retVal;
 800aeb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3730      	adds	r7, #48	; 0x30
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	10624dd3 	.word	0x10624dd3

0800aec4 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted(const RampExtMngr_Handle_t *pHandle)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <REMNG_RampCompleted+0x18>
    {
      retVal = true;
 800aed8:	2301      	movs	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]
      /* nothing to do */
    }
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);
 800aedc:	7bfb      	ldrb	r3, [r7, #15]

}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor(int32_t Target)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b087      	sub	sp, #28
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  uint32_t TargetAbs;
  int32_t aux;
  uint8_t i;

  if (Target < 0)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	da05      	bge.n	800af04 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	425b      	negs	r3, r3
 800aefc:	60fb      	str	r3, [r7, #12]
    TargetAbs = (uint32_t)aux;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e001      	b.n	800af08 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = (uint32_t)Target;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	617b      	str	r3, [r7, #20]
  }
  for (i = 1U; i < 32U; i++)
 800af08:	2301      	movs	r3, #1
 800af0a:	74fb      	strb	r3, [r7, #19]
 800af0c:	e00c      	b.n	800af28 <getScalingFactor+0x3e>
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800af0e:	7cfb      	ldrb	r3, [r7, #19]
 800af10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af14:	fa22 f303 	lsr.w	r3, r2, r3
 800af18:	60bb      	str	r3, [r7, #8]
    if (TargetAbs >= limit)
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d206      	bcs.n	800af30 <getScalingFactor+0x46>
  for (i = 1U; i < 32U; i++)
 800af22:	7cfb      	ldrb	r3, [r7, #19]
 800af24:	3301      	adds	r3, #1
 800af26:	74fb      	strb	r3, [r7, #19]
 800af28:	7cfb      	ldrb	r3, [r7, #19]
 800af2a:	2b1f      	cmp	r3, #31
 800af2c:	d9ef      	bls.n	800af0e <getScalingFactor+0x24>
 800af2e:	e000      	b.n	800af32 <getScalingFactor+0x48>
    {
      break;
 800af30:	bf00      	nop
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800af32:	7cfb      	ldrb	r3, [r7, #19]
 800af34:	3b01      	subs	r3, #1
 800af36:	2201      	movs	r2, #1
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	330c      	adds	r3, #12
 800af5a:	617b      	str	r3, [r7, #20]
    uint8_t bPhase = 0U;
 800af5c:	2300      	movs	r3, #0
 800af5e:	74fb      	strb	r3, [r7, #19]

    pHandle->pSTC = pSTC;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	669a      	str	r2, [r3, #104]	; 0x68
    pHandle->pVSS = pVSS;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	66da      	str	r2, [r3, #108]	; 0x6c
    pHandle->pSNSL = pSNSL;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->pPWM = pPWM;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6a3a      	ldr	r2, [r7, #32]
 800af76:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    pHandle->EnteredZone1 = false;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af88:	e005      	b.n	800af96 <RUC_Init+0x4e>
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	617b      	str	r3, [r7, #20]
      bPhase++;
 800af90:	7cfb      	ldrb	r3, [r7, #19]
 800af92:	3301      	adds	r3, #1
 800af94:	74fb      	strb	r3, [r7, #19]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <RUC_Init+0x5a>
 800af9c:	7cfb      	ldrb	r3, [r7, #19]
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	d9f3      	bls.n	800af8a <RUC_Init+0x42>
    }

    if (0U == bPhase)
 800afa2:	7cfb      	ldrb	r3, [r7, #19]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01c      	beq.n	800afe2 <RUC_Init+0x9a>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800afa8:	7cfb      	ldrb	r3, [r7, #19]
 800afaa:	1e5a      	subs	r2, r3, #1
 800afac:	68f9      	ldr	r1, [r7, #12]
 800afae:	4613      	mov	r3, r2
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3314      	adds	r3, #20
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]

      pHandle->bPhaseNbr = bPhase;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	7cfa      	ldrb	r2, [r7, #19]
 800afc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	2364      	movs	r3, #100	; 0x64
 800afce:	fb02 f303 	mul.w	r3, r2, r3
 800afd2:	4a07      	ldr	r2, [pc, #28]	; (800aff0 <RUC_Init+0xa8>)
 800afd4:	fba2 2303 	umull	r2, r3, r2, r3
 800afd8:	099b      	lsrs	r3, r3, #6
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	10624dd3 	.word	0x10624dd3

0800aff4 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b004:	617b      	str	r3, [r7, #20]
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b00a:	613b      	str	r3, [r7, #16]
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	330c      	adds	r3, #12
 800b010:	60fb      	str	r3, [r7, #12]

    pHandle->hDirection = hMotorDirection;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	887a      	ldrh	r2, [r7, #2]
 800b016:	80da      	strh	r2, [r3, #6]
    pHandle->EnteredZone1 = false;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 800b038:	6978      	ldr	r0, [r7, #20]
 800b03a:	f001 fac6 	bl	800c5ca <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800b03e:	2104      	movs	r1, #4
 800b040:	6938      	ldr	r0, [r7, #16]
 800b042:	f000 f9e3 	bl	800b40c <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	887b      	ldrh	r3, [r7, #2]
 800b050:	fb12 f303 	smulbb	r3, r2, r3
 800b054:	b29b      	uxth	r3, r3
 800b056:	b21b      	sxth	r3, r3
 800b058:	4619      	mov	r1, r3
 800b05a:	6978      	ldr	r0, [r7, #20]
 800b05c:	f001 fc39 	bl	800c8d2 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800b060:	2200      	movs	r2, #0
 800b062:	2100      	movs	r1, #0
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f000 f9e7 	bl	800b438 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b070:	b29a      	uxth	r2, r3
 800b072:	887b      	ldrh	r3, [r7, #2]
 800b074:	fb12 f303 	smulbb	r3, r2, r3
 800b078:	b29b      	uxth	r3, r3
 800b07a:	b219      	sxth	r1, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f000 f9d8 	bl	800b438 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b08e:	b29a      	uxth	r2, r3
 800b090:	887b      	ldrh	r3, [r7, #2]
 800b092:	fb12 f303 	smulbb	r3, r2, r3
 800b096:	b29b      	uxth	r3, r3
 800b098:	b219      	sxth	r1, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6978      	ldr	r0, [r7, #20]
 800b0a2:	f001 fc33 	bl	800c90c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
                                              / 1000U );
 800b0b4:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <RUC_Clear+0xf4>)
 800b0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ba:	099b      	lsrs	r3, r3, #6
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	809a      	strh	r2, [r3, #4]

    pHandle->hPhaseRemainingTicks++;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	889b      	ldrh	r3, [r3, #4]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	809a      	strh	r2, [r3, #4]

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	609a      	str	r2, [r3, #8]

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800b0de:	bf00      	nop
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	10624dd3 	.word	0x10624dd3

0800b0ec <RUC_Exec>:
  * @brief  FOC Main Rev-Up controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	889b      	ldrh	r3, [r3, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <RUC_Exec+0x20>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	889b      	ldrh	r3, [r3, #4]
 800b104:	3b01      	subs	r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	809a      	strh	r2, [r3, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	889b      	ldrh	r3, [r3, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d152      	bne.n	800b1ba <RUC_Exec+0xce>
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d04c      	beq.n	800b1b6 <RUC_Exec+0xca>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b130:	b29b      	uxth	r3, r3
 800b132:	fb12 f303 	smulbb	r3, r2, r3
 800b136:	b29b      	uxth	r3, r3
 800b138:	b219      	sxth	r1, r3
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	881b      	ldrh	r3, [r3, #0]
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800b140:	461a      	mov	r2, r3
 800b142:	f000 f979 	bl	800b438 <STC_ExecRamp>

        VSS_SetMecAcceleration(pHandle->pVSS,
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	fb12 f303 	smulbb	r3, r2, r3
 800b160:	b29b      	uxth	r3, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b162:	b219      	sxth	r1, r3
                               pHandle->pCurrentPhaseParams->hDurationms);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f001 fbce 	bl	800c90c <VSS_SetMecAcceleration>

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	4a10      	ldr	r2, [pc, #64]	; (800b1c4 <RUC_Exec+0xd8>)
 800b182:	fba2 2303 	umull	r2, r3, r2, r3
 800b186:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	809a      	strh	r2, [r3, #4]
        pHandle->hPhaseRemainingTicks++;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	889b      	ldrh	r3, [r3, #4]
 800b192:	3301      	adds	r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	809a      	strh	r2, [r3, #4]

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	689a      	ldr	r2, [r3, #8]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	609a      	str	r2, [r3, #8]

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800b1b4:	e001      	b.n	800b1ba <RUC_Exec+0xce>
      }
      else
      {
        retVal = false;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
      }
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	10624dd3 	.word	0x10624dd3

0800b1c8 <RUC_FirstAccelerationStageReached>:
  * @brief  Check that alignment and first acceleration stage are completed.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to true when first acceleration stage has been reached.
  */
__weak bool RUC_FirstAccelerationStageReached(RevUpCtrl_Handle_t *pHandle)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d301      	bcc.n	800b1e8 <RUC_FirstAccelerationStageReached+0x20>
    {
      retVal = true;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	73fb      	strb	r3, [r7, #15]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <RUC_SetPhase>:
  *         		This parameter must be a number between 0 and 6.
  *        		- New duration value required for associated phase in ms unit.
  *  @retval Boolean set to true
  */
__weak bool RUC_SetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b087      	sub	sp, #28
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	460b      	mov	r3, r1
 800b200:	607a      	str	r2, [r7, #4]
 800b202:	72fb      	strb	r3, [r7, #11]
  bool retValue = true;
 800b204:	2301      	movs	r3, #1
 800b206:	75fb      	strb	r3, [r7, #23]
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800b208:	7afa      	ldrb	r2, [r7, #11]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800b210:	68f9      	ldr	r1, [r7, #12]
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	440b      	add	r3, r1
 800b21c:	3310      	adds	r3, #16
 800b21e:	4602      	mov	r2, r0
 800b220:	801a      	strh	r2, [r3, #0]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800b222:	7afa      	ldrb	r2, [r7, #11]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	4613      	mov	r3, r2
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	330e      	adds	r3, #14
 800b238:	4602      	mov	r2, r0
 800b23a:	801a      	strh	r2, [r3, #0]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800b23c:	7afa      	ldrb	r2, [r7, #11]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	8818      	ldrh	r0, [r3, #0]
 800b242:	68f9      	ldr	r1, [r7, #12]
 800b244:	4613      	mov	r3, r2
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	440b      	add	r3, r1
 800b24e:	330c      	adds	r3, #12
 800b250:	4602      	mov	r2, r0
 800b252:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
 800b254:	7dfb      	ldrb	r3, [r7, #23]
}
 800b256:	4618      	mov	r0, r3
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed Rev-Up.
  *
  */

__weak uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
#endif
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <RUC_GetPhase>:
  *         		This parameter must be a number between 0 and 6.
  *        		- Duration set in selected phase in ms unit.
  *  @retval Returns Boolean set to true value.
  */
__weak bool RUC_GetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	460b      	mov	r3, r1
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	72fb      	strb	r3, [r7, #11]
  bool retValue = true;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 800b28e:	7afa      	ldrb	r2, [r7, #11]
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	4613      	mov	r3, r2
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	3310      	adds	r3, #16
 800b29e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	809a      	strh	r2, [r3, #4]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 800b2a6:	7afa      	ldrb	r2, [r7, #11]
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	440b      	add	r3, r1
 800b2b4:	330e      	adds	r3, #14
 800b2b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	805a      	strh	r2, [r3, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800b2be:	7afa      	ldrb	r2, [r7, #11]
 800b2c0:	68f9      	ldr	r1, [r7, #12]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	440b      	add	r3, r1
 800b2cc:	330c      	adds	r3, #12
 800b2ce:	881a      	ldrh	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <STC_Init>:
  * @param  pPI the PI object used as controller for the speed regulation.
  * @param  SPD_Handle the speed sensor used to perform the speed regulation.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]

  if (MC_NULL == pHandle)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d01e      	beq.n	800b332 <STC_Init+0x50>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->PISpeed = pPI;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	611a      	str	r2, [r3, #16]
    pHandle->SPD = SPD_Handle;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	615a      	str	r2, [r3, #20]
    pHandle->Mode = pHandle->ModeDefault;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	701a      	strb	r2, [r3, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800b310:	041a      	lsls	r2, r3, #16
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	605a      	str	r2, [r3, #4]
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b31a:	041a      	lsls	r2, r3, #16
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	609a      	str	r2, [r3, #8]
    pHandle->TargetFinal = 0;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	805a      	strh	r2, [r3, #2]
    pHandle->RampRemainingStep = 0U;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	619a      	str	r2, [r3, #24]
  }
}
 800b332:	bf00      	nop
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  if (MC_NULL == pHandle)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <STC_SetSpeedSensor+0x16>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	615a      	str	r2, [r3, #20]
  }
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <STC_GetSpeedSensor+0x14>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	e000      	b.n	800b376 <STC_GetSpeedSensor+0x16>
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b082      	sub	sp, #8
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <STC_Clear+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b03      	cmp	r3, #3
 800b396:	d105      	bne.n	800b3a4 <STC_Clear+0x22>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2100      	movs	r1, #0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f903 	bl	800a5aa <PID_SetIntegralTerm>
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3a8:	041a      	lsls	r2, r3, #16
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	609a      	str	r2, [r3, #8]
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference.
  *         Expressed in the unit defined by SPEED_UNIT.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d009      	beq.n	800b3d8 <STC_GetMecSpeedRefUnit+0x22>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da02      	bge.n	800b3d2 <STC_GetMecSpeedRefUnit+0x1c>
 800b3cc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b3d0:	33ff      	adds	r3, #255	; 0xff
 800b3d2:	141b      	asrs	r3, r3, #16
 800b3d4:	b21b      	sxth	r3, r3
 800b3d6:	e000      	b.n	800b3da <STC_GetMecSpeedRefUnit+0x24>
 800b3d8:	2300      	movs	r3, #0
#endif
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <STC_GetDutyCycleRef>:
  *         actually the dutycycle reference expressed in digit.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval uint16_t current dutycycle reference. This value is actually expressed in digit.
  */
__weak uint16_t STC_GetDutyCycleRef(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d004      	beq.n	800b3fe <STC_GetDutyCycleRef+0x18>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	0c1b      	lsrs	r3, r3, #16
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	e000      	b.n	800b400 <STC_GetDutyCycleRef+0x1a>
 800b3fe:	2300      	movs	r3, #0
#endif
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <STC_SetControlMode>:
  *         MCM_TORQUE_MODE to enable the Torque mode or MCM_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  if (MC_NULL == pHandle)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <STC_SetControlMode+0x1e>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	701a      	strb	r2, [r3, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	60da      	str	r2, [r3, #12]
  }
}
 800b42a:	bf00      	nop
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
	...

0800b438 <STC_ExecRamp>:
  *         the boundary of the application (Above max application speed or below min  
  *         application speed in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	460b      	mov	r3, r1
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	817b      	strh	r3, [r7, #10]
  bool allowedRange = true;
 800b446:	2301      	movs	r3, #1
 800b448:	77fb      	strb	r3, [r7, #31]

  if (MC_NULL == pHandle)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d102      	bne.n	800b456 <STC_ExecRamp+0x1e>
  {
    allowedRange = false;
 800b450:	2300      	movs	r3, #0
 800b452:	77fb      	strb	r3, [r7, #31]
 800b454:	e082      	b.n	800b55c <STC_ExecRamp+0x124>
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	d10d      	bne.n	800b47a <STC_ExecRamp+0x42>
    {
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7ff ffc1 	bl	800b3e6 <STC_GetDutyCycleRef>
 800b464:	4603      	mov	r3, r0
 800b466:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 800b468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b470:	4293      	cmp	r3, r2
 800b472:	dd2d      	ble.n	800b4d0 <STC_ExecRamp+0x98>
      {
        allowedRange = false;
 800b474:	2300      	movs	r3, #0
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e02a      	b.n	800b4d0 <STC_ExecRamp+0x98>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da02      	bge.n	800b488 <STC_ExecRamp+0x50>
 800b482:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b486:	33ff      	adds	r3, #255	; 0xff
 800b488:	141b      	asrs	r3, r3, #16
 800b48a:	83bb      	strh	r3, [r7, #28]
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800b48c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	8bd2      	ldrh	r2, [r2, #30]
 800b494:	4293      	cmp	r3, r2
 800b496:	dd02      	ble.n	800b49e <STC_ExecRamp+0x66>
      {
        allowedRange = false;
 800b498:	2300      	movs	r3, #0
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e018      	b.n	800b4d0 <STC_ExecRamp+0x98>
      }
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800b4a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	da02      	bge.n	800b4b2 <STC_ExecRamp+0x7a>
      {
        allowedRange = false;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	77fb      	strb	r3, [r7, #31]
 800b4b0:	e00e      	b.n	800b4d0 <STC_ExecRamp+0x98>
      }
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800b4b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	8c12      	ldrh	r2, [r2, #32]
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	da08      	bge.n	800b4d0 <STC_ExecRamp+0x98>
      {
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b4c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	dd01      	ble.n	800b4d0 <STC_ExecRamp+0x98>
        {
          allowedRange = false;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	77fb      	strb	r3, [r7, #31]
        /* Nothing to do */
      }
#endif
    }

    if (true == allowedRange)
 800b4d0:	7ffb      	ldrb	r3, [r7, #31]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d042      	beq.n	800b55c <STC_ExecRamp+0x124>
    {
      /* Interrupts the execution of any previous ramp command */
      if (0U == hDurationms)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d116      	bne.n	800b50a <STC_ExecRamp+0xd2>
      {
        if (MCM_SPEED_MODE == pHandle->Mode)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d105      	bne.n	800b4f0 <STC_ExecRamp+0xb8>
        {
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800b4e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4e8:	041a      	lsls	r2, r3, #16
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	605a      	str	r2, [r3, #4]
 800b4ee:	e005      	b.n	800b4fc <STC_ExecRamp+0xc4>
        }
        else
        {
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 800b4f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4f4:	041b      	lsls	r3, r3, #16
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	609a      	str	r2, [r3, #8]
        }
        pHandle->RampRemainingStep = 0U;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = 0;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	619a      	str	r2, [r3, #24]
 800b508:	e028      	b.n	800b55c <STC_ExecRamp+0x124>
      }
      else
      {
        /* Store the hTargetFinal to be applied in the last step */
        pHandle->TargetFinal = hTargetFinal;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	897a      	ldrh	r2, [r7, #10]
 800b50e:	805a      	strh	r2, [r3, #2]

        /* Compute the (wRampRemainingStep) number of steps remaining to complete
        the ramp. */
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8b9b      	ldrh	r3, [r3, #28]
 800b514:	461a      	mov	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	fb02 f303 	mul.w	r3, r2, r3
 800b51c:	61bb      	str	r3, [r7, #24]
        wAux /= 1000U;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	4a11      	ldr	r2, [pc, #68]	; (800b568 <STC_ExecRamp+0x130>)
 800b522:	fba2 2303 	umull	r2, r3, r2, r3
 800b526:	099b      	lsrs	r3, r3, #6
 800b528:	61bb      	str	r3, [r7, #24]
        pHandle->RampRemainingStep = wAux;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	60da      	str	r2, [r3, #12]
        pHandle->RampRemainingStep++;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	60da      	str	r2, [r3, #12]

        /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
        the reference value at each CalcSpeedReference. */
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800b53a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b53e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	041b      	lsls	r3, r3, #16
 800b546:	617b      	str	r3, [r7, #20]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	461a      	mov	r2, r3
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	fb93 f3f2 	sdiv	r3, r3, r2
 800b554:	617b      	str	r3, [r7, #20]
        pHandle->IncDecAmount = wAux1;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	619a      	str	r2, [r3, #24]
      }
    }
  }
  return (allowedRange);
 800b55c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3720      	adds	r7, #32
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	10624dd3 	.word	0x10624dd3

0800b56c <STC_StopRamp>:
  *         The last value of mechanical rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <STC_StopRamp+0x1a>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	619a      	str	r2, [r3, #24]
  }
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  if (MC_NULL == pHandle)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <STC_ForceSpeedReferenceToCurrentSpeed+0x20>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f815 	bl	800b5d4 <SPD_GetAvrgMecSpeedUnit>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	041a      	lsls	r2, r3, #16
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	605a      	str	r2, [r3, #4]
  }
}
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360�/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
#endif
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
#endif
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <SPD_GetElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical speed (Dpp)
  */
__weak int16_t SPD_GetElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
#endif
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
#endif
}
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 800b622:	b480      	push	{r7}
 800b624:	b087      	sub	sp, #28
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800b62c:	2301      	movs	r3, #1
 800b62e:	75fb      	strb	r3, [r7, #23]
#endif
    uint16_t hAbsMecSpeedUnit;
    uint16_t hAbsMecAccelUnitP;
    int16_t hAux;
    uint8_t bSpeedErrorNumber;
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	78db      	ldrb	r3, [r3, #3]
 800b634:	73fb      	strb	r3, [r7, #15]
    bool SpeedError = false;
 800b636:	2300      	movs	r3, #0
 800b638:	743b      	strb	r3, [r7, #16]

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	747b      	strb	r3, [r7, #17]

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b646:	2b00      	cmp	r3, #0
 800b648:	da09      	bge.n	800b65e <SPD_IsMecSpeedReliable+0x3c>
    {
      hAux = -(*pMecSpeedUnit);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b650:	b29b      	uxth	r3, r3
 800b652:	425b      	negs	r3, r3
 800b654:	b29b      	uxth	r3, r3
 800b656:	81bb      	strh	r3, [r7, #12]
      hAbsMecSpeedUnit = (uint16_t)hAux;
 800b658:	89bb      	ldrh	r3, [r7, #12]
 800b65a:	82bb      	strh	r3, [r7, #20]
 800b65c:	e003      	b.n	800b666 <SPD_IsMecSpeedReliable+0x44>
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b664:	82bb      	strh	r3, [r7, #20]
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	8a9b      	ldrh	r3, [r3, #20]
 800b66a:	8aba      	ldrh	r2, [r7, #20]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d901      	bls.n	800b674 <SPD_IsMecSpeedReliable+0x52>
    {
      SpeedError = true;
 800b670:	2301      	movs	r3, #1
 800b672:	743b      	strb	r3, [r7, #16]
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8adb      	ldrh	r3, [r3, #22]
 800b678:	8aba      	ldrh	r2, [r7, #20]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d201      	bcs.n	800b682 <SPD_IsMecSpeedReliable+0x60>
    {
      SpeedError = true;
 800b67e:	2301      	movs	r3, #1
 800b680:	743b      	strb	r3, [r7, #16]
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	da09      	bge.n	800b6a0 <SPD_IsMecSpeedReliable+0x7e>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b692:	b29b      	uxth	r3, r3
 800b694:	425b      	negs	r3, r3
 800b696:	b29b      	uxth	r3, r3
 800b698:	81bb      	strh	r3, [r7, #12]
      hAbsMecAccelUnitP = (uint16_t)hAux;
 800b69a:	89bb      	ldrh	r3, [r7, #12]
 800b69c:	827b      	strh	r3, [r7, #18]
 800b69e:	e003      	b.n	800b6a8 <SPD_IsMecSpeedReliable+0x86>
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b6a6:	827b      	strh	r3, [r7, #18]
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8b1b      	ldrh	r3, [r3, #24]
 800b6ac:	8a7a      	ldrh	r2, [r7, #18]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d901      	bls.n	800b6b6 <SPD_IsMecSpeedReliable+0x94>
    {
      SpeedError = true;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	743b      	strb	r3, [r7, #16]
    }

    if (true == SpeedError)
 800b6b6:	7c3b      	ldrb	r3, [r7, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <SPD_IsMecSpeedReliable+0xaa>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b6bc:	7c7a      	ldrb	r2, [r7, #17]
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d209      	bcs.n	800b6d8 <SPD_IsMecSpeedReliable+0xb6>
      {
        bSpeedErrorNumber++;
 800b6c4:	7c7b      	ldrb	r3, [r7, #17]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	747b      	strb	r3, [r7, #17]
 800b6ca:	e005      	b.n	800b6d8 <SPD_IsMecSpeedReliable+0xb6>
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b6cc:	7c7a      	ldrb	r2, [r7, #17]
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d201      	bcs.n	800b6d8 <SPD_IsMecSpeedReliable+0xb6>
      {
        bSpeedErrorNumber = 0u;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	747b      	strb	r3, [r7, #17]
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b6d8:	7c7a      	ldrb	r2, [r7, #17]
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d101      	bne.n	800b6e4 <SPD_IsMecSpeedReliable+0xc2>
    {
      SpeedSensorReliability = false;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7c7a      	ldrb	r2, [r7, #17]
 800b6e8:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	371c      	adds	r7, #28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b706:	60fb      	str	r3, [r7, #12]
    wAux *= INT16_MAX;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4613      	mov	r3, r2
 800b70c:	03db      	lsls	r3, r3, #15
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	60fb      	str	r3, [r7, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8a9b      	ldrh	r3, [r3, #20]
 800b716:	b21b      	sxth	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b720:	60fb      	str	r3, [r7, #12]
    tempValue = (int16_t)wAux;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
 800b726:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b086      	sub	sp, #24
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b04      	cmp	r3, #4
 800b744:	d103      	bne.n	800b74e <STC_CalcTorqueReference+0x18>
    {
      wCurrentReference = pHandle->TorqueRef;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	e002      	b.n	800b754 <STC_CalcTorqueReference+0x1e>
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	613b      	str	r3, [r7, #16]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d90a      	bls.n	800b772 <STC_CalcTorqueReference+0x3c>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4413      	add	r3, r2
 800b764:	613b      	str	r3, [r7, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	1e5a      	subs	r2, r3, #1
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60da      	str	r2, [r3, #12]
 800b770:	e00b      	b.n	800b78a <STC_CalcTorqueReference+0x54>
    }
    else if (1U == pHandle->RampRemainingStep)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d107      	bne.n	800b78a <STC_CalcTorqueReference+0x54>
    {
      /* Set the backup value of hTargetFinal. */
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b780:	041b      	lsls	r3, r3, #16
 800b782:	613b      	str	r3, [r7, #16]
      pHandle->RampRemainingStep = 0U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	60da      	str	r2, [r3, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d121      	bne.n	800b7d6 <STC_CalcTorqueReference+0xa0>
      /* Run the speed control loop */

      /* Compute speed error */
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	141b      	asrs	r3, r3, #16
 800b796:	81fb      	strh	r3, [r7, #14]
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
#endif
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7ff ff19 	bl	800b5d4 <SPD_GetAvrgMecSpeedUnit>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	81bb      	strh	r3, [r7, #12]
      hError = hTargetSpeed - hMeasuredSpeed;
 800b7a6:	89fa      	ldrh	r2, [r7, #14]
 800b7a8:	89bb      	ldrh	r3, [r7, #12]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	817b      	strh	r3, [r7, #10]
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe ffbe 	bl	800a73c <PI_Controller>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	82fb      	strh	r3, [r7, #22]

      pHandle->SpeedRefUnitExt = wCurrentReference;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	605a      	str	r2, [r3, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b7ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b7ce:	041a      	lsls	r2, r3, #16
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	609a      	str	r2, [r3, #8]
 800b7d4:	e005      	b.n	800b7e2 <STC_CalcTorqueReference+0xac>
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	609a      	str	r2, [r3, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	141b      	asrs	r3, r3, #16
 800b7e0:	82fb      	strh	r3, [r7, #22]
#endif
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
 800b7e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  *
  * - Called during the boot phase of the MC process.
  */
__weak qd_t STC_GetDefaultIqdref(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b085      	sub	sp, #20
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b7fc:	813b      	strh	r3, [r7, #8]
    IqdRefDefault.d = pHandle->IdrefDefault;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b804:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	2300      	movs	r3, #0
 800b80c:	89ba      	ldrh	r2, [r7, #12]
 800b80e:	f362 030f 	bfi	r3, r2, #0, #16
 800b812:	89fa      	ldrh	r2, [r7, #14]
 800b814:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <STO_PLL_Init>:
/**
  * @brief  Initializes the @p pHandle of STate Observer (STO) PLL component.
  *
  */
__weak void STO_PLL_Init(STO_PLL_Handle_t *pHandle)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  {
#endif
    int16_t htempk;
    int32_t wAux;

    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

    wAux = ((int32_t)1);
 800b840:	2301      	movs	r3, #1
 800b842:	60bb      	str	r3, [r7, #8]
    pHandle->F3POW2 = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	865a      	strh	r2, [r3, #50]	; 0x32

    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b850:	461a      	mov	r2, r3
 800b852:	4b1f      	ldr	r3, [pc, #124]	; (800b8d0 <STO_PLL_Init+0xac>)
 800b854:	fb93 f3f2 	sdiv	r3, r3, r2
 800b858:	81fb      	strh	r3, [r7, #14]

    while (htempk != 0)
 800b85a:	e00e      	b.n	800b87a <STO_PLL_Init+0x56>
    {
      htempk /= ((int16_t)2);
 800b85c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b860:	0fda      	lsrs	r2, r3, #31
 800b862:	4413      	add	r3, r2
 800b864:	105b      	asrs	r3, r3, #1
 800b866:	81fb      	strh	r3, [r7, #14]
      wAux *= ((int32_t)2);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	60bb      	str	r3, [r7, #8]
      pHandle->F3POW2++;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b872:	3301      	adds	r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	865a      	strh	r2, [r3, #50]	; 0x32
    while (htempk != 0)
 800b87a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1ec      	bne.n	800b85c <STO_PLL_Init+0x38>
    }

    pHandle->hF3 = (int16_t)wAux;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	b21a      	sxth	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	861a      	strh	r2, [r3, #48]	; 0x30
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b890:	461a      	mov	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b898:	fb02 f303 	mul.w	r3, r2, r3
 800b89c:	60bb      	str	r3, [r7, #8]
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <STO_PLL_Init+0xb0>)
 800b8a2:	fb82 1203 	smull	r1, r2, r2, r3
 800b8a6:	1212      	asrs	r2, r2, #8
 800b8a8:	17db      	asrs	r3, r3, #31
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	b21a      	sxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    STO_PLL_Clear(pHandle);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fc15 	bl	800c0e2 <STO_PLL_Clear>

    PID_HandleInit(&pHandle->PIRegulator);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3334      	adds	r3, #52	; 0x34
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe fe1d 	bl	800a4fc <PID_HandleInit>

    /* Acceleration measurement set to zero */
    pHandle->_Super.hMecAccelUnitP = 0;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	825a      	strh	r2, [r3, #18]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return;
 800b8c8:	bf00      	nop
}
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	000fea5e 	.word	0x000fea5e
 800b8d4:	06488dc5 	.word	0x06488dc5

0800b8d8 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08e      	sub	sp, #56	; 0x38
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <STO_PLL_CalcElAngle+0x16>
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <STO_PLL_CalcElAngle+0x1c>
  {
    retValue = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b8f2:	e200      	b.n	800bcf6 <STO_PLL_CalcElAngle+0x41e>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b8fe:	4619      	mov	r1, r3
 800b900:	460b      	mov	r3, r1
 800b902:	03db      	lsls	r3, r3, #15
 800b904:	1a5b      	subs	r3, r3, r1
 800b906:	429a      	cmp	r2, r3
 800b908:	dd09      	ble.n	800b91e <STO_PLL_CalcElAngle+0x46>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b910:	461a      	mov	r2, r3
 800b912:	4613      	mov	r3, r2
 800b914:	03db      	lsls	r3, r3, #15
 800b916:	1a9a      	subs	r2, r3, r2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	669a      	str	r2, [r3, #104]	; 0x68
 800b91c:	e011      	b.n	800b942 <STO_PLL_CalcElAngle+0x6a>
    }
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b928:	4619      	mov	r1, r3
 800b92a:	03db      	lsls	r3, r3, #15
 800b92c:	1acb      	subs	r3, r1, r3
 800b92e:	429a      	cmp	r2, r3
 800b930:	dc07      	bgt.n	800b942 <STO_PLL_CalcElAngle+0x6a>
    {
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b938:	461a      	mov	r2, r3
 800b93a:	03db      	lsls	r3, r3, #15
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	669a      	str	r2, [r3, #104]	; 0x68
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	f8b2 211e 	ldrh.w	r2, [r2, #286]	; 0x11e
 800b94c:	4113      	asrs	r3, r2
 800b94e:	85fb      	strh	r3, [r7, #46]	; 0x2e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b95a:	4619      	mov	r1, r3
 800b95c:	460b      	mov	r3, r1
 800b95e:	03db      	lsls	r3, r3, #15
 800b960:	1a5b      	subs	r3, r3, r1
 800b962:	429a      	cmp	r2, r3
 800b964:	dd09      	ble.n	800b97a <STO_PLL_CalcElAngle+0xa2>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b96c:	461a      	mov	r2, r3
 800b96e:	4613      	mov	r3, r2
 800b970:	03db      	lsls	r3, r3, #15
 800b972:	1a9a      	subs	r2, r3, r2
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	66da      	str	r2, [r3, #108]	; 0x6c
 800b978:	e011      	b.n	800b99e <STO_PLL_CalcElAngle+0xc6>
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b984:	4619      	mov	r1, r3
 800b986:	03db      	lsls	r3, r3, #15
 800b988:	1acb      	subs	r3, r1, r3
 800b98a:	429a      	cmp	r2, r3
 800b98c:	dc07      	bgt.n	800b99e <STO_PLL_CalcElAngle+0xc6>
    {
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800b994:	461a      	mov	r2, r3
 800b996:	03db      	lsls	r3, r3, #15
 800b998:	1ad2      	subs	r2, r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	66da      	str	r2, [r3, #108]	; 0x6c
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	f8b2 211e 	ldrh.w	r2, [r2, #286]	; 0x11e
 800b9a8:	4113      	asrs	r3, r2
 800b9aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	03db      	lsls	r3, r3, #15
 800b9bc:	1a5b      	subs	r3, r3, r1
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	dd09      	ble.n	800b9d6 <STO_PLL_CalcElAngle+0xfe>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	03db      	lsls	r3, r3, #15
 800b9ce:	1a9a      	subs	r2, r3, r2
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	661a      	str	r2, [r3, #96]	; 0x60
 800b9d4:	e011      	b.n	800b9fa <STO_PLL_CalcElAngle+0x122>
    }
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	03db      	lsls	r3, r3, #15
 800b9e4:	1acb      	subs	r3, r1, r3
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	dc07      	bgt.n	800b9fa <STO_PLL_CalcElAngle+0x122>
    {
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	03db      	lsls	r3, r3, #15
 800b9f4:	1ad2      	subs	r2, r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	661a      	str	r2, [r3, #96]	; 0x60
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ba04:	4619      	mov	r1, r3
 800ba06:	460b      	mov	r3, r1
 800ba08:	03db      	lsls	r3, r3, #15
 800ba0a:	1a5b      	subs	r3, r3, r1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	dd09      	ble.n	800ba24 <STO_PLL_CalcElAngle+0x14c>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ba16:	461a      	mov	r2, r3
 800ba18:	4613      	mov	r3, r2
 800ba1a:	03db      	lsls	r3, r3, #15
 800ba1c:	1a9a      	subs	r2, r3, r2
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	665a      	str	r2, [r3, #100]	; 0x64
 800ba22:	e011      	b.n	800ba48 <STO_PLL_CalcElAngle+0x170>
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ba2e:	4619      	mov	r1, r3
 800ba30:	03db      	lsls	r3, r3, #15
 800ba32:	1acb      	subs	r3, r1, r3
 800ba34:	429a      	cmp	r2, r3
 800ba36:	dc07      	bgt.n	800ba48 <STO_PLL_CalcElAngle+0x170>
    {
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ba3e:	461a      	mov	r2, r3
 800ba40:	03db      	lsls	r3, r3, #15
 800ba42:	1ad2      	subs	r2, r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	665a      	str	r2, [r3, #100]	; 0x64
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800ba52:	4113      	asrs	r3, r2
 800ba54:	857b      	strh	r3, [r7, #42]	; 0x2a
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ba56:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	857b      	strh	r3, [r7, #42]	; 0x2a

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800ba70:	4113      	asrs	r3, r2
 800ba72:	853b      	strh	r3, [r7, #40]	; 0x28
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ba74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	853b      	strh	r3, [r7, #40]	; 0x28

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	891b      	ldrh	r3, [r3, #8]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	141b      	asrs	r3, r3, #16
 800ba9a:	847b      	strh	r3, [r7, #34]	; 0x22
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	891b      	ldrh	r3, [r3, #8]
 800baa0:	461a      	mov	r2, r3
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800baa8:	fb02 f303 	mul.w	r3, r2, r3
 800baac:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	141b      	asrs	r3, r3, #16
 800bab2:	843b      	strh	r3, [r7, #32]
#endif

    /*alfa axes observer*/
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800babe:	4113      	asrs	r3, r2
 800bac0:	83fb      	strh	r3, [r7, #30]
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800bac8:	461a      	mov	r2, r3
 800baca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bace:	fb02 f303 	mul.w	r3, r2, r3
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800bae4:	461a      	mov	r2, r3
 800bae6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800baea:	fb02 f303 	mul.w	r3, r2, r3
 800baee:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next += wAux;
 800baf0:	69ba      	ldr	r2, [r7, #24]
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	4413      	add	r3, r2
 800baf6:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800bafe:	461a      	mov	r2, r3
 800bb00:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next += wAux;
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	4413      	add	r3, r2
 800bb10:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
    wIalfa_est_Next -= wAux;
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	61bb      	str	r3, [r7, #24]

    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800bb32:	461a      	mov	r2, r3
 800bb34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bb38:	fb02 f303 	mul.w	r3, r2, r3
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb44:	4413      	add	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bb48:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bb50:	4113      	asrs	r3, r2
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wAux = ((int32_t)hAux_Beta) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	fb02 f303 	mul.w	r3, r2, r3
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_alfa_est_Next += wAux;
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	4413      	add	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]

    /*beta axes observer*/
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800bb86:	4113      	asrs	r3, r2
 800bb88:	83fb      	strh	r3, [r7, #30]
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800bb90:	461a      	mov	r2, r3
 800bb92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800bbac:	461a      	mov	r2, r3
 800bbae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bbb2:	fb02 f303 	mul.w	r3, r2, r3
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next += wAux;
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	4413      	add	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bbcc:	fb02 f303 	mul.w	r3, r2, r3
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next += wAux;
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	4413      	add	r3, r2
 800bbd8:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bbe6:	fb02 f303 	mul.w	r3, r2, r3
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
    wIbeta_est_Next -= wAux;
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	613b      	str	r3, [r7, #16]

    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bc00:	fb02 f303 	mul.w	r3, r2, r3
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc0c:	4413      	add	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800bc10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bc18:	4113      	asrs	r3, r2
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
#else
    wAux = ((int32_t)hAux_Alfa) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800bc22:	461a      	mov	r2, r3
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bc32:	461a      	mov	r2, r3
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
    wBemf_beta_est_Next -= wAux;
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	60fb      	str	r3, [r7, #12]

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc48:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    pHandle->hBemf_beta_est = hAux_Beta;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bc50:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

    if (0 == pHandle->hForcedDirection)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f993 3124 	ldrsb.w	r3, [r3, #292]	; 0x124
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10b      	bne.n	800bc76 <STO_PLL_CalcElAngle+0x39e>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	db02      	blt.n	800bc6e <STO_PLL_CalcElAngle+0x396>
      {
        wDirection = 1;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc6c:	e007      	b.n	800bc7e <STO_PLL_CalcElAngle+0x3a6>
      }
      else
      {
        wDirection = -1;
 800bc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30
 800bc74:	e003      	b.n	800bc7e <STO_PLL_CalcElAngle+0x3a6>
      }
    }
    else
    {
      /* we are in main sensor mode, use a forced direction */
      wDirection = pHandle->hForcedDirection;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f993 3124 	ldrsb.w	r3, [r3, #292]	; 0x124
 800bc7c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc84:	fb12 f303 	smulbb	r3, r2, r3
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc92:	fb12 f303 	smulbb	r3, r2, r3
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	85bb      	strh	r3, [r7, #44]	; 0x2c

    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800bc9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc9c:	425b      	negs	r3, r3
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	b21a      	sxth	r2, r3
 800bca2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fa91 	bl	800c1d0 <STO_ExecutePLL>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	817b      	strh	r3, [r7, #10]
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	897a      	ldrh	r2, [r7, #10]
 800bcb6:	821a      	strh	r2, [r3, #16]

    STO_Store_Rotor_Speed(pHandle, hRotor_Speed);
 800bcb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa56 	bl	800c170 <STO_Store_Rotor_Speed>

    pHandle->_Super.hElAngle += hRotor_Speed;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	4413      	add	r3, r2
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	b21a      	sxth	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	809a      	strh	r2, [r3, #4]

    /*storing previous values of currents and bemfs*/
    pHandle->Ialfa_est = wIalfa_est_Next;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	669a      	str	r2, [r3, #104]	; 0x68

    pHandle->Ibeta_est = wIbeta_est_Next;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	66da      	str	r2, [r3, #108]	; 0x6c
    retValue = pHandle->_Super.hElAngle;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	889b      	ldrh	r3, [r3, #4]
 800bcf4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  return (retValue);
 800bcf6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3738      	adds	r7, #56	; 0x38
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <STO_PLL_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (expressed in #SPEED_UNIT).
  * @retval True if the sensor information is reliable, false otherwise.
  */

__weak bool STO_PLL_CalcAvrgMecSpeedUnit(STO_PLL_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 800bd02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd06:	b092      	sub	sp, #72	; 0x48
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
    bAux = false;
  }
  else
  {
#endif
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800bd0e:	2100      	movs	r1, #0
 800bd10:	6439      	str	r1, [r7, #64]	; 0x40
    int32_t wError;
    int32_t wAux;
    int32_t wAvrSquareSpeed;
    int32_t wAvrQuadraticError = 0;
 800bd12:	2100      	movs	r1, #0
 800bd14:	63f9      	str	r1, [r7, #60]	; 0x3c
    int32_t wObsBemf, wEstBemf;
    int32_t wObsBemfSq = 0;
 800bd16:	2100      	movs	r1, #0
 800bd18:	63b9      	str	r1, [r7, #56]	; 0x38
    int32_t wEstBemfSq = 0;
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6379      	str	r1, [r7, #52]	; 0x34
    int32_t wEstBemfSqLo;
    bool bIs_Speed_Reliable = false;
 800bd1e:	2100      	movs	r1, #0
 800bd20:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
    bool bIs_Bemf_Consistent = false;
 800bd24:	2100      	movs	r1, #0
 800bd26:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800bd2a:	6879      	ldr	r1, [r7, #4]
 800bd2c:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
 800bd30:	f887 1030 	strb.w	r1, [r7, #48]	; 0x30

    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd34:	2100      	movs	r1, #0
 800bd36:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bd3a:	e010      	b.n	800bd5e <STO_PLL_CalcAvrgMecSpeedUnit+0x5c>
    {
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800bd3c:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	3138      	adds	r1, #56	; 0x38
 800bd44:	0049      	lsls	r1, r1, #1
 800bd46:	4401      	add	r1, r0
 800bd48:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd50:	4401      	add	r1, r0
 800bd52:	6439      	str	r1, [r7, #64]	; 0x40
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd54:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bd58:	3101      	adds	r1, #1
 800bd5a:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bd5e:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 800bd62:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bd66:	4288      	cmp	r0, r1
 800bd68:	d3e8      	bcc.n	800bd3c <STO_PLL_CalcAvrgMecSpeedUnit+0x3a>
    }

    if (0U == bSpeedBufferSizeUnit)
 800bd6a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d005      	beq.n	800bd7e <STO_PLL_CalcAvrgMecSpeedUnit+0x7c>
    {
      /* Nothing to do */
    }
    else
    {
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800bd72:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bd76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bd78:	fb90 f1f1 	sdiv	r1, r0, r1
 800bd7c:	6439      	str	r1, [r7, #64]	; 0x40
    }

    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bd7e:	2100      	movs	r1, #0
 800bd80:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bd84:	e018      	b.n	800bdb8 <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
    {
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800bd86:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	3138      	adds	r1, #56	; 0x38
 800bd8e:	0049      	lsls	r1, r1, #1
 800bd90:	4401      	add	r1, r0
 800bd92:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800bd96:	4608      	mov	r0, r1
 800bd98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd9a:	1a41      	subs	r1, r0, r1
 800bd9c:	60f9      	str	r1, [r7, #12]
      wError = (wError * wError);
 800bd9e:	68f9      	ldr	r1, [r7, #12]
 800bda0:	fb01 f101 	mul.w	r1, r1, r1
 800bda4:	60f9      	str	r1, [r7, #12]
      wAvrQuadraticError += wError;
 800bda6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bda8:	68f9      	ldr	r1, [r7, #12]
 800bdaa:	4401      	add	r1, r0
 800bdac:	63f9      	str	r1, [r7, #60]	; 0x3c
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800bdae:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 800bdb2:	3101      	adds	r1, #1
 800bdb4:	f887 1031 	strb.w	r1, [r7, #49]	; 0x31
 800bdb8:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 800bdbc:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bdc0:	4288      	cmp	r0, r1
 800bdc2:	d3e0      	bcc.n	800bd86 <STO_PLL_CalcAvrgMecSpeedUnit+0x84>
    }

    /* It computes the measurement variance */
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800bdc4:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800bdc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdca:	fb90 f1f1 	sdiv	r1, r0, r1
 800bdce:	63f9      	str	r1, [r7, #60]	; 0x3c

    /* The maximum variance acceptable is here calculated as a function of average speed */
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800bdd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdd2:	fb01 f101 	mul.w	r1, r1, r1
 800bdd6:	62f9      	str	r1, [r7, #44]	; 0x2c
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800bdd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdda:	17c8      	asrs	r0, r1, #31
 800bddc:	4688      	mov	r8, r1
 800bdde:	4681      	mov	r9, r0
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	f8b1 1110 	ldrh.w	r1, [r1, #272]	; 0x110
 800bde6:	b289      	uxth	r1, r1
 800bde8:	2000      	movs	r0, #0
 800bdea:	460c      	mov	r4, r1
 800bdec:	4605      	mov	r5, r0
 800bdee:	fb04 f009 	mul.w	r0, r4, r9
 800bdf2:	fb08 f105 	mul.w	r1, r8, r5
 800bdf6:	4401      	add	r1, r0
 800bdf8:	fba8 2304 	umull	r2, r3, r8, r4
 800bdfc:	4419      	add	r1, r3
 800bdfe:	460b      	mov	r3, r1
 800be00:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800be04:	e9c7 2308 	strd	r2, r3, [r7, #32]
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 800be08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da05      	bge.n	800be1c <STO_PLL_CalcAvrgMecSpeedUnit+0x11a>
 800be10:	f112 0a7f 	adds.w	sl, r2, #127	; 0x7f
 800be14:	f143 0b00 	adc.w	fp, r3, #0
 800be18:	4652      	mov	r2, sl
 800be1a:	465b      	mov	r3, fp
 800be1c:	f04f 0000 	mov.w	r0, #0
 800be20:	f04f 0100 	mov.w	r1, #0
 800be24:	09d0      	lsrs	r0, r2, #7
 800be26:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800be2a:	11d9      	asrs	r1, r3, #7
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4613      	mov	r3, r2
 800be32:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800be34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	429a      	cmp	r2, r3
 800be3a:	da02      	bge.n	800be42 <STO_PLL_CalcAvrgMecSpeedUnit+0x140>
    {
      bIs_Speed_Reliable = true;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    /* Computation of Mechanical speed Unit */
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8b5b      	ldrh	r3, [r3, #26]
 800be46:	461a      	mov	r2, r3
 800be48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4a:	fb02 f303 	mul.w	r3, r2, r3
 800be4e:	61fb      	str	r3, [r7, #28]
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	789b      	ldrb	r3, [r3, #2]
 800be54:	461a      	mov	r2, r3
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	fb02 f303 	mul.w	r3, r2, r3
 800be5c:	61fb      	str	r3, [r7, #28]
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	461a      	mov	r2, r3
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	fb93 f3f2 	sdiv	r3, r3, r2
 800be6a:	61fb      	str	r3, [r7, #28]
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	461a      	mov	r2, r3
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	fb93 f3f2 	sdiv	r3, r3, r2
 800be78:	61fb      	str	r3, [r7, #28]

    *pMecSpeedUnit = (int16_t)wAux;
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	b21a      	sxth	r2, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	801a      	strh	r2, [r3, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	b21a      	sxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	819a      	strh	r2, [r3, #12]

    pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800be90:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5

    /* Bemf Consistency Check algorithm */
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05b      	beq.n	800bf56 <STO_PLL_CalcAvrgMecSpeedUnit+0x254>
    {
      /* wAux abs value   */
      //cstat !MISRAC2012-Rule-14.3_b !RED-func-no-effect !RED-cmp-never !RED-cond-never
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bfb8      	it	lt
 800bea4:	425b      	neglt	r3, r3
 800bea6:	61fb      	str	r3, [r7, #28]
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800beae:	461a      	mov	r2, r3
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	4293      	cmp	r3, r2
 800beb4:	da41      	bge.n	800bf3a <STO_PLL_CalcAvrgMecSpeedUnit+0x238>
      {
        /* Computation of Observed back-emf */
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800bebc:	61bb      	str	r3, [r7, #24]
        wObsBemfSq = wObsBemf * wObsBemf;
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	fb03 f303 	mul.w	r3, r3, r3
 800bec4:	63bb      	str	r3, [r7, #56]	; 0x38
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800becc:	61bb      	str	r3, [r7, #24]
        wObsBemfSq += wObsBemf * wObsBemf;
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	fb03 f303 	mul.w	r3, r3, r3
 800bed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bed6:	4413      	add	r3, r2
 800bed8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Computation of Estimated back-emf */
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	4613      	mov	r3, r2
 800bede:	03db      	lsls	r3, r3, #15
 800bee0:	1a9b      	subs	r3, r3, r2
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	8a92      	ldrh	r2, [r2, #20]
 800bee6:	b212      	sxth	r2, r2
 800bee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800beec:	617b      	str	r3, [r7, #20]
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800bef4:	461a      	mov	r2, r3
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	fb02 f303 	mul.w	r3, r2, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	da00      	bge.n	800bf02 <STO_PLL_CalcAvrgMecSpeedUnit+0x200>
 800bf00:	333f      	adds	r3, #63	; 0x3f
 800bf02:	119b      	asrs	r3, r3, #6
 800bf04:	637b      	str	r3, [r7, #52]	; 0x34
        wEstBemfSq *= wEstBemf;
 800bf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	fb02 f303 	mul.w	r3, r2, r3
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Computation of threshold */
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da00      	bge.n	800bf18 <STO_PLL_CalcAvrgMecSpeedUnit+0x216>
 800bf16:	333f      	adds	r3, #63	; 0x3f
 800bf18:	119b      	asrs	r3, r3, #6
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bf22:	fb02 f303 	mul.w	r3, r2, r3
 800bf26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	613b      	str	r3, [r7, #16]

        /* Check */
        if (wObsBemfSq > wEstBemfSqLo)
 800bf2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	dd02      	ble.n	800bf3a <STO_PLL_CalcAvrgMecSpeedUnit+0x238>
        {
          bIs_Bemf_Consistent = true;
 800bf34:	2301      	movs	r3, #1
 800bf36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
      }

      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800bf40:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf48:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bf54:	e002      	b.n	800bf5c <STO_PLL_CalcAvrgMecSpeedUnit+0x25a>
    }
    else
    {
      bIs_Bemf_Consistent = true;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }

    /* Decision making */
    if (false == pHandle->IsAlgorithmConverged)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800bf62:	f083 0301 	eor.w	r3, r3, #1
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d008      	beq.n	800bf7e <STO_PLL_CalcAvrgMecSpeedUnit+0x27c>
    {
      bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff fb56 	bl	800b622 <SPD_IsMecSpeedReliable>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bf7c:	e03f      	b.n	800bffe <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
    }
    else
    {
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800bf84:	f083 0301 	eor.w	r3, r3, #1
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <STO_PLL_CalcAvrgMecSpeedUnit+0x29a>
 800bf8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf92:	f083 0301 	eor.w	r3, r3, #1
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d024      	beq.n	800bfe6 <STO_PLL_CalcAvrgMecSpeedUnit+0x2e4>
      {
        pHandle->ReliabilityCounter++;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d30b      	bcc.n	800bfd4 <STO_PLL_CalcAvrgMecSpeedUnit+0x2d2>
        {
          pHandle->ReliabilityCounter = 0U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	78da      	ldrb	r2, [r3, #3]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	701a      	strb	r2, [r3, #0]
          bAux = false;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bfd2:	e014      	b.n	800bffe <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
        }
        else
        {
          bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff fb22 	bl	800b622 <SPD_IsMecSpeedReliable>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800bfe4:	e00b      	b.n	800bffe <STO_PLL_CalcAvrgMecSpeedUnit+0x2fc>
        }
      }
      else
      {
        pHandle->ReliabilityCounter = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fb15 	bl	800b622 <SPD_IsMecSpeedReliable>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
 800bffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c002:	4618      	mov	r0, r3
 800c004:	3748      	adds	r7, #72	; 0x48
 800c006:	46bd      	mov	sp, r7
 800c008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c00c <STO_PLL_CalcAvrgElSpeedDpp>:
  * bSpeedBufferSizedpp.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_CalcAvrgElSpeedDpp(STO_PLL_Handle_t *pHandle)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b089      	sub	sp, #36	; 0x24
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800c01a:	82fb      	strh	r3, [r7, #22]
    int16_t hIndexOld;
    int16_t hIndexOldTemp;
    int32_t wSum = pHandle->DppBufferSum;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c022:	61bb      	str	r3, [r7, #24]
    int32_t wAvrSpeed_dpp;
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800c02a:	82bb      	strh	r3, [r7, #20]
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c032:	827b      	strh	r3, [r7, #18]
    int16_t hBufferSizeDiff;

    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800c034:	8a7a      	ldrh	r2, [r7, #18]
 800c036:	8abb      	ldrh	r3, [r7, #20]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	823b      	strh	r3, [r7, #16]

    if (0 == hBufferSizeDiff)
 800c03e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d110      	bne.n	800c068 <STO_PLL_CalcAvrgElSpeedDpp+0x5c>
    {
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800c046:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	3338      	adds	r3, #56	; 0x38
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c056:	461a      	mov	r2, r3
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	4413      	add	r3, r2
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	f9b2 210c 	ldrsh.w	r2, [r2, #268]	; 0x10c
 800c062:	1a9b      	subs	r3, r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
 800c066:	e027      	b.n	800c0b8 <STO_PLL_CalcAvrgElSpeedDpp+0xac>
    }
    else
    {
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800c068:	8afa      	ldrh	r2, [r7, #22]
 800c06a:	8a3b      	ldrh	r3, [r7, #16]
 800c06c:	4413      	add	r3, r2
 800c06e:	b29b      	uxth	r3, r3
 800c070:	81fb      	strh	r3, [r7, #14]

      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800c072:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c076:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	db05      	blt.n	800c08a <STO_PLL_CalcAvrgElSpeedDpp+0x7e>
      {
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800c07e:	89fa      	ldrh	r2, [r7, #14]
 800c080:	8a7b      	ldrh	r3, [r7, #18]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	b29b      	uxth	r3, r3
 800c086:	83fb      	strh	r3, [r7, #30]
 800c088:	e001      	b.n	800c08e <STO_PLL_CalcAvrgElSpeedDpp+0x82>
      }
      else
      {
        hIndexOld = hIndexOldTemp;
 800c08a:	89fb      	ldrh	r3, [r7, #14]
 800c08c:	83fb      	strh	r3, [r7, #30]
      }

      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800c08e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	3338      	adds	r3, #56	; 0x38
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	441a      	add	r2, r3
 800c0a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	3338      	adds	r3, #56	; 0x38
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	61bb      	str	r3, [r7, #24]
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800c0be:	461a      	mov	r2, r3
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	4113      	asrs	r3, r2
 800c0c4:	60bb      	str	r3, [r7, #8]
  else
  {
    wAvrSpeed_dpp = wSum / hSpeedBufferSizedpp;
  }
#endif
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	b21a      	sxth	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	81da      	strh	r2, [r3, #14]
    pHandle->DppBufferSum = wSum;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c0d6:	bf00      	nop
 800c0d8:	3724      	adds	r7, #36	; 0x24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <STO_PLL_Clear>:
/**
  * @brief  Clears state observer component by re-initializing private variables in @p pHandle.
  * 
  */
__weak void STO_PLL_Clear(STO_PLL_Handle_t *pHandle)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ialfa_est = (int32_t)0;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->Ibeta_est = (int32_t)0;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->wBemf_alfa_est = (int32_t)0;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	669a      	str	r2, [r3, #104]	; 0x68
    pHandle->wBemf_beta_est = (int32_t)0;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	66da      	str	r2, [r3, #108]	; 0x6c
    pHandle->_Super.hElAngle = (int16_t)0;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	81da      	strh	r2, [r3, #14]
    pHandle->ConsistencyCounter = 0u;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    pHandle->ReliabilityCounter = 0u;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
    pHandle->IsAlgorithmConverged = false;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    pHandle->IsBemfConsistent = false;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    pHandle->Obs_Bemf_Level = (int32_t)0;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    pHandle->Est_Bemf_Level = (int32_t)0;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    pHandle->DppBufferSum = (int32_t)0;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    pHandle->ForceConvergency = false;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    pHandle->ForceConvergency2 = false;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123

    STO_InitSpeedBuffer(pHandle);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f871 	bl	800c23e <STO_InitSpeedBuffer>
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3334      	adds	r3, #52	; 0x34
 800c160:	2100      	movs	r1, #0
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fa21 	bl	800a5aa <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <STO_Store_Rotor_Speed>:
/**
  * @brief  Stores in @p pHandle the latest calculated value of @p hRotor_Speed.
  * 
  */
inline static void STO_Store_Rotor_Speed(STO_PLL_Handle_t *pHandle, int16_t hRotor_Speed)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	807b      	strh	r3, [r7, #2]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800c182:	73fb      	strb	r3, [r7, #15]

  bBuffer_index++;
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	3301      	adds	r3, #1
 800c188:	73fb      	strb	r3, [r7, #15]
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c190:	7bfa      	ldrb	r2, [r7, #15]
 800c192:	429a      	cmp	r2, r3
 800c194:	d101      	bne.n	800c19a <STO_Store_Rotor_Speed+0x2a>
  {
    bBuffer_index = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]
  }

  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	3338      	adds	r3, #56	; 0x38
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	3338      	adds	r3, #56	; 0x38
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	4413      	add	r3, r2
 800c1b8:	887a      	ldrh	r2, [r7, #2]
 800c1ba:	809a      	strh	r2, [r3, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7bfa      	ldrb	r2, [r7, #15]
 800c1c0:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <STO_ExecutePLL>:
  * @param  hBemf_alfa_est: Estimated Bemf alpha on the stator reference frame.
  * @param  hBemf_beta_est: Estimated Bemf beta on the stator reference frame.
  * @retval 
  */
inline static int16_t STO_ExecutePLL(STO_PLL_Handle_t *pHandle, int16_t hBemf_alfa_est, int16_t hBemf_beta_est)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	807b      	strh	r3, [r7, #2]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	803b      	strh	r3, [r7, #0]
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7f6 fc84 	bl	8002af4 <MCM_Trig_Functions>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	60fb      	str	r3, [r7, #12]

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800c1f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c1f8:	fb02 f303 	mul.w	r3, r2, r3
 800c1fc:	61fb      	str	r3, [r7, #28]
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800c1fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c202:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c206:	fb02 f303 	mul.w	r3, r2, r3
 800c20a:	61bb      	str	r3, [r7, #24]

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux1 = (int16_t)(wBeta_Cos_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	13db      	asrs	r3, r3, #15
 800c210:	82fb      	strh	r3, [r7, #22]
#else
  hAux1 = (int16_t)(wBeta_Cos_tmp / 32768);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  hAux2 = (int16_t)(wAlfa_Sin_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	13db      	asrs	r3, r3, #15
 800c216:	82bb      	strh	r3, [r7, #20]
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c21e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	4619      	mov	r1, r3
 800c22a:	f7fe fa87 	bl	800a73c <PI_Controller>
 800c22e:	4603      	mov	r3, r0
 800c230:	827b      	strh	r3, [r7, #18]
  return (hOutput);
 800c232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3720      	adds	r7, #32
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <STO_InitSpeedBuffer>:
/**
  * @brief  Clears the estimated speed buffer in @p pHandle.
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c24c:	73bb      	strb	r3, [r7, #14]

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800c24e:	2300      	movs	r3, #0
 800c250:	73fb      	strb	r3, [r7, #15]
 800c252:	e009      	b.n	800c268 <STO_InitSpeedBuffer+0x2a>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	3338      	adds	r3, #56	; 0x38
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	4413      	add	r3, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	809a      	strh	r2, [r3, #4]
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	3301      	adds	r3, #1
 800c266:	73fb      	strb	r3, [r7, #15]
 800c268:	7bfa      	ldrb	r2, [r7, #15]
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d3f1      	bcc.n	800c254 <STO_InitSpeedBuffer+0x16>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  return;
 800c280:	bf00      	nop
}
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <STO_PLL_IsObserverConverged>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  hForcedMecSpeedUnit: Mechanical speed in 0.1Hz unit as forced by VSS.
  * @retval bool True if the estimated angle and speed are reliables, false otherwise.
  */
__weak bool STO_PLL_IsObserverConverged(STO_PLL_Handle_t *pHandle, int16_t *phForcedMecSpeedUnit)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  bool bAux = false;
 800c296:	2300      	movs	r3, #0
 800c298:	75fb      	strb	r3, [r7, #23]
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <STO_PLL_IsObserverConverged+0x22>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	801a      	strh	r2, [r3, #0]
    }

    if (true == pHandle->ForceConvergency)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d009      	beq.n	800c2cc <STO_PLL_IsObserverConverged+0x40>
    {
      bAux = true;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	75fb      	strb	r3, [r7, #23]
      pHandle->IsAlgorithmConverged = true;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	701a      	strb	r2, [r3, #0]
 800c2ca:	e087      	b.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
    }
    else
    {
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	899b      	ldrh	r3, [r3, #12]
 800c2d0:	82bb      	strh	r3, [r7, #20]

      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800c2d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c2dc:	fb02 f303 	mul.w	r3, r2, r3
 800c2e0:	613b      	str	r3, [r7, #16]

      if (wtemp > 0)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dd79      	ble.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
      {
        if (hEstimatedSpeedUnit < 0)
 800c2e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da03      	bge.n	800c2f8 <STO_PLL_IsObserverConverged+0x6c>
        {
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800c2f0:	8abb      	ldrh	r3, [r7, #20]
 800c2f2:	425b      	negs	r3, r3
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	82bb      	strh	r3, [r7, #20]
        }

        if (*phForcedMecSpeedUnit < 0)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	da08      	bge.n	800c314 <STO_PLL_IsObserverConverged+0x88>
        {
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	425b      	negs	r3, r3
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	b21a      	sxth	r2, r3
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	801a      	strh	r2, [r3, #0]
        }
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c31a:	461a      	mov	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	60fb      	str	r3, [r7, #12]
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	da00      	bge.n	800c330 <STO_PLL_IsObserverConverged+0xa4>
 800c32e:	330f      	adds	r3, #15
 800c330:	111b      	asrs	r3, r3, #4
 800c332:	817b      	strh	r3, [r7, #10]

        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c33a:	461a      	mov	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800c342:	fb02 f303 	mul.w	r3, r2, r3
 800c346:	60fb      	str	r3, [r7, #12]
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da00      	bge.n	800c350 <STO_PLL_IsObserverConverged+0xc4>
 800c34e:	330f      	adds	r3, #15
 800c350:	111b      	asrs	r3, r3, #4
 800c352:	813b      	strh	r3, [r7, #8]

        /* If the variance of the estimated speed is low enough...*/
        if (true == pHandle->IsSpeedReliable)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d03a      	beq.n	800c3d4 <STO_PLL_IsObserverConverged+0x148>
        {
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800c364:	8abb      	ldrh	r3, [r7, #20]
 800c366:	429a      	cmp	r2, r3
 800c368:	d22f      	bcs.n	800c3ca <STO_PLL_IsObserverConverged+0x13e>
          {
            /*...and the estimated value is quite close to the expected value... */
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800c36a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c36e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c372:	429a      	cmp	r2, r3
 800c374:	db24      	blt.n	800c3c0 <STO_PLL_IsObserverConverged+0x134>
            {
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800c376:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c37a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c37e:	429a      	cmp	r2, r3
 800c380:	dc19      	bgt.n	800c3b6 <STO_PLL_IsObserverConverged+0x12a>
              {
                pHandle->ConsistencyCounter++;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 800c388:	3301      	adds	r3, #1
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6

                /*... for hConsistencyThreshold consecutive times... */
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d31c      	bcc.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
                {

                  /* the algorithm converged.*/
                  bAux = true;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	75fb      	strb	r3, [r7, #23]
                  pHandle->IsAlgorithmConverged = true;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
                  pHandle->_Super.bSpeedErrorNumber = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	701a      	strb	r2, [r3, #0]
 800c3b4:	e012      	b.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
                }
              }
              else
              {
                pHandle->ConsistencyCounter = 0U;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c3be:	e00d      	b.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
              }
            }
            else
            {
              pHandle->ConsistencyCounter = 0U;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c3c8:	e008      	b.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
            }
          }
          else
          {
            pHandle->ConsistencyCounter = 0U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800c3d2:	e003      	b.n	800c3dc <STO_PLL_IsObserverConverged+0x150>
          }
        }
        else
        {
          pHandle->ConsistencyCounter = 0U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
      }
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <STO_PLL_GetEstimatedBemf>:
  * @brief  Exports estimated Bemf alpha-beta from @p pHandle.
  * 
  * @retval alphabeta_t Bemf alpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedBemf(STO_PLL_Handle_t *pHandle)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
    vaux.beta = 0;
  }
  else
  {
#endif
    vaux.alpha = pHandle->hBemf_alfa_est;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800c3f8:	813b      	strh	r3, [r7, #8]
    vaux.beta = pHandle->hBemf_beta_est;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800c400:	817b      	strh	r3, [r7, #10]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	2300      	movs	r3, #0
 800c408:	89ba      	ldrh	r2, [r7, #12]
 800c40a:	f362 030f 	bfi	r3, r2, #0, #16
 800c40e:	89fa      	ldrh	r2, [r7, #14]
 800c410:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  else
  {
#endif
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800c432:	4113      	asrs	r3, r2
 800c434:	b21b      	sxth	r3, r3
 800c436:	813b      	strh	r3, [r7, #8]
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	f8b2 211c 	ldrh.w	r2, [r2, #284]	; 0x11c
 800c442:	4113      	asrs	r3, r2
 800c444:	b21b      	sxth	r3, r3
 800c446:	817b      	strh	r3, [r7, #10]
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	2300      	movs	r3, #0
 800c44e:	89ba      	ldrh	r2, [r7, #12]
 800c450:	f362 030f 	bfi	r3, r2, #0, #16
 800c454:	89fa      	ldrh	r2, [r7, #14]
 800c456:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <STO_PLL_GetObserverGains>:
/**
  * @brief  Exports current observer gains from @p pHandle and to parameters @p phC2 and @p phC4.
  * 
  */
__weak void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4)
{
 800c466:	b480      	push	{r7}
 800c468:	b085      	sub	sp, #20
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	607a      	str	r2, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	801a      	strh	r2, [r3, #0]
    *phC4 = pHandle->hC4;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	801a      	strh	r2, [r3, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c486:	bf00      	nop
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <STO_PLL_SetObserverGains>:
/**
  * @brief  Stores in @p pHandle the new values @p hhC1 and @p hhC2 for observer gains.
  * 
  */
__weak void STO_PLL_SetObserverGains(STO_PLL_Handle_t *pHandle, int16_t hhC1, int16_t hhC2)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	460b      	mov	r3, r1
 800c49c:	807b      	strh	r3, [r7, #2]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	803b      	strh	r3, [r7, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	887a      	ldrh	r2, [r7, #2]
 800c4a6:	845a      	strh	r2, [r3, #34]	; 0x22
    pHandle->hC4 = hhC2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	883a      	ldrh	r2, [r7, #0]
 800c4ac:	84da      	strh	r2, [r3, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <STO_OTF_ResetPLL>:
  * @brief  Resets the PLL integral term during on-the-fly startup.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_OTF_ResetPLL(STO_Handle_t * pHandle)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60fb      	str	r3, [r7, #12]
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	3334      	adds	r3, #52	; 0x34
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fe f86b 	bl	800a5aa <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <STO_ResetPLL>:
  * @brief  Resets the PLL integral term.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_ResetPLL(STO_PLL_Handle_t *pHandle)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3334      	adds	r3, #52	; 0x34
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe f85d 	bl	800a5aa <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <STO_PLL_GetEstimatedBemfLevel>:
  * @brief  Exports estimated Bemf squared level stored in @p pHandle.
  * 
  * @retval int32_t Magnitude of estimated Bemf Level squared based on speed measurement.
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
#endif
}
 800c506:	4618      	mov	r0, r3
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <STO_PLL_GetObservedBemfLevel>:
  * @brief  Exports observed Bemf squared level stored in @p pHandle.
  *
  * @retval int32_t Magnitude of observed Bemf level squared.
  */
__weak int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
#endif
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <STO_PLL_IsVarianceTight>:
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  * @retval bool True if the speed measurement variance is lower than threshold VariancePercentage, false otherwise.
  */
__weak bool STO_PLL_IsVarianceTight(const STO_Handle_t *pHandle)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
    tempStatus = false;
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]
    tempStatus = pHdl->IsSpeedReliable;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800c540:	72fb      	strb	r3, [r7, #11]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
 800c542:	7afb      	ldrb	r3, [r7, #11]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <STO_PLL_ForceConvergency1>:
  * @brief  Forces the state-observer to declare convergency.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_ForceConvergency1(STO_Handle_t *pHandle)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	60fb      	str	r3, [r7, #12]
    pHdl->ForceConvergency = true;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c566:	bf00      	nop
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <STO_PLL_ForceConvergency2>:
  * @brief  Forces the state-observer to declare convergency.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_PLL_ForceConvergency2(STO_Handle_t *pHandle)
{
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	60fb      	str	r3, [r7, #12]
    pHdl->ForceConvergency2 = true;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c588:	bf00      	nop
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <STO_SetDirection>:

/**
  * @brief  Sets the rotation @p direction in @p pHandle.
  */
__weak void STO_SetDirection(STO_PLL_Handle_t *pHandle, int8_t direction)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	78fa      	ldrb	r2, [r7, #3]
 800c5a4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <VSS_Init>:
  *
  * - Calls VSS_Clear.
  * - Called at initialization of the whole MC core.
  */
__weak void VSS_Init(VirtualSpeedSensor_Handle_t *pHandle)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  VSS_Clear(pHandle);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f804 	bl	800c5ca <VSS_Clear>
}
 800c5c2:	bf00      	nop
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <VSS_Clear>:
  *         of the motor.
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component.
  * @retval none
  */
__weak void VSS_Clear(VirtualSpeedSensor_Handle_t *pHandle)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]
    pHandle->_Super.hElAngle = 0;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	809a      	strh	r2, [r3, #4]
    pHandle->_Super.hMecAngle = 0;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	819a      	strh	r2, [r3, #12]
    pHandle->_Super.hElSpeedDpp = 0;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	81da      	strh	r2, [r3, #14]
    pHandle->_Super.hMecAccelUnitP = 0;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	825a      	strh	r2, [r3, #18]
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	701a      	strb	r2, [r3, #0]

    pHandle->wElAccDppP32 = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	621a      	str	r2, [r3, #32]
    pHandle->wElSpeedDpp32 = 0;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	851a      	strh	r2, [r3, #40]	; 0x28
    pHandle->hElAngleAccu = 0;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	861a      	strh	r2, [r3, #48]	; 0x30

    pHandle->bTransitionStarted = false;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    pHandle->bTransitionEnded = false;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	85da      	strh	r2, [r3, #46]	; 0x2e
    pHandle->bTransitionLocked = false;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    pHandle->bCopyObserver = false;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <VSS_CalcElAngle>:
  * @retval int16_t Measured electrical angle in s16degree format.
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b087      	sub	sp, #28
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	6039      	str	r1, [r7, #0]
  {
#endif
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;
 800c654:	2301      	movs	r3, #1
 800c656:	827b      	strh	r3, [r7, #18]

    if (true == pHandle->bCopyObserver)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	82fb      	strh	r3, [r7, #22]
 800c668:	e09a      	b.n	800c7a0 <VSS_CalcElAngle+0x156>
    }
    else
    {
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	4413      	add	r3, r2
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	b21a      	sxth	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	861a      	strh	r2, [r3, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c692:	4619      	mov	r1, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	fb91 f3f3 	sdiv	r3, r1, r3
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	4413      	add	r3, r2
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	b21a      	sxth	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	80da      	strh	r2, [r3, #6]

      if (true == pHandle->bTransitionStarted)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d073      	beq.n	800c79a <VSS_CalcElAngle+0x150>
      {
        if (0 == pHandle->hTransitionRemainingSteps)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <VSS_CalcElAngle+0x88>
        {
          hRetAngle = *(int16_t *)pInputVars_str;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	82fb      	strh	r3, [r7, #22]
          pHandle->bTransitionEnded = true;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	701a      	strb	r2, [r3, #0]
 800c6d0:	e066      	b.n	800c7a0 <VSS_CalcElAngle+0x156>
        }
        else
        {
          pHandle->hTransitionRemainingSteps--;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	b21a      	sxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	85da      	strh	r2, [r3, #46]	; 0x2e

          if (pHandle->_Super.hElSpeedDpp >= 0)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	db0b      	blt.n	800c706 <VSS_CalcElAngle+0xbc>
          {
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29b      	uxth	r3, r3
 800c702:	82bb      	strh	r3, [r7, #20]
 800c704:	e00d      	b.n	800c722 <VSS_CalcElAngle+0xd8>
          }
          else
          {
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c714:	b29b      	uxth	r3, r3
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	b29b      	uxth	r3, r3
 800c71a:	82bb      	strh	r3, [r7, #20]
            hSignCorr = -1;
 800c71c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c720:	827b      	strh	r3, [r7, #18]
          }

          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800c722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800c72c:	fb02 f303 	mul.w	r3, r2, r3
 800c730:	60fb      	str	r3, [r7, #12]
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800c738:	461a      	mov	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c740:	817b      	strh	r3, [r7, #10]
          hAngleCorr *= hSignCorr;
 800c742:	897a      	ldrh	r2, [r7, #10]
 800c744:	8a7b      	ldrh	r3, [r7, #18]
 800c746:	fb12 f303 	smulbb	r3, r2, r3
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	817b      	strh	r3, [r7, #10]

          if (hAngleDiff >= 0)
 800c74e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c752:	2b00      	cmp	r3, #0
 800c754:	db0c      	blt.n	800c770 <VSS_CalcElAngle+0x126>
          {
            pHandle->bTransitionLocked = true;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c764:	b29a      	uxth	r2, r3
 800c766:	897b      	ldrh	r3, [r7, #10]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	82fb      	strh	r3, [r7, #22]
 800c76e:	e017      	b.n	800c7a0 <VSS_CalcElAngle+0x156>
          }
          else
          {
            if (false == pHandle->bTransitionLocked)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c776:	f083 0301 	eor.w	r3, r3, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <VSS_CalcElAngle+0x13e>
            {
              hRetAngle = pHandle->hElAngleAccu;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c784:	82fb      	strh	r3, [r7, #22]
 800c786:	e00b      	b.n	800c7a0 <VSS_CalcElAngle+0x156>
            }
            else
            {
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c78e:	b29a      	uxth	r2, r3
 800c790:	897b      	ldrh	r3, [r7, #10]
 800c792:	4413      	add	r3, r2
 800c794:	b29b      	uxth	r3, r3
 800c796:	82fb      	strh	r3, [r7, #22]
 800c798:	e002      	b.n	800c7a0 <VSS_CalcElAngle+0x156>
          }
        }
      }
      else
      {
        hRetAngle = pHandle->hElAngleAccu;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c79e:	82fb      	strh	r3, [r7, #22]
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8afa      	ldrh	r2, [r7, #22]
 800c7a4:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
 800c7a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <VSS_CalcAvrgMecSpeedUnit>:
  * - Returns the reliability state of the sensor (always true).
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d931      	bls.n	800c82c <VSS_CalcAvrgMecSpeedUnit+0x76>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	625a      	str	r2, [r3, #36]	; 0x24
#ifndef FULL_MISRA_C_COMPLIANCY_VIRT_SPD_SENS
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7da:	141b      	asrs	r3, r3, #16
 800c7dc:	b21a      	sxth	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	81da      	strh	r2, [r3, #14]
#else
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c7e8:	461a      	mov	r2, r3
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8b5b      	ldrh	r3, [r3, #26]
 800c7ee:	fb03 f202 	mul.w	r2, r3, r2
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	4413      	add	r3, r2
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	461a      	mov	r2, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	4619      	mov	r1, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	785b      	ldrb	r3, [r3, #1]
 800c806:	fb01 f303 	mul.w	r3, r1, r3
 800c80a:	fb92 f3f3 	sdiv	r3, r2, r3
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800c80e:	b21a      	sxth	r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	801a      	strh	r2, [r3, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c822:	3b01      	subs	r3, #1
 800c824:	b29a      	uxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	851a      	strh	r2, [r3, #40]	; 0x28
 800c82a:	e037      	b.n	800c89c <VSS_CalcAvrgMecSpeedUnit+0xe6>
    }
    else if (1U == pHandle->hRemainingStep)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c830:	2b01      	cmp	r3, #1
 800c832:	d12e      	bne.n	800c892 <VSS_CalcAvrgMecSpeedUnit+0xdc>
    {
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	801a      	strh	r2, [r3, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	819a      	strh	r2, [r3, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c84e:	461a      	mov	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	fb03 f202 	mul.w	r2, r3, r2
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	8b5b      	ldrh	r3, [r3, #26]
 800c85c:	4619      	mov	r1, r3
 800c85e:	460b      	mov	r3, r1
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c86a:	b21a      	sxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	81da      	strh	r2, [r3, #14]
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	785b      	ldrb	r3, [r3, #1]
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	fb12 f303 	smulbb	r3, r2, r3
 800c882:	b29b      	uxth	r3, r3
 800c884:	b21a      	sxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	81da      	strh	r2, [r3, #14]
      pHandle->hRemainingStep = 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c890:	e004      	b.n	800c89c <VSS_CalcAvrgMecSpeedUnit+0xe6>
    }
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	801a      	strh	r2, [r3, #0]
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8a2:	f083 0301 	eor.w	r3, r3, #1
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <VSS_CalcAvrgMecSpeedUnit+0x104>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	78da      	ldrb	r2, [r3, #3]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	701a      	strb	r2, [r3, #0]
      SpeedSensorReliability = false;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73fb      	strb	r3, [r7, #15]
 800c8b8:	e006      	b.n	800c8c8 <VSS_CalcAvrgMecSpeedUnit+0x112>
    }
    else
    {
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe feaf 	bl	800b622 <SPD_IsMecSpeedReliable>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	807b      	strh	r3, [r7, #2]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	887a      	ldrh	r2, [r7, #2]
 800c8e2:	861a      	strh	r2, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	785b      	ldrb	r3, [r3, #1]
 800c8f0:	fb92 f3f3 	sdiv	r3, r2, r3
 800c8f4:	b21a      	sxth	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.hElAngle = hMecAngle;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	887a      	ldrh	r2, [r7, #2]
 800c8fe:	809a      	strh	r2, [r3, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	807b      	strh	r3, [r7, #2]
 800c918:	4613      	mov	r3, r2
 800c91a:	803b      	strh	r3, [r7, #0]
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c922:	f083 0301 	eor.w	r3, r3, #1
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d072      	beq.n	800ca12 <VSS_SetMecAcceleration+0x106>
    {
      if (0U == hDurationms)
 800c92c:	883b      	ldrh	r3, [r7, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d128      	bne.n	800c984 <VSS_SetMecAcceleration+0x78>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	887a      	ldrh	r2, [r7, #2]
 800c936:	819a      	strh	r2, [r3, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
 800c938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	69d2      	ldr	r2, [r2, #28]
 800c940:	fb03 f202 	mul.w	r2, r3, r2
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	8b5b      	ldrh	r3, [r3, #26]
 800c948:	4619      	mov	r1, r3
 800c94a:	460b      	mov	r3, r1
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	440b      	add	r3, r1
 800c950:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800c952:	fb92 f3f3 	sdiv	r3, r2, r3
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
 800c956:	b21a      	sxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	81da      	strh	r2, [r3, #14]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c962:	b29a      	uxth	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	785b      	ldrb	r3, [r3, #1]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	fb12 f303 	smulbb	r3, r2, r3
 800c96e:	b29b      	uxth	r3, r3
 800c970:	b21a      	sxth	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	81da      	strh	r2, [r3, #14]

        pHandle->hRemainingStep = 0U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	851a      	strh	r2, [r3, #40]	; 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	887a      	ldrh	r2, [r7, #2]
 800c980:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800c982:	e046      	b.n	800ca12 <VSS_SetMecAcceleration+0x106>
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800c984:	883b      	ldrh	r3, [r7, #0]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c98a:	fb02 f303 	mul.w	r3, r2, r3
 800c98e:	4a24      	ldr	r2, [pc, #144]	; (800ca20 <VSS_SetMecAcceleration+0x114>)
 800c990:	fba2 2303 	umull	r2, r3, r2, r3
 800c994:	099b      	lsrs	r3, r3, #6
 800c996:	82fb      	strh	r3, [r7, #22]
        hNbrStep++;
 800c998:	8afb      	ldrh	r3, [r7, #22]
 800c99a:	3301      	adds	r3, #1
 800c99c:	82fb      	strh	r3, [r7, #22]
        pHandle->hRemainingStep = hNbrStep;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8afa      	ldrh	r2, [r7, #22]
 800c9a2:	851a      	strh	r2, [r3, #40]	; 0x28
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	785b      	ldrb	r3, [r3, #1]
 800c9b0:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9b4:	82bb      	strh	r3, [r7, #20]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c9b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	69d2      	ldr	r2, [r2, #28]
 800c9be:	fb03 f202 	mul.w	r2, r3, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8b5b      	ldrh	r3, [r3, #26]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	440b      	add	r3, r1
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	fb92 f3f3 	sdiv	r3, r2, r3
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800c9d4:	827b      	strh	r3, [r7, #18]
        if (0U == hNbrStep)
 800c9d6:	8afb      	ldrh	r3, [r7, #22]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d011      	beq.n	800ca00 <VSS_SetMecAcceleration+0xf4>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c9dc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c9e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c9e4:	1ad3      	subs	r3, r2, r3
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800c9e6:	041a      	lsls	r2, r3, #16
 800c9e8:	8afb      	ldrh	r3, [r7, #22]
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800c9ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9ee:	60fb      	str	r3, [r7, #12]
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	fb03 f202 	mul.w	r2, r3, r2
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	621a      	str	r2, [r3, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	887a      	ldrh	r2, [r7, #2]
 800ca04:	855a      	strh	r2, [r3, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ca0c:	041a      	lsls	r2, r3, #16
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ca12:	bf00      	nop
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	10624dd3 	.word	0x10624dd3

0800ca24 <VSS_SetStartTransition>:
  * - Transition is to be considered ended when Sensor information is
  *  declared 'Reliable' or if function returned value is false.
  * - Called into START state of MC tasks state machine into TSK_MediumFrequencyTask.
  */
__weak bool VSS_SetStartTransition(VirtualSpeedSensor_Handle_t *pHandle, bool bCommand)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800ca30:	2301      	movs	r3, #1
 800ca32:	73fb      	strb	r3, [r7, #15]
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800ca34:	78fb      	ldrb	r3, [r7, #3]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d011      	beq.n	800ca5e <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionStarted = true;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      if (0 == pHandle->hTransitionSteps)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d108      	bne.n	800ca5e <VSS_SetStartTransition+0x3a>
      {
        pHandle->bTransitionEnded = true;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
        bAux = false;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73fb      	strb	r3, [r7, #15]
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <VSS_TransitionEnded>:
  * @retval bool: true if Transition phase ended, false otherwise.
  *
  * - Called into SWITCH_OVER state of MC tasks state machine into TSK_MediumFrequencyTask.
  */
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
#endif
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
	...

0800ca88 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800ca90:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800ca92:	68da      	ldr	r2, [r3, #12]
 800ca94:	4904      	ldr	r1, [pc, #16]	; (800caa8 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	60cb      	str	r3, [r1, #12]
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	e0042000 	.word	0xe0042000

0800caac <LL_ADC_REG_SetSequencerLength>:
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cac6:	bf00      	nop
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <LL_ADC_INJ_SetSequencerLength>:
{
 800cad2:	b480      	push	{r7}
 800cad4:	b083      	sub	sp, #12
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	431a      	orrs	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	639a      	str	r2, [r3, #56]	; 0x38
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	431a      	orrs	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	605a      	str	r2, [r3, #4]
}
 800cb12:	bf00      	nop
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <LL_ADC_Enable>:
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	f043 0201 	orr.w	r2, r3, #1
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	609a      	str	r2, [r3, #8]
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <LL_ADC_INJ_StartConversionExtTrig>:
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689a      	ldr	r2, [r3, #8]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	609a      	str	r2, [r3, #8]
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <LL_ADC_INJ_StopConversionExtTrig>:
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	609a      	str	r2, [r3, #8]
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <LL_ADC_ClearFlag_EOCS>:
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f06f 0202 	mvn.w	r2, #2
 800cb8e:	601a      	str	r2, [r3, #0]
}
 800cb90:	bf00      	nop
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <LL_ADC_ClearFlag_JEOS>:
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f06f 0204 	mvn.w	r2, #4
 800cbaa:	601a      	str	r2, [r3, #0]
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <LL_ADC_EnableIT_JEOS>:
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	605a      	str	r2, [r3, #4]
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <LL_ADC_DisableIT_EOCS>:
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f023 0220 	bic.w	r2, r3, #32
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	605a      	str	r2, [r3, #4]
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <LL_ADC_DisableIT_JEOS>:
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	605a      	str	r2, [r3, #4]
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <LL_TIM_DisableCounter>:
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f023 0201 	bic.w	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	601a      	str	r2, [r3, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <LL_TIM_CC_EnableChannel>:
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1a      	ldr	r2, [r3, #32]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	621a      	str	r2, [r3, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <LL_TIM_CC_DisableChannel>:
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a1a      	ldr	r2, [r3, #32]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	43db      	mvns	r3, r3
 800cc6c:	401a      	ands	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	621a      	str	r2, [r3, #32]
}
 800cc72:	bf00      	nop
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <LL_TIM_CC_IsEnabledChannel>:
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a1a      	ldr	r2, [r3, #32]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	4013      	ands	r3, r2
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d101      	bne.n	800cc9a <LL_TIM_CC_IsEnabledChannel+0x1c>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <LL_TIM_CC_IsEnabledChannel+0x1e>
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <LL_TIM_OC_SetMode>:
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d01c      	beq.n	800ccf4 <LL_TIM_OC_SetMode+0x4c>
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b04      	cmp	r3, #4
 800ccbe:	d017      	beq.n	800ccf0 <LL_TIM_OC_SetMode+0x48>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2b10      	cmp	r3, #16
 800ccc4:	d012      	beq.n	800ccec <LL_TIM_OC_SetMode+0x44>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b40      	cmp	r3, #64	; 0x40
 800ccca:	d00d      	beq.n	800cce8 <LL_TIM_OC_SetMode+0x40>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccd2:	d007      	beq.n	800cce4 <LL_TIM_OC_SetMode+0x3c>
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccda:	d101      	bne.n	800cce0 <LL_TIM_OC_SetMode+0x38>
 800ccdc:	2305      	movs	r3, #5
 800ccde:	e00a      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800cce0:	2306      	movs	r3, #6
 800cce2:	e008      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800cce4:	2304      	movs	r3, #4
 800cce6:	e006      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800cce8:	2303      	movs	r3, #3
 800ccea:	e004      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e002      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e000      	b.n	800ccf6 <LL_TIM_OC_SetMode+0x4e>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3318      	adds	r3, #24
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	4a0e      	ldr	r2, [pc, #56]	; (800cd3c <LL_TIM_OC_SetMode+0x94>)
 800cd02:	5cd3      	ldrb	r3, [r2, r3]
 800cd04:	440b      	add	r3, r1
 800cd06:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	490c      	ldr	r1, [pc, #48]	; (800cd40 <LL_TIM_OC_SetMode+0x98>)
 800cd10:	5ccb      	ldrb	r3, [r1, r3]
 800cd12:	4619      	mov	r1, r3
 800cd14:	2373      	movs	r3, #115	; 0x73
 800cd16:	408b      	lsls	r3, r1
 800cd18:	43db      	mvns	r3, r3
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	4908      	ldr	r1, [pc, #32]	; (800cd40 <LL_TIM_OC_SetMode+0x98>)
 800cd20:	5ccb      	ldrb	r3, [r1, r3]
 800cd22:	4619      	mov	r1, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	408b      	lsls	r3, r1
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	601a      	str	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	0800f4a4 	.word	0x0800f4a4
 800cd40:	0800f4ac 	.word	0x0800f4ac

0800cd44 <LL_TIM_OC_SetCompareCH1>:
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	635a      	str	r2, [r3, #52]	; 0x34
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <LL_TIM_OC_SetCompareCH2>:
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <LL_TIM_OC_SetCompareCH3>:
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <LL_TIM_OC_SetCompareCH4>:
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <LL_TIM_EnableAllOutputs>:
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdc0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <LL_TIM_DisableAllOutputs>:
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <LL_TIM_ClearFlag_UPDATE>:
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f06f 0201 	mvn.w	r2, #1
 800ce02:	611a      	str	r2, [r3, #16]
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d101      	bne.n	800ce28 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800ce24:	2301      	movs	r3, #1
 800ce26:	e000      	b.n	800ce2a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <LL_TIM_ClearFlag_BRK>:
{
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce44:	611a      	str	r2, [r3, #16]
}
 800ce46:	bf00      	nop
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <LL_TIM_EnableIT_UPDATE>:
{
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	f043 0201 	orr.w	r2, r3, #1
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60da      	str	r2, [r3, #12]
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <LL_TIM_DisableIT_UPDATE>:
{
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	f023 0201 	bic.w	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60da      	str	r2, [r3, #12]
}
 800ce86:	bf00      	nop
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <LL_TIM_EnableIT_BRK>:
{
 800ce92:	b480      	push	{r7}
 800ce94:	b083      	sub	sp, #12
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60da      	str	r2, [r3, #12]
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <LL_GPIO_SetOutputPin>:
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	619a      	str	r2, [r3, #24]
}
 800cec2:	bf00      	nop
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <LL_GPIO_ResetOutputPin>:
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	041a      	lsls	r2, r3, #16
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	619a      	str	r2, [r3, #24]
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <__LL_TIM_OC_EnablePreload>:

/* Private functions ---------------------------------------------------------*/

/* Local redefinition of both LL_TIM_OC_EnablePreload & LL_TIM_OC_DisablePreload */
__STATIC_INLINE void __LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800ceec:	b4b0      	push	{r4, r5, r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d01c      	beq.n	800cf36 <__LL_TIM_OC_EnablePreload+0x4a>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b04      	cmp	r3, #4
 800cf00:	d017      	beq.n	800cf32 <__LL_TIM_OC_EnablePreload+0x46>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b10      	cmp	r3, #16
 800cf06:	d012      	beq.n	800cf2e <__LL_TIM_OC_EnablePreload+0x42>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b40      	cmp	r3, #64	; 0x40
 800cf0c:	d00d      	beq.n	800cf2a <__LL_TIM_OC_EnablePreload+0x3e>
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf14:	d007      	beq.n	800cf26 <__LL_TIM_OC_EnablePreload+0x3a>
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf1c:	d101      	bne.n	800cf22 <__LL_TIM_OC_EnablePreload+0x36>
 800cf1e:	2305      	movs	r3, #5
 800cf20:	e00a      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf22:	2306      	movs	r3, #6
 800cf24:	e008      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf26:	2304      	movs	r3, #4
 800cf28:	e006      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e004      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf2e:	2302      	movs	r3, #2
 800cf30:	e002      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf32:	2301      	movs	r3, #1
 800cf34:	e000      	b.n	800cf38 <__LL_TIM_OC_EnablePreload+0x4c>
 800cf36:	2300      	movs	r3, #0
 800cf38:	461d      	mov	r5, r3
  register volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	461a      	mov	r2, r3
 800cf40:	4629      	mov	r1, r5
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <__LL_TIM_OC_EnablePreload+0x7c>)
 800cf44:	5c5b      	ldrb	r3, [r3, r1]
 800cf46:	4413      	add	r3, r2
 800cf48:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800cf4a:	6822      	ldr	r2, [r4, #0]
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <__LL_TIM_OC_EnablePreload+0x80>)
 800cf50:	5c5b      	ldrb	r3, [r3, r1]
 800cf52:	4619      	mov	r1, r3
 800cf54:	2308      	movs	r3, #8
 800cf56:	408b      	lsls	r3, r1
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	6023      	str	r3, [r4, #0]
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bcb0      	pop	{r4, r5, r7}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	0800f4a4 	.word	0x0800f4a4
 800cf6c:	0800f4ac 	.word	0x0800f4ac

0800cf70 <__LL_TIM_OC_DisablePreload>:

__STATIC_INLINE void __LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800cf70:	b4b0      	push	{r4, r5, r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d01c      	beq.n	800cfba <__LL_TIM_OC_DisablePreload+0x4a>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b04      	cmp	r3, #4
 800cf84:	d017      	beq.n	800cfb6 <__LL_TIM_OC_DisablePreload+0x46>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b10      	cmp	r3, #16
 800cf8a:	d012      	beq.n	800cfb2 <__LL_TIM_OC_DisablePreload+0x42>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b40      	cmp	r3, #64	; 0x40
 800cf90:	d00d      	beq.n	800cfae <__LL_TIM_OC_DisablePreload+0x3e>
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf98:	d007      	beq.n	800cfaa <__LL_TIM_OC_DisablePreload+0x3a>
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfa0:	d101      	bne.n	800cfa6 <__LL_TIM_OC_DisablePreload+0x36>
 800cfa2:	2305      	movs	r3, #5
 800cfa4:	e00a      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfa6:	2306      	movs	r3, #6
 800cfa8:	e008      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfaa:	2304      	movs	r3, #4
 800cfac:	e006      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e004      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e002      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e000      	b.n	800cfbc <__LL_TIM_OC_DisablePreload+0x4c>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	461d      	mov	r5, r3
  register volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3318      	adds	r3, #24
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <__LL_TIM_OC_DisablePreload+0x7c>)
 800cfc8:	5c5b      	ldrb	r3, [r3, r1]
 800cfca:	4413      	add	r3, r2
 800cfcc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <__LL_TIM_OC_DisablePreload+0x80>)
 800cfd4:	5c5b      	ldrb	r3, [r3, r1]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	2308      	movs	r3, #8
 800cfda:	408b      	lsls	r3, r1
 800cfdc:	43db      	mvns	r3, r3
 800cfde:	4013      	ands	r3, r2
 800cfe0:	6023      	str	r3, [r4, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bcb0      	pop	{r4, r5, r7}
 800cfea:	4770      	bx	lr
 800cfec:	0800f4a4 	.word	0x0800f4a4
 800cff0:	0800f4ac 	.word	0x0800f4ac

0800cff4 <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC.
  * 
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void R3_1_Init(PWMC_R3_1_Handle_t *pHandle)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60bb      	str	r3, [r7, #8]

  if ((uint32_t)pHandle == (uint32_t)&pHandle->_Super)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	429a      	cmp	r2, r3
 800d018:	d14d      	bne.n	800d0b6 <R3_1_Init+0xc2>
  {

    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOCS(ADCx);
 800d01a:	68b8      	ldr	r0, [r7, #8]
 800d01c:	f7ff fddc 	bl	800cbd8 <LL_ADC_DisableIT_EOCS>
    LL_ADC_ClearFlag_EOCS(ADCx);
 800d020:	68b8      	ldr	r0, [r7, #8]
 800d022:	f7ff fdad 	bl	800cb80 <LL_ADC_ClearFlag_EOCS>
    LL_ADC_DisableIT_JEOS(ADCx);
 800d026:	68b8      	ldr	r0, [r7, #8]
 800d028:	f7ff fde6 	bl	800cbf8 <LL_ADC_DisableIT_JEOS>
    LL_ADC_ClearFlag_JEOS(ADCx);
 800d02c:	68b8      	ldr	r0, [r7, #8]
 800d02e:	f7ff fdb5 	bl	800cb9c <LL_ADC_ClearFlag_JEOS>

    /* disable main TIM counter to ensure
     * a synchronous start by TIM2 trigger */
    LL_TIM_DisableCounter(TIMx);
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7ff fdf0 	bl	800cc18 <LL_TIM_DisableCounter>
    if ( TIMx == TIM1 )
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4a21      	ldr	r2, [pc, #132]	; (800d0c0 <R3_1_Init+0xcc>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d103      	bne.n	800d048 <R3_1_Init+0x54>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800d040:	2001      	movs	r0, #1
 800d042:	f7ff fd21 	bl	800ca88 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800d046:	e006      	b.n	800d056 <R3_1_Init+0x62>
    }
#if defined(TIM8)
    else if ( TIMx == TIM8 )
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4a1e      	ldr	r2, [pc, #120]	; (800d0c4 <R3_1_Init+0xd0>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d102      	bne.n	800d056 <R3_1_Init+0x62>
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800d050:	2002      	movs	r0, #2
 800d052:	f7ff fd19 	bl	800ca88 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif

    LL_TIM_ClearFlag_BRK(TIMx);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff feed 	bl	800ce36 <LL_TIM_ClearFlag_BRK>

    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <R3_1_Init+0x7c>
    {
      LL_TIM_EnableIT_BRK( TIMx );
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7ff ff11 	bl	800ce92 <LL_TIM_EnableIT_BRK>
    }

    /* Enable PWM channel */
    LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800d070:	f240 5155 	movw	r1, #1365	; 0x555
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fddf 	bl	800cc38 <LL_TIM_CC_EnableChannel>

    /* ADC Enable (must be done after calibration) */
    LL_ADC_Enable( ADCx );
 800d07a:	68b8      	ldr	r0, [r7, #8]
 800d07c:	f7ff fd4f 	bl	800cb1e <LL_ADC_Enable>

    /* reset regular conversion sequencer length set by cubeMX */
    LL_ADC_REG_SetSequencerLength( ADCx, LL_ADC_REG_SEQ_SCAN_DISABLE );
 800d080:	2100      	movs	r1, #0
 800d082:	68b8      	ldr	r0, [r7, #8]
 800d084:	f7ff fd12 	bl	800caac <LL_ADC_REG_SetSequencerLength>
    
    /* ADCx Injected conversions end interrupt enabling */
    LL_ADC_ClearFlag_JEOS( ADCx );
 800d088:	68b8      	ldr	r0, [r7, #8]
 800d08a:	f7ff fd87 	bl	800cb9c <LL_ADC_ClearFlag_JEOS>
    LL_ADC_EnableIT_JEOS( ADCx );
 800d08e:	68b8      	ldr	r0, [r7, #8]
 800d090:	f7ff fd92 	bl	800cbb8 <LL_ADC_EnableIT_JEOS>

    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d09a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* reset injected conversion sequencer length set by cubeMX */
    LL_ADC_INJ_SetSequencerLength( ADCx, LL_ADC_INJ_SEQ_SCAN_DISABLE );
 800d09e:	2100      	movs	r1, #0
 800d0a0:	68b8      	ldr	r0, [r7, #8]
 800d0a2:	f7ff fd16 	bl	800cad2 <LL_ADC_INJ_SetSequencerLength>

    /* Clear the flags */
    pHandle->OverCurrentFlag = false;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    pHandle->_Super.DTTest = 0u;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  }
}
 800d0b6:	bf00      	nop
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	40010000 	.word	0x40010000
 800d0c4:	40010400 	.word	0x40010400

0800d0c8 <R3_1_SetOffsetCalib>:
/*
  * @brief  Stores in @p pHdl handler the calibrated @p offsets.
  * 
  */
__weak void R3_1_SetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	671a      	str	r2, [r3, #112]	; 0x70
  pHandle->PhaseBOffset = offsets->phaseBOffset;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	675a      	str	r2, [r3, #116]	; 0x74
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	679a      	str	r2, [r3, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 800d0fc:	bf00      	nop
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <R3_1_GetOffsetCalib>:
/*
  * @brief Reads the calibrated @p offsets stored in @p pHdl.
  * 
  */
__weak void R3_1_GetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	60fb      	str	r3, [r7, #12]

  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11a:	461a      	mov	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	601a      	str	r2, [r3, #0]
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d124:	461a      	mov	r2, r3
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	605a      	str	r2, [r3, #4]
  offsets->phaseCOffset = pHandle->PhaseCOffset;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d12e:	461a      	mov	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	609a      	str	r2, [r3, #8]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <R3_1_CurrentReadingCalibration>:
  * @brief  Stores into the @p pHdl the voltage present on Ia and Ib current 
  *         feedback analog channels when no current is flowing into the motor.
  * 
  */
__weak void R3_1_CurrentReadingCalibration(PWMC_Handle_t *pHdl)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	617b      	str	r3, [r7, #20]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	613b      	str	r3, [r7, #16]

  if (false == pHandle->_Super.offsetCalibStatus)
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d15c:	f083 0301 	eor.w	r3, r3, #1
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d077      	beq.n	800d256 <R3_1_CurrentReadingCalibration+0x116>
  {
    volatile PWMC_GetPhaseCurr_Cb_t GetPhaseCurrCbSave;
    volatile PWMC_SetSampPointSectX_Cb_t SetSampPointSectXCbSave;

    /* Save callback routines */
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	60bb      	str	r3, [r7, #8]

    pHandle->PhaseAOffset = 0u;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2200      	movs	r2, #0
 800d176:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset = 0u;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2200      	movs	r2, #0
 800d17c:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PhaseCOffset = 0u;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2200      	movs	r2, #0
 800d182:	679a      	str	r2, [r3, #120]	; 0x78

    pHandle->PolarizationCounter = 0u;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    /* It forces inactive level on TIMx CHy and CHyN */
    LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800d18c:	f240 5155 	movw	r1, #1365	; 0x555
 800d190:	6938      	ldr	r0, [r7, #16]
 800d192:	f7ff fd62 	bl	800cc5a <LL_TIM_CC_DisableChannel>

    /* Offset calibration for A & B phases */
    /* Change function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	4a4f      	ldr	r2, [pc, #316]	; (800d2d8 <R3_1_CurrentReadingCalibration+0x198>)
 800d19a:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	4a4f      	ldr	r2, [pc, #316]	; (800d2dc <R3_1_CurrentReadingCalibration+0x19c>)
 800d1a0:	615a      	str	r2, [r3, #20]

    pHandle->CalibSector = SECTOR_5;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2204      	movs	r2, #4
 800d1a6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    /* Required to force first polarization conversion on SECTOR_5*/
    pHandle->_Super.Sector = SECTOR_5;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2204      	movs	r2, #4
 800d1ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    R3_1_SwitchOnPWM( &pHandle->_Super );
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 fa76 	bl	800d6a6 <R3_1_SwitchOnPWM>

    /* Wait for NB_CONVERSIONS to be executed */
    waitForPolarizationEnd( TIMx,
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f103 0144 	add.w	r1, r3, #68	; 0x44
                            &pHandle->_Super.SWerror,
                            pHandle->pParams_str->RepetitionCounter,
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 800d1c6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	3387      	adds	r3, #135	; 0x87
 800d1ce:	6938      	ldr	r0, [r7, #16]
 800d1d0:	f7fd fc6d 	bl	800aaae <waitForPolarizationEnd>
                            &pHandle->PolarizationCounter );

    R3_1_SwitchOffPWM( &pHandle->_Super );
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fb0e 	bl	800d7f8 <R3_1_SwitchOffPWM>

    /* Offset calibration for C phase */
    /* Reset PolarizationCounter */
    pHandle->PolarizationCounter = 0u;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    /* Change function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	4a3e      	ldr	r2, [pc, #248]	; (800d2e0 <R3_1_CurrentReadingCalibration+0x1a0>)
 800d1e8:	601a      	str	r2, [r3, #0]

    /* "Phase C current calibration to verify"    */
    pHandle->CalibSector = SECTOR_1;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    /* Required to force first polarization conversion on SECTOR_1*/
    pHandle->_Super.Sector = SECTOR_1;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    R3_1_SwitchOnPWM( &pHandle->_Super );
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 fa52 	bl	800d6a6 <R3_1_SwitchOnPWM>

    /* Wait for NB_CONVERSIONS to be executed */
    waitForPolarizationEnd( TIMx,
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f103 0144 	add.w	r1, r3, #68	; 0x44
                            &pHandle->_Super.SWerror,
                            pHandle->pParams_str->RepetitionCounter,
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    waitForPolarizationEnd( TIMx,
 800d20e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	3387      	adds	r3, #135	; 0x87
 800d216:	6938      	ldr	r0, [r7, #16]
 800d218:	f7fd fc49 	bl	800aaae <waitForPolarizationEnd>
                            &pHandle->PolarizationCounter );

    R3_1_SwitchOffPWM( &pHandle->_Super );
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 faea 	bl	800d7f8 <R3_1_SwitchOffPWM>

    /* Shift of N bits to divide for the NB_ CONVERSIONS = 16= 2^N with N = 4 */
    pHandle->PhaseAOffset >>= 3;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d228:	08da      	lsrs	r2, r3, #3
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset >>= 3;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d232:	08da      	lsrs	r2, r3, #3
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PhaseCOffset >>= 3;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d23c:	08da      	lsrs	r2, r3, #3
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	679a      	str	r2, [r3, #120]	; 0x78
    pHandle->_Super.offsetCalibStatus = true;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Change back function to be executed in ADCx_ISR */
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	615a      	str	r2, [r3, #20]
  }

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 800d256:	2101      	movs	r1, #1
 800d258:	6938      	ldr	r0, [r7, #16]
 800d25a:	f7ff fe89 	bl	800cf70 <__LL_TIM_OC_DisablePreload>
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 800d25e:	2110      	movs	r1, #16
 800d260:	6938      	ldr	r0, [r7, #16]
 800d262:	f7ff fe85 	bl	800cf70 <__LL_TIM_OC_DisablePreload>
  __LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 800d266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d26a:	6938      	ldr	r0, [r7, #16]
 800d26c:	f7ff fe80 	bl	800cf70 <__LL_TIM_OC_DisablePreload>

  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d276:	4619      	mov	r1, r3
 800d278:	6938      	ldr	r0, [r7, #16]
 800d27a:	f7ff fd63 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->Half_PWMPeriod);
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d284:	4619      	mov	r1, r3
 800d286:	6938      	ldr	r0, [r7, #16]
 800d288:	f7ff fd6a 	bl	800cd60 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->Half_PWMPeriod);
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d292:	4619      	mov	r1, r3
 800d294:	6938      	ldr	r0, [r7, #16]
 800d296:	f7ff fd71 	bl	800cd7c <LL_TIM_OC_SetCompareCH3>

  /* Enable TIMx preload */
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 800d29a:	2101      	movs	r1, #1
 800d29c:	6938      	ldr	r0, [r7, #16]
 800d29e:	f7ff fe25 	bl	800ceec <__LL_TIM_OC_EnablePreload>
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 800d2a2:	2110      	movs	r1, #16
 800d2a4:	6938      	ldr	r0, [r7, #16]
 800d2a6:	f7ff fe21 	bl	800ceec <__LL_TIM_OC_EnablePreload>
  __LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 800d2aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2ae:	6938      	ldr	r0, [r7, #16]
 800d2b0:	f7ff fe1c 	bl	800ceec <__LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800d2b4:	f240 5155 	movw	r1, #1365	; 0x555
 800d2b8:	6938      	ldr	r0, [r7, #16]
 800d2ba:	f7ff fcbd 	bl	800cc38 <LL_TIM_CC_EnableChannel>


  /* sector and phase sequence for the switch on phase */
  pHandle->_Super.Sector = SECTOR_5;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 800d2ce:	bf00      	nop
 800d2d0:	3718      	adds	r7, #24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0800d509 	.word	0x0800d509
 800d2dc:	0800d92b 	.word	0x0800d92b
 800d2e0:	0800d583 	.word	0x0800d583

0800d2e4 <R3_1_GetPhaseCurrents>:
/*
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	61fb      	str	r3, [r7, #28]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	61bb      	str	r3, [r7, #24]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	617b      	str	r3, [r7, #20]
  uint16_t hReg1;
  uint16_t hReg2;
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d30a:	69b8      	ldr	r0, [r7, #24]
 800d30c:	f7ff fca5 	bl	800cc5a <LL_TIM_CC_DisableChannel>

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d316:	74fb      	strb	r3, [r7, #19]

  hReg1 =  (ADCx->JDR1)*2;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	823b      	strh	r3, [r7, #16]
  hReg2 =  (ADCx->JDR2)*2;
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d326:	b29b      	uxth	r3, r3
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	81fb      	strh	r3, [r7, #14]

  switch ( bSector )
 800d32c:	7cfb      	ldrb	r3, [r7, #19]
 800d32e:	2b05      	cmp	r3, #5
 800d330:	f200 80c9 	bhi.w	800d4c6 <R3_1_GetPhaseCurrents+0x1e2>
 800d334:	a201      	add	r2, pc, #4	; (adr r2, 800d33c <R3_1_GetPhaseCurrents+0x58>)
 800d336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33a:	bf00      	nop
 800d33c:	0800d3c7 	.word	0x0800d3c7
 800d340:	0800d447 	.word	0x0800d447
 800d344:	0800d447 	.word	0x0800d447
 800d348:	0800d355 	.word	0x0800d355
 800d34c:	0800d355 	.word	0x0800d355
 800d350:	0800d3c7 	.word	0x0800d3c7
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d358:	461a      	mov	r2, r3
 800d35a:	8a3b      	ldrh	r3, [r7, #16]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d366:	dc04      	bgt.n	800d372 <R3_1_GetPhaseCurrents+0x8e>
      {
        pStator_Currents->a = -INT16_MAX;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	f248 0201 	movw	r2, #32769	; 0x8001
 800d36e:	801a      	strh	r2, [r3, #0]
 800d370:	e00c      	b.n	800d38c <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( wAux > INT16_MAX )
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d378:	db04      	blt.n	800d384 <R3_1_GetPhaseCurrents+0xa0>
      {
        pStator_Currents->a = INT16_MAX;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d380:	801a      	strh	r2, [r3, #0]
 800d382:	e003      	b.n	800d38c <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	b21a      	sxth	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d390:	461a      	mov	r2, r3
 800d392:	89fb      	ldrh	r3, [r7, #14]
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d39e:	dc04      	bgt.n	800d3aa <R3_1_GetPhaseCurrents+0xc6>
      {
        pStator_Currents->b = -INT16_MAX;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	f248 0201 	movw	r2, #32769	; 0x8001
 800d3a6:	805a      	strh	r2, [r3, #2]
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
      }
    }
    break;
 800d3a8:	e08e      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux > INT16_MAX )
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3b0:	db04      	blt.n	800d3bc <R3_1_GetPhaseCurrents+0xd8>
        pStator_Currents->b = INT16_MAX;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d3b8:	805a      	strh	r2, [r3, #2]
    break;
 800d3ba:	e085      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->b = ( int16_t )wAux;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	b21a      	sxth	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	805a      	strh	r2, [r3, #2]
    break;
 800d3c4:	e080      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
    case SECTOR_6:
    case SECTOR_1:
    {
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	8a3b      	ldrh	r3, [r7, #16]
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d3d8:	dc04      	bgt.n	800d3e4 <R3_1_GetPhaseCurrents+0x100>
      {
        pStator_Currents->b = -INT16_MAX;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	f248 0201 	movw	r2, #32769	; 0x8001
 800d3e0:	805a      	strh	r2, [r3, #2]
 800d3e2:	e00c      	b.n	800d3fe <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( wAux > INT16_MAX )
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3ea:	db04      	blt.n	800d3f6 <R3_1_GetPhaseCurrents+0x112>
      {
        pStator_Currents->b = INT16_MAX;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d3f2:	805a      	strh	r2, [r3, #2]
 800d3f4:	e003      	b.n	800d3fe <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	b21a      	sxth	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	805a      	strh	r2, [r3, #2]
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ia = -Ic -Ib */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d402:	461a      	mov	r2, r3
 800d404:	89fb      	ldrh	r3, [r7, #14]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	60bb      	str	r3, [r7, #8]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	425b      	negs	r3, r3
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( wAux > INT16_MAX )
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d41e:	db04      	blt.n	800d42a <R3_1_GetPhaseCurrents+0x146>
      {
        pStator_Currents->a = INT16_MAX;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d426:	801a      	strh	r2, [r3, #0]
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
      }
    }
    break;
 800d428:	e04e      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux < -INT16_MAX )
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d430:	dc04      	bgt.n	800d43c <R3_1_GetPhaseCurrents+0x158>
        pStator_Currents->a = -INT16_MAX;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	f248 0201 	movw	r2, #32769	; 0x8001
 800d438:	801a      	strh	r2, [r3, #0]
    break;
 800d43a:	e045      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->a = ( int16_t )wAux;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	b21a      	sxth	r2, r3
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	801a      	strh	r2, [r3, #0]
    break;
 800d444:	e040      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
    case SECTOR_2:
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44a:	461a      	mov	r2, r3
 800d44c:	8a3b      	ldrh	r3, [r7, #16]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	60bb      	str	r3, [r7, #8]
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d458:	dc04      	bgt.n	800d464 <R3_1_GetPhaseCurrents+0x180>
      {
        pStator_Currents->a = -INT16_MAX;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	f248 0201 	movw	r2, #32769	; 0x8001
 800d460:	801a      	strh	r2, [r3, #0]
 800d462:	e00c      	b.n	800d47e <R3_1_GetPhaseCurrents+0x19a>
      }
      else  if ( wAux > INT16_MAX )
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d46a:	db04      	blt.n	800d476 <R3_1_GetPhaseCurrents+0x192>
      {
        pStator_Currents->a = INT16_MAX;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d472:	801a      	strh	r2, [r3, #0]
 800d474:	e003      	b.n	800d47e <R3_1_GetPhaseCurrents+0x19a>
      }
      else
      {
        pStator_Currents->a = ( int16_t )wAux;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	b21a      	sxth	r2, r3
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	801a      	strh	r2, [r3, #0]
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d482:	461a      	mov	r2, r3
 800d484:	89fb      	ldrh	r3, [r7, #14]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	60bb      	str	r3, [r7, #8]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	425b      	negs	r3, r3
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d494:	1a9b      	subs	r3, r3, r2
 800d496:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d49e:	db04      	blt.n	800d4aa <R3_1_GetPhaseCurrents+0x1c6>
      {
        pStator_Currents->b = INT16_MAX;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d4a6:	805a      	strh	r2, [r3, #2]
      else
      {
        pStator_Currents->b = ( int16_t )wAux;
      }
    }
    break;
 800d4a8:	e00e      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
      else  if ( wAux < -INT16_MAX )
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d4b0:	dc04      	bgt.n	800d4bc <R3_1_GetPhaseCurrents+0x1d8>
        pStator_Currents->b = -INT16_MAX;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	f248 0201 	movw	r2, #32769	; 0x8001
 800d4b8:	805a      	strh	r2, [r3, #2]
    break;
 800d4ba:	e005      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>
        pStator_Currents->b = ( int16_t )wAux;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	b21a      	sxth	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	805a      	strh	r2, [r3, #2]
    break;
 800d4c4:	e000      	b.n	800d4c8 <R3_1_GetPhaseCurrents+0x1e4>

    default:
    {
    }
    break;
 800d4c6:	bf00      	nop
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  pHandle->_Super.Ib = pStator_Currents->b;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	425b      	negs	r3, r3
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	b21a      	sxth	r2, r3
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 800d500:	bf00      	nop
 800d502:	3720      	adds	r7, #32
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <R3_1_HFCurrentsCalibrationAB>:
  * @param  pHdl: Pointer on the target component instance.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d52a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d52e:	6938      	ldr	r0, [r7, #16]
 800d530:	f7ff fb93 	bl	800cc5a <LL_TIM_CC_DisableChannel>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	2b0f      	cmp	r3, #15
 800d53e:	d816      	bhi.n	800d56e <R3_1_HFCurrentsCalibrationAB+0x66>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d548:	441a      	add	r2, r3
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	671a      	str	r2, [r3, #112]	; 0x70
    pHandle->PhaseBOffset += ADCx->JDR2;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d556:	441a      	add	r2, r3
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	675a      	str	r2, [r3, #116]	; 0x74
    pHandle->PolarizationCounter++;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d562:	b2db      	uxtb	r3, r3
 800d564:	3301      	adds	r3, #1
 800d566:	b2da      	uxtb	r2, r3
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = 0;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2200      	movs	r2, #0
 800d578:	805a      	strh	r2, [r3, #2]
}
 800d57a:	bf00      	nop
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <R3_1_HFCurrentsCalibrationC>:
  * @param  pHdl: Pointer on the target component instance.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800d5a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d5a8:	6938      	ldr	r0, [r7, #16]
 800d5aa:	f7ff fb56 	bl	800cc5a <LL_TIM_CC_DisableChannel>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b0f      	cmp	r3, #15
 800d5b8:	d80f      	bhi.n	800d5da <R3_1_HFCurrentsCalibrationC+0x58>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5c2:	441a      	add	r2, r3
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	679a      	str	r2, [r3, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = 0;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	805a      	strh	r2, [r3, #2]
}
 800d5e6:	bf00      	nop
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <R3_1_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d60e:	68b8      	ldr	r0, [r7, #8]
 800d610:	f7ff fbf0 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>
  
  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
 800d614:	2100      	movs	r1, #0
 800d616:	68b8      	ldr	r0, [r7, #8]
 800d618:	f7ff fb94 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
 800d61c:	2100      	movs	r1, #0
 800d61e:	68b8      	ldr	r0, [r7, #8]
 800d620:	f7ff fb9e 	bl	800cd60 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );
 800d624:	2100      	movs	r1, #0
 800d626:	68b8      	ldr	r0, [r7, #8]
 800d628:	f7ff fba8 	bl	800cd7c <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d62c:	bf00      	nop
 800d62e:	68b8      	ldr	r0, [r7, #8]
 800d630:	f7ff fbee 	bl	800ce10 <LL_TIM_IsActiveFlag_UPDATE>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0f9      	beq.n	800d62e <R3_1_TurnOnLowSides+0x40>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d63a:	68b8      	ldr	r0, [r7, #8]
 800d63c:	f7ff fbda 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	f7ff fbb7 	bl	800cdb4 <LL_TIM_EnableAllOutputs>
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d64c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d650:	2b02      	cmp	r3, #2
 800d652:	d124      	bne.n	800d69e <R3_1_TurnOnLowSides+0xb0>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d65a:	689a      	ldr	r2, [r3, #8]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	4619      	mov	r1, r3
 800d666:	4610      	mov	r0, r2
 800d668:	f7ff fc23 	bl	800ceb2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	4619      	mov	r1, r3
 800d67e:	4610      	mov	r0, r2
 800d680:	f7ff fc17 	bl	800ceb2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d68a:	691a      	ldr	r2, [r3, #16]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	4619      	mov	r1, r3
 800d696:	4610      	mov	r0, r2
 800d698:	f7ff fc0b 	bl	800ceb2 <LL_GPIO_SetOutputPin>
  }
  return; 
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
}
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <R3_1_SwitchOnPWM>:
  * @brief  Enables PWM generation on the proper Timer peripheral acting on MOE bit.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6ca:	085b      	lsrs	r3, r3, #1
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	68b8      	ldr	r0, [r7, #8]
 800d6d2:	f7ff fb37 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6dc:	085b      	lsrs	r3, r3, #1
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	68b8      	ldr	r0, [r7, #8]
 800d6e4:	f7ff fb3c 	bl	800cd60 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d6ee:	085b      	lsrs	r3, r3, #1
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	68b8      	ldr	r0, [r7, #8]
 800d6f6:	f7ff fb41 	bl	800cd7c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d700:	3b05      	subs	r3, #5
 800d702:	4619      	mov	r1, r3
 800d704:	68b8      	ldr	r0, [r7, #8]
 800d706:	f7ff fb47 	bl	800cd98 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d70a:	68b8      	ldr	r0, [r7, #8]
 800d70c:	f7ff fb72 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d710:	bf00      	nop
 800d712:	68b8      	ldr	r0, [r7, #8]
 800d714:	f7ff fb7c 	bl	800ce10 <LL_TIM_IsActiveFlag_UPDATE>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0f9      	beq.n	800d712 <R3_1_SwitchOnPWM+0x6c>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d71e:	68b8      	ldr	r0, [r7, #8]
 800d720:	f7ff fb68 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );
 800d730:	68b8      	ldr	r0, [r7, #8]
 800d732:	f7ff fb3f 	bl	800cdb4 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d740:	2b02      	cmp	r3, #2
 800d742:	d14f      	bne.n	800d7e4 <R3_1_SwitchOnPWM+0x13e>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	6a1a      	ldr	r2, [r3, #32]
 800d748:	f240 5355 	movw	r3, #1365	; 0x555
 800d74c:	4013      	ands	r3, r2
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d024      	beq.n	800d79c <R3_1_SwitchOnPWM+0xf6>
    {
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d758:	689a      	ldr	r2, [r3, #8]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f7ff fba4 	bl	800ceb2 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7ff fb98 	bl	800ceb2 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d788:	691a      	ldr	r2, [r3, #16]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d790:	69db      	ldr	r3, [r3, #28]
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f7ff fb8c 	bl	800ceb2 <LL_GPIO_SetOutputPin>
 800d79a:	e023      	b.n	800d7e4 <R3_1_SwitchOnPWM+0x13e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7ff fb8d 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f7ff fb81 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7d2:	691a      	ldr	r2, [r3, #16]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7da:	69db      	ldr	r3, [r3, #28]
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4610      	mov	r0, r2
 800d7e0:	f7ff fb75 	bl	800cece <LL_GPIO_ResetOutputPin>
    }
  }

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d7e4:	68b8      	ldr	r0, [r7, #8]
 800d7e6:	f7ff fb05 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800d7ea:	68b8      	ldr	r0, [r7, #8]
 800d7ec:	f7ff fb31 	bl	800ce52 <LL_TIM_EnableIT_UPDATE>

  return; 
 800d7f0:	bf00      	nop
}
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <R3_1_SwitchOffPWM>:
  * @brief  Disables PWM generation on the proper Timer peripheral acting on MOE bit.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f7ff fb2f 	bl	800ce72 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
 800d81c:	68b8      	ldr	r0, [r7, #8]
 800d81e:	f7ff fad9 	bl	800cdd4 <LL_TIM_DisableAllOutputs>
  if (pHandle->BrakeActionLock == true)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d12a      	bne.n	800d882 <R3_1_SwitchOffPWM+0x8a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d836:	2b02      	cmp	r3, #2
 800d838:	d123      	bne.n	800d882 <R3_1_SwitchOffPWM+0x8a>
    {
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d840:	689a      	ldr	r2, [r3, #8]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7ff fb3e 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7ff fb32 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d870:	691a      	ldr	r2, [r3, #16]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	4619      	mov	r1, r3
 800d87c:	4610      	mov	r0, r2
 800d87e:	f7ff fb26 	bl	800cece <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d882:	68b8      	ldr	r0, [r7, #8]
 800d884:	f7ff fab6 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800d888:	bf00      	nop
 800d88a:	68b8      	ldr	r0, [r7, #8]
 800d88c:	f7ff fac0 	bl	800ce10 <LL_TIM_IsActiveFlag_UPDATE>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0f9      	beq.n	800d88a <R3_1_SwitchOffPWM+0x92>
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);
 800d896:	68b8      	ldr	r0, [r7, #8]
 800d898:	f7ff faac 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  return;
 800d89c:	bf00      	nop
}
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <R3_1_WriteTIMRegisters>:
  * @param  hCCR4Reg: New capture/compare register value, written in timer clock counts.
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t R3_1_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t hCCR4Reg)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	807b      	strh	r3, [r7, #2]
  uint16_t hAux;
      
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	613b      	str	r3, [r7, #16]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	60fb      	str	r3, [r7, #12]

  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fa3d 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f7ff fa44 	bl	800cd60 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d8de:	4619      	mov	r1, r3
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f7ff fa4b 	bl	800cd7c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4 (TIMx,hCCR4Reg);
 800d8e6:	887b      	ldrh	r3, [r7, #2]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff fa54 	bl	800cd98 <LL_TIM_OC_SetCompareCH4>
  
  /* Limit for update event */
  /* Check the status flag. If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4))
 800d8f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7ff f9c2 	bl	800cc7e <LL_TIM_CC_IsEnabledChannel>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <R3_1_WriteTIMRegisters+0x62>
  {
    hAux = MC_DURATION;
 800d900:	2301      	movs	r3, #1
 800d902:	82fb      	strh	r3, [r7, #22]
 800d904:	e001      	b.n	800d90a <R3_1_WriteTIMRegisters+0x66>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800d906:	2300      	movs	r3, #0
 800d908:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d910:	2b01      	cmp	r3, #1
 800d912:	d105      	bne.n	800d920 <R3_1_WriteTIMRegisters+0x7c>
  {
    hAux = MC_DURATION;
 800d914:	2301      	movs	r3, #1
 800d916:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  return hAux;
 800d920:	8afb      	ldrh	r3, [r7, #22]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <R3_1_SetADCSampPointCalibration>:
 * 
 * @param pHdl: Handler of the current instance of the PWM component.
 * @retval Return value of R3_1_WriteTIMRegisters.
 */
__weak uint16_t R3_1_SetADCSampPointCalibration(PWMC_Handle_t *pHdl)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	60fb      	str	r3, [r7, #12]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  pHandle->_Super.Sector = pHandle->CalibSector;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d954:	3b01      	subs	r3, #1
 800d956:	b29b      	uxth	r3, r3
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f7ff ffa2 	bl	800d8a4 <R3_1_WriteTIMRegisters>
 800d960:	4603      	mov	r3, r0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <R3_1_SetADCSampPointSectX>:
  * 
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
__weak uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800d96a:	b5b0      	push	{r4, r5, r7, lr}
 800d96c:	b086      	sub	sp, #24
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	613b      	str	r3, [r7, #16]
  uint16_t hCntSmp;
  uint16_t hDeltaDuty;
  register uint16_t lowDuty = pHdl->lowDuty;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8b3 4046 	ldrh.w	r4, [r3, #70]	; 0x46
  register uint16_t midDuty = pHdl->midDuty;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8b3 5048 	ldrh.w	r5, [r3, #72]	; 0x48
  
  /* Check if sampling AB in the middle of PWM is possible */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d988:	1b1b      	subs	r3, r3, r4
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d992:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d994:	429a      	cmp	r2, r3
 800d996:	d909      	bls.n	800d9ac <R3_1_SetADCSampPointSectX+0x42>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 5 */
    pHandle->_Super.Sector = SECTOR_5;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	2204      	movs	r2, #4
 800d99c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* set sampling  point trigger in the middle of PWM period */
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	82fb      	strh	r3, [r7, #22]
 800d9aa:	e02c      	b.n	800da06 <R3_1_SetADCSampPointSectX+0x9c>
    one with minimum complementary duty and one with variable complementary duty. In this case, phases
    with variable complementary duty and with maximum duty are converted and the first will be always
    the phase with variable complementary duty cycle */

    /* Crossing Point Searching */
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 800d9ac:	1b63      	subs	r3, r4, r5
 800d9ae:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800d9b0:	89fa      	ldrh	r2, [r7, #14]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d9b8:	1b1b      	subs	r3, r3, r4
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d906      	bls.n	800d9d0 <R3_1_SetADCSampPointSectX+0x66>
    {
      /* hTbefore = 2*Ts + Tc, where Ts = Sampling time of ADC, Tc = Conversion Time of ADC */
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800d9ca:	1ae3      	subs	r3, r4, r3
 800d9cc:	82fb      	strh	r3, [r7, #22]
 800d9ce:	e01a      	b.n	800da06 <R3_1_SetADCSampPointSectX+0x9c>
    }
    else
    {
      /* hTafter = DT + max(Trise, Tnoise) */
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d9d8:	4423      	add	r3, r4
 800d9da:	82fb      	strh	r3, [r7, #22]

      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d9e2:	8afa      	ldrh	r2, [r7, #22]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d30e      	bcc.n	800da06 <R3_1_SetADCSampPointSectX+0x9c>
      {
        /* It must be changed the trigger direction from positive to negative
             to sample after middle of PWM*/
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d9ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	8afb      	ldrh	r3, [r7, #22]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	b29b      	uxth	r3, r3
 800da02:	3b01      	subs	r3, #1
 800da04:	82fb      	strh	r3, [r7, #22]
      }
    }
  }

  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	8afa      	ldrh	r2, [r7, #22]
 800da0a:	4611      	mov	r1, r2
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff ff49 	bl	800d8a4 <R3_1_WriteTIMRegisters>
 800da12:	4603      	mov	r3, r0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3718      	adds	r7, #24
 800da18:	46bd      	mov	sp, r7
 800da1a:	bdb0      	pop	{r4, r5, r7, pc}

0800da1c <R3_1_TIMx_UP_IRQHandler>:
  * @brief  Contains the TIMx Update event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *R3_1_TIMx_UP_IRQHandler(PWMC_R3_1_Handle_t *pHandle)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60bb      	str	r3, [r7, #8]

  /* reset ADC external trigger edge */
  LL_ADC_INJ_StopConversionExtTrig(ADCx);
 800da38:	68b8      	ldr	r0, [r7, #8]
 800da3a:	f7ff f891 	bl	800cb60 <LL_ADC_INJ_StopConversionExtTrig>
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800da4a:	3208      	adds	r2, #8
 800da4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	639a      	str	r2, [r3, #56]	; 0x38

  /* enable ADC trigger source */
  LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800da54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff f8ed 	bl	800cc38 <LL_TIM_CC_EnableChannel>
  
  /* set ADC external trigger edge */
  LL_ADC_INJ_StartConversionExtTrig(ADCx, pHandle->ADCTriggerEdge);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da64:	4619      	mov	r1, r3
 800da66:	68b8      	ldr	r0, [r7, #8]
 800da68:	f7ff f869 	bl	800cb3e <LL_ADC_INJ_StartConversionExtTrig>

  /* reset default edge detection trigger */
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800da72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return &( pHandle->_Super.Motor );
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3368      	adds	r3, #104	; 0x68
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <R3_1_BRK_IRQHandler>:
  * @brief  Contains the TIMx Break event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *R3_1_BRK_IRQHandler(PWMC_R3_1_Handle_t *pHandle)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800da90:	f083 0301 	eor.w	r3, r3, #1
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	d02a      	beq.n	800daf0 <R3_1_BRK_IRQHandler+0x6e>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d123      	bne.n	800daf0 <R3_1_BRK_IRQHandler+0x6e>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daae:	689a      	ldr	r2, [r3, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f7ff fa07 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac6:	68da      	ldr	r2, [r3, #12]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dace:	699b      	ldr	r3, [r3, #24]
 800dad0:	4619      	mov	r1, r3
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7ff f9fb 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dade:	691a      	ldr	r2, [r3, #16]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	4619      	mov	r1, r3
 800daea:	4610      	mov	r0, r2
 800daec:	f7ff f9ef 	bl	800cece <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  return &( pHandle->_Super.Motor );
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3368      	adds	r3, #104	; 0x68
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <R3_1_IsOverCurrentOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_BREAK_IN if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred(PWMC_Handle_t *pHdl)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	60bb      	str	r3, [r7, #8]
  uint16_t retVal = MC_NO_FAULTS;
 800db10:	2300      	movs	r3, #0
 800db12:	81fb      	strh	r3, [r7, #14]

  if (pHandle->OverCurrentFlag == true )
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d007      	beq.n	800db2e <R3_1_IsOverCurrentOccurred+0x2a>
  {
    retVal |= MC_BREAK_IN;
 800db1e:	89fb      	ldrh	r3, [r7, #14]
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  }
  
  return retVal;
 800db2e:	89fb      	ldrh	r3, [r7, #14]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <R3_1_RLDetectionModeEnable>:
  * @brief  Sets the PWM mode for R/L detection.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLDetectionModeEnable(PWMC_Handle_t *pHdl)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	60bb      	str	r3, [r7, #8]
  
  if (pHandle->_Super.RLDetectionMode == false)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800db58:	f083 0301 	eor.w	r3, r3, #1
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d049      	beq.n	800dbf6 <R3_1_RLDetectionModeEnable+0xba>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800db62:	2260      	movs	r2, #96	; 0x60
 800db64:	2101      	movs	r1, #1
 800db66:	68b8      	ldr	r0, [r7, #8]
 800db68:	f7ff f89e 	bl	800cca8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800db6c:	2101      	movs	r1, #1
 800db6e:	68b8      	ldr	r0, [r7, #8]
 800db70:	f7ff f862 	bl	800cc38 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800db74:	2104      	movs	r1, #4
 800db76:	68b8      	ldr	r0, [r7, #8]
 800db78:	f7ff f86f 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    
    LL_TIM_OC_SetCompareCH1(TIMx, 0u);
 800db7c:	2100      	movs	r1, #0
 800db7e:	68b8      	ldr	r0, [r7, #8]
 800db80:	f7ff f8e0 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
    
    /*  Channel2 configuration */
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d10d      	bne.n	800dbae <R3_1_RLDetectionModeEnable+0x72>
    {
      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE);
 800db92:	2210      	movs	r2, #16
 800db94:	2110      	movs	r1, #16
 800db96:	68b8      	ldr	r0, [r7, #8]
 800db98:	f7ff f886 	bl	800cca8 <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800db9c:	2110      	movs	r1, #16
 800db9e:	68b8      	ldr	r0, [r7, #8]
 800dba0:	f7ff f85b 	bl	800cc5a <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800dba4:	2140      	movs	r1, #64	; 0x40
 800dba6:	68b8      	ldr	r0, [r7, #8]
 800dba8:	f7ff f846 	bl	800cc38 <LL_TIM_CC_EnableChannel>
 800dbac:	e013      	b.n	800dbd6 <R3_1_RLDetectionModeEnable+0x9a>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d10c      	bne.n	800dbd6 <R3_1_RLDetectionModeEnable+0x9a>
    {
      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE);
 800dbbc:	2220      	movs	r2, #32
 800dbbe:	2110      	movs	r1, #16
 800dbc0:	68b8      	ldr	r0, [r7, #8]
 800dbc2:	f7ff f871 	bl	800cca8 <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800dbc6:	2110      	movs	r1, #16
 800dbc8:	68b8      	ldr	r0, [r7, #8]
 800dbca:	f7ff f835 	bl	800cc38 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800dbce:	2140      	movs	r1, #64	; 0x40
 800dbd0:	68b8      	ldr	r0, [r7, #8]
 800dbd2:	f7ff f842 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    else
    {
    }
    
    /*  Channel3 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2);
 800dbd6:	2270      	movs	r2, #112	; 0x70
 800dbd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbdc:	68b8      	ldr	r0, [r7, #8]
 800dbde:	f7ff f863 	bl	800cca8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3);
 800dbe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbe6:	68b8      	ldr	r0, [r7, #8]
 800dbe8:	f7ff f837 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800dbec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dbf0:	68b8      	ldr	r0, [r7, #8]
 800dbf2:	f7ff f832 	bl	800cc5a <LL_TIM_CC_DisableChannel>

  }
  
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4a09      	ldr	r2, [pc, #36]	; (800dc20 <R3_1_RLDetectionModeEnable+0xe4>)
 800dbfa:	601a      	str	r2, [r3, #0]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <R3_1_RLDetectionModeEnable+0xe8>)
 800dc00:	611a      	str	r2, [r3, #16]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	4a08      	ldr	r2, [pc, #32]	; (800dc28 <R3_1_RLDetectionModeEnable+0xec>)
 800dc06:	609a      	str	r2, [r3, #8]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4a08      	ldr	r2, [pc, #32]	; (800dc2c <R3_1_RLDetectionModeEnable+0xf0>)
 800dc0c:	605a      	str	r2, [r3, #4]

  pHandle->_Super.RLDetectionMode = true;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800dc16:	bf00      	nop
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	0800de49 	.word	0x0800de49
 800dc24:	0800dec5 	.word	0x0800dec5
 800dc28:	0800df65 	.word	0x0800df65
 800dc2c:	0800d7f9 	.word	0x0800d7f9

0800dc30 <R3_1_RLDetectionModeDisable>:
  * @brief  Disables the PWM mode for R/L detection.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLDetectionModeDisable(PWMC_Handle_t *pHdl)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	60bb      	str	r3, [r7, #8]

  if (pHandle->_Super.RLDetectionMode == true)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f000 80ad 	beq.w	800ddac <R3_1_RLDetectionModeDisable+0x17c>
    
    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1 
     * for correct reactivation of Repetition Counter value of TIM1.*/
    
    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800dc52:	bf00      	nop
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 0310 	and.w	r3, r3, #16
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0f9      	beq.n	800dc54 <R3_1_RLDetectionModeDisable+0x24>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 800dc60:	bf00      	nop
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 0310 	and.w	r3, r3, #16
 800dc6a:	2b10      	cmp	r3, #16
 800dc6c:	d0f9      	beq.n	800dc62 <R3_1_RLDetectionModeDisable+0x32>
    {
    }
    
    /* TIM1 Repetition Counter reactivation to the User Value */
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc78:	461a      	mov	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Repetition Counter of TIM1 User value reactivation END*/
    
    
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800dc7e:	2260      	movs	r2, #96	; 0x60
 800dc80:	2101      	movs	r1, #1
 800dc82:	68b8      	ldr	r0, [r7, #8]
 800dc84:	f7ff f810 	bl	800cca8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800dc88:	2101      	movs	r1, #1
 800dc8a:	68b8      	ldr	r0, [r7, #8]
 800dc8c:	f7fe ffd4 	bl	800cc38 <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d104      	bne.n	800dca8 <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800dc9e:	2104      	movs	r1, #4
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	f7fe ffc9 	bl	800cc38 <LL_TIM_CC_EnableChannel>
 800dca6:	e00a      	b.n	800dcbe <R3_1_RLDetectionModeDisable+0x8e>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d103      	bne.n	800dcbe <R3_1_RLDetectionModeDisable+0x8e>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1N);
 800dcb6:	2104      	movs	r1, #4
 800dcb8:	68b8      	ldr	r0, [r7, #8]
 800dcba:	f7fe ffce 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dcc4:	085b      	lsrs	r3, r3, #1
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	4619      	mov	r1, r3
 800dcca:	68b8      	ldr	r0, [r7, #8]
 800dccc:	f7ff f83a 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
    
    /*  Channel2 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 800dcd0:	2260      	movs	r2, #96	; 0x60
 800dcd2:	2110      	movs	r1, #16
 800dcd4:	68b8      	ldr	r0, [r7, #8]
 800dcd6:	f7fe ffe7 	bl	800cca8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2);
 800dcda:	2110      	movs	r1, #16
 800dcdc:	68b8      	ldr	r0, [r7, #8]
 800dcde:	f7fe ffab 	bl	800cc38 <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d104      	bne.n	800dcfa <R3_1_RLDetectionModeDisable+0xca>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800dcf0:	2140      	movs	r1, #64	; 0x40
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f7fe ffa0 	bl	800cc38 <LL_TIM_CC_EnableChannel>
 800dcf8:	e00a      	b.n	800dd10 <R3_1_RLDetectionModeDisable+0xe0>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d103      	bne.n	800dd10 <R3_1_RLDetectionModeDisable+0xe0>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2N);
 800dd08:	2140      	movs	r1, #64	; 0x40
 800dd0a:	68b8      	ldr	r0, [r7, #8]
 800dd0c:	f7fe ffa5 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dd16:	085b      	lsrs	r3, r3, #1
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	68b8      	ldr	r0, [r7, #8]
 800dd1e:	f7ff f81f 	bl	800cd60 <LL_TIM_OC_SetCompareCH2>
    
    /*  Channel3 configuration */
    LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 800dd22:	2260      	movs	r2, #96	; 0x60
 800dd24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd28:	68b8      	ldr	r0, [r7, #8]
 800dd2a:	f7fe ffbd 	bl	800cca8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH3);
 800dd2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd32:	68b8      	ldr	r0, [r7, #8]
 800dd34:	f7fe ff80 	bl	800cc38 <LL_TIM_CC_EnableChannel>
    
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d105      	bne.n	800dd52 <R3_1_RLDetectionModeDisable+0x122>
    {
      LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800dd46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dd4a:	68b8      	ldr	r0, [r7, #8]
 800dd4c:	f7fe ff74 	bl	800cc38 <LL_TIM_CC_EnableChannel>
 800dd50:	e00b      	b.n	800dd6a <R3_1_RLDetectionModeDisable+0x13a>
    }
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d104      	bne.n	800dd6a <R3_1_RLDetectionModeDisable+0x13a>
    {
      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3N);
 800dd60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dd64:	68b8      	ldr	r0, [r7, #8]
 800dd66:	f7fe ff78 	bl	800cc5a <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }
    
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dd70:	085b      	lsrs	r3, r3, #1
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	4619      	mov	r1, r3
 800dd76:	68b8      	ldr	r0, [r7, #8]
 800dd78:	f7ff f800 	bl	800cd7c <LL_TIM_OC_SetCompareCH3>
	
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2100      	movs	r1, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fe feb6 	bl	800caf8 <LL_ADC_INJ_SetSequencerDiscont>
                                   LL_ADC_INJ_SEQ_DISCONT_DISABLE);
       
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4a09      	ldr	r2, [pc, #36]	; (800ddb4 <R3_1_RLDetectionModeDisable+0x184>)
 800dd90:	601a      	str	r2, [r3, #0]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4a08      	ldr	r2, [pc, #32]	; (800ddb8 <R3_1_RLDetectionModeDisable+0x188>)
 800dd96:	611a      	str	r2, [r3, #16]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4a08      	ldr	r2, [pc, #32]	; (800ddbc <R3_1_RLDetectionModeDisable+0x18c>)
 800dd9c:	609a      	str	r2, [r3, #8]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4a07      	ldr	r2, [pc, #28]	; (800ddc0 <R3_1_RLDetectionModeDisable+0x190>)
 800dda2:	605a      	str	r2, [r3, #4]
    
    pHandle->_Super.RLDetectionMode = false;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  }
}
 800ddac:	bf00      	nop
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	0800d2e5 	.word	0x0800d2e5
 800ddb8:	0800d5ef 	.word	0x0800d5ef
 800ddbc:	0800d6a7 	.word	0x0800d6a7
 800ddc0:	0800d7f9 	.word	0x0800d7f9

0800ddc4 <R3_1_RLDetectionModeSetDuty>:
  * @param  hDuty: Duty cycle to apply, written in uint16_t.
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
uint16_t R3_1_RLDetectionModeSetDuty(PWMC_Handle_t *pHdl, uint16_t hDuty)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	807b      	strh	r3, [r7, #2]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;

  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dde4:	461a      	mov	r2, r3
 800dde6:	887b      	ldrh	r3, [r7, #2]
 800dde8:	fb02 f303 	mul.w	r3, r2, r3
 800ddec:	0c1b      	lsrs	r3, r3, #16
 800ddee:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de04:	4619      	mov	r1, r3
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7fe ff9c 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>
  
  /* Limit for update event */
  /* Check the status flag. If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4))
 800de0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7fe ff34 	bl	800cc7e <LL_TIM_CC_IsEnabledChannel>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d002      	beq.n	800de22 <R3_1_RLDetectionModeSetDuty+0x5e>
  {
    hAux = MC_DURATION;
 800de1c:	2301      	movs	r3, #1
 800de1e:	82fb      	strh	r3, [r7, #22]
 800de20:	e001      	b.n	800de26 <R3_1_RLDetectionModeSetDuty+0x62>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800de22:	2300      	movs	r3, #0
 800de24:	82fb      	strh	r3, [r7, #22]
  }
  if (pHandle->_Super.SWerror == 1u)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d105      	bne.n	800de3c <R3_1_RLDetectionModeSetDuty+0x78>
  {
    hAux = MC_DURATION;
 800de30:	2301      	movs	r3, #1
 800de32:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2200      	movs	r2, #0
 800de38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  }
  return hAux;
 800de3c:	8afb      	ldrh	r3, [r7, #22]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
	...

0800de48 <R3_1_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60bb      	str	r3, [r7, #8]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
 800de6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f7fe fef3 	bl	800cc5a <LL_TIM_CC_DisableChannel>
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de78:	461a      	mov	r2, r3
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	617b      	str	r3, [r7, #20]
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	4a0d      	ldr	r2, [pc, #52]	; (800debc <R3_1_RLGetPhaseCurrents+0x74>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	db08      	blt.n	800de9e <R3_1_RLGetPhaseCurrents+0x56>
  {
    if (wAux < INT16_MAX)
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800de92:	4293      	cmp	r3, r2
 800de94:	dd05      	ble.n	800dea2 <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800de96:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e001      	b.n	800dea2 <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800de9e:	4b08      	ldr	r3, [pc, #32]	; (800dec0 <R3_1_RLGetPhaseCurrents+0x78>)
 800dea0:	617b      	str	r3, [r7, #20]
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	b21a      	sxth	r2, r3
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = ( int16_t )( wAux );
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	b21a      	sxth	r2, r3
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	805a      	strh	r2, [r3, #2]

}
 800deb2:	bf00      	nop
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	ffff8002 	.word	0xffff8002
 800dec0:	ffff8001 	.word	0xffff8001

0800dec4 <R3_1_RLTurnOnLowSides>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{  
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	60fb      	str	r3, [r7, #12]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
 800dedc:	2100      	movs	r1, #0
 800dede:	68b8      	ldr	r0, [r7, #8]
 800dee0:	f7fe ff30 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800dee4:	68b8      	ldr	r0, [r7, #8]
 800dee6:	f7fe ff85 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800deea:	bf00      	nop
 800deec:	68b8      	ldr	r0, [r7, #8]
 800deee:	f7fe ff8f 	bl	800ce10 <LL_TIM_IsActiveFlag_UPDATE>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d0f9      	beq.n	800deec <R3_1_RLTurnOnLowSides+0x28>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7fe ff7b 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
 800defe:	68b8      	ldr	r0, [r7, #8]
 800df00:	f7fe ff58 	bl	800cdb4 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df0e:	2b02      	cmp	r3, #2
 800df10:	d124      	bne.n	800df5c <R3_1_RLTurnOnLowSides+0x98>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df18:	689a      	ldr	r2, [r3, #8]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	4619      	mov	r1, r3
 800df24:	4610      	mov	r0, r2
 800df26:	f7fe ffc4 	bl	800ceb2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df30:	68da      	ldr	r2, [r3, #12]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fe ffc6 	bl	800cece <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df48:	691a      	ldr	r2, [r3, #16]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df50:	69db      	ldr	r3, [r3, #28]
 800df52:	4619      	mov	r1, r3
 800df54:	4610      	mov	r0, r2
 800df56:	f7fe ffba 	bl	800cece <LL_GPIO_ResetOutputPin>
  }
  return; 
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
}
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <R3_1_RLSwitchOnPWM>:
  * This function is specific for RL detection phase.
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	617b      	str	r3, [r7, #20]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 800df8c:	bf00      	nop
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 0310 	and.w	r3, r3, #16
 800df96:	2b10      	cmp	r3, #16
 800df98:	d0f9      	beq.n	800df8e <R3_1_RLSwitchOnPWM+0x2a>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800df9a:	bf00      	nop
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f003 0310 	and.w	r3, r3, #16
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0f9      	beq.n	800df9c <R3_1_RLSwitchOnPWM+0x38>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	6938      	ldr	r0, [r7, #16]
 800dfac:	f7fe feca 	bl	800cd44 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800dfb6:	3b05      	subs	r3, #5
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6938      	ldr	r0, [r7, #16]
 800dfbc:	f7fe feec 	bl	800cd98 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800dfc0:	6938      	ldr	r0, [r7, #16]
 800dfc2:	f7fe ff17 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800dfc6:	bf00      	nop
 800dfc8:	6938      	ldr	r0, [r7, #16]
 800dfca:	f7fe ff21 	bl	800ce10 <LL_TIM_IsActiveFlag_UPDATE>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d0f9      	beq.n	800dfc8 <R3_1_RLSwitchOnPWM+0x64>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800dfd4:	6938      	ldr	r0, [r7, #16]
 800dfd6:	f7fe ff0d 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800dfe6:	6938      	ldr	r0, [r7, #16]
 800dfe8:	f7fe fee4 	bl	800cdb4 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d14f      	bne.n	800e09a <R3_1_RLSwitchOnPWM+0x136>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6a1a      	ldr	r2, [r3, #32]
 800dffe:	f240 5355 	movw	r3, #1365	; 0x555
 800e002:	4013      	ands	r3, r2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d024      	beq.n	800e052 <R3_1_RLSwitchOnPWM+0xee>
    {
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	4619      	mov	r1, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	f7fe ff49 	bl	800ceb2 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fe ff3d 	bl	800ceb2 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e03e:	691a      	ldr	r2, [r3, #16]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e046:	69db      	ldr	r3, [r3, #28]
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f7fe ff3f 	bl	800cece <LL_GPIO_ResetOutputPin>
 800e050:	e023      	b.n	800e09a <R3_1_RLSwitchOnPWM+0x136>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e058:	689a      	ldr	r2, [r3, #8]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	4619      	mov	r1, r3
 800e064:	4610      	mov	r0, r2
 800e066:	f7fe ff32 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f7fe ff26 	bl	800cece <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e088:	691a      	ldr	r2, [r3, #16]
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e090:	69db      	ldr	r3, [r3, #28]
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f7fe ff1a 	bl	800cece <LL_GPIO_ResetOutputPin>
    }
  }
  
  /* Clear JEOC Flag */
  LL_ADC_ClearFlag_JEOS(ADCx);
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f7fe fd7e 	bl	800cb9c <LL_ADC_ClearFlag_JEOS>
    
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e0a0:	6938      	ldr	r0, [r7, #16]
 800e0a2:	f7fe fea7 	bl	800cdf4 <LL_TIM_ClearFlag_UPDATE>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800e0a6:	6938      	ldr	r0, [r7, #16]
 800e0a8:	f7fe fed3 	bl	800ce52 <LL_TIM_EnableIT_UPDATE>

  return; 
 800e0ac:	bf00      	nop
}
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <__errno>:
 800e0b4:	4b01      	ldr	r3, [pc, #4]	; (800e0bc <__errno+0x8>)
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	200005c8 	.word	0x200005c8

0800e0c0 <__libc_init_array>:
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	4d0d      	ldr	r5, [pc, #52]	; (800e0f8 <__libc_init_array+0x38>)
 800e0c4:	4c0d      	ldr	r4, [pc, #52]	; (800e0fc <__libc_init_array+0x3c>)
 800e0c6:	1b64      	subs	r4, r4, r5
 800e0c8:	10a4      	asrs	r4, r4, #2
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	42a6      	cmp	r6, r4
 800e0ce:	d109      	bne.n	800e0e4 <__libc_init_array+0x24>
 800e0d0:	4d0b      	ldr	r5, [pc, #44]	; (800e100 <__libc_init_array+0x40>)
 800e0d2:	4c0c      	ldr	r4, [pc, #48]	; (800e104 <__libc_init_array+0x44>)
 800e0d4:	f000 ffbc 	bl	800f050 <_init>
 800e0d8:	1b64      	subs	r4, r4, r5
 800e0da:	10a4      	asrs	r4, r4, #2
 800e0dc:	2600      	movs	r6, #0
 800e0de:	42a6      	cmp	r6, r4
 800e0e0:	d105      	bne.n	800e0ee <__libc_init_array+0x2e>
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e8:	4798      	blx	r3
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7ee      	b.n	800e0cc <__libc_init_array+0xc>
 800e0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f2:	4798      	blx	r3
 800e0f4:	3601      	adds	r6, #1
 800e0f6:	e7f2      	b.n	800e0de <__libc_init_array+0x1e>
 800e0f8:	0800f554 	.word	0x0800f554
 800e0fc:	0800f554 	.word	0x0800f554
 800e100:	0800f554 	.word	0x0800f554
 800e104:	0800f558 	.word	0x0800f558

0800e108 <memcpy>:
 800e108:	440a      	add	r2, r1
 800e10a:	4291      	cmp	r1, r2
 800e10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e110:	d100      	bne.n	800e114 <memcpy+0xc>
 800e112:	4770      	bx	lr
 800e114:	b510      	push	{r4, lr}
 800e116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e11e:	4291      	cmp	r1, r2
 800e120:	d1f9      	bne.n	800e116 <memcpy+0xe>
 800e122:	bd10      	pop	{r4, pc}

0800e124 <memset>:
 800e124:	4402      	add	r2, r0
 800e126:	4603      	mov	r3, r0
 800e128:	4293      	cmp	r3, r2
 800e12a:	d100      	bne.n	800e12e <memset+0xa>
 800e12c:	4770      	bx	lr
 800e12e:	f803 1b01 	strb.w	r1, [r3], #1
 800e132:	e7f9      	b.n	800e128 <memset+0x4>

0800e134 <iprintf>:
 800e134:	b40f      	push	{r0, r1, r2, r3}
 800e136:	4b0a      	ldr	r3, [pc, #40]	; (800e160 <iprintf+0x2c>)
 800e138:	b513      	push	{r0, r1, r4, lr}
 800e13a:	681c      	ldr	r4, [r3, #0]
 800e13c:	b124      	cbz	r4, 800e148 <iprintf+0x14>
 800e13e:	69a3      	ldr	r3, [r4, #24]
 800e140:	b913      	cbnz	r3, 800e148 <iprintf+0x14>
 800e142:	4620      	mov	r0, r4
 800e144:	f000 f866 	bl	800e214 <__sinit>
 800e148:	ab05      	add	r3, sp, #20
 800e14a:	9a04      	ldr	r2, [sp, #16]
 800e14c:	68a1      	ldr	r1, [r4, #8]
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f9bd 	bl	800e4d0 <_vfiprintf_r>
 800e156:	b002      	add	sp, #8
 800e158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e15c:	b004      	add	sp, #16
 800e15e:	4770      	bx	lr
 800e160:	200005c8 	.word	0x200005c8

0800e164 <std>:
 800e164:	2300      	movs	r3, #0
 800e166:	b510      	push	{r4, lr}
 800e168:	4604      	mov	r4, r0
 800e16a:	e9c0 3300 	strd	r3, r3, [r0]
 800e16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e172:	6083      	str	r3, [r0, #8]
 800e174:	8181      	strh	r1, [r0, #12]
 800e176:	6643      	str	r3, [r0, #100]	; 0x64
 800e178:	81c2      	strh	r2, [r0, #14]
 800e17a:	6183      	str	r3, [r0, #24]
 800e17c:	4619      	mov	r1, r3
 800e17e:	2208      	movs	r2, #8
 800e180:	305c      	adds	r0, #92	; 0x5c
 800e182:	f7ff ffcf 	bl	800e124 <memset>
 800e186:	4b05      	ldr	r3, [pc, #20]	; (800e19c <std+0x38>)
 800e188:	6263      	str	r3, [r4, #36]	; 0x24
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <std+0x3c>)
 800e18c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e18e:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <std+0x40>)
 800e190:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <std+0x44>)
 800e194:	6224      	str	r4, [r4, #32]
 800e196:	6323      	str	r3, [r4, #48]	; 0x30
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	bf00      	nop
 800e19c:	0800ea79 	.word	0x0800ea79
 800e1a0:	0800ea9b 	.word	0x0800ea9b
 800e1a4:	0800ead3 	.word	0x0800ead3
 800e1a8:	0800eaf7 	.word	0x0800eaf7

0800e1ac <_cleanup_r>:
 800e1ac:	4901      	ldr	r1, [pc, #4]	; (800e1b4 <_cleanup_r+0x8>)
 800e1ae:	f000 b8af 	b.w	800e310 <_fwalk_reent>
 800e1b2:	bf00      	nop
 800e1b4:	0800edd1 	.word	0x0800edd1

0800e1b8 <__sfmoreglue>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	2268      	movs	r2, #104	; 0x68
 800e1bc:	1e4d      	subs	r5, r1, #1
 800e1be:	4355      	muls	r5, r2
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1c6:	f000 f8e5 	bl	800e394 <_malloc_r>
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	b140      	cbz	r0, 800e1e0 <__sfmoreglue+0x28>
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	e9c0 1600 	strd	r1, r6, [r0]
 800e1d4:	300c      	adds	r0, #12
 800e1d6:	60a0      	str	r0, [r4, #8]
 800e1d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1dc:	f7ff ffa2 	bl	800e124 <memset>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}

0800e1e4 <__sfp_lock_acquire>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	; (800e1ec <__sfp_lock_acquire+0x8>)
 800e1e6:	f000 b8b3 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	20001a6d 	.word	0x20001a6d

0800e1f0 <__sfp_lock_release>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__sfp_lock_release+0x8>)
 800e1f2:	f000 b8ae 	b.w	800e352 <__retarget_lock_release_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	20001a6d 	.word	0x20001a6d

0800e1fc <__sinit_lock_acquire>:
 800e1fc:	4801      	ldr	r0, [pc, #4]	; (800e204 <__sinit_lock_acquire+0x8>)
 800e1fe:	f000 b8a7 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e202:	bf00      	nop
 800e204:	20001a6e 	.word	0x20001a6e

0800e208 <__sinit_lock_release>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__sinit_lock_release+0x8>)
 800e20a:	f000 b8a2 	b.w	800e352 <__retarget_lock_release_recursive>
 800e20e:	bf00      	nop
 800e210:	20001a6e 	.word	0x20001a6e

0800e214 <__sinit>:
 800e214:	b510      	push	{r4, lr}
 800e216:	4604      	mov	r4, r0
 800e218:	f7ff fff0 	bl	800e1fc <__sinit_lock_acquire>
 800e21c:	69a3      	ldr	r3, [r4, #24]
 800e21e:	b11b      	cbz	r3, 800e228 <__sinit+0x14>
 800e220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e224:	f7ff bff0 	b.w	800e208 <__sinit_lock_release>
 800e228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e22c:	6523      	str	r3, [r4, #80]	; 0x50
 800e22e:	4b13      	ldr	r3, [pc, #76]	; (800e27c <__sinit+0x68>)
 800e230:	4a13      	ldr	r2, [pc, #76]	; (800e280 <__sinit+0x6c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	62a2      	str	r2, [r4, #40]	; 0x28
 800e236:	42a3      	cmp	r3, r4
 800e238:	bf04      	itt	eq
 800e23a:	2301      	moveq	r3, #1
 800e23c:	61a3      	streq	r3, [r4, #24]
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 f820 	bl	800e284 <__sfp>
 800e244:	6060      	str	r0, [r4, #4]
 800e246:	4620      	mov	r0, r4
 800e248:	f000 f81c 	bl	800e284 <__sfp>
 800e24c:	60a0      	str	r0, [r4, #8]
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 f818 	bl	800e284 <__sfp>
 800e254:	2200      	movs	r2, #0
 800e256:	60e0      	str	r0, [r4, #12]
 800e258:	2104      	movs	r1, #4
 800e25a:	6860      	ldr	r0, [r4, #4]
 800e25c:	f7ff ff82 	bl	800e164 <std>
 800e260:	68a0      	ldr	r0, [r4, #8]
 800e262:	2201      	movs	r2, #1
 800e264:	2109      	movs	r1, #9
 800e266:	f7ff ff7d 	bl	800e164 <std>
 800e26a:	68e0      	ldr	r0, [r4, #12]
 800e26c:	2202      	movs	r2, #2
 800e26e:	2112      	movs	r1, #18
 800e270:	f7ff ff78 	bl	800e164 <std>
 800e274:	2301      	movs	r3, #1
 800e276:	61a3      	str	r3, [r4, #24]
 800e278:	e7d2      	b.n	800e220 <__sinit+0xc>
 800e27a:	bf00      	nop
 800e27c:	0800f4b4 	.word	0x0800f4b4
 800e280:	0800e1ad 	.word	0x0800e1ad

0800e284 <__sfp>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	4607      	mov	r7, r0
 800e288:	f7ff ffac 	bl	800e1e4 <__sfp_lock_acquire>
 800e28c:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <__sfp+0x84>)
 800e28e:	681e      	ldr	r6, [r3, #0]
 800e290:	69b3      	ldr	r3, [r6, #24]
 800e292:	b913      	cbnz	r3, 800e29a <__sfp+0x16>
 800e294:	4630      	mov	r0, r6
 800e296:	f7ff ffbd 	bl	800e214 <__sinit>
 800e29a:	3648      	adds	r6, #72	; 0x48
 800e29c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	d503      	bpl.n	800e2ac <__sfp+0x28>
 800e2a4:	6833      	ldr	r3, [r6, #0]
 800e2a6:	b30b      	cbz	r3, 800e2ec <__sfp+0x68>
 800e2a8:	6836      	ldr	r6, [r6, #0]
 800e2aa:	e7f7      	b.n	800e29c <__sfp+0x18>
 800e2ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2b0:	b9d5      	cbnz	r5, 800e2e8 <__sfp+0x64>
 800e2b2:	4b16      	ldr	r3, [pc, #88]	; (800e30c <__sfp+0x88>)
 800e2b4:	60e3      	str	r3, [r4, #12]
 800e2b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e2bc:	f000 f847 	bl	800e34e <__retarget_lock_init_recursive>
 800e2c0:	f7ff ff96 	bl	800e1f0 <__sfp_lock_release>
 800e2c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2cc:	6025      	str	r5, [r4, #0]
 800e2ce:	61a5      	str	r5, [r4, #24]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2d8:	f7ff ff24 	bl	800e124 <memset>
 800e2dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e8:	3468      	adds	r4, #104	; 0x68
 800e2ea:	e7d9      	b.n	800e2a0 <__sfp+0x1c>
 800e2ec:	2104      	movs	r1, #4
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff ff62 	bl	800e1b8 <__sfmoreglue>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	6030      	str	r0, [r6, #0]
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d1d5      	bne.n	800e2a8 <__sfp+0x24>
 800e2fc:	f7ff ff78 	bl	800e1f0 <__sfp_lock_release>
 800e300:	230c      	movs	r3, #12
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	e7ee      	b.n	800e2e4 <__sfp+0x60>
 800e306:	bf00      	nop
 800e308:	0800f4b4 	.word	0x0800f4b4
 800e30c:	ffff0001 	.word	0xffff0001

0800e310 <_fwalk_reent>:
 800e310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e314:	4606      	mov	r6, r0
 800e316:	4688      	mov	r8, r1
 800e318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e31c:	2700      	movs	r7, #0
 800e31e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e322:	f1b9 0901 	subs.w	r9, r9, #1
 800e326:	d505      	bpl.n	800e334 <_fwalk_reent+0x24>
 800e328:	6824      	ldr	r4, [r4, #0]
 800e32a:	2c00      	cmp	r4, #0
 800e32c:	d1f7      	bne.n	800e31e <_fwalk_reent+0xe>
 800e32e:	4638      	mov	r0, r7
 800e330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e334:	89ab      	ldrh	r3, [r5, #12]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d907      	bls.n	800e34a <_fwalk_reent+0x3a>
 800e33a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e33e:	3301      	adds	r3, #1
 800e340:	d003      	beq.n	800e34a <_fwalk_reent+0x3a>
 800e342:	4629      	mov	r1, r5
 800e344:	4630      	mov	r0, r6
 800e346:	47c0      	blx	r8
 800e348:	4307      	orrs	r7, r0
 800e34a:	3568      	adds	r5, #104	; 0x68
 800e34c:	e7e9      	b.n	800e322 <_fwalk_reent+0x12>

0800e34e <__retarget_lock_init_recursive>:
 800e34e:	4770      	bx	lr

0800e350 <__retarget_lock_acquire_recursive>:
 800e350:	4770      	bx	lr

0800e352 <__retarget_lock_release_recursive>:
 800e352:	4770      	bx	lr

0800e354 <sbrk_aligned>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	4e0e      	ldr	r6, [pc, #56]	; (800e390 <sbrk_aligned+0x3c>)
 800e358:	460c      	mov	r4, r1
 800e35a:	6831      	ldr	r1, [r6, #0]
 800e35c:	4605      	mov	r5, r0
 800e35e:	b911      	cbnz	r1, 800e366 <sbrk_aligned+0x12>
 800e360:	f000 fb7a 	bl	800ea58 <_sbrk_r>
 800e364:	6030      	str	r0, [r6, #0]
 800e366:	4621      	mov	r1, r4
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 fb75 	bl	800ea58 <_sbrk_r>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	d00a      	beq.n	800e388 <sbrk_aligned+0x34>
 800e372:	1cc4      	adds	r4, r0, #3
 800e374:	f024 0403 	bic.w	r4, r4, #3
 800e378:	42a0      	cmp	r0, r4
 800e37a:	d007      	beq.n	800e38c <sbrk_aligned+0x38>
 800e37c:	1a21      	subs	r1, r4, r0
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 fb6a 	bl	800ea58 <_sbrk_r>
 800e384:	3001      	adds	r0, #1
 800e386:	d101      	bne.n	800e38c <sbrk_aligned+0x38>
 800e388:	f04f 34ff 	mov.w	r4, #4294967295
 800e38c:	4620      	mov	r0, r4
 800e38e:	bd70      	pop	{r4, r5, r6, pc}
 800e390:	20001a74 	.word	0x20001a74

0800e394 <_malloc_r>:
 800e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e398:	1ccd      	adds	r5, r1, #3
 800e39a:	f025 0503 	bic.w	r5, r5, #3
 800e39e:	3508      	adds	r5, #8
 800e3a0:	2d0c      	cmp	r5, #12
 800e3a2:	bf38      	it	cc
 800e3a4:	250c      	movcc	r5, #12
 800e3a6:	2d00      	cmp	r5, #0
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	db01      	blt.n	800e3b0 <_malloc_r+0x1c>
 800e3ac:	42a9      	cmp	r1, r5
 800e3ae:	d905      	bls.n	800e3bc <_malloc_r+0x28>
 800e3b0:	230c      	movs	r3, #12
 800e3b2:	603b      	str	r3, [r7, #0]
 800e3b4:	2600      	movs	r6, #0
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	4e2e      	ldr	r6, [pc, #184]	; (800e478 <_malloc_r+0xe4>)
 800e3be:	f000 fdbb 	bl	800ef38 <__malloc_lock>
 800e3c2:	6833      	ldr	r3, [r6, #0]
 800e3c4:	461c      	mov	r4, r3
 800e3c6:	bb34      	cbnz	r4, 800e416 <_malloc_r+0x82>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	f7ff ffc2 	bl	800e354 <sbrk_aligned>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	d14d      	bne.n	800e472 <_malloc_r+0xde>
 800e3d6:	6834      	ldr	r4, [r6, #0]
 800e3d8:	4626      	mov	r6, r4
 800e3da:	2e00      	cmp	r6, #0
 800e3dc:	d140      	bne.n	800e460 <_malloc_r+0xcc>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	eb04 0803 	add.w	r8, r4, r3
 800e3e8:	f000 fb36 	bl	800ea58 <_sbrk_r>
 800e3ec:	4580      	cmp	r8, r0
 800e3ee:	d13a      	bne.n	800e466 <_malloc_r+0xd2>
 800e3f0:	6821      	ldr	r1, [r4, #0]
 800e3f2:	3503      	adds	r5, #3
 800e3f4:	1a6d      	subs	r5, r5, r1
 800e3f6:	f025 0503 	bic.w	r5, r5, #3
 800e3fa:	3508      	adds	r5, #8
 800e3fc:	2d0c      	cmp	r5, #12
 800e3fe:	bf38      	it	cc
 800e400:	250c      	movcc	r5, #12
 800e402:	4629      	mov	r1, r5
 800e404:	4638      	mov	r0, r7
 800e406:	f7ff ffa5 	bl	800e354 <sbrk_aligned>
 800e40a:	3001      	adds	r0, #1
 800e40c:	d02b      	beq.n	800e466 <_malloc_r+0xd2>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	442b      	add	r3, r5
 800e412:	6023      	str	r3, [r4, #0]
 800e414:	e00e      	b.n	800e434 <_malloc_r+0xa0>
 800e416:	6822      	ldr	r2, [r4, #0]
 800e418:	1b52      	subs	r2, r2, r5
 800e41a:	d41e      	bmi.n	800e45a <_malloc_r+0xc6>
 800e41c:	2a0b      	cmp	r2, #11
 800e41e:	d916      	bls.n	800e44e <_malloc_r+0xba>
 800e420:	1961      	adds	r1, r4, r5
 800e422:	42a3      	cmp	r3, r4
 800e424:	6025      	str	r5, [r4, #0]
 800e426:	bf18      	it	ne
 800e428:	6059      	strne	r1, [r3, #4]
 800e42a:	6863      	ldr	r3, [r4, #4]
 800e42c:	bf08      	it	eq
 800e42e:	6031      	streq	r1, [r6, #0]
 800e430:	5162      	str	r2, [r4, r5]
 800e432:	604b      	str	r3, [r1, #4]
 800e434:	4638      	mov	r0, r7
 800e436:	f104 060b 	add.w	r6, r4, #11
 800e43a:	f000 fd83 	bl	800ef44 <__malloc_unlock>
 800e43e:	f026 0607 	bic.w	r6, r6, #7
 800e442:	1d23      	adds	r3, r4, #4
 800e444:	1af2      	subs	r2, r6, r3
 800e446:	d0b6      	beq.n	800e3b6 <_malloc_r+0x22>
 800e448:	1b9b      	subs	r3, r3, r6
 800e44a:	50a3      	str	r3, [r4, r2]
 800e44c:	e7b3      	b.n	800e3b6 <_malloc_r+0x22>
 800e44e:	6862      	ldr	r2, [r4, #4]
 800e450:	42a3      	cmp	r3, r4
 800e452:	bf0c      	ite	eq
 800e454:	6032      	streq	r2, [r6, #0]
 800e456:	605a      	strne	r2, [r3, #4]
 800e458:	e7ec      	b.n	800e434 <_malloc_r+0xa0>
 800e45a:	4623      	mov	r3, r4
 800e45c:	6864      	ldr	r4, [r4, #4]
 800e45e:	e7b2      	b.n	800e3c6 <_malloc_r+0x32>
 800e460:	4634      	mov	r4, r6
 800e462:	6876      	ldr	r6, [r6, #4]
 800e464:	e7b9      	b.n	800e3da <_malloc_r+0x46>
 800e466:	230c      	movs	r3, #12
 800e468:	603b      	str	r3, [r7, #0]
 800e46a:	4638      	mov	r0, r7
 800e46c:	f000 fd6a 	bl	800ef44 <__malloc_unlock>
 800e470:	e7a1      	b.n	800e3b6 <_malloc_r+0x22>
 800e472:	6025      	str	r5, [r4, #0]
 800e474:	e7de      	b.n	800e434 <_malloc_r+0xa0>
 800e476:	bf00      	nop
 800e478:	20001a70 	.word	0x20001a70

0800e47c <__sfputc_r>:
 800e47c:	6893      	ldr	r3, [r2, #8]
 800e47e:	3b01      	subs	r3, #1
 800e480:	2b00      	cmp	r3, #0
 800e482:	b410      	push	{r4}
 800e484:	6093      	str	r3, [r2, #8]
 800e486:	da08      	bge.n	800e49a <__sfputc_r+0x1e>
 800e488:	6994      	ldr	r4, [r2, #24]
 800e48a:	42a3      	cmp	r3, r4
 800e48c:	db01      	blt.n	800e492 <__sfputc_r+0x16>
 800e48e:	290a      	cmp	r1, #10
 800e490:	d103      	bne.n	800e49a <__sfputc_r+0x1e>
 800e492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e496:	f000 bb33 	b.w	800eb00 <__swbuf_r>
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	1c58      	adds	r0, r3, #1
 800e49e:	6010      	str	r0, [r2, #0]
 800e4a0:	7019      	strb	r1, [r3, #0]
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <__sfputs_r>:
 800e4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	460f      	mov	r7, r1
 800e4b0:	4614      	mov	r4, r2
 800e4b2:	18d5      	adds	r5, r2, r3
 800e4b4:	42ac      	cmp	r4, r5
 800e4b6:	d101      	bne.n	800e4bc <__sfputs_r+0x12>
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e007      	b.n	800e4cc <__sfputs_r+0x22>
 800e4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c0:	463a      	mov	r2, r7
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f7ff ffda 	bl	800e47c <__sfputc_r>
 800e4c8:	1c43      	adds	r3, r0, #1
 800e4ca:	d1f3      	bne.n	800e4b4 <__sfputs_r+0xa>
 800e4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4d0 <_vfiprintf_r>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	460d      	mov	r5, r1
 800e4d6:	b09d      	sub	sp, #116	; 0x74
 800e4d8:	4614      	mov	r4, r2
 800e4da:	4698      	mov	r8, r3
 800e4dc:	4606      	mov	r6, r0
 800e4de:	b118      	cbz	r0, 800e4e8 <_vfiprintf_r+0x18>
 800e4e0:	6983      	ldr	r3, [r0, #24]
 800e4e2:	b90b      	cbnz	r3, 800e4e8 <_vfiprintf_r+0x18>
 800e4e4:	f7ff fe96 	bl	800e214 <__sinit>
 800e4e8:	4b89      	ldr	r3, [pc, #548]	; (800e710 <_vfiprintf_r+0x240>)
 800e4ea:	429d      	cmp	r5, r3
 800e4ec:	d11b      	bne.n	800e526 <_vfiprintf_r+0x56>
 800e4ee:	6875      	ldr	r5, [r6, #4]
 800e4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4f2:	07d9      	lsls	r1, r3, #31
 800e4f4:	d405      	bmi.n	800e502 <_vfiprintf_r+0x32>
 800e4f6:	89ab      	ldrh	r3, [r5, #12]
 800e4f8:	059a      	lsls	r2, r3, #22
 800e4fa:	d402      	bmi.n	800e502 <_vfiprintf_r+0x32>
 800e4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4fe:	f7ff ff27 	bl	800e350 <__retarget_lock_acquire_recursive>
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	071b      	lsls	r3, r3, #28
 800e506:	d501      	bpl.n	800e50c <_vfiprintf_r+0x3c>
 800e508:	692b      	ldr	r3, [r5, #16]
 800e50a:	b9eb      	cbnz	r3, 800e548 <_vfiprintf_r+0x78>
 800e50c:	4629      	mov	r1, r5
 800e50e:	4630      	mov	r0, r6
 800e510:	f000 fb5a 	bl	800ebc8 <__swsetup_r>
 800e514:	b1c0      	cbz	r0, 800e548 <_vfiprintf_r+0x78>
 800e516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e518:	07dc      	lsls	r4, r3, #31
 800e51a:	d50e      	bpl.n	800e53a <_vfiprintf_r+0x6a>
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295
 800e520:	b01d      	add	sp, #116	; 0x74
 800e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e526:	4b7b      	ldr	r3, [pc, #492]	; (800e714 <_vfiprintf_r+0x244>)
 800e528:	429d      	cmp	r5, r3
 800e52a:	d101      	bne.n	800e530 <_vfiprintf_r+0x60>
 800e52c:	68b5      	ldr	r5, [r6, #8]
 800e52e:	e7df      	b.n	800e4f0 <_vfiprintf_r+0x20>
 800e530:	4b79      	ldr	r3, [pc, #484]	; (800e718 <_vfiprintf_r+0x248>)
 800e532:	429d      	cmp	r5, r3
 800e534:	bf08      	it	eq
 800e536:	68f5      	ldreq	r5, [r6, #12]
 800e538:	e7da      	b.n	800e4f0 <_vfiprintf_r+0x20>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	0598      	lsls	r0, r3, #22
 800e53e:	d4ed      	bmi.n	800e51c <_vfiprintf_r+0x4c>
 800e540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e542:	f7ff ff06 	bl	800e352 <__retarget_lock_release_recursive>
 800e546:	e7e9      	b.n	800e51c <_vfiprintf_r+0x4c>
 800e548:	2300      	movs	r3, #0
 800e54a:	9309      	str	r3, [sp, #36]	; 0x24
 800e54c:	2320      	movs	r3, #32
 800e54e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e552:	f8cd 800c 	str.w	r8, [sp, #12]
 800e556:	2330      	movs	r3, #48	; 0x30
 800e558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e71c <_vfiprintf_r+0x24c>
 800e55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e560:	f04f 0901 	mov.w	r9, #1
 800e564:	4623      	mov	r3, r4
 800e566:	469a      	mov	sl, r3
 800e568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e56c:	b10a      	cbz	r2, 800e572 <_vfiprintf_r+0xa2>
 800e56e:	2a25      	cmp	r2, #37	; 0x25
 800e570:	d1f9      	bne.n	800e566 <_vfiprintf_r+0x96>
 800e572:	ebba 0b04 	subs.w	fp, sl, r4
 800e576:	d00b      	beq.n	800e590 <_vfiprintf_r+0xc0>
 800e578:	465b      	mov	r3, fp
 800e57a:	4622      	mov	r2, r4
 800e57c:	4629      	mov	r1, r5
 800e57e:	4630      	mov	r0, r6
 800e580:	f7ff ff93 	bl	800e4aa <__sfputs_r>
 800e584:	3001      	adds	r0, #1
 800e586:	f000 80aa 	beq.w	800e6de <_vfiprintf_r+0x20e>
 800e58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e58c:	445a      	add	r2, fp
 800e58e:	9209      	str	r2, [sp, #36]	; 0x24
 800e590:	f89a 3000 	ldrb.w	r3, [sl]
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 80a2 	beq.w	800e6de <_vfiprintf_r+0x20e>
 800e59a:	2300      	movs	r3, #0
 800e59c:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5a4:	f10a 0a01 	add.w	sl, sl, #1
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	9307      	str	r3, [sp, #28]
 800e5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5b2:	4654      	mov	r4, sl
 800e5b4:	2205      	movs	r2, #5
 800e5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ba:	4858      	ldr	r0, [pc, #352]	; (800e71c <_vfiprintf_r+0x24c>)
 800e5bc:	f7f1 fe30 	bl	8000220 <memchr>
 800e5c0:	9a04      	ldr	r2, [sp, #16]
 800e5c2:	b9d8      	cbnz	r0, 800e5fc <_vfiprintf_r+0x12c>
 800e5c4:	06d1      	lsls	r1, r2, #27
 800e5c6:	bf44      	itt	mi
 800e5c8:	2320      	movmi	r3, #32
 800e5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ce:	0713      	lsls	r3, r2, #28
 800e5d0:	bf44      	itt	mi
 800e5d2:	232b      	movmi	r3, #43	; 0x2b
 800e5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5de:	d015      	beq.n	800e60c <_vfiprintf_r+0x13c>
 800e5e0:	9a07      	ldr	r2, [sp, #28]
 800e5e2:	4654      	mov	r4, sl
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f04f 0c0a 	mov.w	ip, #10
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5f0:	3b30      	subs	r3, #48	; 0x30
 800e5f2:	2b09      	cmp	r3, #9
 800e5f4:	d94e      	bls.n	800e694 <_vfiprintf_r+0x1c4>
 800e5f6:	b1b0      	cbz	r0, 800e626 <_vfiprintf_r+0x156>
 800e5f8:	9207      	str	r2, [sp, #28]
 800e5fa:	e014      	b.n	800e626 <_vfiprintf_r+0x156>
 800e5fc:	eba0 0308 	sub.w	r3, r0, r8
 800e600:	fa09 f303 	lsl.w	r3, r9, r3
 800e604:	4313      	orrs	r3, r2
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	46a2      	mov	sl, r4
 800e60a:	e7d2      	b.n	800e5b2 <_vfiprintf_r+0xe2>
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	1d19      	adds	r1, r3, #4
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	9103      	str	r1, [sp, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	bfbb      	ittet	lt
 800e618:	425b      	neglt	r3, r3
 800e61a:	f042 0202 	orrlt.w	r2, r2, #2
 800e61e:	9307      	strge	r3, [sp, #28]
 800e620:	9307      	strlt	r3, [sp, #28]
 800e622:	bfb8      	it	lt
 800e624:	9204      	strlt	r2, [sp, #16]
 800e626:	7823      	ldrb	r3, [r4, #0]
 800e628:	2b2e      	cmp	r3, #46	; 0x2e
 800e62a:	d10c      	bne.n	800e646 <_vfiprintf_r+0x176>
 800e62c:	7863      	ldrb	r3, [r4, #1]
 800e62e:	2b2a      	cmp	r3, #42	; 0x2a
 800e630:	d135      	bne.n	800e69e <_vfiprintf_r+0x1ce>
 800e632:	9b03      	ldr	r3, [sp, #12]
 800e634:	1d1a      	adds	r2, r3, #4
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	9203      	str	r2, [sp, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	bfb8      	it	lt
 800e63e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e642:	3402      	adds	r4, #2
 800e644:	9305      	str	r3, [sp, #20]
 800e646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e72c <_vfiprintf_r+0x25c>
 800e64a:	7821      	ldrb	r1, [r4, #0]
 800e64c:	2203      	movs	r2, #3
 800e64e:	4650      	mov	r0, sl
 800e650:	f7f1 fde6 	bl	8000220 <memchr>
 800e654:	b140      	cbz	r0, 800e668 <_vfiprintf_r+0x198>
 800e656:	2340      	movs	r3, #64	; 0x40
 800e658:	eba0 000a 	sub.w	r0, r0, sl
 800e65c:	fa03 f000 	lsl.w	r0, r3, r0
 800e660:	9b04      	ldr	r3, [sp, #16]
 800e662:	4303      	orrs	r3, r0
 800e664:	3401      	adds	r4, #1
 800e666:	9304      	str	r3, [sp, #16]
 800e668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66c:	482c      	ldr	r0, [pc, #176]	; (800e720 <_vfiprintf_r+0x250>)
 800e66e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e672:	2206      	movs	r2, #6
 800e674:	f7f1 fdd4 	bl	8000220 <memchr>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d03f      	beq.n	800e6fc <_vfiprintf_r+0x22c>
 800e67c:	4b29      	ldr	r3, [pc, #164]	; (800e724 <_vfiprintf_r+0x254>)
 800e67e:	bb1b      	cbnz	r3, 800e6c8 <_vfiprintf_r+0x1f8>
 800e680:	9b03      	ldr	r3, [sp, #12]
 800e682:	3307      	adds	r3, #7
 800e684:	f023 0307 	bic.w	r3, r3, #7
 800e688:	3308      	adds	r3, #8
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e68e:	443b      	add	r3, r7
 800e690:	9309      	str	r3, [sp, #36]	; 0x24
 800e692:	e767      	b.n	800e564 <_vfiprintf_r+0x94>
 800e694:	fb0c 3202 	mla	r2, ip, r2, r3
 800e698:	460c      	mov	r4, r1
 800e69a:	2001      	movs	r0, #1
 800e69c:	e7a5      	b.n	800e5ea <_vfiprintf_r+0x11a>
 800e69e:	2300      	movs	r3, #0
 800e6a0:	3401      	adds	r4, #1
 800e6a2:	9305      	str	r3, [sp, #20]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	f04f 0c0a 	mov.w	ip, #10
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6b0:	3a30      	subs	r2, #48	; 0x30
 800e6b2:	2a09      	cmp	r2, #9
 800e6b4:	d903      	bls.n	800e6be <_vfiprintf_r+0x1ee>
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0c5      	beq.n	800e646 <_vfiprintf_r+0x176>
 800e6ba:	9105      	str	r1, [sp, #20]
 800e6bc:	e7c3      	b.n	800e646 <_vfiprintf_r+0x176>
 800e6be:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e7f0      	b.n	800e6aa <_vfiprintf_r+0x1da>
 800e6c8:	ab03      	add	r3, sp, #12
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	462a      	mov	r2, r5
 800e6ce:	4b16      	ldr	r3, [pc, #88]	; (800e728 <_vfiprintf_r+0x258>)
 800e6d0:	a904      	add	r1, sp, #16
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f3af 8000 	nop.w
 800e6d8:	4607      	mov	r7, r0
 800e6da:	1c78      	adds	r0, r7, #1
 800e6dc:	d1d6      	bne.n	800e68c <_vfiprintf_r+0x1bc>
 800e6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e0:	07d9      	lsls	r1, r3, #31
 800e6e2:	d405      	bmi.n	800e6f0 <_vfiprintf_r+0x220>
 800e6e4:	89ab      	ldrh	r3, [r5, #12]
 800e6e6:	059a      	lsls	r2, r3, #22
 800e6e8:	d402      	bmi.n	800e6f0 <_vfiprintf_r+0x220>
 800e6ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ec:	f7ff fe31 	bl	800e352 <__retarget_lock_release_recursive>
 800e6f0:	89ab      	ldrh	r3, [r5, #12]
 800e6f2:	065b      	lsls	r3, r3, #25
 800e6f4:	f53f af12 	bmi.w	800e51c <_vfiprintf_r+0x4c>
 800e6f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6fa:	e711      	b.n	800e520 <_vfiprintf_r+0x50>
 800e6fc:	ab03      	add	r3, sp, #12
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	462a      	mov	r2, r5
 800e702:	4b09      	ldr	r3, [pc, #36]	; (800e728 <_vfiprintf_r+0x258>)
 800e704:	a904      	add	r1, sp, #16
 800e706:	4630      	mov	r0, r6
 800e708:	f000 f880 	bl	800e80c <_printf_i>
 800e70c:	e7e4      	b.n	800e6d8 <_vfiprintf_r+0x208>
 800e70e:	bf00      	nop
 800e710:	0800f4d8 	.word	0x0800f4d8
 800e714:	0800f4f8 	.word	0x0800f4f8
 800e718:	0800f4b8 	.word	0x0800f4b8
 800e71c:	0800f518 	.word	0x0800f518
 800e720:	0800f522 	.word	0x0800f522
 800e724:	00000000 	.word	0x00000000
 800e728:	0800e4ab 	.word	0x0800e4ab
 800e72c:	0800f51e 	.word	0x0800f51e

0800e730 <_printf_common>:
 800e730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e734:	4616      	mov	r6, r2
 800e736:	4699      	mov	r9, r3
 800e738:	688a      	ldr	r2, [r1, #8]
 800e73a:	690b      	ldr	r3, [r1, #16]
 800e73c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e740:	4293      	cmp	r3, r2
 800e742:	bfb8      	it	lt
 800e744:	4613      	movlt	r3, r2
 800e746:	6033      	str	r3, [r6, #0]
 800e748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e74c:	4607      	mov	r7, r0
 800e74e:	460c      	mov	r4, r1
 800e750:	b10a      	cbz	r2, 800e756 <_printf_common+0x26>
 800e752:	3301      	adds	r3, #1
 800e754:	6033      	str	r3, [r6, #0]
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	0699      	lsls	r1, r3, #26
 800e75a:	bf42      	ittt	mi
 800e75c:	6833      	ldrmi	r3, [r6, #0]
 800e75e:	3302      	addmi	r3, #2
 800e760:	6033      	strmi	r3, [r6, #0]
 800e762:	6825      	ldr	r5, [r4, #0]
 800e764:	f015 0506 	ands.w	r5, r5, #6
 800e768:	d106      	bne.n	800e778 <_printf_common+0x48>
 800e76a:	f104 0a19 	add.w	sl, r4, #25
 800e76e:	68e3      	ldr	r3, [r4, #12]
 800e770:	6832      	ldr	r2, [r6, #0]
 800e772:	1a9b      	subs	r3, r3, r2
 800e774:	42ab      	cmp	r3, r5
 800e776:	dc26      	bgt.n	800e7c6 <_printf_common+0x96>
 800e778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e77c:	1e13      	subs	r3, r2, #0
 800e77e:	6822      	ldr	r2, [r4, #0]
 800e780:	bf18      	it	ne
 800e782:	2301      	movne	r3, #1
 800e784:	0692      	lsls	r2, r2, #26
 800e786:	d42b      	bmi.n	800e7e0 <_printf_common+0xb0>
 800e788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e78c:	4649      	mov	r1, r9
 800e78e:	4638      	mov	r0, r7
 800e790:	47c0      	blx	r8
 800e792:	3001      	adds	r0, #1
 800e794:	d01e      	beq.n	800e7d4 <_printf_common+0xa4>
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	68e5      	ldr	r5, [r4, #12]
 800e79a:	6832      	ldr	r2, [r6, #0]
 800e79c:	f003 0306 	and.w	r3, r3, #6
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	bf08      	it	eq
 800e7a4:	1aad      	subeq	r5, r5, r2
 800e7a6:	68a3      	ldr	r3, [r4, #8]
 800e7a8:	6922      	ldr	r2, [r4, #16]
 800e7aa:	bf0c      	ite	eq
 800e7ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7b0:	2500      	movne	r5, #0
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	bfc4      	itt	gt
 800e7b6:	1a9b      	subgt	r3, r3, r2
 800e7b8:	18ed      	addgt	r5, r5, r3
 800e7ba:	2600      	movs	r6, #0
 800e7bc:	341a      	adds	r4, #26
 800e7be:	42b5      	cmp	r5, r6
 800e7c0:	d11a      	bne.n	800e7f8 <_printf_common+0xc8>
 800e7c2:	2000      	movs	r0, #0
 800e7c4:	e008      	b.n	800e7d8 <_printf_common+0xa8>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	4652      	mov	r2, sl
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	47c0      	blx	r8
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	d103      	bne.n	800e7dc <_printf_common+0xac>
 800e7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7dc:	3501      	adds	r5, #1
 800e7de:	e7c6      	b.n	800e76e <_printf_common+0x3e>
 800e7e0:	18e1      	adds	r1, r4, r3
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	2030      	movs	r0, #48	; 0x30
 800e7e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7ea:	4422      	add	r2, r4
 800e7ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7f4:	3302      	adds	r3, #2
 800e7f6:	e7c7      	b.n	800e788 <_printf_common+0x58>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	4649      	mov	r1, r9
 800e7fe:	4638      	mov	r0, r7
 800e800:	47c0      	blx	r8
 800e802:	3001      	adds	r0, #1
 800e804:	d0e6      	beq.n	800e7d4 <_printf_common+0xa4>
 800e806:	3601      	adds	r6, #1
 800e808:	e7d9      	b.n	800e7be <_printf_common+0x8e>
	...

0800e80c <_printf_i>:
 800e80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e810:	7e0f      	ldrb	r7, [r1, #24]
 800e812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e814:	2f78      	cmp	r7, #120	; 0x78
 800e816:	4691      	mov	r9, r2
 800e818:	4680      	mov	r8, r0
 800e81a:	460c      	mov	r4, r1
 800e81c:	469a      	mov	sl, r3
 800e81e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e822:	d807      	bhi.n	800e834 <_printf_i+0x28>
 800e824:	2f62      	cmp	r7, #98	; 0x62
 800e826:	d80a      	bhi.n	800e83e <_printf_i+0x32>
 800e828:	2f00      	cmp	r7, #0
 800e82a:	f000 80d8 	beq.w	800e9de <_printf_i+0x1d2>
 800e82e:	2f58      	cmp	r7, #88	; 0x58
 800e830:	f000 80a3 	beq.w	800e97a <_printf_i+0x16e>
 800e834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e83c:	e03a      	b.n	800e8b4 <_printf_i+0xa8>
 800e83e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e842:	2b15      	cmp	r3, #21
 800e844:	d8f6      	bhi.n	800e834 <_printf_i+0x28>
 800e846:	a101      	add	r1, pc, #4	; (adr r1, 800e84c <_printf_i+0x40>)
 800e848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e84c:	0800e8a5 	.word	0x0800e8a5
 800e850:	0800e8b9 	.word	0x0800e8b9
 800e854:	0800e835 	.word	0x0800e835
 800e858:	0800e835 	.word	0x0800e835
 800e85c:	0800e835 	.word	0x0800e835
 800e860:	0800e835 	.word	0x0800e835
 800e864:	0800e8b9 	.word	0x0800e8b9
 800e868:	0800e835 	.word	0x0800e835
 800e86c:	0800e835 	.word	0x0800e835
 800e870:	0800e835 	.word	0x0800e835
 800e874:	0800e835 	.word	0x0800e835
 800e878:	0800e9c5 	.word	0x0800e9c5
 800e87c:	0800e8e9 	.word	0x0800e8e9
 800e880:	0800e9a7 	.word	0x0800e9a7
 800e884:	0800e835 	.word	0x0800e835
 800e888:	0800e835 	.word	0x0800e835
 800e88c:	0800e9e7 	.word	0x0800e9e7
 800e890:	0800e835 	.word	0x0800e835
 800e894:	0800e8e9 	.word	0x0800e8e9
 800e898:	0800e835 	.word	0x0800e835
 800e89c:	0800e835 	.word	0x0800e835
 800e8a0:	0800e9af 	.word	0x0800e9af
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	1d1a      	adds	r2, r3, #4
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	602a      	str	r2, [r5, #0]
 800e8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e0a3      	b.n	800ea00 <_printf_i+0x1f4>
 800e8b8:	6820      	ldr	r0, [r4, #0]
 800e8ba:	6829      	ldr	r1, [r5, #0]
 800e8bc:	0606      	lsls	r6, r0, #24
 800e8be:	f101 0304 	add.w	r3, r1, #4
 800e8c2:	d50a      	bpl.n	800e8da <_printf_i+0xce>
 800e8c4:	680e      	ldr	r6, [r1, #0]
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	2e00      	cmp	r6, #0
 800e8ca:	da03      	bge.n	800e8d4 <_printf_i+0xc8>
 800e8cc:	232d      	movs	r3, #45	; 0x2d
 800e8ce:	4276      	negs	r6, r6
 800e8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d4:	485e      	ldr	r0, [pc, #376]	; (800ea50 <_printf_i+0x244>)
 800e8d6:	230a      	movs	r3, #10
 800e8d8:	e019      	b.n	800e90e <_printf_i+0x102>
 800e8da:	680e      	ldr	r6, [r1, #0]
 800e8dc:	602b      	str	r3, [r5, #0]
 800e8de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8e2:	bf18      	it	ne
 800e8e4:	b236      	sxthne	r6, r6
 800e8e6:	e7ef      	b.n	800e8c8 <_printf_i+0xbc>
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	6820      	ldr	r0, [r4, #0]
 800e8ec:	1d19      	adds	r1, r3, #4
 800e8ee:	6029      	str	r1, [r5, #0]
 800e8f0:	0601      	lsls	r1, r0, #24
 800e8f2:	d501      	bpl.n	800e8f8 <_printf_i+0xec>
 800e8f4:	681e      	ldr	r6, [r3, #0]
 800e8f6:	e002      	b.n	800e8fe <_printf_i+0xf2>
 800e8f8:	0646      	lsls	r6, r0, #25
 800e8fa:	d5fb      	bpl.n	800e8f4 <_printf_i+0xe8>
 800e8fc:	881e      	ldrh	r6, [r3, #0]
 800e8fe:	4854      	ldr	r0, [pc, #336]	; (800ea50 <_printf_i+0x244>)
 800e900:	2f6f      	cmp	r7, #111	; 0x6f
 800e902:	bf0c      	ite	eq
 800e904:	2308      	moveq	r3, #8
 800e906:	230a      	movne	r3, #10
 800e908:	2100      	movs	r1, #0
 800e90a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e90e:	6865      	ldr	r5, [r4, #4]
 800e910:	60a5      	str	r5, [r4, #8]
 800e912:	2d00      	cmp	r5, #0
 800e914:	bfa2      	ittt	ge
 800e916:	6821      	ldrge	r1, [r4, #0]
 800e918:	f021 0104 	bicge.w	r1, r1, #4
 800e91c:	6021      	strge	r1, [r4, #0]
 800e91e:	b90e      	cbnz	r6, 800e924 <_printf_i+0x118>
 800e920:	2d00      	cmp	r5, #0
 800e922:	d04d      	beq.n	800e9c0 <_printf_i+0x1b4>
 800e924:	4615      	mov	r5, r2
 800e926:	fbb6 f1f3 	udiv	r1, r6, r3
 800e92a:	fb03 6711 	mls	r7, r3, r1, r6
 800e92e:	5dc7      	ldrb	r7, [r0, r7]
 800e930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e934:	4637      	mov	r7, r6
 800e936:	42bb      	cmp	r3, r7
 800e938:	460e      	mov	r6, r1
 800e93a:	d9f4      	bls.n	800e926 <_printf_i+0x11a>
 800e93c:	2b08      	cmp	r3, #8
 800e93e:	d10b      	bne.n	800e958 <_printf_i+0x14c>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	07de      	lsls	r6, r3, #31
 800e944:	d508      	bpl.n	800e958 <_printf_i+0x14c>
 800e946:	6923      	ldr	r3, [r4, #16]
 800e948:	6861      	ldr	r1, [r4, #4]
 800e94a:	4299      	cmp	r1, r3
 800e94c:	bfde      	ittt	le
 800e94e:	2330      	movle	r3, #48	; 0x30
 800e950:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e954:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e958:	1b52      	subs	r2, r2, r5
 800e95a:	6122      	str	r2, [r4, #16]
 800e95c:	f8cd a000 	str.w	sl, [sp]
 800e960:	464b      	mov	r3, r9
 800e962:	aa03      	add	r2, sp, #12
 800e964:	4621      	mov	r1, r4
 800e966:	4640      	mov	r0, r8
 800e968:	f7ff fee2 	bl	800e730 <_printf_common>
 800e96c:	3001      	adds	r0, #1
 800e96e:	d14c      	bne.n	800ea0a <_printf_i+0x1fe>
 800e970:	f04f 30ff 	mov.w	r0, #4294967295
 800e974:	b004      	add	sp, #16
 800e976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97a:	4835      	ldr	r0, [pc, #212]	; (800ea50 <_printf_i+0x244>)
 800e97c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e980:	6829      	ldr	r1, [r5, #0]
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	f851 6b04 	ldr.w	r6, [r1], #4
 800e988:	6029      	str	r1, [r5, #0]
 800e98a:	061d      	lsls	r5, r3, #24
 800e98c:	d514      	bpl.n	800e9b8 <_printf_i+0x1ac>
 800e98e:	07df      	lsls	r7, r3, #31
 800e990:	bf44      	itt	mi
 800e992:	f043 0320 	orrmi.w	r3, r3, #32
 800e996:	6023      	strmi	r3, [r4, #0]
 800e998:	b91e      	cbnz	r6, 800e9a2 <_printf_i+0x196>
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	f023 0320 	bic.w	r3, r3, #32
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	2310      	movs	r3, #16
 800e9a4:	e7b0      	b.n	800e908 <_printf_i+0xfc>
 800e9a6:	6823      	ldr	r3, [r4, #0]
 800e9a8:	f043 0320 	orr.w	r3, r3, #32
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	2378      	movs	r3, #120	; 0x78
 800e9b0:	4828      	ldr	r0, [pc, #160]	; (800ea54 <_printf_i+0x248>)
 800e9b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9b6:	e7e3      	b.n	800e980 <_printf_i+0x174>
 800e9b8:	0659      	lsls	r1, r3, #25
 800e9ba:	bf48      	it	mi
 800e9bc:	b2b6      	uxthmi	r6, r6
 800e9be:	e7e6      	b.n	800e98e <_printf_i+0x182>
 800e9c0:	4615      	mov	r5, r2
 800e9c2:	e7bb      	b.n	800e93c <_printf_i+0x130>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	6826      	ldr	r6, [r4, #0]
 800e9c8:	6961      	ldr	r1, [r4, #20]
 800e9ca:	1d18      	adds	r0, r3, #4
 800e9cc:	6028      	str	r0, [r5, #0]
 800e9ce:	0635      	lsls	r5, r6, #24
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	d501      	bpl.n	800e9d8 <_printf_i+0x1cc>
 800e9d4:	6019      	str	r1, [r3, #0]
 800e9d6:	e002      	b.n	800e9de <_printf_i+0x1d2>
 800e9d8:	0670      	lsls	r0, r6, #25
 800e9da:	d5fb      	bpl.n	800e9d4 <_printf_i+0x1c8>
 800e9dc:	8019      	strh	r1, [r3, #0]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	6123      	str	r3, [r4, #16]
 800e9e2:	4615      	mov	r5, r2
 800e9e4:	e7ba      	b.n	800e95c <_printf_i+0x150>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	1d1a      	adds	r2, r3, #4
 800e9ea:	602a      	str	r2, [r5, #0]
 800e9ec:	681d      	ldr	r5, [r3, #0]
 800e9ee:	6862      	ldr	r2, [r4, #4]
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f7f1 fc14 	bl	8000220 <memchr>
 800e9f8:	b108      	cbz	r0, 800e9fe <_printf_i+0x1f2>
 800e9fa:	1b40      	subs	r0, r0, r5
 800e9fc:	6060      	str	r0, [r4, #4]
 800e9fe:	6863      	ldr	r3, [r4, #4]
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	2300      	movs	r3, #0
 800ea04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea08:	e7a8      	b.n	800e95c <_printf_i+0x150>
 800ea0a:	6923      	ldr	r3, [r4, #16]
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	4649      	mov	r1, r9
 800ea10:	4640      	mov	r0, r8
 800ea12:	47d0      	blx	sl
 800ea14:	3001      	adds	r0, #1
 800ea16:	d0ab      	beq.n	800e970 <_printf_i+0x164>
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	079b      	lsls	r3, r3, #30
 800ea1c:	d413      	bmi.n	800ea46 <_printf_i+0x23a>
 800ea1e:	68e0      	ldr	r0, [r4, #12]
 800ea20:	9b03      	ldr	r3, [sp, #12]
 800ea22:	4298      	cmp	r0, r3
 800ea24:	bfb8      	it	lt
 800ea26:	4618      	movlt	r0, r3
 800ea28:	e7a4      	b.n	800e974 <_printf_i+0x168>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	4649      	mov	r1, r9
 800ea30:	4640      	mov	r0, r8
 800ea32:	47d0      	blx	sl
 800ea34:	3001      	adds	r0, #1
 800ea36:	d09b      	beq.n	800e970 <_printf_i+0x164>
 800ea38:	3501      	adds	r5, #1
 800ea3a:	68e3      	ldr	r3, [r4, #12]
 800ea3c:	9903      	ldr	r1, [sp, #12]
 800ea3e:	1a5b      	subs	r3, r3, r1
 800ea40:	42ab      	cmp	r3, r5
 800ea42:	dcf2      	bgt.n	800ea2a <_printf_i+0x21e>
 800ea44:	e7eb      	b.n	800ea1e <_printf_i+0x212>
 800ea46:	2500      	movs	r5, #0
 800ea48:	f104 0619 	add.w	r6, r4, #25
 800ea4c:	e7f5      	b.n	800ea3a <_printf_i+0x22e>
 800ea4e:	bf00      	nop
 800ea50:	0800f529 	.word	0x0800f529
 800ea54:	0800f53a 	.word	0x0800f53a

0800ea58 <_sbrk_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d06      	ldr	r5, [pc, #24]	; (800ea74 <_sbrk_r+0x1c>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	602b      	str	r3, [r5, #0]
 800ea64:	f7f8 fa9c 	bl	8006fa0 <_sbrk>
 800ea68:	1c43      	adds	r3, r0, #1
 800ea6a:	d102      	bne.n	800ea72 <_sbrk_r+0x1a>
 800ea6c:	682b      	ldr	r3, [r5, #0]
 800ea6e:	b103      	cbz	r3, 800ea72 <_sbrk_r+0x1a>
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	bd38      	pop	{r3, r4, r5, pc}
 800ea74:	20001a78 	.word	0x20001a78

0800ea78 <__sread>:
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea80:	f000 fab2 	bl	800efe8 <_read_r>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	bfab      	itete	ge
 800ea88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ea8c:	181b      	addge	r3, r3, r0
 800ea8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea92:	bfac      	ite	ge
 800ea94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea96:	81a3      	strhlt	r3, [r4, #12]
 800ea98:	bd10      	pop	{r4, pc}

0800ea9a <__swrite>:
 800ea9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9e:	461f      	mov	r7, r3
 800eaa0:	898b      	ldrh	r3, [r1, #12]
 800eaa2:	05db      	lsls	r3, r3, #23
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	4616      	mov	r6, r2
 800eaaa:	d505      	bpl.n	800eab8 <__swrite+0x1e>
 800eaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab0:	2302      	movs	r3, #2
 800eab2:	2200      	movs	r2, #0
 800eab4:	f000 f9c8 	bl	800ee48 <_lseek_r>
 800eab8:	89a3      	ldrh	r3, [r4, #12]
 800eaba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eac2:	81a3      	strh	r3, [r4, #12]
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	4628      	mov	r0, r5
 800eaca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eace:	f000 b869 	b.w	800eba4 <_write_r>

0800ead2 <__sseek>:
 800ead2:	b510      	push	{r4, lr}
 800ead4:	460c      	mov	r4, r1
 800ead6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eada:	f000 f9b5 	bl	800ee48 <_lseek_r>
 800eade:	1c43      	adds	r3, r0, #1
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	bf15      	itete	ne
 800eae4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eaea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eaee:	81a3      	strheq	r3, [r4, #12]
 800eaf0:	bf18      	it	ne
 800eaf2:	81a3      	strhne	r3, [r4, #12]
 800eaf4:	bd10      	pop	{r4, pc}

0800eaf6 <__sclose>:
 800eaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eafa:	f000 b8d3 	b.w	800eca4 <_close_r>
	...

0800eb00 <__swbuf_r>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	460e      	mov	r6, r1
 800eb04:	4614      	mov	r4, r2
 800eb06:	4605      	mov	r5, r0
 800eb08:	b118      	cbz	r0, 800eb12 <__swbuf_r+0x12>
 800eb0a:	6983      	ldr	r3, [r0, #24]
 800eb0c:	b90b      	cbnz	r3, 800eb12 <__swbuf_r+0x12>
 800eb0e:	f7ff fb81 	bl	800e214 <__sinit>
 800eb12:	4b21      	ldr	r3, [pc, #132]	; (800eb98 <__swbuf_r+0x98>)
 800eb14:	429c      	cmp	r4, r3
 800eb16:	d12b      	bne.n	800eb70 <__swbuf_r+0x70>
 800eb18:	686c      	ldr	r4, [r5, #4]
 800eb1a:	69a3      	ldr	r3, [r4, #24]
 800eb1c:	60a3      	str	r3, [r4, #8]
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	071a      	lsls	r2, r3, #28
 800eb22:	d52f      	bpl.n	800eb84 <__swbuf_r+0x84>
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	b36b      	cbz	r3, 800eb84 <__swbuf_r+0x84>
 800eb28:	6923      	ldr	r3, [r4, #16]
 800eb2a:	6820      	ldr	r0, [r4, #0]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6963      	ldr	r3, [r4, #20]
 800eb30:	b2f6      	uxtb	r6, r6
 800eb32:	4283      	cmp	r3, r0
 800eb34:	4637      	mov	r7, r6
 800eb36:	dc04      	bgt.n	800eb42 <__swbuf_r+0x42>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 f948 	bl	800edd0 <_fflush_r>
 800eb40:	bb30      	cbnz	r0, 800eb90 <__swbuf_r+0x90>
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	60a3      	str	r3, [r4, #8]
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	6022      	str	r2, [r4, #0]
 800eb4e:	701e      	strb	r6, [r3, #0]
 800eb50:	6963      	ldr	r3, [r4, #20]
 800eb52:	3001      	adds	r0, #1
 800eb54:	4283      	cmp	r3, r0
 800eb56:	d004      	beq.n	800eb62 <__swbuf_r+0x62>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	07db      	lsls	r3, r3, #31
 800eb5c:	d506      	bpl.n	800eb6c <__swbuf_r+0x6c>
 800eb5e:	2e0a      	cmp	r6, #10
 800eb60:	d104      	bne.n	800eb6c <__swbuf_r+0x6c>
 800eb62:	4621      	mov	r1, r4
 800eb64:	4628      	mov	r0, r5
 800eb66:	f000 f933 	bl	800edd0 <_fflush_r>
 800eb6a:	b988      	cbnz	r0, 800eb90 <__swbuf_r+0x90>
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <__swbuf_r+0x9c>)
 800eb72:	429c      	cmp	r4, r3
 800eb74:	d101      	bne.n	800eb7a <__swbuf_r+0x7a>
 800eb76:	68ac      	ldr	r4, [r5, #8]
 800eb78:	e7cf      	b.n	800eb1a <__swbuf_r+0x1a>
 800eb7a:	4b09      	ldr	r3, [pc, #36]	; (800eba0 <__swbuf_r+0xa0>)
 800eb7c:	429c      	cmp	r4, r3
 800eb7e:	bf08      	it	eq
 800eb80:	68ec      	ldreq	r4, [r5, #12]
 800eb82:	e7ca      	b.n	800eb1a <__swbuf_r+0x1a>
 800eb84:	4621      	mov	r1, r4
 800eb86:	4628      	mov	r0, r5
 800eb88:	f000 f81e 	bl	800ebc8 <__swsetup_r>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d0cb      	beq.n	800eb28 <__swbuf_r+0x28>
 800eb90:	f04f 37ff 	mov.w	r7, #4294967295
 800eb94:	e7ea      	b.n	800eb6c <__swbuf_r+0x6c>
 800eb96:	bf00      	nop
 800eb98:	0800f4d8 	.word	0x0800f4d8
 800eb9c:	0800f4f8 	.word	0x0800f4f8
 800eba0:	0800f4b8 	.word	0x0800f4b8

0800eba4 <_write_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4d07      	ldr	r5, [pc, #28]	; (800ebc4 <_write_r+0x20>)
 800eba8:	4604      	mov	r4, r0
 800ebaa:	4608      	mov	r0, r1
 800ebac:	4611      	mov	r1, r2
 800ebae:	2200      	movs	r2, #0
 800ebb0:	602a      	str	r2, [r5, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f7f8 f9a3 	bl	8006efe <_write>
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d102      	bne.n	800ebc2 <_write_r+0x1e>
 800ebbc:	682b      	ldr	r3, [r5, #0]
 800ebbe:	b103      	cbz	r3, 800ebc2 <_write_r+0x1e>
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	20001a78 	.word	0x20001a78

0800ebc8 <__swsetup_r>:
 800ebc8:	4b32      	ldr	r3, [pc, #200]	; (800ec94 <__swsetup_r+0xcc>)
 800ebca:	b570      	push	{r4, r5, r6, lr}
 800ebcc:	681d      	ldr	r5, [r3, #0]
 800ebce:	4606      	mov	r6, r0
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	b125      	cbz	r5, 800ebde <__swsetup_r+0x16>
 800ebd4:	69ab      	ldr	r3, [r5, #24]
 800ebd6:	b913      	cbnz	r3, 800ebde <__swsetup_r+0x16>
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f7ff fb1b 	bl	800e214 <__sinit>
 800ebde:	4b2e      	ldr	r3, [pc, #184]	; (800ec98 <__swsetup_r+0xd0>)
 800ebe0:	429c      	cmp	r4, r3
 800ebe2:	d10f      	bne.n	800ec04 <__swsetup_r+0x3c>
 800ebe4:	686c      	ldr	r4, [r5, #4]
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebec:	0719      	lsls	r1, r3, #28
 800ebee:	d42c      	bmi.n	800ec4a <__swsetup_r+0x82>
 800ebf0:	06dd      	lsls	r5, r3, #27
 800ebf2:	d411      	bmi.n	800ec18 <__swsetup_r+0x50>
 800ebf4:	2309      	movs	r3, #9
 800ebf6:	6033      	str	r3, [r6, #0]
 800ebf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ec02:	e03e      	b.n	800ec82 <__swsetup_r+0xba>
 800ec04:	4b25      	ldr	r3, [pc, #148]	; (800ec9c <__swsetup_r+0xd4>)
 800ec06:	429c      	cmp	r4, r3
 800ec08:	d101      	bne.n	800ec0e <__swsetup_r+0x46>
 800ec0a:	68ac      	ldr	r4, [r5, #8]
 800ec0c:	e7eb      	b.n	800ebe6 <__swsetup_r+0x1e>
 800ec0e:	4b24      	ldr	r3, [pc, #144]	; (800eca0 <__swsetup_r+0xd8>)
 800ec10:	429c      	cmp	r4, r3
 800ec12:	bf08      	it	eq
 800ec14:	68ec      	ldreq	r4, [r5, #12]
 800ec16:	e7e6      	b.n	800ebe6 <__swsetup_r+0x1e>
 800ec18:	0758      	lsls	r0, r3, #29
 800ec1a:	d512      	bpl.n	800ec42 <__swsetup_r+0x7a>
 800ec1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec1e:	b141      	cbz	r1, 800ec32 <__swsetup_r+0x6a>
 800ec20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec24:	4299      	cmp	r1, r3
 800ec26:	d002      	beq.n	800ec2e <__swsetup_r+0x66>
 800ec28:	4630      	mov	r0, r6
 800ec2a:	f000 f991 	bl	800ef50 <_free_r>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	6363      	str	r3, [r4, #52]	; 0x34
 800ec32:	89a3      	ldrh	r3, [r4, #12]
 800ec34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec38:	81a3      	strh	r3, [r4, #12]
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	6063      	str	r3, [r4, #4]
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f043 0308 	orr.w	r3, r3, #8
 800ec48:	81a3      	strh	r3, [r4, #12]
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	b94b      	cbnz	r3, 800ec62 <__swsetup_r+0x9a>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec58:	d003      	beq.n	800ec62 <__swsetup_r+0x9a>
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f000 f92b 	bl	800eeb8 <__smakebuf_r>
 800ec62:	89a0      	ldrh	r0, [r4, #12]
 800ec64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec68:	f010 0301 	ands.w	r3, r0, #1
 800ec6c:	d00a      	beq.n	800ec84 <__swsetup_r+0xbc>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60a3      	str	r3, [r4, #8]
 800ec72:	6963      	ldr	r3, [r4, #20]
 800ec74:	425b      	negs	r3, r3
 800ec76:	61a3      	str	r3, [r4, #24]
 800ec78:	6923      	ldr	r3, [r4, #16]
 800ec7a:	b943      	cbnz	r3, 800ec8e <__swsetup_r+0xc6>
 800ec7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec80:	d1ba      	bne.n	800ebf8 <__swsetup_r+0x30>
 800ec82:	bd70      	pop	{r4, r5, r6, pc}
 800ec84:	0781      	lsls	r1, r0, #30
 800ec86:	bf58      	it	pl
 800ec88:	6963      	ldrpl	r3, [r4, #20]
 800ec8a:	60a3      	str	r3, [r4, #8]
 800ec8c:	e7f4      	b.n	800ec78 <__swsetup_r+0xb0>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	e7f7      	b.n	800ec82 <__swsetup_r+0xba>
 800ec92:	bf00      	nop
 800ec94:	200005c8 	.word	0x200005c8
 800ec98:	0800f4d8 	.word	0x0800f4d8
 800ec9c:	0800f4f8 	.word	0x0800f4f8
 800eca0:	0800f4b8 	.word	0x0800f4b8

0800eca4 <_close_r>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4d06      	ldr	r5, [pc, #24]	; (800ecc0 <_close_r+0x1c>)
 800eca8:	2300      	movs	r3, #0
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4608      	mov	r0, r1
 800ecae:	602b      	str	r3, [r5, #0]
 800ecb0:	f7f8 f941 	bl	8006f36 <_close>
 800ecb4:	1c43      	adds	r3, r0, #1
 800ecb6:	d102      	bne.n	800ecbe <_close_r+0x1a>
 800ecb8:	682b      	ldr	r3, [r5, #0]
 800ecba:	b103      	cbz	r3, 800ecbe <_close_r+0x1a>
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	20001a78 	.word	0x20001a78

0800ecc4 <__sflush_r>:
 800ecc4:	898a      	ldrh	r2, [r1, #12]
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	4605      	mov	r5, r0
 800eccc:	0710      	lsls	r0, r2, #28
 800ecce:	460c      	mov	r4, r1
 800ecd0:	d458      	bmi.n	800ed84 <__sflush_r+0xc0>
 800ecd2:	684b      	ldr	r3, [r1, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dc05      	bgt.n	800ece4 <__sflush_r+0x20>
 800ecd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	dc02      	bgt.n	800ece4 <__sflush_r+0x20>
 800ecde:	2000      	movs	r0, #0
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ece6:	2e00      	cmp	r6, #0
 800ece8:	d0f9      	beq.n	800ecde <__sflush_r+0x1a>
 800ecea:	2300      	movs	r3, #0
 800ecec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecf0:	682f      	ldr	r7, [r5, #0]
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	d032      	beq.n	800ed5c <__sflush_r+0x98>
 800ecf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	075a      	lsls	r2, r3, #29
 800ecfc:	d505      	bpl.n	800ed0a <__sflush_r+0x46>
 800ecfe:	6863      	ldr	r3, [r4, #4]
 800ed00:	1ac0      	subs	r0, r0, r3
 800ed02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed04:	b10b      	cbz	r3, 800ed0a <__sflush_r+0x46>
 800ed06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed08:	1ac0      	subs	r0, r0, r3
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed10:	6a21      	ldr	r1, [r4, #32]
 800ed12:	4628      	mov	r0, r5
 800ed14:	47b0      	blx	r6
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	d106      	bne.n	800ed2a <__sflush_r+0x66>
 800ed1c:	6829      	ldr	r1, [r5, #0]
 800ed1e:	291d      	cmp	r1, #29
 800ed20:	d82c      	bhi.n	800ed7c <__sflush_r+0xb8>
 800ed22:	4a2a      	ldr	r2, [pc, #168]	; (800edcc <__sflush_r+0x108>)
 800ed24:	40ca      	lsrs	r2, r1
 800ed26:	07d6      	lsls	r6, r2, #31
 800ed28:	d528      	bpl.n	800ed7c <__sflush_r+0xb8>
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	6062      	str	r2, [r4, #4]
 800ed2e:	04d9      	lsls	r1, r3, #19
 800ed30:	6922      	ldr	r2, [r4, #16]
 800ed32:	6022      	str	r2, [r4, #0]
 800ed34:	d504      	bpl.n	800ed40 <__sflush_r+0x7c>
 800ed36:	1c42      	adds	r2, r0, #1
 800ed38:	d101      	bne.n	800ed3e <__sflush_r+0x7a>
 800ed3a:	682b      	ldr	r3, [r5, #0]
 800ed3c:	b903      	cbnz	r3, 800ed40 <__sflush_r+0x7c>
 800ed3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ed40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed42:	602f      	str	r7, [r5, #0]
 800ed44:	2900      	cmp	r1, #0
 800ed46:	d0ca      	beq.n	800ecde <__sflush_r+0x1a>
 800ed48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed4c:	4299      	cmp	r1, r3
 800ed4e:	d002      	beq.n	800ed56 <__sflush_r+0x92>
 800ed50:	4628      	mov	r0, r5
 800ed52:	f000 f8fd 	bl	800ef50 <_free_r>
 800ed56:	2000      	movs	r0, #0
 800ed58:	6360      	str	r0, [r4, #52]	; 0x34
 800ed5a:	e7c1      	b.n	800ece0 <__sflush_r+0x1c>
 800ed5c:	6a21      	ldr	r1, [r4, #32]
 800ed5e:	2301      	movs	r3, #1
 800ed60:	4628      	mov	r0, r5
 800ed62:	47b0      	blx	r6
 800ed64:	1c41      	adds	r1, r0, #1
 800ed66:	d1c7      	bne.n	800ecf8 <__sflush_r+0x34>
 800ed68:	682b      	ldr	r3, [r5, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0c4      	beq.n	800ecf8 <__sflush_r+0x34>
 800ed6e:	2b1d      	cmp	r3, #29
 800ed70:	d001      	beq.n	800ed76 <__sflush_r+0xb2>
 800ed72:	2b16      	cmp	r3, #22
 800ed74:	d101      	bne.n	800ed7a <__sflush_r+0xb6>
 800ed76:	602f      	str	r7, [r5, #0]
 800ed78:	e7b1      	b.n	800ecde <__sflush_r+0x1a>
 800ed7a:	89a3      	ldrh	r3, [r4, #12]
 800ed7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	e7ad      	b.n	800ece0 <__sflush_r+0x1c>
 800ed84:	690f      	ldr	r7, [r1, #16]
 800ed86:	2f00      	cmp	r7, #0
 800ed88:	d0a9      	beq.n	800ecde <__sflush_r+0x1a>
 800ed8a:	0793      	lsls	r3, r2, #30
 800ed8c:	680e      	ldr	r6, [r1, #0]
 800ed8e:	bf08      	it	eq
 800ed90:	694b      	ldreq	r3, [r1, #20]
 800ed92:	600f      	str	r7, [r1, #0]
 800ed94:	bf18      	it	ne
 800ed96:	2300      	movne	r3, #0
 800ed98:	eba6 0807 	sub.w	r8, r6, r7
 800ed9c:	608b      	str	r3, [r1, #8]
 800ed9e:	f1b8 0f00 	cmp.w	r8, #0
 800eda2:	dd9c      	ble.n	800ecde <__sflush_r+0x1a>
 800eda4:	6a21      	ldr	r1, [r4, #32]
 800eda6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eda8:	4643      	mov	r3, r8
 800edaa:	463a      	mov	r2, r7
 800edac:	4628      	mov	r0, r5
 800edae:	47b0      	blx	r6
 800edb0:	2800      	cmp	r0, #0
 800edb2:	dc06      	bgt.n	800edc2 <__sflush_r+0xfe>
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edba:	81a3      	strh	r3, [r4, #12]
 800edbc:	f04f 30ff 	mov.w	r0, #4294967295
 800edc0:	e78e      	b.n	800ece0 <__sflush_r+0x1c>
 800edc2:	4407      	add	r7, r0
 800edc4:	eba8 0800 	sub.w	r8, r8, r0
 800edc8:	e7e9      	b.n	800ed9e <__sflush_r+0xda>
 800edca:	bf00      	nop
 800edcc:	20400001 	.word	0x20400001

0800edd0 <_fflush_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	690b      	ldr	r3, [r1, #16]
 800edd4:	4605      	mov	r5, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	b913      	cbnz	r3, 800ede0 <_fflush_r+0x10>
 800edda:	2500      	movs	r5, #0
 800eddc:	4628      	mov	r0, r5
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	b118      	cbz	r0, 800edea <_fflush_r+0x1a>
 800ede2:	6983      	ldr	r3, [r0, #24]
 800ede4:	b90b      	cbnz	r3, 800edea <_fflush_r+0x1a>
 800ede6:	f7ff fa15 	bl	800e214 <__sinit>
 800edea:	4b14      	ldr	r3, [pc, #80]	; (800ee3c <_fflush_r+0x6c>)
 800edec:	429c      	cmp	r4, r3
 800edee:	d11b      	bne.n	800ee28 <_fflush_r+0x58>
 800edf0:	686c      	ldr	r4, [r5, #4]
 800edf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d0ef      	beq.n	800edda <_fflush_r+0xa>
 800edfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800edfc:	07d0      	lsls	r0, r2, #31
 800edfe:	d404      	bmi.n	800ee0a <_fflush_r+0x3a>
 800ee00:	0599      	lsls	r1, r3, #22
 800ee02:	d402      	bmi.n	800ee0a <_fflush_r+0x3a>
 800ee04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee06:	f7ff faa3 	bl	800e350 <__retarget_lock_acquire_recursive>
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	f7ff ff59 	bl	800ecc4 <__sflush_r>
 800ee12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee14:	07da      	lsls	r2, r3, #31
 800ee16:	4605      	mov	r5, r0
 800ee18:	d4e0      	bmi.n	800eddc <_fflush_r+0xc>
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	059b      	lsls	r3, r3, #22
 800ee1e:	d4dd      	bmi.n	800eddc <_fflush_r+0xc>
 800ee20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee22:	f7ff fa96 	bl	800e352 <__retarget_lock_release_recursive>
 800ee26:	e7d9      	b.n	800eddc <_fflush_r+0xc>
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <_fflush_r+0x70>)
 800ee2a:	429c      	cmp	r4, r3
 800ee2c:	d101      	bne.n	800ee32 <_fflush_r+0x62>
 800ee2e:	68ac      	ldr	r4, [r5, #8]
 800ee30:	e7df      	b.n	800edf2 <_fflush_r+0x22>
 800ee32:	4b04      	ldr	r3, [pc, #16]	; (800ee44 <_fflush_r+0x74>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	bf08      	it	eq
 800ee38:	68ec      	ldreq	r4, [r5, #12]
 800ee3a:	e7da      	b.n	800edf2 <_fflush_r+0x22>
 800ee3c:	0800f4d8 	.word	0x0800f4d8
 800ee40:	0800f4f8 	.word	0x0800f4f8
 800ee44:	0800f4b8 	.word	0x0800f4b8

0800ee48 <_lseek_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d07      	ldr	r5, [pc, #28]	; (800ee68 <_lseek_r+0x20>)
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	2200      	movs	r2, #0
 800ee54:	602a      	str	r2, [r5, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f7f8 f894 	bl	8006f84 <_lseek>
 800ee5c:	1c43      	adds	r3, r0, #1
 800ee5e:	d102      	bne.n	800ee66 <_lseek_r+0x1e>
 800ee60:	682b      	ldr	r3, [r5, #0]
 800ee62:	b103      	cbz	r3, 800ee66 <_lseek_r+0x1e>
 800ee64:	6023      	str	r3, [r4, #0]
 800ee66:	bd38      	pop	{r3, r4, r5, pc}
 800ee68:	20001a78 	.word	0x20001a78

0800ee6c <__swhatbuf_r>:
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	460e      	mov	r6, r1
 800ee70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee74:	2900      	cmp	r1, #0
 800ee76:	b096      	sub	sp, #88	; 0x58
 800ee78:	4614      	mov	r4, r2
 800ee7a:	461d      	mov	r5, r3
 800ee7c:	da08      	bge.n	800ee90 <__swhatbuf_r+0x24>
 800ee7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	602a      	str	r2, [r5, #0]
 800ee86:	061a      	lsls	r2, r3, #24
 800ee88:	d410      	bmi.n	800eeac <__swhatbuf_r+0x40>
 800ee8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee8e:	e00e      	b.n	800eeae <__swhatbuf_r+0x42>
 800ee90:	466a      	mov	r2, sp
 800ee92:	f000 f8bb 	bl	800f00c <_fstat_r>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	dbf1      	blt.n	800ee7e <__swhatbuf_r+0x12>
 800ee9a:	9a01      	ldr	r2, [sp, #4]
 800ee9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eea4:	425a      	negs	r2, r3
 800eea6:	415a      	adcs	r2, r3
 800eea8:	602a      	str	r2, [r5, #0]
 800eeaa:	e7ee      	b.n	800ee8a <__swhatbuf_r+0x1e>
 800eeac:	2340      	movs	r3, #64	; 0x40
 800eeae:	2000      	movs	r0, #0
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	b016      	add	sp, #88	; 0x58
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eeb8 <__smakebuf_r>:
 800eeb8:	898b      	ldrh	r3, [r1, #12]
 800eeba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eebc:	079d      	lsls	r5, r3, #30
 800eebe:	4606      	mov	r6, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	d507      	bpl.n	800eed4 <__smakebuf_r+0x1c>
 800eec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	6123      	str	r3, [r4, #16]
 800eecc:	2301      	movs	r3, #1
 800eece:	6163      	str	r3, [r4, #20]
 800eed0:	b002      	add	sp, #8
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	ab01      	add	r3, sp, #4
 800eed6:	466a      	mov	r2, sp
 800eed8:	f7ff ffc8 	bl	800ee6c <__swhatbuf_r>
 800eedc:	9900      	ldr	r1, [sp, #0]
 800eede:	4605      	mov	r5, r0
 800eee0:	4630      	mov	r0, r6
 800eee2:	f7ff fa57 	bl	800e394 <_malloc_r>
 800eee6:	b948      	cbnz	r0, 800eefc <__smakebuf_r+0x44>
 800eee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeec:	059a      	lsls	r2, r3, #22
 800eeee:	d4ef      	bmi.n	800eed0 <__smakebuf_r+0x18>
 800eef0:	f023 0303 	bic.w	r3, r3, #3
 800eef4:	f043 0302 	orr.w	r3, r3, #2
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	e7e3      	b.n	800eec4 <__smakebuf_r+0xc>
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <__smakebuf_r+0x7c>)
 800eefe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	6020      	str	r0, [r4, #0]
 800ef04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	9b00      	ldr	r3, [sp, #0]
 800ef0c:	6163      	str	r3, [r4, #20]
 800ef0e:	9b01      	ldr	r3, [sp, #4]
 800ef10:	6120      	str	r0, [r4, #16]
 800ef12:	b15b      	cbz	r3, 800ef2c <__smakebuf_r+0x74>
 800ef14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f000 f889 	bl	800f030 <_isatty_r>
 800ef1e:	b128      	cbz	r0, 800ef2c <__smakebuf_r+0x74>
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	f023 0303 	bic.w	r3, r3, #3
 800ef26:	f043 0301 	orr.w	r3, r3, #1
 800ef2a:	81a3      	strh	r3, [r4, #12]
 800ef2c:	89a0      	ldrh	r0, [r4, #12]
 800ef2e:	4305      	orrs	r5, r0
 800ef30:	81a5      	strh	r5, [r4, #12]
 800ef32:	e7cd      	b.n	800eed0 <__smakebuf_r+0x18>
 800ef34:	0800e1ad 	.word	0x0800e1ad

0800ef38 <__malloc_lock>:
 800ef38:	4801      	ldr	r0, [pc, #4]	; (800ef40 <__malloc_lock+0x8>)
 800ef3a:	f7ff ba09 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800ef3e:	bf00      	nop
 800ef40:	20001a6c 	.word	0x20001a6c

0800ef44 <__malloc_unlock>:
 800ef44:	4801      	ldr	r0, [pc, #4]	; (800ef4c <__malloc_unlock+0x8>)
 800ef46:	f7ff ba04 	b.w	800e352 <__retarget_lock_release_recursive>
 800ef4a:	bf00      	nop
 800ef4c:	20001a6c 	.word	0x20001a6c

0800ef50 <_free_r>:
 800ef50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef52:	2900      	cmp	r1, #0
 800ef54:	d044      	beq.n	800efe0 <_free_r+0x90>
 800ef56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef5a:	9001      	str	r0, [sp, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef62:	bfb8      	it	lt
 800ef64:	18e4      	addlt	r4, r4, r3
 800ef66:	f7ff ffe7 	bl	800ef38 <__malloc_lock>
 800ef6a:	4a1e      	ldr	r2, [pc, #120]	; (800efe4 <_free_r+0x94>)
 800ef6c:	9801      	ldr	r0, [sp, #4]
 800ef6e:	6813      	ldr	r3, [r2, #0]
 800ef70:	b933      	cbnz	r3, 800ef80 <_free_r+0x30>
 800ef72:	6063      	str	r3, [r4, #4]
 800ef74:	6014      	str	r4, [r2, #0]
 800ef76:	b003      	add	sp, #12
 800ef78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef7c:	f7ff bfe2 	b.w	800ef44 <__malloc_unlock>
 800ef80:	42a3      	cmp	r3, r4
 800ef82:	d908      	bls.n	800ef96 <_free_r+0x46>
 800ef84:	6825      	ldr	r5, [r4, #0]
 800ef86:	1961      	adds	r1, r4, r5
 800ef88:	428b      	cmp	r3, r1
 800ef8a:	bf01      	itttt	eq
 800ef8c:	6819      	ldreq	r1, [r3, #0]
 800ef8e:	685b      	ldreq	r3, [r3, #4]
 800ef90:	1949      	addeq	r1, r1, r5
 800ef92:	6021      	streq	r1, [r4, #0]
 800ef94:	e7ed      	b.n	800ef72 <_free_r+0x22>
 800ef96:	461a      	mov	r2, r3
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	b10b      	cbz	r3, 800efa0 <_free_r+0x50>
 800ef9c:	42a3      	cmp	r3, r4
 800ef9e:	d9fa      	bls.n	800ef96 <_free_r+0x46>
 800efa0:	6811      	ldr	r1, [r2, #0]
 800efa2:	1855      	adds	r5, r2, r1
 800efa4:	42a5      	cmp	r5, r4
 800efa6:	d10b      	bne.n	800efc0 <_free_r+0x70>
 800efa8:	6824      	ldr	r4, [r4, #0]
 800efaa:	4421      	add	r1, r4
 800efac:	1854      	adds	r4, r2, r1
 800efae:	42a3      	cmp	r3, r4
 800efb0:	6011      	str	r1, [r2, #0]
 800efb2:	d1e0      	bne.n	800ef76 <_free_r+0x26>
 800efb4:	681c      	ldr	r4, [r3, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	6053      	str	r3, [r2, #4]
 800efba:	4421      	add	r1, r4
 800efbc:	6011      	str	r1, [r2, #0]
 800efbe:	e7da      	b.n	800ef76 <_free_r+0x26>
 800efc0:	d902      	bls.n	800efc8 <_free_r+0x78>
 800efc2:	230c      	movs	r3, #12
 800efc4:	6003      	str	r3, [r0, #0]
 800efc6:	e7d6      	b.n	800ef76 <_free_r+0x26>
 800efc8:	6825      	ldr	r5, [r4, #0]
 800efca:	1961      	adds	r1, r4, r5
 800efcc:	428b      	cmp	r3, r1
 800efce:	bf04      	itt	eq
 800efd0:	6819      	ldreq	r1, [r3, #0]
 800efd2:	685b      	ldreq	r3, [r3, #4]
 800efd4:	6063      	str	r3, [r4, #4]
 800efd6:	bf04      	itt	eq
 800efd8:	1949      	addeq	r1, r1, r5
 800efda:	6021      	streq	r1, [r4, #0]
 800efdc:	6054      	str	r4, [r2, #4]
 800efde:	e7ca      	b.n	800ef76 <_free_r+0x26>
 800efe0:	b003      	add	sp, #12
 800efe2:	bd30      	pop	{r4, r5, pc}
 800efe4:	20001a70 	.word	0x20001a70

0800efe8 <_read_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4d07      	ldr	r5, [pc, #28]	; (800f008 <_read_r+0x20>)
 800efec:	4604      	mov	r4, r0
 800efee:	4608      	mov	r0, r1
 800eff0:	4611      	mov	r1, r2
 800eff2:	2200      	movs	r2, #0
 800eff4:	602a      	str	r2, [r5, #0]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f7f7 ff64 	bl	8006ec4 <_read>
 800effc:	1c43      	adds	r3, r0, #1
 800effe:	d102      	bne.n	800f006 <_read_r+0x1e>
 800f000:	682b      	ldr	r3, [r5, #0]
 800f002:	b103      	cbz	r3, 800f006 <_read_r+0x1e>
 800f004:	6023      	str	r3, [r4, #0]
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	20001a78 	.word	0x20001a78

0800f00c <_fstat_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4d07      	ldr	r5, [pc, #28]	; (800f02c <_fstat_r+0x20>)
 800f010:	2300      	movs	r3, #0
 800f012:	4604      	mov	r4, r0
 800f014:	4608      	mov	r0, r1
 800f016:	4611      	mov	r1, r2
 800f018:	602b      	str	r3, [r5, #0]
 800f01a:	f7f7 ff98 	bl	8006f4e <_fstat>
 800f01e:	1c43      	adds	r3, r0, #1
 800f020:	d102      	bne.n	800f028 <_fstat_r+0x1c>
 800f022:	682b      	ldr	r3, [r5, #0]
 800f024:	b103      	cbz	r3, 800f028 <_fstat_r+0x1c>
 800f026:	6023      	str	r3, [r4, #0]
 800f028:	bd38      	pop	{r3, r4, r5, pc}
 800f02a:	bf00      	nop
 800f02c:	20001a78 	.word	0x20001a78

0800f030 <_isatty_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4d06      	ldr	r5, [pc, #24]	; (800f04c <_isatty_r+0x1c>)
 800f034:	2300      	movs	r3, #0
 800f036:	4604      	mov	r4, r0
 800f038:	4608      	mov	r0, r1
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	f7f7 ff97 	bl	8006f6e <_isatty>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_isatty_r+0x1a>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_isatty_r+0x1a>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	20001a78 	.word	0x20001a78

0800f050 <_init>:
 800f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f052:	bf00      	nop
 800f054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f056:	bc08      	pop	{r3}
 800f058:	469e      	mov	lr, r3
 800f05a:	4770      	bx	lr

0800f05c <_fini>:
 800f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05e:	bf00      	nop
 800f060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f062:	bc08      	pop	{r3}
 800f064:	469e      	mov	lr, r3
 800f066:	4770      	bx	lr
