
HVSDdemo 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  000205bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d88  08006d88  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  20000000  08006d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  200005bc  0800734c  000205bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001810  0800734c  00021810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_line   00029cac  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003f50b  00000000  00000000  0004a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000079f9  00000000  00000000  000897a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  000911a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa98a  00000000  00000000  00092580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000039c8  00000000  00000000  0013cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00017f5f  00000000  00000000  001408d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00020cef  00000000  00000000  00158837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00179526  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003060  00000000  00000000  0017957c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200005bc 	.word	0x200005bc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006940 	.word	0x08006940

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200005c0 	.word	0x200005c0
 80001d0:	08006940 	.word	0x08006940

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004d2:	490e      	ldr	r1, [pc, #56]	; (800050c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004e8:	4c0b      	ldr	r4, [pc, #44]	; (8000518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004f6:	f003 fd63 	bl	8003fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f006 f9e7 	bl	80068cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 fbcd 	bl	8000c9c <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000504:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8000510:	08006d90 	.word	0x08006d90
  ldr r2, =_sbss
 8000514:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8000518:	20001810 	.word	0x20001810

0800051c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <BusFault_Handler>
	...

08000520 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000520:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000524:	4604      	mov	r4, r0
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000526:	6940      	ldr	r0, [r0, #20]
 8000528:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800052a:	2300      	movs	r3, #0
 800052c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000530:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000534:	6960      	ldr	r0, [r4, #20]
 8000536:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000538:	f104 011c 	add.w	r1, r4, #28
 800053c:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 800053e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000542:	4718      	bx	r3

08000544 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000544:	b470      	push	{r4, r5, r6}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000546:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000548:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800054a:	784e      	ldrb	r6, [r1, #1]
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800054c:	788d      	ldrb	r5, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800054e:	4c1d      	ldr	r4, [pc, #116]	; (80005c4 <ASPEP_sendBeacon+0x80>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000550:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000552:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000556:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800055a:	78ca      	ldrb	r2, [r1, #3]
 800055c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8000560:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000564:	b2da      	uxtb	r2, r3
 8000566:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 800056a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800056e:	5ca2      	ldrb	r2, [r4, r2]
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000570:	4d15      	ldr	r5, [pc, #84]	; (80005c8 <ASPEP_sendBeacon+0x84>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000572:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000576:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000578:	5ca2      	ldrb	r2, [r4, r2]
 800057a:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 800057e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000580:	5ca2      	ldrb	r2, [r4, r2]
 8000582:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000586:	5caa      	ldrb	r2, [r5, r2]
 8000588:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800058c:	f043 0305 	orr.w	r3, r3, #5
 8000590:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000592:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000594:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000596:	b143      	cbz	r3, 80005aa <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8000598:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 800059a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800059e:	b913      	cbnz	r3, 80005a6 <ASPEP_sendBeacon+0x62>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005a6:	bc70      	pop	{r4, r5, r6}
 80005a8:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005aa:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005ae:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005b0:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 80005b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80005b6:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005b8:	2204      	movs	r2, #4
 80005ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80005bc:	6940      	ldr	r0, [r0, #20]
}
 80005be:	bc70      	pop	{r4, r5, r6}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005c0:	4718      	bx	r3
 80005c2:	bf00      	nop
 80005c4:	08006968 	.word	0x08006968
 80005c8:	08006958 	.word	0x08006958

080005cc <ASPEP_sendPing>:
{
 80005cc:	b470      	push	{r4, r5, r6}
              | (uint32_t)((uint32_t)cBit << 5U)
 80005ce:	014c      	lsls	r4, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80005d0:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 80005d4:	f890 6063 	ldrb.w	r6, [r0, #99]	; 0x63
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005d8:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
 80005dc:	ea44 3402 	orr.w	r4, r4, r2, lsl #12
              | (uint32_t)((uint32_t)Nbit << 6U)
 80005e0:	f005 0201 	and.w	r2, r5, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005e4:	ea44 1382 	orr.w	r3, r4, r2, lsl #6
 80005e8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 80005ec:	f006 060f 	and.w	r6, r6, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005f0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4c16      	ldr	r4, [pc, #88]	; (8000650 <ASPEP_sendPing+0x84>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005f8:	4d16      	ldr	r5, [pc, #88]	; (8000654 <ASPEP_sendPing+0x88>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005fa:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005fe:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000602:	5ca2      	ldrb	r2, [r4, r2]
 8000604:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000608:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800060a:	5ca2      	ldrb	r2, [r4, r2]
 800060c:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000610:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000612:	5ca2      	ldrb	r2, [r4, r2]
 8000614:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000618:	5ceb      	ldrb	r3, [r5, r3]
 800061a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800061e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000622:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000624:	b143      	cbz	r3, 8000638 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000626:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000628:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800062c:	b913      	cbnz	r3, 8000634 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 800062e:	2302      	movs	r3, #2
 8000630:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000634:	bc70      	pop	{r4, r5, r6}
 8000636:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000638:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800063c:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800063e:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 8000640:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000644:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000646:	2204      	movs	r2, #4
 8000648:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800064a:	6940      	ldr	r0, [r0, #20]
}
 800064c:	bc70      	pop	{r4, r5, r6}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800064e:	4718      	bx	r3
 8000650:	08006968 	.word	0x08006968
 8000654:	08006958 	.word	0x08006958

08000658 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000658:	2a0a      	cmp	r2, #10
{
 800065a:	b410      	push	{r4}
 800065c:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 800065e:	d00b      	beq.n	8000678 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000660:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000664:	2a01      	cmp	r2, #1
 8000666:	d921      	bls.n	80006ac <ASPEP_getBuffer+0x54>
 8000668:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800066c:	2a01      	cmp	r2, #1
 800066e:	d911      	bls.n	8000694 <ASPEP_getBuffer+0x3c>
        result = false;
 8000670:	2000      	movs	r0, #0
}
 8000672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000676:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000678:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800067c:	2a01      	cmp	r2, #1
 800067e:	d8f7      	bhi.n	8000670 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000680:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 8000682:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000684:	3204      	adds	r2, #4
 8000686:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000688:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 800068c:	4620      	mov	r0, r4
}
 800068e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000692:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000694:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000696:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000698:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 800069c:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006a0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006a2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006a4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006a8:	600a      	str	r2, [r1, #0]
}
 80006aa:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ac:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006ae:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006b0:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006b4:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006b8:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006ba:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006c0:	600a      	str	r2, [r1, #0]
}
 80006c2:	4770      	bx	lr

080006c4 <ASPEP_sendPacket>:
{
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006c6:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 80006ca:	2c02      	cmp	r4, #2
 80006cc:	d001      	beq.n	80006d2 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 80006ce:	2002      	movs	r0, #2
}
 80006d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *header = tmpHeader;
 80006d2:	4605      	mov	r5, r0
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80006d4:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 80006d8:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80006dc:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
 80006e0:	2801      	cmp	r0, #1
 80006e2:	d106      	bne.n	80006f2 <ASPEP_sendPacket+0x2e>
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80006e4:	1888      	adds	r0, r1, r2
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80006e6:	24ca      	movs	r4, #202	; 0xca
 80006e8:	548c      	strb	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80006ea:	1c96      	adds	r6, r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80006ec:	24fe      	movs	r4, #254	; 0xfe
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80006ee:	b2b2      	uxth	r2, r6
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80006f0:	7044      	strb	r4, [r0, #1]
      if (MCTL_SYNC == syncAsync)
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	d103      	bne.n	80006fe <ASPEP_sendPacket+0x3a>
        if (pSupHandle->MCP_PacketAvailable)
 80006f6:	7c28      	ldrb	r0, [r5, #16]
 80006f8:	b360      	cbz	r0, 8000754 <ASPEP_sendPacket+0x90>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 80006fa:	2000      	movs	r0, #0
 80006fc:	7428      	strb	r0, [r5, #16]
  uint32_t header = *headerPtr;
 80006fe:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000702:	4e31      	ldr	r6, [pc, #196]	; (80007c8 <ASPEP_sendPacket+0x104>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000704:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80007cc <ASPEP_sendPacket+0x108>
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000708:	b2e0      	uxtb	r0, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800070a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800070e:	5c30      	ldrb	r0, [r6, r0]
 8000710:	4047      	eors	r7, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000712:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8000716:	5df7      	ldrb	r7, [r6, r7]
 8000718:	4078      	eors	r0, r7
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800071a:	3204      	adds	r2, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800071c:	5c30      	ldrb	r0, [r6, r0]
 800071e:	f3c4 6603 	ubfx	r6, r4, #24, #4
 8000722:	4070      	eors	r0, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000724:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8000726:	f81c 0000 	ldrb.w	r0, [ip, r0]
 800072a:	ea44 7400 	orr.w	r4, r4, r0, lsl #28
 800072e:	f841 4c04 	str.w	r4, [r1, #-4]
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000732:	3904      	subs	r1, #4
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000736:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8000738:	b1d8      	cbz	r0, 8000772 <ASPEP_sendPacket+0xae>
  __ASM volatile ("cpsie i" : : : "memory");
 800073a:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800073c:	2b09      	cmp	r3, #9
 800073e:	d00b      	beq.n	8000758 <ASPEP_sendPacket+0x94>
      else if (MCTL_SYNC == dataType)
 8000740:	2b0a      	cmp	r3, #10
 8000742:	d02b      	beq.n	800079c <ASPEP_sendPacket+0xd8>
      else if(ASPEP_CTRL == dataType)
 8000744:	bb83      	cbnz	r3, 80007a8 <ASPEP_sendPacket+0xe4>
        if (pHandle->ctrlBuffer.state != available)
 8000746:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800074a:	bb58      	cbnz	r0, 80007a4 <ASPEP_sendPacket+0xe0>
          pHandle->ctrlBuffer.state = pending;
 800074c:	2302      	movs	r3, #2
 800074e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
}
 8000752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000754:	2001      	movs	r0, #1
}
 8000756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (NULL == pHandle->asyncNextBuffer)
 8000758:	e9d5 3410 	ldrd	r3, r4, [r5, #64]	; 0x40
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800075c:	6818      	ldr	r0, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 800075e:	4281      	cmp	r1, r0
 8000760:	bf14      	ite	ne
 8000762:	2003      	movne	r0, #3
 8000764:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000766:	b36c      	cbz	r4, 80007c4 <ASPEP_sendPacket+0x100>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000768:	2102      	movs	r1, #2
 800076a:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800076c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800076e:	809a      	strh	r2, [r3, #4]
}
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (MCTL_ASYNC == dataType)
 8000772:	2b09      	cmp	r3, #9
 8000774:	d020      	beq.n	80007b8 <ASPEP_sendPacket+0xf4>
      else if (MCTL_SYNC == dataType)
 8000776:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000778:	f04f 0003 	mov.w	r0, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 800077c:	bf0b      	itete	eq
 800077e:	f105 0328 	addeq.w	r3, r5, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000782:	f105 0320 	addne.w	r3, r5, #32
        pHandle->syncBuffer.state = readLock;
 8000786:	f885 002e 	strbeq.w	r0, [r5, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 800078a:	f885 0024 	strbne.w	r0, [r5, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800078e:	64ab      	str	r3, [r5, #72]	; 0x48
 8000790:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000792:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000794:	6968      	ldr	r0, [r5, #20]
 8000796:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000798:	2000      	movs	r0, #0
}
 800079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 800079c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d003      	beq.n	80007ac <ASPEP_sendPacket+0xe8>
          result = ASPEP_BUFFER_ERROR;
 80007a4:	2003      	movs	r0, #3
}
 80007a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t result = ASPEP_OK;
 80007a8:	2000      	movs	r0, #0
}
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          pHandle->syncBuffer.state = pending;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007b2:	85aa      	strh	r2, [r5, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 80007b4:	2000      	movs	r0, #0
}
 80007b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ba:	2003      	movs	r0, #3
 80007bc:	7198      	strb	r0, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c0:	64ab      	str	r3, [r5, #72]	; 0x48
 80007c2:	e7e5      	b.n	8000790 <ASPEP_sendPacket+0xcc>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007c4:	646b      	str	r3, [r5, #68]	; 0x44
 80007c6:	e7cf      	b.n	8000768 <ASPEP_sendPacket+0xa4>
 80007c8:	08006968 	.word	0x08006968
 80007cc:	08006958 	.word	0x08006958

080007d0 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80007d0:	b538      	push	{r3, r4, r5, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80007d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007d6:	2b03      	cmp	r3, #3
{
 80007d8:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80007da:	d015      	beq.n	8000808 <ASPEP_HWDataTransmittedIT+0x38>
    {
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
 80007dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
      tempBuff->state = available;
 80007de:	2200      	movs	r2, #0
 80007e0:	719a      	strb	r2, [r3, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80007e2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d015      	beq.n	8000816 <ASPEP_HWDataTransmittedIT+0x46>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80007ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d11d      	bne.n	800082e <ASPEP_HWDataTransmittedIT+0x5e>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007f2:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80007f8:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80007fa:	2204      	movs	r2, #4
 80007fc:	6940      	ldr	r0, [r0, #20]
 80007fe:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000800:	2303      	movs	r3, #3
 8000802:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000806:	bd38      	pop	{r3, r4, r5, pc}
    if (pHandle->syncBuffer.state == pending)
 8000808:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 800080c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800080e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000810:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000814:	d10b      	bne.n	800082e <ASPEP_HWDataTransmittedIT+0x5e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000816:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800081a:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800081c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800081e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000820:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000822:	6960      	ldr	r0, [r4, #20]
 8000824:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000826:	2303      	movs	r3, #3
 8000828:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 800082c:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800082e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000830:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000832:	b1d3      	cbz	r3, 800086a <ASPEP_HWDataTransmittedIT+0x9a>
        pHandle->asyncNextBuffer->state = readLock;
 8000834:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000836:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000838:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800083a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800083c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800083e:	889a      	ldrh	r2, [r3, #4]
 8000840:	6819      	ldr	r1, [r3, #0]
 8000842:	6960      	ldr	r0, [r4, #20]
 8000844:	47a8      	blx	r5
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000846:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <ASPEP_HWDataTransmittedIT+0x8e>
 800084e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <ASPEP_HWDataTransmittedIT+0x8e>
          pHandle->asyncNextBuffer = NULL;
 8000856:	2300      	movs	r3, #0
 8000858:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800085a:	b662      	cpsie	i
}
 800085c:	bd38      	pop	{r3, r4, r5, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800085e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000860:	0063      	lsls	r3, r4, #1
 8000862:	3368      	adds	r3, #104	; 0x68
 8000864:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000866:	6463      	str	r3, [r4, #68]	; 0x44
        {
 8000868:	e7f7      	b.n	800085a <ASPEP_HWDataTransmittedIT+0x8a>
        pHandle->lockBuffer = NULL;
 800086a:	64a3      	str	r3, [r4, #72]	; 0x48
 800086c:	e7f5      	b.n	800085a <ASPEP_HWDataTransmittedIT+0x8a>
 800086e:	bf00      	nop

08000870 <ASPEP_RXframeProcess>:
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000870:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000874:	69c2      	ldr	r2, [r0, #28]
{
 8000876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    *packetLength = 0;
 800087a:	2500      	movs	r5, #0
{
 800087c:	4604      	mov	r4, r0
    *packetLength = 0;
 800087e:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000880:	b193      	cbz	r3, 80008a8 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000882:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000886:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 800088a:	2e01      	cmp	r6, #1
 800088c:	d054      	beq.n	8000938 <ASPEP_RXframeProcess+0xc8>
 800088e:	2e02      	cmp	r6, #2
 8000890:	d03e      	beq.n	8000910 <ASPEP_RXframeProcess+0xa0>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d033      	beq.n	80008fe <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000898:	6960      	ldr	r0, [r4, #20]
 800089a:	2204      	movs	r2, #4
 800089c:	f104 011c 	add.w	r1, r4, #28
 80008a0:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 80008a2:	4628      	mov	r0, r5
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008a8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0f8      	beq.n	80008a2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008b0:	042b      	lsls	r3, r5, #16
 80008b2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008b6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80008ba:	4a94      	ldr	r2, [pc, #592]	; (8000b0c <ASPEP_RXframeProcess+0x29c>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008bc:	4994      	ldr	r1, [pc, #592]	; (8000b10 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008be:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
 80008c4:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008c8:	f045 050f 	orr.w	r5, r5, #15
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80008ce:	5ccb      	ldrb	r3, [r1, r3]
 80008d0:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 80008d4:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d03a      	beq.n	8000954 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 80008de:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80008e0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80008e4:	b913      	cbnz	r3, 80008ec <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 80008ec:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 80008ee:	6960      	ldr	r0, [r4, #20]
 80008f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 80008f2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 80008f6:	4798      	blx	r3
}
 80008f8:	4628      	mov	r0, r5
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80008fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000900:	2b05      	cmp	r3, #5
 8000902:	f000 8095 	beq.w	8000a30 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8000906:	2b06      	cmp	r3, #6
 8000908:	f000 80d5 	beq.w	8000ab6 <ASPEP_RXframeProcess+0x246>
  uint8_t *result = NULL;
 800090c:	4635      	mov	r5, r6
 800090e:	e7c2      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000910:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000912:	2b05      	cmp	r3, #5
 8000914:	d05f      	beq.n	80009d6 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8000916:	2b06      	cmp	r3, #6
 8000918:	f000 80d4 	beq.w	8000ac4 <ASPEP_RXframeProcess+0x254>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800091c:	2b09      	cmp	r3, #9
 800091e:	d1ba      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000920:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000924:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000928:	6985      	ldr	r5, [r0, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800092a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800092c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800092e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000932:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000934:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000936:	e7ae      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000938:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800093a:	2b05      	cmp	r3, #5
 800093c:	d016      	beq.n	800096c <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800093e:	2b06      	cmp	r3, #6
 8000940:	d1a9      	bne.n	8000896 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000942:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000946:	4631      	mov	r1, r6
 8000948:	f7ff fe40 	bl	80005cc <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800094c:	2302      	movs	r3, #2
 800094e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000952:	e7a0      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000954:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000958:	2303      	movs	r3, #3
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800095a:	6481      	str	r1, [r0, #72]	; 0x48
        pHandle->ctrlBuffer.state = readLock;
 800095c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000960:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000962:	2204      	movs	r2, #4
 8000964:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000966:	6940      	ldr	r0, [r0, #20]
 8000968:	4798      	blx	r3
 800096a:	e7bf      	b.n	80008ec <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800096c:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800096e:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000972:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000974:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000978:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800097c:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000980:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000982:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000986:	42ab      	cmp	r3, r5
 8000988:	4698      	mov	r8, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800098a:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800098e:	bf28      	it	cs
 8000990:	46a8      	movcs	r8, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000992:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000994:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000998:	bf28      	it	cs
 800099a:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800099c:	42b7      	cmp	r7, r6
 800099e:	46b9      	mov	r9, r7
 80009a0:	bf28      	it	cs
 80009a2:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009a4:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a6:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009aa:	46f0      	mov	r8, lr
 80009ac:	bf28      	it	cs
 80009ae:	46e0      	movcs	r8, ip
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009b0:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009b2:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009b6:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ba:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009be:	f240 8086 	bls.w	8000ace <ASPEP_RXframeProcess+0x25e>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80009c8:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80009cc:	4620      	mov	r0, r4
 80009ce:	f7ff fdb9 	bl	8000544 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 80009d2:	2500      	movs	r5, #0
 80009d4:	e75f      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009d6:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d8:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009dc:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009de:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e2:	f894 706e 	ldrb.w	r7, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009e6:	f894 e06f 	ldrb.w	lr, [r4, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009ea:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f0:	42b3      	cmp	r3, r6
 80009f2:	4699      	mov	r9, r3
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009f4:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f8:	bf28      	it	cs
 80009fa:	46b1      	movcs	r9, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009fc:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009fe:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a02:	bf28      	it	cs
 8000a04:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a06:	45bc      	cmp	ip, r7
 8000a08:	46e2      	mov	sl, ip
 8000a0a:	bf28      	it	cs
 8000a0c:	46ba      	movcs	sl, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a0e:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a10:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a14:	46c1      	mov	r9, r8
 8000a16:	bf28      	it	cs
 8000a18:	46f1      	movcs	r9, lr
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a1a:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a1c:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a20:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a24:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a28:	d962      	bls.n	8000af0 <ASPEP_RXframeProcess+0x280>
 8000a2a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a2e:	e7cb      	b.n	80009c8 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a30:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a32:	f890 706c 	ldrb.w	r7, [r0, #108]	; 0x6c
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a36:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a38:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a3c:	f890 c06e 	ldrb.w	ip, [r0, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a40:	f890 806f 	ldrb.w	r8, [r0, #111]	; 0x6f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a44:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a46:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4a:	42bb      	cmp	r3, r7
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a4c:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a50:	469a      	mov	sl, r3
 8000a52:	bf28      	it	cs
 8000a54:	46ba      	movcs	sl, r7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a56:	42a9      	cmp	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a58:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a5c:	bf28      	it	cs
 8000a5e:	4629      	movcs	r1, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a60:	45e6      	cmp	lr, ip
 8000a62:	4670      	mov	r0, lr
 8000a64:	bf28      	it	cs
 8000a66:	4660      	movcs	r0, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a68:	45c1      	cmp	r9, r8
 8000a6a:	464e      	mov	r6, r9
 8000a6c:	bf28      	it	cs
 8000a6e:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a70:	42bb      	cmp	r3, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a72:	f884 a06c 	strb.w	sl, [r4, #108]	; 0x6c
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a76:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a7a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a7e:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a82:	d8a1      	bhi.n	80009c8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a84:	428d      	cmp	r5, r1
 8000a86:	d89f      	bhi.n	80009c8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a88:	45e6      	cmp	lr, ip
 8000a8a:	d89d      	bhi.n	80009c8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a8c:	45c1      	cmp	r9, r8
 8000a8e:	d89b      	bhi.n	80009c8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a90:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000a94:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000a98:	429d      	cmp	r5, r3
 8000a9a:	d195      	bne.n	80009c8 <ASPEP_RXframeProcess+0x158>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a9c:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a9e:	1c42      	adds	r2, r0, #1
 8000aa0:	0152      	lsls	r2, r2, #5
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000aa2:	015b      	lsls	r3, r3, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000aa4:	01b6      	lsls	r6, r6, #6
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000aa6:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000aa8:	81a2      	strh	r2, [r4, #12]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000aaa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000aae:	81e6      	strh	r6, [r4, #14]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ab0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000ab4:	e788      	b.n	80009c8 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000ab6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000aba:	4631      	mov	r1, r6
 8000abc:	f7ff fd86 	bl	80005cc <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000ac0:	4635      	mov	r5, r6
 8000ac2:	e6e8      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000ac4:	7f42      	ldrb	r2, [r0, #29]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	f7ff fd80 	bl	80005cc <ASPEP_sendPing>
 8000acc:	e6e3      	b.n	8000896 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ace:	4288      	cmp	r0, r1
 8000ad0:	f63f af77 	bhi.w	80009c2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ad4:	42b7      	cmp	r7, r6
 8000ad6:	f63f af74 	bhi.w	80009c2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ada:	45e6      	cmp	lr, ip
 8000adc:	f63f af71 	bhi.w	80009c2 <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ae0:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8000ae4:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	f47f af6a 	bne.w	80009c2 <ASPEP_RXframeProcess+0x152>
 8000aee:	e76b      	b.n	80009c8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000af0:	4288      	cmp	r0, r1
 8000af2:	d89a      	bhi.n	8000a2a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000af4:	45bc      	cmp	ip, r7
 8000af6:	d898      	bhi.n	8000a2a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af8:	45f0      	cmp	r8, lr
 8000afa:	d896      	bhi.n	8000a2a <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000afc:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b00:	f3c2 1302 	ubfx	r3, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b04:	1aeb      	subs	r3, r5, r3
 8000b06:	425d      	negs	r5, r3
 8000b08:	415d      	adcs	r5, r3
 8000b0a:	e78e      	b.n	8000a2a <ASPEP_RXframeProcess+0x1ba>
 8000b0c:	08006968 	.word	0x08006968
 8000b10:	08006958 	.word	0x08006958

08000b14 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b14:	b538      	push	{r3, r4, r5, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b16:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b1a:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b1c:	b13b      	cbz	r3, 8000b2e <ASPEP_HWDataReceivedIT+0x1a>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d104      	bne.n	8000b2c <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b22:	2200      	movs	r2, #0
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b24:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b28:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b2c:	bd38      	pop	{r3, r4, r5, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b2e:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b30:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <ASPEP_HWDataReceivedIT+0x98>)
 8000b32:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b34:	5cd3      	ldrb	r3, [r2, r3]
 8000b36:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b3a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b42:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b4a:	5c53      	ldrb	r3, [r2, r1]
 8000b4c:	b95b      	cbnz	r3, 8000b66 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000b4e:	7f03      	ldrb	r3, [r0, #28]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000b58:	d809      	bhi.n	8000b6e <ASPEP_HWDataReceivedIT+0x5a>
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d81e      	bhi.n	8000b9c <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000b66:	2304      	movs	r3, #4
 8000b68:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000b6c:	bd38      	pop	{r3, r4, r5, pc}
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	d1f5      	bne.n	8000b5e <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000b72:	8b83      	ldrh	r3, [r0, #28]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000b7a:	b17b      	cbz	r3, 8000b9c <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000b7c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d30f      	bcc.n	8000ba4 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000b84:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000b88:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000b8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000b8e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 8000b92:	47a8      	blx	r5
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000b9a:	bd38      	pop	{r3, r4, r5, pc}
              pHandle->NewPacketAvailable = true;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000ba2:	bd38      	pop	{r3, r4, r5, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	08006968 	.word	0x08006968

08000bb0 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bb0:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bb8:	311c      	adds	r1, #28
 8000bba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bbc:	6940      	ldr	r0, [r0, #20]
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	4718      	bx	r3
 8000bc2:	bf00      	nop

08000bc4 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <SystemClock_Config+0xc0>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	f022 0207 	bic.w	r2, r2, #7
 8000bcc:	f042 0202 	orr.w	r2, r2, #2
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000bda:	2a02      	cmp	r2, #2
 8000bdc:	d1fa      	bne.n	8000bd4 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000bde:	492a      	ldr	r1, [pc, #168]	; (8000c88 <SystemClock_Config+0xc4>)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <SystemClock_Config+0xc8>)
 8000be2:	680a      	ldr	r2, [r1, #0]
 8000be4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bec:	600a      	str	r2, [r1, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bf4:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000bf6:	681a      	ldr	r2, [r3, #0]
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000bf8:	0390      	lsls	r0, r2, #14
 8000bfa:	d5fc      	bpl.n	8000bf6 <SystemClock_Config+0x32>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000bfc:	6818      	ldr	r0, [r3, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000bfe:	4924      	ldr	r1, [pc, #144]	; (8000c90 <SystemClock_Config+0xcc>)
 8000c00:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <SystemClock_Config+0xd0>)
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c02:	4c22      	ldr	r4, [pc, #136]	; (8000c8c <SystemClock_Config+0xc8>)
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000c04:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8000c08:	6018      	str	r0, [r3, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000c0a:	6858      	ldr	r0, [r3, #4]
 8000c0c:	4001      	ands	r1, r0
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c18:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c20:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c22:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 84, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c24:	0199      	lsls	r1, r3, #6
 8000c26:	d5fc      	bpl.n	8000c22 <SystemClock_Config+0x5e>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <SystemClock_Config+0xc4>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000c2c:	0452      	lsls	r2, r2, #17
 8000c2e:	d5fc      	bpl.n	8000c2a <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c30:	4c16      	ldr	r4, [pc, #88]	; (8000c8c <SystemClock_Config+0xc8>)
 8000c32:	68a2      	ldr	r2, [r4, #8]
 8000c34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c38:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c3a:	68a2      	ldr	r2, [r4, #8]
 8000c3c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c44:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c46:	68a2      	ldr	r2, [r4, #8]
 8000c48:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c4c:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c4e:	68a2      	ldr	r2, [r4, #8]
 8000c50:	f022 0203 	bic.w	r2, r2, #3
 8000c54:	f042 0202 	orr.w	r2, r2, #2
 8000c58:	60a2      	str	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c5a:	68a3      	ldr	r3, [r4, #8]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d1fa      	bne.n	8000c5a <SystemClock_Config+0x96>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <SystemClock_Config+0xd4>)
 8000c66:	f003 fda5 	bl	80047b4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f003 f9b2 	bl	8003fd4 <HAL_InitTick>
 8000c70:	b108      	cbz	r0, 8000c76 <SystemClock_Config+0xb2>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <SystemClock_Config+0xb0>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000c76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8000c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8000c82:	bd10      	pop	{r4, pc}
 8000c84:	40023c00 	.word	0x40023c00
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	ffbf8000 	.word	0xffbf8000
 8000c94:	00401504 	.word	0x00401504
 8000c98:	0501bd00 	.word	0x0501bd00

08000c9c <main>:
{
 8000c9c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ca0:	b0a9      	sub	sp, #164	; 0xa4
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ca2:	f8df a374 	ldr.w	sl, [pc, #884]	; 8001018 <main+0x37c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ca6:	4fd6      	ldr	r7, [pc, #856]	; (8001000 <main+0x364>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000ca8:	4dd6      	ldr	r5, [pc, #856]	; (8001004 <main+0x368>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	2400      	movs	r4, #0
  HAL_Init();
 8000cac:	f003 f9b6 	bl	800401c <HAL_Init>
  SystemClock_Config();
 8000cb0:	f7ff ff88 	bl	8000bc4 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	9425      	str	r4, [sp, #148]	; 0x94
 8000cb6:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cc2:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 8000ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cce:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cda:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 8000ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ce6:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cf2:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8000cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cfe:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d0a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	930d      	str	r3, [sp, #52]	; 0x34
 8000d14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  (void)tmpreg;
 8000d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin = M1_ICL_SHUT_OUT_Pin;
 8000d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d20:	2301      	movs	r3, #1
 8000d22:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d26:	2601      	movs	r6, #1
  LL_GPIO_Init(M1_ICL_SHUT_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d28:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = M1_ICL_SHUT_OUT_Pin;
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	2300      	movs	r3, #0
  LL_GPIO_Init(M1_ICL_SHUT_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = M1_ICL_SHUT_OUT_Pin;
 8000d30:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d34:	9624      	str	r6, [sp, #144]	; 0x90
  LL_GPIO_Init(M1_ICL_SHUT_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f003 fa89 	bl	800424c <LL_GPIO_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d3a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d46:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d4a:	940e      	str	r4, [sp, #56]	; 0x38
 8000d4c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d50:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8000d54:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8000d58:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	9302      	str	r3, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d66:	941a      	str	r4, [sp, #104]	; 0x68
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d68:	9406      	str	r4, [sp, #24]
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8000d6a:	9414      	str	r4, [sp, #80]	; 0x50
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	9422      	str	r4, [sp, #136]	; 0x88
  LL_ADC_INJ_InitTypeDef ADC_INJ_InitStruct = {0};
 8000d6e:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	9425      	str	r4, [sp, #148]	; 0x94
  (void)tmpreg;
 8000d72:	9b02      	ldr	r3, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d74:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d80:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8000d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d88:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000d8a:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d8c:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d98:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000da2:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000da4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8000da8:	4333      	orrs	r3, r6
 8000daa:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dae:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db2:	9424      	str	r4, [sp, #144]	; 0x90
 8000db4:	4033      	ands	r3, r6
 8000db6:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8000dba:	2207      	movs	r2, #7
 8000dbc:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8000dc0:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  (void)tmpreg;
 8000dc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f003 fa41 	bl	800424c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8000dcc:	2203      	movs	r2, #3
 8000dce:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	488d      	ldr	r0, [pc, #564]	; (8001008 <main+0x36c>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd2:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8000dd4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f003 fa38 	bl	800424c <LL_GPIO_Init>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000de6:	a90e      	add	r1, sp, #56	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000dec:	4628      	mov	r0, r5
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000dee:	9310      	str	r3, [sp, #64]	; 0x40
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000df0:	2700      	movs	r7, #0
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000df2:	f003 f9c1 	bl	8004178 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000df6:	f04f 0800 	mov.w	r8, #0
 8000dfa:	2200      	movs	r2, #0
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dfc:	a91a      	add	r1, sp, #104	; 0x68
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000dfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e02:	4628      	mov	r0, r5
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e04:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000e08:	e9cd 781c 	strd	r7, r8, [sp, #112]	; 0x70
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000e0c:	941e      	str	r4, [sp, #120]	; 0x78
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e0e:	f003 f9cd 	bl	80041ac <LL_ADC_REG_Init>
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000e12:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000e14:	487d      	ldr	r0, [pc, #500]	; (800100c <main+0x370>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	60ab      	str	r3, [r5, #8]
 8000e1c:	a906      	add	r1, sp, #24
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	9306      	str	r3, [sp, #24]
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8000e24:	46c1      	mov	r9, r8
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000e26:	f003 f991 	bl	800414c <LL_ADC_CommonInit>
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8000e2a:	46b8      	mov	r8, r7
 8000e2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8000e34:	a914      	add	r1, sp, #80	; 0x50
 8000e36:	4628      	mov	r0, r5
  ADC_INJ_InitStruct.TriggerSource = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8000e38:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000e3c:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8000e40:	f003 f9dc 	bl	80041fc <LL_ADC_INJ_Init>
{
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1UL;
 8000e44:	6bab      	ldr	r3, [r5, #56]	; 0x38
  
  MODIFY_REG(ADCx->JSQR,
 8000e46:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000e48:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 8000e4c:	f3c3 5301 	ubfx	r3, r3, #20, #2
 8000e50:	f04f 081f 	mov.w	r8, #31
 8000e54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e58:	fa08 f303 	lsl.w	r3, r8, r3
 8000e5c:	ea22 0303 	bic.w	r3, r2, r3
 8000e60:	63ab      	str	r3, [r5, #56]	; 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e66:	fa93 f2a3 	rbit	r2, r3
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000e6a:	fab2 f282 	clz	r2, r2
 8000e6e:	fa23 f202 	lsr.w	r2, r3, r2
  
  MODIFY_REG(*preg,
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <main+0x374>)
 8000e74:	f04f 7bf8 	mov.w	fp, #32505856	; 0x1f00000
 8000e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e7c:	fa9b f0ab 	rbit	r0, fp
 8000e80:	fa9b f0ab 	rbit	r0, fp
 8000e84:	f021 0107 	bic.w	r1, r1, #7
 8000e88:	4331      	orrs	r1, r6
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000e8e:	f44f 5940 	mov.w	r9, #12288	; 0x3000
 8000e92:	fa99 f2a9 	rbit	r2, r9
  MODIFY_REG(*preg,
 8000e96:	6969      	ldr	r1, [r5, #20]
 8000e98:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8000e9c:	f021 010f 	bic.w	r1, r1, #15
 8000ea0:	6169      	str	r1, [r5, #20]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8000ea2:	68a9      	ldr	r1, [r5, #8]
 8000ea4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ea8:	60a9      	str	r1, [r5, #8]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8000eaa:	6869      	ldr	r1, [r5, #4]
 8000eac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8000eb0:	6069      	str	r1, [r5, #4]
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	a914      	add	r1, sp, #80	; 0x50
 8000eb6:	f003 f9a1 	bl	80041fc <LL_ADC_INJ_Init>
  uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1UL;
 8000eba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  MODIFY_REG(ADCx->JSQR,
 8000ebc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1UL;
 8000ebe:	f3c1 5101 	ubfx	r1, r1, #20, #2
  MODIFY_REG(ADCx->JSQR,
 8000ec2:	f1c1 0104 	rsb	r1, r1, #4
 8000ec6:	b2c9      	uxtb	r1, r1
 8000ec8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ecc:	fa08 fe01 	lsl.w	lr, r8, r1
 8000ed0:	f04f 0c0b 	mov.w	ip, #11
 8000ed4:	ea20 000e 	bic.w	r0, r0, lr
 8000ed8:	fa0c f101 	lsl.w	r1, ip, r1
 8000edc:	4301      	orrs	r1, r0
 8000ede:	63a9      	str	r1, [r5, #56]	; 0x38
 8000ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee4:	fa93 f1a3 	rbit	r1, r3
  MODIFY_REG(*preg,
 8000ee8:	68e8      	ldr	r0, [r5, #12]
 8000eea:	fa9b fcab 	rbit	ip, fp
 8000eee:	fabc fc8c 	clz	ip, ip
 8000ef2:	fa9b f1ab 	rbit	r1, fp
 8000ef6:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8000efa:	fa27 fc0c 	lsr.w	ip, r7, ip
 8000efe:	f04f 0e07 	mov.w	lr, #7
 8000f02:	fab1 f181 	clz	r1, r1
 8000f06:	fa27 f101 	lsr.w	r1, r7, r1
 8000f0a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000f0e:	fa06 f101 	lsl.w	r1, r6, r1
 8000f12:	ea20 000c 	bic.w	r0, r0, ip
 8000f16:	4301      	orrs	r1, r0
 8000f18:	60e9      	str	r1, [r5, #12]
 8000f1a:	fa99 f0a9 	rbit	r0, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	fab0 f080 	clz	r0, r0
  MODIFY_REG(*preg,
 8000f26:	4a3b      	ldr	r2, [pc, #236]	; (8001014 <main+0x378>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8000f28:	fa21 f000 	lsr.w	r0, r1, r0
  LL_ADC_INJ_Init(ADC1, &ADC_INJ_InitStruct);
 8000f2c:	a914      	add	r1, sp, #80	; 0x50
  MODIFY_REG(*preg,
 8000f2e:	f852 c020 	ldr.w	ip, [r2, r0, lsl #2]
 8000f32:	f42c 6c7f 	bic.w	ip, ip, #4080	; 0xff0
 8000f36:	f02c 0c0f 	bic.w	ip, ip, #15
 8000f3a:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8000f3e:	68a8      	ldr	r0, [r5, #8]
 8000f40:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8000f44:	60a8      	str	r0, [r5, #8]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8000f46:	6868      	ldr	r0, [r5, #4]
 8000f48:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8000f4c:	6068      	str	r0, [r5, #4]
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f003 f954 	bl	80041fc <LL_ADC_INJ_Init>
  uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1UL;
 8000f54:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  MODIFY_REG(ADCx->JSQR,
 8000f56:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1UL;
 8000f58:	f3c1 5101 	ubfx	r1, r1, #20, #2
  MODIFY_REG(ADCx->JSQR,
 8000f5c:	f1c1 0105 	rsb	r1, r1, #5
 8000f60:	b2c9      	uxtb	r1, r1
 8000f62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f66:	fa08 fe01 	lsl.w	lr, r8, r1
 8000f6a:	f04f 0c0a 	mov.w	ip, #10
 8000f6e:	ea20 000e 	bic.w	r0, r0, lr
 8000f72:	fa0c f101 	lsl.w	r1, ip, r1
 8000f76:	4301      	orrs	r1, r0
 8000f78:	63a9      	str	r1, [r5, #56]	; 0x38
 8000f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7e:	fa93 f1a3 	rbit	r1, r3
  MODIFY_REG(*preg,
 8000f82:	68e9      	ldr	r1, [r5, #12]
 8000f84:	fa9b f0ab 	rbit	r0, fp
 8000f88:	fa9b f0ab 	rbit	r0, fp
 8000f8c:	f021 0107 	bic.w	r1, r1, #7
 8000f90:	4331      	orrs	r1, r6
 8000f92:	60e9      	str	r1, [r5, #12]
 8000f94:	fa99 f1a9 	rbit	r1, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8000f98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f9c:	fab1 f181 	clz	r1, r1
  MODIFY_REG(*preg,
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <main+0x378>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000fa2:	f8df e078 	ldr.w	lr, [pc, #120]	; 800101c <main+0x380>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGOFFSET_MASK));
 8000fa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000faa:	f44f 7940 	mov.w	r9, #768	; 0x300
  MODIFY_REG(*preg,
 8000fae:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8000fb2:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
 8000fb6:	f020 000f 	bic.w	r0, r0, #15
 8000fba:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8000fbe:	68aa      	ldr	r2, [r5, #8]
 8000fc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fc4:	60aa      	str	r2, [r5, #8]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8000fc6:	686a      	ldr	r2, [r5, #4]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fcc:	606a      	str	r2, [r5, #4]
 8000fce:	fa99 f2a9 	rbit	r2, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000fd2:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8000fd6:	fab2 f282 	clz	r2, r2
 8000fda:	fa2c f202 	lsr.w	r2, ip, r2
  MODIFY_REG(*preg,
 8000fde:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8000fe2:	f021 011f 	bic.w	r1, r1, #31
 8000fe6:	4331      	orrs	r1, r6
 8000fe8:	f84e 1022 	str.w	r1, [lr, r2, lsl #2]
 8000fec:	fa93 f0a3 	rbit	r0, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000ff0:	fab0 f080 	clz	r0, r0
  MODIFY_REG(*preg,
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <main+0x374>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000ff6:	fa23 f000 	lsr.w	r0, r3, r0
  MODIFY_REG(*preg,
 8000ffa:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8000ffe:	e00f      	b.n	8001020 <main+0x384>
 8001000:	40020800 	.word	0x40020800
 8001004:	40012000 	.word	0x40012000
 8001008:	40020000 	.word	0x40020000
 800100c:	40012300 	.word	0x40012300
 8001010:	4001200c 	.word	0x4001200c
 8001014:	40012014 	.word	0x40012014
 8001018:	40023800 	.word	0x40023800
 800101c:	4001202c 	.word	0x4001202c
 8001020:	9100      	str	r1, [sp, #0]
 8001022:	fa9b f2ab 	rbit	r2, fp
 8001026:	fab2 f282 	clz	r2, r2
 800102a:	fa9b f1ab 	rbit	r1, fp
 800102e:	fab1 f181 	clz	r1, r1
 8001032:	fa27 f101 	lsr.w	r1, r7, r1
 8001036:	9101      	str	r1, [sp, #4]
 8001038:	fa27 f202 	lsr.w	r2, r7, r2
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	f04f 0807 	mov.w	r8, #7
 8001042:	fa08 f202 	lsl.w	r2, r8, r2
 8001046:	ea21 0202 	bic.w	r2, r1, r2
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	2702      	movs	r7, #2
 800104e:	fa07 f101 	lsl.w	r1, r7, r1
 8001052:	430a      	orrs	r2, r1
 8001054:	49dd      	ldr	r1, [pc, #884]	; (80013cc <main+0x730>)
 8001056:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 800105a:	fa99 f2a9 	rbit	r2, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	fa2c f202 	lsr.w	r2, ip, r2
  MODIFY_REG(*preg,
 8001066:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800106a:	f421 7178 	bic.w	r1, r1, #992	; 0x3e0
 800106e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8001072:	f84e 1022 	str.w	r1, [lr, r2, lsl #2]
 8001076:	fa93 f3a3 	rbit	r3, r3
  MODIFY_REG(*preg,
 800107a:	68e9      	ldr	r1, [r5, #12]
 800107c:	fa9b f2ab 	rbit	r2, fp
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	fa9b f3ab 	rbit	r3, fp
 8001088:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	fa20 f202 	lsr.w	r2, r0, r2
 8001094:	fa08 f202 	lsl.w	r2, r8, r2
 8001098:	40d8      	lsrs	r0, r3
 800109a:	fa07 f000 	lsl.w	r0, r7, r0
 800109e:	ea21 0302 	bic.w	r3, r1, r2
 80010a2:	4303      	orrs	r3, r0
 80010a4:	60eb      	str	r3, [r5, #12]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010a6:	4621      	mov	r1, r4
 80010a8:	2220      	movs	r2, #32
 80010aa:	a820      	add	r0, sp, #128	; 0x80
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010ac:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80010b0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80010b4:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010b6:	f005 fc3b 	bl	8006930 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80010ba:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80010be:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80010c2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  SET_BIT(RCC->APB2ENR, Periphs);
 80010c6:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80010ca:	f8df b318 	ldr.w	fp, [pc, #792]	; 80013e4 <main+0x748>
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80010ce:	48c0      	ldr	r0, [pc, #768]	; (80013d0 <main+0x734>)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010d0:	4fc0      	ldr	r7, [pc, #768]	; (80013d4 <main+0x738>)
 80010d2:	4331      	orrs	r1, r6
 80010d4:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010d8:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80010dc:	4031      	ands	r1, r6
 80010de:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 80010e0:	9903      	ldr	r1, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e2:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80010e6:	4331      	orrs	r1, r6
 80010e8:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010ec:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 80010f0:	4031      	ands	r1, r6
 80010f2:	9104      	str	r1, [sp, #16]
  (void)tmpreg;
 80010f4:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 80010f6:	2240      	movs	r2, #64	; 0x40
 80010f8:	2302      	movs	r3, #2
 80010fa:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80010fe:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001100:	2201      	movs	r2, #1
 8001102:	2301      	movs	r3, #1
 8001104:	f04f 0800 	mov.w	r8, #0
 8001108:	f04f 0900 	mov.w	r9, #0
 800110c:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8001110:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001114:	f003 f89a 	bl	800424c <LL_GPIO_Init>
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001118:	f44f 7c80 	mov.w	ip, #256	; 0x100
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 800111c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 8001120:	2220      	movs	r2, #32
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001122:	a90e      	add	r1, sp, #56	; 0x38
 8001124:	4658      	mov	r0, fp
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 8001126:	e9cd c611 	strd	ip, r6, [sp, #68]	; 0x44
  TIM_InitStruct.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800112a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 800112e:	920f      	str	r2, [sp, #60]	; 0x3c
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 8001130:	9310      	str	r3, [sp, #64]	; 0x40
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001132:	f003 f979 	bl	8004428 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001136:	f8db 2000 	ldr.w	r2, [fp]
 800113a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800113e:	f8cb 2000 	str.w	r2, [fp]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001142:	f8db 2018 	ldr.w	r2, [fp, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001146:	f04f 0860 	mov.w	r8, #96	; 0x60
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	f04f 0900 	mov.w	r9, #0
 8001152:	f8cb 2018 	str.w	r2, [fp, #24]
 8001156:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 800115a:	f04f 0800 	mov.w	r8, #0
 800115e:	f44f 7952 	mov.w	r9, #840	; 0x348
 8001162:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001166:	ab20      	add	r3, sp, #128	; 0x80
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001168:	f04f 0800 	mov.w	r8, #0
 800116c:	f04f 0902 	mov.w	r9, #2
 8001170:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001174:	4631      	mov	r1, r6
 8001176:	461a      	mov	r2, r3
 8001178:	4658      	mov	r0, fp
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800117a:	f04f 0800 	mov.w	r8, #0
 800117e:	f44f 7980 	mov.w	r9, #256	; 0x100
 8001182:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001186:	f003 f99b 	bl	80044c0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800118a:	f8db 2018 	ldr.w	r2, [fp, #24]
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	f8cb 2018 	str.w	r2, [fp, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001196:	f8db 2018 	ldr.w	r2, [fp, #24]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800119a:	ab20      	add	r3, sp, #128	; 0x80
 800119c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011a0:	f8cb 2018 	str.w	r2, [fp, #24]
 80011a4:	4658      	mov	r0, fp
 80011a6:	461a      	mov	r2, r3
 80011a8:	2110      	movs	r1, #16
 80011aa:	f003 f989 	bl	80044c0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80011ae:	f8db 2018 	ldr.w	r2, [fp, #24]
 80011b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b6:	f8cb 2018 	str.w	r2, [fp, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80011ba:	6878      	ldr	r0, [r7, #4]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80011bc:	ab20      	add	r3, sp, #128	; 0x80
 80011be:	f040 0008 	orr.w	r0, r0, #8
 80011c2:	461a      	mov	r2, r3
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	4658      	mov	r0, fp
 80011cc:	f003 f978 	bl	80044c0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80011d0:	687a      	ldr	r2, [r7, #4]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80011d2:	9427      	str	r4, [sp, #156]	; 0x9c
 80011d4:	f022 0204 	bic.w	r2, r2, #4
 80011d8:	607a      	str	r2, [r7, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80011da:	687a      	ldr	r2, [r7, #4]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80011dc:	a920      	add	r1, sp, #128	; 0x80
 80011de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80011e2:	2370      	movs	r3, #112	; 0x70
 80011e4:	607a      	str	r2, [r7, #4]
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80011e6:	f240 668f 	movw	r6, #1679	; 0x68f
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80011ea:	460a      	mov	r2, r1
 80011ec:	4658      	mov	r0, fp
 80011ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80011f2:	9320      	str	r3, [sp, #128]	; 0x80
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80011f4:	9623      	str	r6, [sp, #140]	; 0x8c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80011f6:	f003 f963 	bl	80044c0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001200:	607a      	str	r2, [r7, #4]
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001202:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	f8cb 3008 	str.w	r3, [fp, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001212:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001216:	f023 0307 	bic.w	r3, r3, #7
 800121a:	f043 0306 	orr.w	r3, r3, #6
 800121e:	f8cb 3008 	str.w	r3, [fp, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001222:	f8db 300c 	ldr.w	r3, [fp, #12]
 8001226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800122a:	f8cb 300c 	str.w	r3, [fp, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800122e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8001232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001236:	f8cb 300c 	str.w	r3, [fp, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800123a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800123e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001242:	f8cb 3004 	str.w	r3, [fp, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001246:	f8db 3008 	ldr.w	r3, [fp, #8]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 800124a:	f44f 7780 	mov.w	r7, #256	; 0x100
 800124e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001252:	f8cb 3008 	str.w	r3, [fp, #8]
 8001256:	9716      	str	r7, [sp, #88]	; 0x58
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001258:	f04f 071f 	mov.w	r7, #31
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 800125c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001260:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001264:	a914      	add	r1, sp, #80	; 0x50
 8001266:	4658      	mov	r0, fp
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001268:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_LOW;
 800126c:	f04f 0800 	mov.w	r8, #0
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001270:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_LOW;
 8001274:	f04f 0900 	mov.w	r9, #0
 8001278:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 800127c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001280:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001284:	f003 f9fa 	bl	800467c <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001288:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800128c:	4850      	ldr	r0, [pc, #320]	; (80013d0 <main+0x734>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001296:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80012a0:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012a2:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012ae:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80012b8:	2700      	movs	r7, #0
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	2302      	movs	r3, #2
 80012be:	f04f 0c01 	mov.w	ip, #1
  (void)tmpreg;
 80012c2:	9e06      	ldr	r6, [sp, #24]
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80012c4:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80012c6:	2602      	movs	r6, #2
 80012c8:	f04f 0b01 	mov.w	fp, #1
 80012cc:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80012d0:	e9cd bc1e 	strd	fp, ip, [sp, #120]	; 0x78
 80012d4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80012d8:	46b0      	mov	r8, r6
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80012da:	f002 ffb7 	bl	800424c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80012de:	46b9      	mov	r9, r7
 80012e0:	2203      	movs	r2, #3
 80012e2:	2302      	movs	r3, #2
 80012e4:	f04f 0c01 	mov.w	ip, #1
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80012ea:	f04f 0b01 	mov.w	fp, #1
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	483a      	ldr	r0, [pc, #232]	; (80013d8 <main+0x73c>)
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80012f0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80012f4:	e9cd bc1e 	strd	fp, ip, [sp, #120]	; 0x78
 80012f8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80012fc:	f44f 66e0 	mov.w	r6, #1792	; 0x700
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f002 ffa4 	bl	800424c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001304:	2702      	movs	r7, #2
 8001306:	46cc      	mov	ip, r9
 8001308:	2202      	movs	r2, #2
 800130a:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800130e:	46c3      	mov	fp, r8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	482f      	ldr	r0, [pc, #188]	; (80013d0 <main+0x734>)
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8001312:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8001316:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800131a:	e9cd bc1c 	strd	fp, ip, [sp, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f002 ff95 	bl	800424c <LL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001322:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8001326:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
 800132a:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 800132e:	9426      	str	r4, [sp, #152]	; 0x98
  SET_BIT(RCC->APB1ENR, Periphs);
 8001330:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	4826      	ldr	r0, [pc, #152]	; (80013d0 <main+0x734>)
 8001336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133a:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800133e:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	930e      	str	r3, [sp, #56]	; 0x38
  (void)tmpreg;
 8001348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  SET_BIT(RCC->AHB1ENR, Periphs);
 800134a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001356:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001360:	2200      	movs	r2, #0
 8001362:	2307      	movs	r3, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001366:	260c      	movs	r6, #12
 8001368:	2702      	movs	r7, #2
 800136a:	f04f 0800 	mov.w	r8, #0
 800136e:	f04f 0900 	mov.w	r9, #0
 8001372:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8001376:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  (void)tmpreg;
 800137a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800137e:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f002 ff63 	bl	800424c <LL_GPIO_Init>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <main+0x740>)
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <main+0x744>)
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 8001390:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8001394:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800139c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80013a4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80013a6:	6811      	ldr	r1, [r2, #0]
 80013a8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80013ac:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80013ae:	6811      	ldr	r1, [r2, #0]
 80013b0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80013b4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80013b6:	6811      	ldr	r1, [r2, #0]
 80013b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80013bc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	f421 51c0 	bic.w	r1, r1, #6144	; 0x1800
 80013c4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	e00e      	b.n	80013e8 <main+0x74c>
 80013ca:	bf00      	nop
 80013cc:	4001200c 	.word	0x4001200c
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40010018 	.word	0x40010018
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40026088 	.word	0x40026088
 80013e0:	400260a0 	.word	0x400260a0
 80013e4:	40010000 	.word	0x40010000
 80013e8:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80013ec:	6011      	str	r1, [r2, #0]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80013ee:	6951      	ldr	r1, [r2, #20]
 80013f0:	f021 0104 	bic.w	r1, r1, #4
 80013f4:	6151      	str	r1, [r2, #20]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80013fc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001400:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800140c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001414:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800141c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001424:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800142c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8001434:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800143c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800143e:	695a      	ldr	r2, [r3, #20]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001440:	f5a5 455c 	sub.w	r5, r5, #56320	; 0xdc00
 8001444:	f022 0204 	bic.w	r2, r2, #4
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	a920      	add	r1, sp, #128	; 0x80
  USART_InitStruct.BaudRate = 1843200;
 800144c:	220c      	movs	r2, #12
 800144e:	2300      	movs	r3, #0
 8001450:	f44f 16e1 	mov.w	r6, #1843200	; 0x1c2000
 8001454:	2700      	movs	r7, #0
  LL_USART_Init(USART2, &USART_InitStruct);
 8001456:	4628      	mov	r0, r5
  USART_InitStruct.BaudRate = 1843200;
 8001458:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800145c:	9426      	str	r4, [sp, #152]	; 0x98
  USART_InitStruct.BaudRate = 1843200;
 800145e:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8001462:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  LL_USART_Init(USART2, &USART_InitStruct);
 8001466:	f003 f925 	bl	80046b4 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800146a:	692b      	ldr	r3, [r5, #16]
 800146c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001470:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001472:	696b      	ldr	r3, [r5, #20]
 8001474:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001478:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800147a:	68eb      	ldr	r3, [r5, #12]
 800147c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001480:	60eb      	str	r3, [r5, #12]
  MX_MotorControl_Init();
 8001482:	f001 f841 	bl	8002508 <MX_MotorControl_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <main+0x904>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148e:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	2b04      	cmp	r3, #4
 8001496:	bf28      	it	cs
 8001498:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	2906      	cmp	r1, #6
 800149c:	bf88      	it	hi
 800149e:	1ed4      	subhi	r4, r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014aa:	40a2      	lsls	r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f003 0303 	and.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	43d2      	mvns	r2, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f002 0201 	and.w	r2, r2, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4a39      	ldr	r2, [pc, #228]	; (80015a4 <main+0x908>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014be:	4938      	ldr	r1, [pc, #224]	; (80015a0 <main+0x904>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	b2db      	uxtb	r3, r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	2040      	movs	r0, #64	; 0x40
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c8:	6050      	str	r0, [r2, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ca:	68cb      	ldr	r3, [r1, #12]
 80014cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d4:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d6:	2904      	cmp	r1, #4
 80014d8:	bf28      	it	cs
 80014da:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014dc:	2a06      	cmp	r2, #6
 80014de:	bf88      	it	hi
 80014e0:	1eda      	subhi	r2, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	fa03 f301 	lsl.w	r3, r3, r1
 80014ea:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	bf98      	it	ls
 80014f0:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <main+0x908>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4928      	ldr	r1, [pc, #160]	; (80015a0 <main+0x904>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	b2db      	uxtb	r3, r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001500:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	f882 3310 	strb.w	r3, [r2, #784]	; 0x310
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001508:	6010      	str	r0, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150a:	68cb      	ldr	r3, [r1, #12]
 800150c:	4824      	ldr	r0, [pc, #144]	; (80015a0 <main+0x904>)
 800150e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001512:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	2904      	cmp	r1, #4
 800151a:	bf28      	it	cs
 800151c:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	2a06      	cmp	r2, #6
 8001520:	bf88      	it	hi
 8001522:	1eda      	subhi	r2, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	fa03 f301 	lsl.w	r3, r3, r1
 800152c:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001530:	bf98      	it	ls
 8001532:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <main+0x908>)
 800153e:	b2db      	uxtb	r3, r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001540:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
 8001548:	2100      	movs	r1, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	6014      	str	r4, [r2, #0]
 800154c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	68c4      	ldr	r4, [r0, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	68c2      	ldr	r2, [r0, #12]
 800155a:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155e:	f1c2 0307 	rsb	r3, r2, #7
 8001562:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001564:	f102 0004 	add.w	r0, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156c:	2806      	cmp	r0, #6
 800156e:	bf88      	it	hi
 8001570:	1ed1      	subhi	r1, r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001572:	f04f 32ff 	mov.w	r2, #4294967295
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	408a      	lsls	r2, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157e:	f003 0304 	and.w	r3, r3, #4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001582:	43d2      	mvns	r2, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	408b      	lsls	r3, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001586:	f002 0201 	and.w	r2, r2, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <main+0x908>)
 8001590:	b2db      	uxtb	r3, r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	f882 3318 	strb.w	r3, [r2, #792]	; 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	6011      	str	r1, [r2, #0]
  while (1)
 800159c:	e7fe      	b.n	800159c <main+0x900>
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 80015a8:	2002      	movs	r0, #2
 80015aa:	4770      	bx	lr

080015ac <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <MC_APP_PostMediumFrequencyHook_M1>:
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars, PWMC_Handle_t *pPWMHandle )
{
 80015b4:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80015b6:	2400      	movs	r4, #0
 80015b8:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80015ba:	81c4      	strh	r4, [r0, #14]
    pHandle->hFinalTorque = 0;
 80015bc:	8204      	strh	r4, [r0, #16]
    pHandle->hDurationms = 0;
 80015be:	82c4      	strh	r4, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80015c0:	6184      	str	r4, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
    pHandle->PastFaults = MC_NO_FAULTS;
 80015c2:	8384      	strh	r4, [r0, #28]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80015c4:	7784      	strb	r4, [r0, #30]
    pHandle->pFOCVars = pFOCVars;
 80015c6:	e9c0 1200 	strd	r1, r2, [r0]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80015ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 80015ce:	6083      	str	r3, [r0, #8]
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle,  int16_t hFinalSpeed, uint16_t hDurationms)
{
 80015d4:	b410      	push	{r4}
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80015d6:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80015da:	2401      	movs	r4, #1
 80015dc:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80015de:	81c1      	strh	r1, [r0, #14]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80015e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->hDurationms = hDurationms;
 80015e4:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80015e6:	83c3      	strh	r3, [r0, #30]
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle,  int16_t hFinalTorque, uint16_t hDurationms)
{
 80015ec:	b410      	push	{r4}
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80015ee:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80015f2:	2402      	movs	r4, #2
 80015f4:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80015f6:	8201      	strh	r1, [r0, #16]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80015f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->hDurationms = hDurationms;
 80015fc:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80015fe:	83c3      	strh	r3, [r0, #30]
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001604:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001606:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001608:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->Iqdref.q = Iqdref.q;
 800160c:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001610:	7302      	strb	r2, [r0, #12]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001612:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001614:	b002      	add	sp, #8
 8001616:	4770      	bx	lr

08001618 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001618:	8b43      	ldrh	r3, [r0, #26]
{
 800161a:	b410      	push	{r4}
  pHandle->PastFaults |= hSetErrors;
 800161c:	8b84      	ldrh	r4, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800161e:	430b      	orrs	r3, r1
 8001620:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001624:	4321      	orrs	r1, r4
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001626:	8343      	strh	r3, [r0, #26]

  return;
}
 8001628:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->PastFaults |= hSetErrors;
 800162c:	8381      	strh	r1, [r0, #28]
}
 800162e:	4770      	bx	lr

08001630 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001630:	7f83      	ldrb	r3, [r0, #30]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d000      	beq.n	8001638 <MCI_ExecBufferedCommands+0x8>
 8001636:	4770      	bx	lr
{
 8001638:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800163a:	7b02      	ldrb	r2, [r0, #12]
 800163c:	2a02      	cmp	r2, #2
 800163e:	4604      	mov	r4, r0
 8001640:	d006      	beq.n	8001650 <MCI_ExecBufferedCommands+0x20>
 8001642:	2a03      	cmp	r2, #3
 8001644:	d026      	beq.n	8001694 <MCI_ExecBufferedCommands+0x64>
 8001646:	2a01      	cmp	r2, #1
 8001648:	d015      	beq.n	8001676 <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800164a:	2303      	movs	r3, #3
 800164c:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800164e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001650:	6843      	ldr	r3, [r0, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001658:	6800      	ldr	r0, [r0, #0]
 800165a:	2104      	movs	r1, #4
 800165c:	f004 fcbe 	bl	8005fdc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001660:	8ae2      	ldrh	r2, [r4, #22]
 8001662:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	f004 fcbc 	bl	8005fe4 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800166c:	2800      	cmp	r0, #0
 800166e:	d0ec      	beq.n	800164a <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001670:	2302      	movs	r3, #2
 8001672:	77a3      	strb	r3, [r4, #30]
}
 8001674:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001676:	6843      	ldr	r3, [r0, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800167e:	6800      	ldr	r0, [r0, #0]
 8001680:	2103      	movs	r1, #3
 8001682:	f004 fcab 	bl	8005fdc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001686:	8ae2      	ldrh	r2, [r4, #22]
 8001688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800168c:	6820      	ldr	r0, [r4, #0]
 800168e:	f004 fca9 	bl	8005fe4 <STC_ExecRamp>
          break;
 8001692:	e7eb      	b.n	800166c <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001694:	6842      	ldr	r2, [r0, #4]
 8001696:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800169a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800169e:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80016a0:	e7e6      	b.n	8001670 <MCI_ExecBufferedCommands+0x40>
 80016a2:	bf00      	nop

080016a4 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 80016a4:	7e40      	ldrb	r0, [r0, #25]
 80016a6:	4770      	bx	lr

080016a8 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 80016a8:	8b80      	ldrh	r0, [r0, #28]
 80016aa:	4770      	bx	lr

080016ac <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 80016ac:	8b40      	ldrh	r0, [r0, #26]
 80016ae:	4770      	bx	lr

080016b0 <MCI_StartMotor>:
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80016b4:	f7ff fff6 	bl	80016a4 <MCI_GetSTMState>
 80016b8:	b108      	cbz	r0, 80016be <MCI_StartMotor+0xe>
    RetVal = false;
 80016ba:	2000      	movs	r0, #0
}
 80016bc:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fff2 	bl	80016a8 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d1f8      	bne.n	80016ba <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ffef 	bl	80016ac <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80016ce:	2800      	cmp	r0, #0
 80016d0:	d1f3      	bne.n	80016ba <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80016d2:	2001      	movs	r0, #1
 80016d4:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016d6:	77a0      	strb	r0, [r4, #30]
}
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	bf00      	nop

080016dc <MCI_StopMotor>:
{
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80016e0:	f7ff ffe0 	bl	80016a4 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80016e4:	b150      	cbz	r0, 80016fc <MCI_StopMotor+0x20>
 80016e6:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80016ea:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80016ec:	bf18      	it	ne
 80016ee:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80016f0:	f7ff ffda 	bl	80016a8 <MCI_GetOccurredFaults>
 80016f4:	b140      	cbz	r0, 8001708 <MCI_StopMotor+0x2c>
    RetVal = false;
 80016f6:	2400      	movs	r4, #0
}
 80016f8:	4620      	mov	r0, r4
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80016fc:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80016fe:	4628      	mov	r0, r5
 8001700:	f7ff ffd2 	bl	80016a8 <MCI_GetOccurredFaults>
 8001704:	2800      	cmp	r0, #0
 8001706:	d1f6      	bne.n	80016f6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff ffcf 	bl	80016ac <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800170e:	2800      	cmp	r0, #0
 8001710:	d1f1      	bne.n	80016f6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001712:	2c00      	cmp	r4, #0
 8001714:	d0ef      	beq.n	80016f6 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 8001716:	2305      	movs	r3, #5
 8001718:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 800171a:	e7ed      	b.n	80016f8 <MCI_StopMotor+0x1c>

0800171c <MCI_FaultAcknowledged>:
{
 800171c:	b510      	push	{r4, lr}
 800171e:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001720:	f7ff ffc0 	bl	80016a4 <MCI_GetSTMState>
 8001724:	280b      	cmp	r0, #11
 8001726:	d001      	beq.n	800172c <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001728:	2000      	movs	r0, #0
}
 800172a:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ffbd 	bl	80016ac <MCI_GetCurrentFaults>
 8001732:	2800      	cmp	r0, #0
 8001734:	d1f8      	bne.n	8001728 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001736:	2302      	movs	r3, #2
 8001738:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 800173a:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 800173c:	2001      	movs	r0, #1
}
 800173e:	bd10      	pop	{r4, pc}

08001740 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001740:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001742:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001744:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 800174c:	7fc0      	ldrb	r0, [r0, #31]
 800174e:	4770      	bx	lr

08001750 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001750:	7b03      	ldrb	r3, [r0, #12]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d005      	beq.n	8001762 <MCI_GetImposedMotorDirection+0x12>
 8001756:	2b03      	cmp	r3, #3
 8001758:	d013      	beq.n	8001782 <MCI_GetImposedMotorDirection+0x32>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d009      	beq.n	8001772 <MCI_GetImposedMotorDirection+0x22>
 800175e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001760:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001762:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8001766:	2b00      	cmp	r3, #0
          retVal = -1;
 8001768:	bfac      	ite	ge
 800176a:	2001      	movge	r0, #1
 800176c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001770:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001772:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8001776:	2b00      	cmp	r3, #0
          retVal = -1;
 8001778:	bfac      	ite	ge
 800177a:	2001      	movge	r0, #1
 800177c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001780:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001782:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8001786:	2b00      	cmp	r3, #0
          retVal = -1;
 8001788:	bfac      	ite	ge
 800178a:	2001      	movge	r0, #1
 800178c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001794:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 800179c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80017a4:	8ac0      	ldrh	r0, [r0, #22]
 80017a6:	4770      	bx	lr

080017a8 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80017a8:	6800      	ldr	r0, [r0, #0]
 80017aa:	f004 bc5f 	b.w	800606c <STC_StopRamp>
 80017ae:	bf00      	nop

080017b0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80017b0:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80017b2:	6800      	ldr	r0, [r0, #0]
 80017b4:	f004 fc00 	bl	8005fb8 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 80017b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80017bc:	f004 bba4 	b.w	8005f08 <SPD_GetAvrgMecSpeedUnit>

080017c0 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80017c0:	6800      	ldr	r0, [r0, #0]
 80017c2:	f004 bc03 	b.w	8005fcc <STC_GetMecSpeedRefUnit>
 80017c6:	bf00      	nop

080017c8 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80017c8:	6842      	ldr	r2, [r0, #4]
 80017ca:	6810      	ldr	r0, [r2, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	b282      	uxth	r2, r0
 80017d0:	f362 030f 	bfi	r3, r2, #0, #16
 80017d4:	0c00      	lsrs	r0, r0, #16
 80017d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80017da:	b082      	sub	sp, #8
#endif
}
 80017dc:	4618      	mov	r0, r3
 80017de:	b002      	add	sp, #8
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80017e4:	6842      	ldr	r2, [r0, #4]
 80017e6:	6850      	ldr	r0, [r2, #4]
 80017e8:	2300      	movs	r3, #0
 80017ea:	b282      	uxth	r2, r0
 80017ec:	f362 030f 	bfi	r3, r2, #0, #16
 80017f0:	0c00      	lsrs	r0, r0, #16
 80017f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80017f6:	b082      	sub	sp, #8
#endif
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	b002      	add	sp, #8
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001800:	6842      	ldr	r2, [r0, #4]
 8001802:	68d0      	ldr	r0, [r2, #12]
 8001804:	2300      	movs	r3, #0
 8001806:	b282      	uxth	r2, r0
 8001808:	f362 030f 	bfi	r3, r2, #0, #16
 800180c:	0c00      	lsrs	r0, r0, #16
 800180e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001812:	b082      	sub	sp, #8
#endif
}
 8001814:	4618      	mov	r0, r3
 8001816:	b002      	add	sp, #8
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop

0800181c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800181c:	6842      	ldr	r2, [r0, #4]
 800181e:	6910      	ldr	r0, [r2, #16]
 8001820:	2300      	movs	r3, #0
 8001822:	b282      	uxth	r2, r0
 8001824:	f362 030f 	bfi	r3, r2, #0, #16
 8001828:	0c00      	lsrs	r0, r0, #16
 800182a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800182e:	b082      	sub	sp, #8
#endif
}
 8001830:	4618      	mov	r0, r3
 8001832:	b002      	add	sp, #8
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001838:	6842      	ldr	r2, [r0, #4]
 800183a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800183e:	2300      	movs	r3, #0
 8001840:	b282      	uxth	r2, r0
 8001842:	f362 030f 	bfi	r3, r2, #0, #16
 8001846:	0c00      	lsrs	r0, r0, #16
 8001848:	f360 431f 	bfi	r3, r0, #16, #16
{
 800184c:	b082      	sub	sp, #8
#endif
}
 800184e:	4618      	mov	r0, r3
 8001850:	b002      	add	sp, #8
 8001852:	4770      	bx	lr

08001854 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001854:	6842      	ldr	r2, [r0, #4]
 8001856:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800185a:	2300      	movs	r3, #0
 800185c:	b282      	uxth	r2, r0
 800185e:	f362 030f 	bfi	r3, r2, #0, #16
 8001862:	0c00      	lsrs	r0, r0, #16
 8001864:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001868:	b082      	sub	sp, #8
#endif
}
 800186a:	4618      	mov	r0, r3
 800186c:	b002      	add	sp, #8
 800186e:	4770      	bx	lr

08001870 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001870:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001872:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001876:	4770      	bx	lr

08001878 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001878:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800187a:	e9d0 0400 	ldrd	r0, r4, [r0]
 800187e:	f004 fc23 	bl	80060c8 <STC_GetDefaultIqdref>
 8001882:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001886:	8220      	strh	r0, [r4, #16]
 8001888:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800188a:	bd10      	pop	{r4, pc}

0800188c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 800188c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800188e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001892:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001896:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800189a:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800189e:	4250      	negs	r0, r2
 80018a0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80018a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80018a8:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80018aa:	da05      	bge.n	80018b8 <MCM_Clarke+0x2c>
 80018ac:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80018ae:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80018b2:	da0c      	bge.n	80018ce <MCM_Clarke+0x42>
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <MCM_Clarke+0x50>)
 80018b6:	e001      	b.n	80018bc <MCM_Clarke+0x30>
 80018b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2000      	movs	r0, #0
 80018c0:	b292      	uxth	r2, r2
 80018c2:	f363 000f 	bfi	r0, r3, #0, #16
 80018c6:	f362 401f 	bfi	r0, r2, #16, #16
}
 80018ca:	b004      	add	sp, #16
 80018cc:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <MCM_Clarke+0x50>)
 80018d0:	b20a      	sxth	r2, r1
 80018d2:	4282      	cmp	r2, r0
 80018d4:	bfb8      	it	lt
 80018d6:	4602      	movlt	r2, r0
 80018d8:	e7f0      	b.n	80018bc <MCM_Clarke+0x30>
 80018da:	bf00      	nop
 80018dc:	ffff8001 	.word	0xffff8001

080018e0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80018e0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 80018e4:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 80018e8:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80018ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80018f0:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 80018f2:	d028      	beq.n	8001946 <MCM_Trig_Functions+0x66>
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	461a      	mov	r2, r3
 80018fa:	d816      	bhi.n	800192a <MCM_Trig_Functions+0x4a>
 80018fc:	b361      	cbz	r1, 8001958 <MCM_Trig_Functions+0x78>
 80018fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001902:	d109      	bne.n	8001918 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001904:	b2c0      	uxtb	r0, r0
 8001906:	43c3      	mvns	r3, r0
 8001908:	491a      	ldr	r1, [pc, #104]	; (8001974 <MCM_Trig_Functions+0x94>)
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001910:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001914:	4252      	negs	r2, r2
 8001916:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001918:	b29b      	uxth	r3, r3
 800191a:	2000      	movs	r0, #0
 800191c:	b292      	uxth	r2, r2
 800191e:	f363 000f 	bfi	r0, r3, #0, #16
 8001922:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001926:	b002      	add	sp, #8
 8001928:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 800192a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800192e:	d1f3      	bne.n	8001918 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001930:	4910      	ldr	r1, [pc, #64]	; (8001974 <MCM_Trig_Functions+0x94>)
 8001932:	b2c0      	uxtb	r0, r0
 8001934:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001936:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800193a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800193c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800193e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001942:	b21b      	sxth	r3, r3
      break;
 8001944:	e7e8      	b.n	8001918 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001946:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001948:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001952:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8001956:	e7df      	b.n	8001918 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001958:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800195a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001964:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001968:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800196a:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800196c:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800196e:	b212      	sxth	r2, r2
      break;
 8001970:	e7d2      	b.n	8001918 <MCM_Trig_Functions+0x38>
 8001972:	bf00      	nop
 8001974:	08006b04 	.word	0x08006b04

08001978 <MCM_Park>:
{
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	4605      	mov	r5, r0
 800197e:	9001      	str	r0, [sp, #4]
 8001980:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001982:	4608      	mov	r0, r1
 8001984:	f7ff ffac 	bl	80018e0 <MCM_Trig_Functions>
 8001988:	b22d      	sxth	r5, r5
 800198a:	b204      	sxth	r4, r0
 800198c:	1436      	asrs	r6, r6, #16
 800198e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001990:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001994:	fb06 2210 	mls	r2, r6, r0, r2
  if (wqd_tmp > INT16_MAX)
 8001998:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800199c:	da12      	bge.n	80019c4 <MCM_Park+0x4c>
 800199e:	13d3      	asrs	r3, r2, #15
  else if (wqd_tmp < (-32768))
 80019a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019a4:	4914      	ldr	r1, [pc, #80]	; (80019f8 <MCM_Park+0x80>)
 80019a6:	da21      	bge.n	80019ec <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80019a8:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80019ac:	fb05 4000 	mla	r0, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80019b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80019b4:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if (wqd_tmp > INT16_MAX)
 80019b8:	da07      	bge.n	80019ca <MCM_Park+0x52>
  else if (wqd_tmp < (-32768))
 80019ba:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80019be:	da0f      	bge.n	80019e0 <MCM_Park+0x68>
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <MCM_Park+0x80>)
 80019c2:	e004      	b.n	80019ce <MCM_Park+0x56>
 80019c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019c8:	e7ee      	b.n	80019a8 <MCM_Park+0x30>
 80019ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 80019ce:	b28a      	uxth	r2, r1
 80019d0:	2000      	movs	r0, #0
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f362 000f 	bfi	r0, r2, #0, #16
 80019d8:	f363 401f 	bfi	r0, r3, #16, #16
}
 80019dc:	b004      	add	sp, #16
 80019de:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MCM_Park+0x80>)
 80019e2:	b213      	sxth	r3, r2
 80019e4:	4283      	cmp	r3, r0
 80019e6:	bfb8      	it	lt
 80019e8:	4603      	movlt	r3, r0
 80019ea:	e7f0      	b.n	80019ce <MCM_Park+0x56>
    hqd_tmp = ((int16_t)wqd_tmp);
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4291      	cmp	r1, r2
 80019f0:	bfb8      	it	lt
 80019f2:	4611      	movlt	r1, r2
 80019f4:	e7d8      	b.n	80019a8 <MCM_Park+0x30>
 80019f6:	bf00      	nop
 80019f8:	ffff8001 	.word	0xffff8001

080019fc <MCM_Rev_Park>:
{
 80019fc:	b530      	push	{r4, r5, lr}
 80019fe:	b085      	sub	sp, #20
 8001a00:	4604      	mov	r4, r0
 8001a02:	9001      	str	r0, [sp, #4]
 8001a04:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a06:	4608      	mov	r0, r1
 8001a08:	f7ff ff6a 	bl	80018e0 <MCM_Trig_Functions>
 8001a0c:	142d      	asrs	r5, r5, #16
 8001a0e:	1403      	asrs	r3, r0, #16
 8001a10:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001a12:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a16:	b200      	sxth	r0, r0
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001a18:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001a1c:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001a20:	fb04 0313 	mls	r3, r4, r3, r0
  return (Output);
 8001a24:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001a2e:	f362 000f 	bfi	r0, r2, #0, #16
 8001a32:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001a36:	b005      	add	sp, #20
 8001a38:	bd30      	pop	{r4, r5, pc}
 8001a3a:	bf00      	nop

08001a3c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	dd35      	ble.n	8001aac <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8001a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a44:	dd2b      	ble.n	8001a9e <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a46:	135a      	asrs	r2, r3, #13
 8001a48:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a4c:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a52:	d029      	beq.n	8001aa8 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a54:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a58:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a5a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a5e:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a62:	d024      	beq.n	8001aae <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a64:	fb93 f2f0 	sdiv	r2, r3, r0
 8001a68:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a6a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a6e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a72:	d01c      	beq.n	8001aae <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a74:	fb93 f2f1 	sdiv	r2, r3, r1
 8001a78:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a7a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a7e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a82:	d014      	beq.n	8001aae <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a84:	fb93 f2f0 	sdiv	r2, r3, r0
 8001a88:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a8a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a8e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a92:	d00c      	beq.n	8001aae <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a94:	fb93 f0f1 	sdiv	r0, r3, r1
 8001a98:	4408      	add	r0, r1
 8001a9a:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001a9c:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001a9e:	11da      	asrs	r2, r3, #7
 8001aa0:	3280      	adds	r2, #128	; 0x80
 8001aa2:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001aa4:	2a80      	cmp	r2, #128	; 0x80
 8001aa6:	d1d5      	bne.n	8001a54 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001aac:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001aae:	4770      	bx	lr

08001ab0 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <FOC_Clear+0x80>)
 8001ab8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001abc:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001ac0:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001ac2:	2500      	movs	r5, #0
{
 8001ac4:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ac6:	f102 070c 	add.w	r7, r2, #12
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001aca:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001acc:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001ace:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ad2:	eb03 0e07 	add.w	lr, r3, r7
  FOCVars[bMotor].Iab = NULL_ab;
 8001ad6:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001ada:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8001ade:	eb03 0c02 	add.w	ip, r3, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <FOC_Clear+0x84>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ae4:	51dd      	str	r5, [r3, r7]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ae6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001aea:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001aee:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001af0:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001af2:	509d      	str	r5, [r3, r2]
 8001af4:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001af8:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001afa:	f003 fa4f 	bl	8004f9c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <FOC_Clear+0x88>)
 8001b00:	4629      	mov	r1, r5
 8001b02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b06:	f003 fa49 	bl	8004f9c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <FOC_Clear+0x8c>)
 8001b0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b10:	f004 fa54 	bl	8005fbc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <FOC_Clear+0x90>)
 8001b16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b1a:	f000 fe4d 	bl	80027b8 <PWMC_SwitchOffPWM>

  if (NULL == pFF[bMotor])
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <FOC_Clear+0x94>)
 8001b20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001b24:	b118      	cbz	r0, 8001b2e <FOC_Clear+0x7e>
  }

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FF_Clear(pFF[bMotor]);
 8001b2a:	f002 bea1 	b.w	8004870 <FF_Clear>
}
 8001b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b30:	200005ec 	.word	0x200005ec
 8001b34:	200004c8 	.word	0x200004c8
 8001b38:	200004c4 	.word	0x200004c4
 8001b3c:	200004cc 	.word	0x200004cc
 8001b40:	20000620 	.word	0x20000620
 8001b44:	200004bc 	.word	0x200004bc

08001b48 <MCboot>:
  if (MC_NULL == pMCIList)
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07f      	beq.n	8001c4c <MCboot+0x104>
{
 8001b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <MCboot+0x108>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b52:	f8df a154 	ldr.w	sl, [pc, #340]	; 8001ca8 <MCboot+0x160>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001b56:	4d3f      	ldr	r5, [pc, #252]	; (8001c54 <MCboot+0x10c>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001b58:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001cac <MCboot+0x164>
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001b5c:	4e3e      	ldr	r6, [pc, #248]	; (8001c58 <MCboot+0x110>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001b5e:	4f3f      	ldr	r7, [pc, #252]	; (8001c5c <MCboot+0x114>)
{
 8001b60:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8001b62:	f04f 0900 	mov.w	r9, #0
 8001b66:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b68:	483d      	ldr	r0, [pc, #244]	; (8001c60 <MCboot+0x118>)
    bMCBootCompleted = (uint8_t )0;
 8001b6a:	f883 9000 	strb.w	r9, [r3]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001b6e:	f8ca 0000 	str.w	r0, [sl]
    R3_1_Init(&PWM_Handle_M1);
 8001b72:	f003 fd3f 	bl	80055f4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001b76:	483b      	ldr	r0, [pc, #236]	; (8001c64 <MCboot+0x11c>)
 8001b78:	f7fe fcd2 	bl	8000520 <ASPEP_start>
    startTimers();
 8001b7c:	f003 fab6 	bl	80050ec <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001b80:	4839      	ldr	r0, [pc, #228]	; (8001c68 <MCboot+0x120>)
 8001b82:	f003 f9f7 	bl	8004f74 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001b86:	4839      	ldr	r0, [pc, #228]	; (8001c6c <MCboot+0x124>)
 8001b88:	f004 fcb2 	bl	80064f0 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001b8c:	6828      	ldr	r0, [r5, #0]
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <MCboot+0x124>)
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <MCboot+0x120>)
 8001b92:	f004 f9fb 	bl	8005f8c <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001b96:	4836      	ldr	r0, [pc, #216]	; (8001c70 <MCboot+0x128>)
 8001b98:	f004 fda2 	bl	80066e0 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001b9c:	f8da 3000 	ldr.w	r3, [sl]
 8001ba0:	6829      	ldr	r1, [r5, #0]
 8001ba2:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <MCboot+0x128>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4833      	ldr	r0, [pc, #204]	; (8001c74 <MCboot+0x12c>)
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <MCboot+0x130>)
 8001baa:	f004 f8cb 	bl	8005d44 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001bae:	4833      	ldr	r0, [pc, #204]	; (8001c7c <MCboot+0x134>)
 8001bb0:	f003 f9e0 	bl	8004f74 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001bb4:	4832      	ldr	r0, [pc, #200]	; (8001c80 <MCboot+0x138>)
 8001bb6:	f003 f9dd 	bl	8004f74 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001bba:	4640      	mov	r0, r8
 8001bbc:	f003 ffce 	bl	8005b5c <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <MCboot+0x13c>)
    NTC_Init(&TempSensor_M1);
 8001bc2:	4831      	ldr	r0, [pc, #196]	; (8001c88 <MCboot+0x140>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001bc4:	681b      	ldr	r3, [r3, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001bc6:	e9c3 6802 	strd	r6, r8, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001bca:	f003 f993 	bl	8004ef4 <NTC_Init>
    FF_Init(pFF[M1],&(BusVoltageSensor_M1._Super),pPIDId[M1],pPIDIq[M1]);
 8001bce:	492f      	ldr	r1, [pc, #188]	; (8001c8c <MCboot+0x144>)
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <MCboot+0x148>)
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <MCboot+0x14c>)
 8001bd4:	6808      	ldr	r0, [r1, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4641      	mov	r1, r8
 8001bdc:	f002 fe3c 	bl	8004858 <FF_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <MCboot+0x150>)
 8001be2:	482e      	ldr	r0, [pc, #184]	; (8001c9c <MCboot+0x154>)
 8001be4:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001be6:	f004 f825 	bl	8005c34 <REMNG_Init>
    FOC_Clear(M1);
 8001bea:	4648      	mov	r0, r9
 8001bec:	f7ff ff60 	bl	8001ab0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001bf0:	f04f 0b01 	mov.w	fp, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001bf4:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001bf6:	f886 b024 	strb.w	fp, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001bfa:	f004 fa65 	bl	80060c8 <STC_GetDefaultIqdref>
 8001bfe:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c00:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c02:	6133      	str	r3, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c04:	f004 fa60 	bl	80060c8 <STC_GetDefaultIqdref>
 8001c08:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c0c:	f8da 3000 	ldr.w	r3, [sl]
 8001c10:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c12:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c14:	4632      	mov	r2, r6
 8001c16:	4638      	mov	r0, r7
 8001c18:	f7ff fccc 	bl	80015b4 <MCI_Init>
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 8001c1c:	6828      	ldr	r0, [r5, #0]
 8001c1e:	f004 fa53 	bl	80060c8 <STC_GetDefaultIqdref>
 8001c22:	464a      	mov	r2, r9
 8001c24:	b201      	sxth	r1, r0
 8001c26:	4638      	mov	r0, r7
 8001c28:	f7ff fce0 	bl	80015ec <MCI_ExecTorqueRamp>
    ICL_Init(&ICL_M1, &(BusVoltageSensor_M1._Super), &ICLDOUTParamsM1);
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <MCboot+0x158>)
 8001c2e:	481d      	ldr	r0, [pc, #116]	; (8001ca4 <MCboot+0x15c>)
    pMCIList[M1] = &Mci[M1];
 8001c30:	6027      	str	r7, [r4, #0]
    ICL_Init(&ICL_M1, &(BusVoltageSensor_M1._Super), &ICLDOUTParamsM1);
 8001c32:	4641      	mov	r1, r8
 8001c34:	f002 fee0 	bl	80049f8 <ICL_Init>
    Mci[M1].State = ICLWAIT;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	767b      	strb	r3, [r7, #25]
    MC_APP_BootHook();
 8001c3c:	f7ff fcb6 	bl	80015ac <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <MCboot+0x108>)
 8001c42:	f883 b000 	strb.w	fp, [r3]
}
 8001c46:	b005      	add	sp, #20
 8001c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000612 	.word	0x20000612
 8001c54:	200004cc 	.word	0x200004cc
 8001c58:	200005ec 	.word	0x200005ec
 8001c5c:	20001778 	.word	0x20001778
 8001c60:	200001cc 	.word	0x200001cc
 8001c64:	20000538 	.word	0x20000538
 8001c68:	20000190 	.word	0x20000190
 8001c6c:	20000300 	.word	0x20000300
 8001c70:	20000484 	.word	0x20000484
 8001c74:	20000274 	.word	0x20000274
 8001c78:	200002ec 	.word	0x200002ec
 8001c7c:	20000164 	.word	0x20000164
 8001c80:	20000138 	.word	0x20000138
 8001c84:	200004c0 	.word	0x200004c0
 8001c88:	2000045c 	.word	0x2000045c
 8001c8c:	200004bc 	.word	0x200004bc
 8001c90:	200004c8 	.word	0x200004c8
 8001c94:	200004c4 	.word	0x200004c4
 8001c98:	2000061c 	.word	0x2000061c
 8001c9c:	2000025c 	.word	0x2000025c
 8001ca0:	20000118 	.word	0x20000118
 8001ca4:	20000124 	.word	0x20000124
 8001ca8:	20000620 	.word	0x20000620
 8001cac:	20000000 	.word	0x20000000

08001cb0 <FOC_InitAdditionalMethods>:
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
{
    if (M_NONE == bMotor)
 8001cb0:	28ff      	cmp	r0, #255	; 0xff
 8001cb2:	d005      	beq.n	8001cc0 <FOC_InitAdditionalMethods+0x10>
    {
      /* Nothing to do */
    }
    else
    {
      if (NULL == pFF[bMotor])
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <FOC_InitAdditionalMethods+0x14>)
 8001cb6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001cba:	b108      	cbz	r0, 8001cc0 <FOC_InitAdditionalMethods+0x10>
      {
        /* Nothing to do */
      }
      else
      {
        FF_InitFOCAdditionalMethods(pFF[bMotor]);
 8001cbc:	f002 be76 	b.w	80049ac <FF_InitFOCAdditionalMethods>
      }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200004bc 	.word	0x200004bc

08001cc8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <FOC_CalcCurrRef+0x40>)
 8001ccc:	2426      	movs	r4, #38	; 0x26
 8001cce:	fb04 3400 	mla	r4, r4, r0, r3
 8001cd2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001cd6:	b103      	cbz	r3, 8001cda <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001cda:	4e0c      	ldr	r6, [pc, #48]	; (8001d0c <FOC_CalcCurrRef+0x44>)
 8001cdc:	4605      	mov	r5, r0
 8001cde:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8001ce2:	f004 f9c7 	bl	8006074 <STC_CalcTorqueReference>
    if (NULL == pFF[bMotor])
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <FOC_CalcCurrRef+0x48>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001ce8:	83e0      	strh	r0, [r4, #30]
    if (NULL == pFF[bMotor])
 8001cea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001cee:	8220      	strh	r0, [r4, #16]
 8001cf0:	3410      	adds	r4, #16
    if (NULL == pFF[bMotor])
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <FOC_CalcCurrRef+0x10>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8001cf6:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8001cfa:	6821      	ldr	r1, [r4, #0]
 8001cfc:	4618      	mov	r0, r3
}
 8001cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 8001d02:	f002 bdb9 	b.w	8004878 <FF_VqdffComputation>
 8001d06:	bf00      	nop
 8001d08:	200005ec 	.word	0x200005ec
 8001d0c:	200004cc 	.word	0x200004cc
 8001d10:	200004bc 	.word	0x200004bc

08001d14 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001d16:	8018      	strh	r0, [r3, #0]
}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000614 	.word	0x20000614

08001d20 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001d22:	8818      	ldrh	r0, [r3, #0]
 8001d24:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001d26:	fab0 f080 	clz	r0, r0
 8001d2a:	0940      	lsrs	r0, r0, #5
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000614 	.word	0x20000614

08001d34 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001d36:	8018      	strh	r0, [r3, #0]
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000618 	.word	0x20000618

08001d40 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001d42:	8818      	ldrh	r0, [r3, #0]
 8001d44:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001d46:	fab0 f080 	clz	r0, r0
 8001d4a:	0940      	lsrs	r0, r0, #5
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000618 	.word	0x20000618

08001d54 <TSK_MediumFrequencyTaskM1>:
{
 8001d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d58:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001d5a:	2300      	movs	r3, #0
  ICL_State_t ICLstate = ICL_Exec(&ICL_M1);
 8001d5c:	48bc      	ldr	r0, [pc, #752]	; (8002050 <TSK_MediumFrequencyTaskM1+0x2fc>)
  int16_t wAux = 0;
 8001d5e:	f8ad 3000 	strh.w	r3, [sp]
  ICL_State_t ICLstate = ICL_Exec(&ICL_M1);
 8001d62:	f002 fe51 	bl	8004a08 <ICL_Exec>
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d66:	4669      	mov	r1, sp
  ICL_State_t ICLstate = ICL_Exec(&ICL_M1);
 8001d68:	4680      	mov	r8, r0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d6a:	48ba      	ldr	r0, [pc, #744]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d6c:	4fba      	ldr	r7, [pc, #744]	; (8002058 <TSK_MediumFrequencyTaskM1+0x304>)
  if ( !ICLFaultTreatedM1 && (ICLstate == ICL_ACTIVE)){
 8001d6e:	4ebb      	ldr	r6, [pc, #748]	; (800205c <TSK_MediumFrequencyTaskM1+0x308>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d70:	f004 fab8 	bl	80062e4 <STO_PLL_CalcAvrgMecSpeedUnit>
 8001d74:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f003 f98a 	bl	8005090 <PQD_CalcElMotorPower>
  if ( !ICLFaultTreatedM1 && (ICLstate == ICL_ACTIVE)){
 8001d7c:	7833      	ldrb	r3, [r6, #0]
 8001d7e:	b923      	cbnz	r3, 8001d8a <TSK_MediumFrequencyTaskM1+0x36>
 8001d80:	f1b8 0f02 	cmp.w	r8, #2
    ICLFaultTreatedM1 = true;
 8001d84:	bf04      	itt	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	7033      	strbeq	r3, [r6, #0]
  if ((MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS) && ICLFaultTreatedM1)
 8001d8a:	4cb5      	ldr	r4, [pc, #724]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fc8d 	bl	80016ac <MCI_GetCurrentFaults>
 8001d92:	b908      	cbnz	r0, 8001d98 <TSK_MediumFrequencyTaskM1+0x44>
 8001d94:	7833      	ldrb	r3, [r6, #0]
 8001d96:	b923      	cbnz	r3, 8001da2 <TSK_MediumFrequencyTaskM1+0x4e>
    Mci[M1].State = FAULT_NOW;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	7663      	strb	r3, [r4, #25]
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff fc80 	bl	80016a8 <MCI_GetOccurredFaults>
 8001da8:	bb70      	cbnz	r0, 8001e08 <TSK_MediumFrequencyTaskM1+0xb4>
      switch (Mci[M1].State)
 8001daa:	7e63      	ldrb	r3, [r4, #25]
 8001dac:	2b13      	cmp	r3, #19
 8001dae:	d8f5      	bhi.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <TSK_MediumFrequencyTaskM1+0x64>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001f7b 	.word	0x08001f7b
 8001dbc:	08001d9d 	.word	0x08001d9d
 8001dc0:	08001d9d 	.word	0x08001d9d
 8001dc4:	08001d9d 	.word	0x08001d9d
 8001dc8:	08001ee7 	.word	0x08001ee7
 8001dcc:	08001d9d 	.word	0x08001d9d
 8001dd0:	08001ec3 	.word	0x08001ec3
 8001dd4:	08001d9d 	.word	0x08001d9d
 8001dd8:	08001ea3 	.word	0x08001ea3
 8001ddc:	08001d9d 	.word	0x08001d9d
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001fb9 	.word	0x08001fb9
 8001de8:	08001fab 	.word	0x08001fab
 8001dec:	08001d9d 	.word	0x08001d9d
 8001df0:	08001d9d 	.word	0x08001d9d
 8001df4:	08001d9d 	.word	0x08001d9d
 8001df8:	08001e61 	.word	0x08001e61
 8001dfc:	08001e2f 	.word	0x08001e2f
 8001e00:	08001d9d 	.word	0x08001d9d
 8001e04:	08001e0f 	.word	0x08001e0f
      Mci[M1].State = FAULT_OVER;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	7663      	strb	r3, [r4, #25]
 8001e0c:	e7c6      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e0e:	7e23      	ldrb	r3, [r4, #24]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	f000 80d8 	beq.w	8001fc6 <TSK_MediumFrequencyTaskM1+0x272>
            if(! RUC_Exec(&RevUpControlM1))
 8001e16:	4893      	ldr	r0, [pc, #588]	; (8002064 <TSK_MediumFrequencyTaskM1+0x310>)
 8001e18:	f004 f80e 	bl	8005e38 <RUC_Exec>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	f040 80e3 	bne.w	8001fe8 <TSK_MediumFrequencyTaskM1+0x294>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001e22:	4602      	mov	r2, r0
 8001e24:	2110      	movs	r1, #16
 8001e26:	488e      	ldr	r0, [pc, #568]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001e28:	f7ff fbf6 	bl	8001618 <MCI_FaultProcessing>
 8001e2c:	e7b6      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001e2e:	7e23      	ldrb	r3, [r4, #24]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	f000 80c8 	beq.w	8001fc6 <TSK_MediumFrequencyTaskM1+0x272>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001e36:	4d8c      	ldr	r5, [pc, #560]	; (8002068 <TSK_MediumFrequencyTaskM1+0x314>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	6828      	ldr	r0, [r5, #0]
 8001e3c:	f000 fcc0 	bl	80027c0 <PWMC_CurrentReadingCalibr>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d0ab      	beq.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001e44:	7e23      	ldrb	r3, [r4, #24]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	f000 8124 	beq.w	8002094 <TSK_MediumFrequencyTaskM1+0x340>
                  R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001e4c:	6828      	ldr	r0, [r5, #0]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f003 fa92 	bl	8005378 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001e54:	2014      	movs	r0, #20
 8001e56:	f7ff ff5d 	bl	8001d14 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	7663      	strb	r3, [r4, #25]
 8001e5e:	e79d      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e60:	7e23      	ldrb	r3, [r4, #24]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	f000 80af 	beq.w	8001fc6 <TSK_MediumFrequencyTaskM1+0x272>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001e68:	f7ff ff5a 	bl	8001d20 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d095      	beq.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001e70:	4d7d      	ldr	r5, [pc, #500]	; (8002068 <TSK_MediumFrequencyTaskM1+0x314>)
 8001e72:	6828      	ldr	r0, [r5, #0]
 8001e74:	f003 faf2 	bl	800545c <R3_1_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e78:	4a7c      	ldr	r2, [pc, #496]	; (800206c <TSK_MediumFrequencyTaskM1+0x318>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001e7a:	4b7d      	ldr	r3, [pc, #500]	; (8002070 <TSK_MediumFrequencyTaskM1+0x31c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e7c:	6810      	ldr	r0, [r2, #0]
 8001e7e:	497d      	ldr	r1, [pc, #500]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e86:	f004 f895 	bl	8005fb4 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001e8a:	4872      	ldr	r0, [pc, #456]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e8c:	f004 fb08 	bl	80064a0 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fe0d 	bl	8001ab0 <FOC_Clear>
                Mci[M1].State = START;
 8001e96:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001e98:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001e9a:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001e9c:	f000 fc8e 	bl	80027bc <PWMC_SwitchOnPWM>
 8001ea0:	e77c      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001ea2:	f7ff ff4d 	bl	8001d40 <TSK_StopPermanencyTimeHasElapsedM1>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	f43f af78 	beq.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <TSK_MediumFrequencyTaskM1+0x318>)
 8001eae:	4971      	ldr	r1, [pc, #452]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	f004 f87f 	bl	8005fb4 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001eb6:	486f      	ldr	r0, [pc, #444]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001eb8:	f004 fc04 	bl	80066c4 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	8323      	strh	r3, [r4, #24]
 8001ec0:	e76c      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ec2:	7e23      	ldrb	r3, [r4, #24]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d07e      	beq.n	8001fc6 <TSK_MediumFrequencyTaskM1+0x272>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001ec8:	4865      	ldr	r0, [pc, #404]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001eca:	f7ff fbb1 	bl	8001630 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fefa 	bl	8001cc8 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001ed4:	2d00      	cmp	r5, #0
 8001ed6:	f47f af61 	bne.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001edc:	462a      	mov	r2, r5
 8001ede:	2120      	movs	r1, #32
 8001ee0:	f7ff fb9a 	bl	8001618 <MCI_FaultProcessing>
 8001ee4:	e75a      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ee6:	7e23      	ldrb	r3, [r4, #24]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d06c      	beq.n	8001fc6 <TSK_MediumFrequencyTaskM1+0x272>
            if(! RUC_Exec(&RevUpControlM1))
 8001eec:	485d      	ldr	r0, [pc, #372]	; (8002064 <TSK_MediumFrequencyTaskM1+0x310>)
 8001eee:	f003 ffa3 	bl	8005e38 <RUC_Exec>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	f040 80a2 	bne.w	800203c <TSK_MediumFrequencyTaskM1+0x2e8>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001ef8:	4602      	mov	r2, r0
 8001efa:	2110      	movs	r1, #16
 8001efc:	4858      	ldr	r0, [pc, #352]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001efe:	f7ff fb8b 	bl	8001618 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001f02:	485c      	ldr	r0, [pc, #368]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001f04:	f10d 0102 	add.w	r1, sp, #2
 8001f08:	f004 fc3e 	bl	8006788 <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001f0c:	4855      	ldr	r0, [pc, #340]	; (8002064 <TSK_MediumFrequencyTaskM1+0x310>)
 8001f0e:	f003 ffc9 	bl	8005ea4 <RUC_FirstAccelerationStageReached>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f43f af42 	beq.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001f18:	f10d 0102 	add.w	r1, sp, #2
 8001f1c:	484d      	ldr	r0, [pc, #308]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
 8001f1e:	f004 fb1f 	bl	8006560 <STO_PLL_IsObserverConverged>
 8001f22:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001f24:	484e      	ldr	r0, [pc, #312]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8001f26:	f7ff fc13 	bl	8001750 <MCI_GetImposedMotorDirection>
 8001f2a:	b241      	sxtb	r1, r0
 8001f2c:	4849      	ldr	r0, [pc, #292]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
 8001f2e:	f004 fbc5 	bl	80066bc <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001f32:	4850      	ldr	r0, [pc, #320]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001f34:	4629      	mov	r1, r5
 8001f36:	f004 fcb7 	bl	80068a8 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	f43f af2e 	beq.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001f40:	4844      	ldr	r0, [pc, #272]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
 8001f42:	4e4b      	ldr	r6, [pc, #300]	; (8002070 <TSK_MediumFrequencyTaskM1+0x31c>)
              REMNG_Init(pREMNG[M1]);
 8001f44:	4d4c      	ldr	r5, [pc, #304]	; (8002078 <TSK_MediumFrequencyTaskM1+0x324>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001f46:	f003 ffdb 	bl	8005f00 <SPD_GetElAngle>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	6870      	ldr	r0, [r6, #4]
 8001f4e:	f7ff fd13 	bl	8001978 <MCM_Park>
 8001f52:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001f54:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001f56:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001f58:	f003 fe6c 	bl	8005c34 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001f5c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001f60:	6828      	ldr	r0, [r5, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f003 feac 	bl	8005cc0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001f68:	6828      	ldr	r0, [r5, #0]
 8001f6a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001f6e:	2219      	movs	r2, #25
 8001f70:	f003 fea6 	bl	8005cc0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001f74:	2313      	movs	r3, #19
 8001f76:	7663      	strb	r3, [r4, #25]
 8001f78:	e710      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001f7a:	7e25      	ldrb	r5, [r4, #24]
 8001f7c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8001f80:	2d01      	cmp	r5, #1
 8001f82:	f47f af0b 	bne.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001f86:	4836      	ldr	r0, [pc, #216]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001f88:	4e37      	ldr	r6, [pc, #220]	; (8002068 <TSK_MediumFrequencyTaskM1+0x314>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001f8a:	f7ff fbe1 	bl	8001750 <MCI_GetImposedMotorDirection>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	4834      	ldr	r0, [pc, #208]	; (8002064 <TSK_MediumFrequencyTaskM1+0x310>)
 8001f92:	f003 ff0d 	bl	8005db0 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001f96:	6830      	ldr	r0, [r6, #0]
 8001f98:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	d16f      	bne.n	8002080 <TSK_MediumFrequencyTaskM1+0x32c>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001fa0:	f000 fc0e 	bl	80027c0 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001fa4:	2311      	movs	r3, #17
 8001fa6:	7663      	strb	r3, [r4, #25]
 8001fa8:	e6f8      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (ICL_INACTIVE == ICLstate)
 8001faa:	f1b8 0f04 	cmp.w	r8, #4
 8001fae:	f47f aef5 	bne.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
            Mci[M1].State = IDLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	7663      	strb	r3, [r4, #25]
 8001fb6:	e6f1      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001fb8:	7e23      	ldrb	r3, [r4, #24]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f47f aeee 	bne.w	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	8323      	strh	r3, [r4, #24]
 8001fc4:	e6ea      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <TSK_MediumFrequencyTaskM1+0x314>)
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	f003 fa47 	bl	800545c <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fd6e 	bl	8001ab0 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f003 f873 	bl	80050c0 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001fda:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fde:	f7ff fea9 	bl	8001d34 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	7663      	strb	r3, [r4, #25]
  return;
 8001fe6:	e6d9      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001fe8:	4822      	ldr	r0, [pc, #136]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001fea:	a901      	add	r1, sp, #4
 8001fec:	f004 fbcc 	bl	8006788 <VSS_CalcAvrgMecSpeedUnit>
 8001ff0:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001ff2:	4820      	ldr	r0, [pc, #128]	; (8002074 <TSK_MediumFrequencyTaskM1+0x320>)
 8001ff4:	f004 fc66 	bl	80068c4 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	d048      	beq.n	800208e <TSK_MediumFrequencyTaskM1+0x33a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <TSK_MediumFrequencyTaskM1+0x31c>)
 8001ffe:	481f      	ldr	r0, [pc, #124]	; (800207c <TSK_MediumFrequencyTaskM1+0x328>)
 8002000:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002004:	4d19      	ldr	r5, [pc, #100]	; (800206c <TSK_MediumFrequencyTaskM1+0x318>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002006:	f002 ffd3 	bl	8004fb0 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 800200a:	b200      	sxth	r0, r0
 800200c:	fb00 f106 	mul.w	r1, r0, r6
 8002010:	481a      	ldr	r0, [pc, #104]	; (800207c <TSK_MediumFrequencyTaskM1+0x328>)
 8002012:	f002 ffc3 	bl	8004f9c <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002016:	490f      	ldr	r1, [pc, #60]	; (8002054 <TSK_MediumFrequencyTaskM1+0x300>)
 8002018:	6828      	ldr	r0, [r5, #0]
 800201a:	f003 ffcb 	bl	8005fb4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fe46 	bl	8001cb0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fe4f 	bl	8001cc8 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800202a:	6828      	ldr	r0, [r5, #0]
 800202c:	f004 f85a 	bl	80060e4 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <TSK_MediumFrequencyTaskM1+0x30c>)
 8002032:	f7ff fafd 	bl	8001630 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002036:	2306      	movs	r3, #6
 8002038:	7663      	strb	r3, [r4, #25]
 800203a:	e6af      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <TSK_MediumFrequencyTaskM1+0x318>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	f004 f818 	bl	8006074 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <TSK_MediumFrequencyTaskM1+0x31c>)
 8002046:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 800204a:	8218      	strh	r0, [r3, #16]
 800204c:	825a      	strh	r2, [r3, #18]
 800204e:	e758      	b.n	8001f02 <TSK_MediumFrequencyTaskM1+0x1ae>
 8002050:	20000124 	.word	0x20000124
 8002054:	20000300 	.word	0x20000300
 8002058:	200004c0 	.word	0x200004c0
 800205c:	200004e4 	.word	0x200004e4
 8002060:	20001778 	.word	0x20001778
 8002064:	20000274 	.word	0x20000274
 8002068:	20000620 	.word	0x20000620
 800206c:	200004cc 	.word	0x200004cc
 8002070:	200005ec 	.word	0x200005ec
 8002074:	20000484 	.word	0x20000484
 8002078:	2000061c 	.word	0x2000061c
 800207c:	20000190 	.word	0x20000190
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002080:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002084:	4629      	mov	r1, r5
 8002086:	f000 fb9b 	bl	80027c0 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800208a:	6830      	ldr	r0, [r6, #0]
 800208c:	e6df      	b.n	8001e4e <TSK_MediumFrequencyTaskM1+0xfa>
              LoopClosed = LoopClosed || tempBool;
 800208e:	2800      	cmp	r0, #0
 8002090:	d1b4      	bne.n	8001ffc <TSK_MediumFrequencyTaskM1+0x2a8>
 8002092:	e683      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
                  FOC_Clear(M1);
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fd0b 	bl	8001ab0 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f003 f810 	bl	80050c0 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80020a0:	2300      	movs	r3, #0
 80020a2:	8323      	strh	r3, [r4, #24]
 80020a4:	e67a      	b.n	8001d9c <TSK_MediumFrequencyTaskM1+0x48>
 80020a6:	bf00      	nop

080020a8 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MC_Scheduler+0x78>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d000      	beq.n	80020b2 <MC_Scheduler+0xa>
 80020b0:	4770      	bx	lr
{
 80020b2:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80020b4:	4c1b      	ldr	r4, [pc, #108]	; (8002124 <MC_Scheduler+0x7c>)
 80020b6:	8823      	ldrh	r3, [r4, #0]
 80020b8:	b193      	cbz	r3, 80020e0 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 80020ba:	3b01      	subs	r3, #1
 80020bc:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <MC_Scheduler+0x80>)
 80020c0:	8813      	ldrh	r3, [r2, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b11b      	cbz	r3, 80020ce <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 80020c6:	8813      	ldrh	r3, [r2, #0]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <MC_Scheduler+0x84>)
 80020d0:	8813      	ldrh	r3, [r2, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b11b      	cbz	r3, 80020de <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 80020d6:	8813      	ldrh	r3, [r2, #0]
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8013      	strh	r3, [r2, #0]
}
 80020de:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80020e0:	4d13      	ldr	r5, [pc, #76]	; (8002130 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 80020e2:	f7ff fe37 	bl	8001d54 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80020e6:	f7ff fa63 	bl	80015b0 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80020ea:	4629      	mov	r1, r5
 80020ec:	f851 0b0c 	ldr.w	r0, [r1], #12
 80020f0:	6883      	ldr	r3, [r0, #8]
 80020f2:	4798      	blx	r3
 80020f4:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80020f6:	b130      	cbz	r0, 8002106 <MC_Scheduler+0x5e>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80020f8:	4629      	mov	r1, r5
 80020fa:	220a      	movs	r2, #10
 80020fc:	f851 0b08 	ldr.w	r0, [r1], #8
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	4798      	blx	r3
 8002104:	b910      	cbnz	r0, 800210c <MC_Scheduler+0x64>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8002106:	2301      	movs	r3, #1
 8002108:	8023      	strh	r3, [r4, #0]
 800210a:	e7d8      	b.n	80020be <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800210c:	4628      	mov	r0, r5
 800210e:	f002 fcb9 	bl	8004a84 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002112:	6828      	ldr	r0, [r5, #0]
 8002114:	89ea      	ldrh	r2, [r5, #14]
 8002116:	6846      	ldr	r6, [r0, #4]
 8002118:	68a9      	ldr	r1, [r5, #8]
 800211a:	230a      	movs	r3, #10
 800211c:	47b0      	blx	r6
 800211e:	e7f2      	b.n	8002106 <MC_Scheduler+0x5e>
 8002120:	20000612 	.word	0x20000612
 8002124:	20000616 	.word	0x20000616
 8002128:	20000614 	.word	0x20000614
 800212c:	20000618 	.word	0x20000618
 8002130:	20000514 	.word	0x20000514

08002134 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8002138:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80022e4 <TSK_HighFrequencyTask+0x1b0>
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800213c:	4c5c      	ldr	r4, [pc, #368]	; (80022b0 <TSK_HighFrequencyTask+0x17c>)
  if (SWITCH_OVER == Mci[M1].State)
 800213e:	f898 3019 	ldrb.w	r3, [r8, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002142:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8002146:	b089      	sub	sp, #36	; 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8002148:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800214a:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 800214c:	f000 80a3 	beq.w	8002296 <TSK_HighFrequencyTask+0x162>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <TSK_HighFrequencyTask+0x180>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002152:	4f59      	ldr	r7, [pc, #356]	; (80022b8 <TSK_HighFrequencyTask+0x184>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002154:	6818      	ldr	r0, [r3, #0]
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 8002156:	4e59      	ldr	r6, [pc, #356]	; (80022bc <TSK_HighFrequencyTask+0x188>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002158:	f003 ff2e 	bl	8005fb8 <STC_GetSpeedSensor>
 800215c:	4681      	mov	r9, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800215e:	f003 fecf 	bl	8005f00 <SPD_GetElAngle>
 8002162:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002164:	4648      	mov	r0, r9
 8002166:	f003 fed7 	bl	8005f18 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	a902      	add	r1, sp, #8
 800216e:	f000 f9e9 	bl	8002544 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002172:	9802      	ldr	r0, [sp, #8]
 8002174:	f7ff fb8a 	bl	800188c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002178:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 800217a:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800217c:	f7ff fbfc 	bl	8001978 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002180:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <TSK_HighFrequencyTask+0x18c>)
 8002182:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002186:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002188:	b203      	sxth	r3, r0
 800218a:	1ac9      	subs	r1, r1, r3
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	f002 ff39 	bl	8005004 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002192:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002196:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <TSK_HighFrequencyTask+0x190>)
 8002198:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800219c:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800219e:	1a89      	subs	r1, r1, r2
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f002 ff2f 	bl	8005004 <PI_Controller>
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 80021a6:	f8ad a004 	strh.w	sl, [sp, #4]
 80021aa:	f8ad 0006 	strh.w	r0, [sp, #6]
 80021ae:	9901      	ldr	r1, [sp, #4]
 80021b0:	6830      	ldr	r0, [r6, #0]
 80021b2:	f002 fbbd 	bl	8004930 <FF_VqdConditioning>
 80021b6:	4601      	mov	r1, r0
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80021b8:	4843      	ldr	r0, [pc, #268]	; (80022c8 <TSK_HighFrequencyTask+0x194>)
 80021ba:	f002 fb0b 	bl	80047d4 <Circle_Limitation>
 80021be:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80021c0:	4648      	mov	r0, r9
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80021c2:	ea4f 4a23 	mov.w	sl, r3, asr #16
 80021c6:	fa0f f983 	sxth.w	r9, r3
 80021ca:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80021cc:	f003 fea4 	bl	8005f18 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80021d0:	4629      	mov	r1, r5
 80021d2:	9801      	ldr	r0, [sp, #4]
 80021d4:	f7ff fc12 	bl	80019fc <MCM_Rev_Park>
 80021d8:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80021da:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80021dc:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80021de:	f000 f9b3 	bl	8002548 <PWMC_SetPhaseVoltage>
 80021e2:	4683      	mov	fp, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80021e4:	9804      	ldr	r0, [sp, #16]
 80021e6:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;

  FF_DataProcess(pFF[M1]);
 80021ea:	6830      	ldr	r0, [r6, #0]
  FOCVars[M1].Iqd = Iqd;
 80021ec:	9a00      	ldr	r2, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 80021ee:	f8a4 9016 	strh.w	r9, [r4, #22]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80021f2:	e9dd 7602 	ldrd	r7, r6, [sp, #8]
  FOCVars[M1].Vqd = Vqd;
 80021f6:	f8a4 a018 	strh.w	sl, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80021fa:	e9c4 7600 	strd	r7, r6, [r4]
  FOCVars[M1].hElAngle = hElAngle;
 80021fe:	8425      	strh	r5, [r4, #32]
  FOCVars[M1].Iqd = Iqd;
 8002200:	60e2      	str	r2, [r4, #12]
  FF_DataProcess(pFF[M1]);
 8002202:	f002 fbbd 	bl	8004980 <FF_DataProcess>
  if(hFOCreturn == MC_DURATION)
 8002206:	f1bb 0f01 	cmp.w	fp, #1
 800220a:	d038      	beq.n	800227e <TSK_HighFrequencyTask+0x14a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800220c:	482f      	ldr	r0, [pc, #188]	; (80022cc <TSK_HighFrequencyTask+0x198>)
 800220e:	f003 fe49 	bl	8005ea4 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002212:	6862      	ldr	r2, [r4, #4]
 8002214:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002216:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002218:	482d      	ldr	r0, [pc, #180]	; (80022d0 <TSK_HighFrequencyTask+0x19c>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800221a:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 800221c:	f002 fad0 	bl	80047c0 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002220:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002222:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002224:	482b      	ldr	r0, [pc, #172]	; (80022d4 <TSK_HighFrequencyTask+0x1a0>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002226:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800222a:	f003 ff63 	bl	80060f4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 800222e:	4829      	ldr	r0, [pc, #164]	; (80022d4 <TSK_HighFrequencyTask+0x1a0>)
 8002230:	f004 f906 	bl	8006440 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8002234:	b18c      	cbz	r4, 800225a <TSK_HighFrequencyTask+0x126>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002236:	f898 3019 	ldrb.w	r3, [r8, #25]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d014      	beq.n	8002268 <TSK_HighFrequencyTask+0x134>
 800223e:	2b13      	cmp	r3, #19
 8002240:	d012      	beq.n	8002268 <TSK_HighFrequencyTask+0x134>
  GLOBAL_TIMESTAMP++;
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <TSK_HighFrequencyTask+0x1a4>)
  if (0U == MCPA_UART_A.Mark)
 8002244:	4825      	ldr	r0, [pc, #148]	; (80022dc <TSK_HighFrequencyTask+0x1a8>)
  GLOBAL_TIMESTAMP++;
 8002246:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002248:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 800224c:	3301      	adds	r3, #1
 800224e:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002250:	b9d9      	cbnz	r1, 800228a <TSK_HighFrequencyTask+0x156>
}
 8002252:	2000      	movs	r0, #0
 8002254:	b009      	add	sp, #36	; 0x24
 8002256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      STO_ResetPLL(&STO_PLL_M1);
 800225a:	481e      	ldr	r0, [pc, #120]	; (80022d4 <TSK_HighFrequencyTask+0x1a0>)
 800225c:	f004 fa12 	bl	8006684 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002260:	f898 3019 	ldrb.w	r3, [r8, #25]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d1ea      	bne.n	800223e <TSK_HighFrequencyTask+0x10a>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002268:	481a      	ldr	r0, [pc, #104]	; (80022d4 <TSK_HighFrequencyTask+0x1a0>)
 800226a:	f003 fe49 	bl	8005f00 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 800226e:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002270:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002272:	481b      	ldr	r0, [pc, #108]	; (80022e0 <TSK_HighFrequencyTask+0x1ac>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002274:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002278:	f004 fa36 	bl	80066e8 <VSS_CalcElAngle>
 800227c:	e7e1      	b.n	8002242 <TSK_HighFrequencyTask+0x10e>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 800227e:	4819      	ldr	r0, [pc, #100]	; (80022e4 <TSK_HighFrequencyTask+0x1b0>)
 8002280:	4659      	mov	r1, fp
 8002282:	2200      	movs	r2, #0
 8002284:	f7ff f9c8 	bl	8001618 <MCI_FaultProcessing>
 8002288:	e7db      	b.n	8002242 <TSK_HighFrequencyTask+0x10e>
    MCPA_dataLog (&MCPA_UART_A);
 800228a:	f002 fcbb 	bl	8004c04 <MCPA_dataLog>
}
 800228e:	2000      	movs	r0, #0
 8002290:	b009      	add	sp, #36	; 0x24
 8002292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002296:	4d14      	ldr	r5, [pc, #80]	; (80022e8 <TSK_HighFrequencyTask+0x1b4>)
 8002298:	6828      	ldr	r0, [r5, #0]
 800229a:	f003 fcf5 	bl	8005c88 <REMNG_RampCompleted>
 800229e:	2800      	cmp	r0, #0
 80022a0:	f47f af56 	bne.w	8002150 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80022a4:	6828      	ldr	r0, [r5, #0]
 80022a6:	f003 fccd 	bl	8005c44 <REMNG_Calc>
 80022aa:	8220      	strh	r0, [r4, #16]
 80022ac:	e750      	b.n	8002150 <TSK_HighFrequencyTask+0x1c>
 80022ae:	bf00      	nop
 80022b0:	200005ec 	.word	0x200005ec
 80022b4:	200004cc 	.word	0x200004cc
 80022b8:	20000620 	.word	0x20000620
 80022bc:	200004bc 	.word	0x200004bc
 80022c0:	200004c8 	.word	0x200004c8
 80022c4:	200004c4 	.word	0x200004c4
 80022c8:	2000002c 	.word	0x2000002c
 80022cc:	20000274 	.word	0x20000274
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000300 	.word	0x20000300
 80022d8:	20001774 	.word	0x20001774
 80022dc:	200004e8 	.word	0x200004e8
 80022e0:	20000484 	.word	0x20000484
 80022e4:	20001778 	.word	0x20001778
 80022e8:	2000061c 	.word	0x2000061c

080022ec <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80022ec:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <TSK_SafetyTask_PWMOFF+0xa4>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80022f0:	4e28      	ldr	r6, [pc, #160]	; (8002394 <TSK_SafetyTask_PWMOFF+0xa8>)
{
 80022f2:	b082      	sub	sp, #8
 80022f4:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80022fa:	f002 fe0d 	bl	8004f18 <NTC_CalcAvTemp>
 80022fe:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002300:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002304:	f000 fa80 	bl	8002808 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002308:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800230c:	4328      	orrs	r0, r5
 800230e:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8002310:	b174      	cbz	r4, 8002330 <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8002312:	4821      	ldr	r0, [pc, #132]	; (8002398 <TSK_SafetyTask_PWMOFF+0xac>)
 8002314:	43ea      	mvns	r2, r5
 8002316:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800231a:	b292      	uxth	r2, r2
 800231c:	4629      	mov	r1, r5
 800231e:	9001      	str	r0, [sp, #4]
 8002320:	f7ff f97a 	bl	8001618 <MCI_FaultProcessing>

  if ((M1 == bMotor) && (MC_UNDER_VOLT == (CodeReturn & MC_UNDER_VOLT)) && ICLFaultTreatedM1){
 8002324:	9801      	ldr	r0, [sp, #4]
    ICLFaultTreatedM1 = false;
  }

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002326:	f7ff fa0b 	bl	8001740 <MCI_GetFaultState>
 800232a:	b9c0      	cbnz	r0, 800235e <TSK_SafetyTask_PWMOFF+0x72>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800232c:	b002      	add	sp, #8
 800232e:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002330:	481a      	ldr	r0, [pc, #104]	; (800239c <TSK_SafetyTask_PWMOFF+0xb0>)
 8002332:	f003 fc4d 	bl	8005bd0 <RVBS_CalcAvVbus>
 8002336:	f000 000e 	and.w	r0, r0, #14
 800233a:	4305      	orrs	r5, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800233c:	43ea      	mvns	r2, r5
 800233e:	4816      	ldr	r0, [pc, #88]	; (8002398 <TSK_SafetyTask_PWMOFF+0xac>)
 8002340:	b292      	uxth	r2, r2
 8002342:	4629      	mov	r1, r5
 8002344:	f7ff f968 	bl	8001618 <MCI_FaultProcessing>
  if ((M1 == bMotor) && (MC_UNDER_VOLT == (CodeReturn & MC_UNDER_VOLT)) && ICLFaultTreatedM1){
 8002348:	076b      	lsls	r3, r5, #29
 800234a:	d51b      	bpl.n	8002384 <TSK_SafetyTask_PWMOFF+0x98>
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <TSK_SafetyTask_PWMOFF+0xb4>)
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	b1c2      	cbz	r2, 8002384 <TSK_SafetyTask_PWMOFF+0x98>
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8002352:	4811      	ldr	r0, [pc, #68]	; (8002398 <TSK_SafetyTask_PWMOFF+0xac>)
    ICLFaultTreatedM1 = false;
 8002354:	701c      	strb	r4, [r3, #0]
  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002356:	f7ff f9f3 	bl	8001740 <MCI_GetFaultState>
 800235a:	2800      	cmp	r0, #0
 800235c:	d0e6      	beq.n	800232c <TSK_SafetyTask_PWMOFF+0x40>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800235e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002362:	f000 fa29 	bl	80027b8 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002366:	480f      	ldr	r0, [pc, #60]	; (80023a4 <TSK_SafetyTask_PWMOFF+0xb8>)
 8002368:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800236c:	b963      	cbnz	r3, 8002388 <TSK_SafetyTask_PWMOFF+0x9c>
    FOC_Clear(bMotor);
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fb9e 	bl	8001ab0 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <TSK_SafetyTask_PWMOFF+0xbc>)
 8002376:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800237a:	b002      	add	sp, #8
 800237c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002380:	f002 be9e 	b.w	80050c0 <PQD_Clear>
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <TSK_SafetyTask_PWMOFF+0xac>)
 8002386:	e7ce      	b.n	8002326 <TSK_SafetyTask_PWMOFF+0x3a>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002388:	f002 fd00 	bl	8004d8c <MCPA_flushDataLog>
 800238c:	e7ef      	b.n	800236e <TSK_SafetyTask_PWMOFF+0x82>
 800238e:	bf00      	nop
 8002390:	200004d0 	.word	0x200004d0
 8002394:	20000620 	.word	0x20000620
 8002398:	20001778 	.word	0x20001778
 800239c:	20000000 	.word	0x20000000
 80023a0:	200004e4 	.word	0x200004e4
 80023a4:	200004e8 	.word	0x200004e8
 80023a8:	200004c0 	.word	0x200004c0

080023ac <TSK_SafetyTask>:
{
 80023ac:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <TSK_SafetyTask+0x1c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d000      	beq.n	80023b8 <TSK_SafetyTask+0xc>
}
 80023b6:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff ff97 	bl	80022ec <TSK_SafetyTask_PWMOFF>
}
 80023be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80023c2:	f001 bc23 	b.w	8003c0c <RCM_ExecUserConv>
 80023c6:	bf00      	nop
 80023c8:	20000612 	.word	0x20000612

080023cc <MC_RunMotorControlTasks>:
{
 80023cc:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <MC_RunMotorControlTasks+0x14>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b903      	cbnz	r3, 80023d6 <MC_RunMotorControlTasks+0xa>
}
 80023d4:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80023d6:	f7ff fe67 	bl	80020a8 <MC_Scheduler>
    TSK_SafetyTask();
 80023da:	f7ff ffe7 	bl	80023ac <TSK_SafetyTask>
}
 80023de:	bd08      	pop	{r3, pc}
 80023e0:	20000612 	.word	0x20000612

080023e4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80023e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <TSK_HardwareFaultTask+0x18>)
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	f003 f837 	bl	800545c <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80023ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <TSK_HardwareFaultTask+0x1c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	f7ff b90e 	b.w	8001618 <MCI_FaultProcessing>
 80023fc:	20000620 	.word	0x20000620
 8002400:	20001778 	.word	0x20001778

08002404 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002404:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002406:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <mc_lock_pins+0xe4>)
 8002408:	4a38      	ldr	r2, [pc, #224]	; (80024ec <mc_lock_pins+0xe8>)
 800240a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800240c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002410:	61d9      	str	r1, [r3, #28]
 8002412:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002414:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	920d      	str	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 800241a:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800241e:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8002422:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002424:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002426:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002428:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	920c      	str	r2, [sp, #48]	; 0x30
  (void) temp;
 800242e:	990c      	ldr	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002430:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <mc_lock_pins+0xec>)
 8002432:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002438:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800243a:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800243c:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <mc_lock_pins+0xf0>)
  temp = READ_REG(GPIOx->LCKR);
 800243e:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002440:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 8002446:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002448:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800244a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800244c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800244e:	69d0      	ldr	r0, [r2, #28]
 8002450:	900a      	str	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002452:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002456:	f44f 6780 	mov.w	r7, #1024	; 0x400
  (void) temp;
 800245a:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800245c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800245e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002460:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002462:	69d8      	ldr	r0, [r3, #28]
 8002464:	9009      	str	r0, [sp, #36]	; 0x24
  (void) temp;
 8002466:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002468:	4823      	ldr	r0, [pc, #140]	; (80024f8 <mc_lock_pins+0xf4>)
 800246a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800246c:	2602      	movs	r6, #2
 800246e:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002470:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002472:	69d2      	ldr	r2, [r2, #28]
 8002474:	9208      	str	r2, [sp, #32]
  (void) temp;
 8002476:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800247a:	4a20      	ldr	r2, [pc, #128]	; (80024fc <mc_lock_pins+0xf8>)
 800247c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800247e:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8002482:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002486:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002488:	f8d3 c01c 	ldr.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800248c:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <mc_lock_pins+0xfc>)
  temp = READ_REG(GPIOx->LCKR);
 800248e:	f8cd c01c 	str.w	ip, [sp, #28]
  (void) temp;
 8002492:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002496:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002498:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800249a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800249c:	69d4      	ldr	r4, [r2, #28]
 800249e:	9406      	str	r4, [sp, #24]
  (void) temp;
 80024a0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024a4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024a8:	69dc      	ldr	r4, [r3, #28]
 80024aa:	9405      	str	r4, [sp, #20]
  (void) temp;
 80024ac:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ae:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024b0:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024b2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	9304      	str	r3, [sp, #16]
  (void) temp;
 80024b8:	9b04      	ldr	r3, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ba:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024bc:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024be:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024c0:	69d3      	ldr	r3, [r2, #28]
 80024c2:	9303      	str	r3, [sp, #12]
  (void) temp;
 80024c4:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <mc_lock_pins+0x100>)
 80024c8:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024ca:	2004      	movs	r0, #4
 80024cc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ce:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024d0:	69d3      	ldr	r3, [r2, #28]
 80024d2:	9302      	str	r3, [sp, #8]
  (void) temp;
 80024d4:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024d6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024d8:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024da:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024dc:	69d3      	ldr	r3, [r2, #28]
 80024de:	9301      	str	r3, [sp, #4]
  (void) temp;
 80024e0:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 80024e2:	b00e      	add	sp, #56	; 0x38
 80024e4:	bcf0      	pop	{r4, r5, r6, r7}
 80024e6:	4770      	bx	lr
 80024e8:	40020000 	.word	0x40020000
 80024ec:	00010100 	.word	0x00010100
 80024f0:	00010040 	.word	0x00010040
 80024f4:	40020400 	.word	0x40020400
 80024f8:	00010002 	.word	0x00010002
 80024fc:	00010080 	.word	0x00010080
 8002500:	40020800 	.word	0x40020800
 8002504:	00010004 	.word	0x00010004

08002508 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002508:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800250a:	f001 fe19 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <MX_MotorControl_Init+0x30>)
 8002510:	fba3 3000 	umull	r3, r0, r3, r0
 8002514:	09c0      	lsrs	r0, r0, #7
 8002516:	f001 fdf3 	bl	8004100 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_MotorControl_Init+0x34>)
 800251c:	2200      	movs	r2, #0
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f001 fdb4 	bl	8004090 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_MotorControl_Init+0x38>)
 800252a:	f7ff fb0d 	bl	8001b48 <MCboot>
  mc_lock_pins();
}
 800252e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002532:	f7ff bf67 	b.w	8002404 <mc_lock_pins>
 8002536:	bf00      	nop
 8002538:	10624dd3 	.word	0x10624dd3
 800253c:	200005b8 	.word	0x200005b8
 8002540:	20001808 	.word	0x20001808

08002544 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002544:	6803      	ldr	r3, [r0, #0]
 8002546:	4718      	bx	r3

08002548 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002548:	b470      	push	{r4, r5, r6}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800254a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800254e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8002550:	b083      	sub	sp, #12
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002552:	140c      	asrs	r4, r1, #16
{
 8002554:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002556:	fb06 f404 	mul.w	r4, r6, r4
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800255a:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800255c:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002560:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002564:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002568:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800256c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002570:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002578:	ea4f 0444 	mov.w	r4, r4, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800257c:	ea4f 0565 	mov.w	r5, r5, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002580:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 8002584:	db7f      	blt.n	8002686 <PWMC_SetPhaseVoltage+0x13e>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002586:	f1b1 3fff 	cmp.w	r1, #4294967295
 800258a:	db54      	blt.n	8002636 <PWMC_SetPhaseVoltage+0xee>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800258c:	1aad      	subs	r5, r5, r2
 800258e:	bf44      	itt	mi
 8002590:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002594:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002598:	2900      	cmp	r1, #0
 800259a:	bfbc      	itt	lt
 800259c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80025a0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bfb8      	it	lt
 80025a8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80025ac:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80025b0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80025b4:	bfb8      	it	lt
 80025b6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80025ba:	2401      	movs	r4, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80025bc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80025c0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 80025c4:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
        pHandle->midDuty = (uint16_t)wTimePhA;
        pHandle->highDuty = (uint16_t)wTimePhC;
 80025c8:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80025cc:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80025d0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80025d4:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 80025d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80025dc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80025e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025e4:	b292      	uxth	r2, r2
 80025e6:	b289      	uxth	r1, r1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80025ec:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80025ee:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80025f2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 80025f6:	d11a      	bne.n	800262e <PWMC_SetPhaseVoltage+0xe6>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80025f8:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
      }

      if (pHandle->Ib > 0)
 80025fc:	f9b0 5052 	ldrsh.w	r5, [r0, #82]	; 0x52
      if (pHandle->Ia > 0)
 8002600:	2c00      	cmp	r4, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002602:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8002606:	bfcc      	ite	gt
 8002608:	1912      	addgt	r2, r2, r4
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800260a:	1b12      	suble	r2, r2, r4
 800260c:	b292      	uxth	r2, r2
 800260e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002610:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
      if (pHandle->Ib > 0)
 8002614:	2d00      	cmp	r5, #0
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002616:	bfcc      	ite	gt
 8002618:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800261a:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 800261c:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800261e:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002620:	bfcc      	ite	gt
 8002622:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002624:	1b1b      	suble	r3, r3, r4
 8002626:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800262a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800262e:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002630:	b003      	add	sp, #12
 8002632:	bc70      	pop	{r4, r5, r6}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002634:	4718      	bx	r3
        if ( wX <= 0 )
 8002636:	2c00      	cmp	r4, #0
 8002638:	dd4b      	ble.n	80026d2 <PWMC_SetPhaseVoltage+0x18a>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800263a:	1aa5      	subs	r5, r4, r2
 800263c:	bf44      	itt	mi
 800263e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002642:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002646:	2900      	cmp	r1, #0
 8002648:	bfb8      	it	lt
 800264a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 800264e:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002652:	bfb8      	it	lt
 8002654:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8002658:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800265c:	08b2      	lsrs	r2, r6, #2
          wTimePhC = wTimePhB - (wX / 131072);
 800265e:	1e23      	subs	r3, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002660:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002664:	bfb8      	it	lt
 8002666:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800266a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800266e:	bfb8      	it	lt
 8002670:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002674:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002678:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800267c:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002680:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002684:	e7a6      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x8c>
      if (wZ < 0)
 8002686:	f1b1 3fff 	cmp.w	r1, #4294967295
 800268a:	db6f      	blt.n	800276c <PWMC_SetPhaseVoltage+0x224>
        if (wX <= 0)
 800268c:	2c00      	cmp	r4, #0
 800268e:	dd47      	ble.n	8002720 <PWMC_SetPhaseVoltage+0x1d8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002690:	1b2d      	subs	r5, r5, r4
 8002692:	bf48      	it	mi
 8002694:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8002698:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800269c:	bf48      	it	mi
 800269e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bfb8      	it	lt
 80026a6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80026aa:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80026ae:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80026b2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80026b6:	bfb8      	it	lt
 80026b8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80026bc:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80026c0:	eb03 4164 	add.w	r1, r3, r4, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80026c4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 80026c8:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80026cc:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80026d0:	e780      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x8c>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026d2:	1b2d      	subs	r5, r5, r4
 80026d4:	bf44      	itt	mi
 80026d6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80026da:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bfb8      	it	lt
 80026e2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 80026e6:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80026ea:	bfb8      	it	lt
 80026ec:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 80026f0:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 80026f4:	1e21      	subs	r1, r4, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80026f6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80026fa:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80026fe:	bfb8      	it	lt
 8002700:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002704:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002708:	bfb8      	it	lt
 800270a:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800270e:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002712:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002716:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 800271a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 800271e:	e759      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x8c>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002720:	1aa5      	subs	r5, r4, r2
 8002722:	bf44      	itt	mi
 8002724:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002728:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800272c:	2900      	cmp	r1, #0
 800272e:	bfb8      	it	lt
 8002730:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002734:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002738:	bfb8      	it	lt
 800273a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800273e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002742:	08b2      	lsrs	r2, r6, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002744:	1e23      	subs	r3, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002746:	eb02 42a5 	add.w	r2, r2, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800274a:	bfb8      	it	lt
 800274c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002750:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002754:	bfb8      	it	lt
 8002756:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800275a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800275e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002762:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002766:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 800276a:	e733      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800276c:	1aad      	subs	r5, r5, r2
 800276e:	bf44      	itt	mi
 8002770:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002774:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002778:	2900      	cmp	r1, #0
 800277a:	bfbc      	itt	lt
 800277c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002780:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002784:	2b00      	cmp	r3, #0
 8002786:	bfb8      	it	lt
 8002788:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800278c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002790:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002794:	bfb8      	it	lt
 8002796:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 800279a:	2404      	movs	r4, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 800279c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027a0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 80027a4:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80027a8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80027ac:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 80027b0:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 80027b4:	e70e      	b.n	80025d4 <PWMC_SetPhaseVoltage+0x8c>
 80027b6:	bf00      	nop

080027b8 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80027b8:	6843      	ldr	r3, [r0, #4]
 80027ba:	4718      	bx	r3

080027bc <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80027bc:	6883      	ldr	r3, [r0, #8]
 80027be:	4718      	bx	r3

080027c0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80027c0:	b510      	push	{r4, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80027c6:	b199      	cbz	r1, 80027f0 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80027c8:	2901      	cmp	r1, #1
 80027ca:	d002      	beq.n	80027d2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80027cc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80027ce:	b002      	add	sp, #8
 80027d0:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80027d2:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 80027d6:	b19b      	cbz	r3, 8002800 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	9101      	str	r1, [sp, #4]
 80027de:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f2      	bne.n	80027cc <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80027e6:	68c3      	ldr	r3, [r0, #12]
 80027e8:	4798      	blx	r3
          retVal = true;
 80027ea:	9901      	ldr	r1, [sp, #4]
 80027ec:	4608      	mov	r0, r1
 80027ee:	e7ee      	b.n	80027ce <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 80027f0:	f7ff ffe2 	bl	80027b8 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80027f4:	4620      	mov	r0, r4
 80027f6:	68e3      	ldr	r3, [r4, #12]
 80027f8:	4798      	blx	r3
      retVal = true;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	b002      	add	sp, #8
 80027fe:	bd10      	pop	{r4, pc}
        retVal = true;
 8002800:	4608      	mov	r0, r1
}
 8002802:	b002      	add	sp, #8
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop

08002808 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002808:	6983      	ldr	r3, [r0, #24]
 800280a:	4718      	bx	r3

0800280c <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002810:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
{
 8002814:	4607      	mov	r7, r0
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002816:	2200      	movs	r2, #0
    uint8_t accessResult;
    while (rxLength > 0)
 8002818:	4293      	cmp	r3, r2
    uint8_t * txData = pHandle->txBuffer;
 800281a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800281e:	b089      	sub	sp, #36	; 0x24
    pHandle->txLength = 0;
 8002820:	81fa      	strh	r2, [r7, #14]
    while (rxLength > 0)
 8002822:	dd70      	ble.n	8002906 <RI_SetRegCommandParser+0xfa>
    uint8_t * txData = pHandle->txBuffer;
 8002824:	4606      	mov	r6, r0
 8002826:	eb00 0b01 	add.w	fp, r0, r1
  uint8_t retVal = MCP_CMD_OK;
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	f1c0 0901 	rsb	r9, r0, #1
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002830:	4625      	mov	r5, r4
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002832:	fa1f fa83 	uxth.w	sl, r3
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002836:	f835 0b02 	ldrh.w	r0, [r5], #2
 800283a:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800283e:	f1aa 0302 	sub.w	r3, sl, #2
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 8002842:	f020 0207 	bic.w	r2, r0, #7
 8002846:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002848:	fa1f f883 	uxth.w	r8, r3
    uint16_t regID = dataID & REG_MASK;
 800284c:	b292      	uxth	r2, r2
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800284e:	b21b      	sxth	r3, r3

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8002850:	2920      	cmp	r1, #32
 8002852:	d812      	bhi.n	800287a <RI_SetRegCommandParser+0x6e>
 8002854:	e8df f001 	tbb	[pc, r1]
 8002858:	111111bd 	.word	0x111111bd
 800285c:	11111111 	.word	0x11111111
 8002860:	11111194 	.word	0x11111194
 8002864:	11111111 	.word	0x11111111
 8002868:	1111117d 	.word	0x1111117d
 800286c:	11111111 	.word	0x11111111
 8002870:	1111115c 	.word	0x1111115c
 8002874:	11111111 	.word	0x11111111
 8002878:	27          	.byte	0x27
 8002879:	00          	.byte	0x00
    typeID = (uint8_t)dataID & TYPE_MASK;
 800287a:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 800287c:	eb06 0209 	add.w	r2, r6, r9
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	2a01      	cmp	r2, #1
 8002884:	d03b      	beq.n	80028fe <RI_SetRegCommandParser+0xf2>
        if (txSyncFreeSpace !=0 )
 8002886:	455e      	cmp	r6, fp
 8002888:	f000 80b2 	beq.w	80029f0 <RI_SetRegCommandParser+0x1e4>
          *txData = accessResult;
 800288c:	f806 0b01 	strb.w	r0, [r6], #1
          pHandle->txLength++;
 8002890:	89fa      	ldrh	r2, [r7, #14]
 8002892:	3201      	adds	r2, #1
 8002894:	81fa      	strh	r2, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002896:	2800      	cmp	r0, #0
 8002898:	f040 80ae 	bne.w	80029f8 <RI_SetRegCommandParser+0x1ec>
    while (rxLength > 0)
 800289c:	2b00      	cmp	r3, #0
 800289e:	f340 832a 	ble.w	8002ef6 <RI_SetRegCommandParser+0x6ea>
 80028a2:	462c      	mov	r4, r5
 80028a4:	e7c4      	b.n	8002830 <RI_SetRegCommandParser+0x24>
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 80028a6:	f8b4 c002 	ldrh.w	ip, [r4, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 80028aa:	f10c 0a02 	add.w	sl, ip, #2
 80028ae:	fa1f fa8a 	uxth.w	sl, sl
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 80028b2:	459a      	cmp	sl, r3
 80028b4:	f300 8243 	bgt.w	8002d3e <RI_SetRegCommandParser+0x532>
 80028b8:	f5b2 7f0a 	cmp.w	r2, #552	; 0x228
        rawData++;
 80028bc:	f104 0104 	add.w	r1, r4, #4
          *size = 0;
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
        }
        else
        {
          switch (regID)
 80028c0:	f000 827d 	beq.w	8002dbe <RI_SetRegCommandParser+0x5b2>
 80028c4:	f200 8216 	bhi.w	8002cf4 <RI_SetRegCommandParser+0x4e8>
 80028c8:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 80028cc:	f000 82ab 	beq.w	8002e26 <RI_SetRegCommandParser+0x61a>
 80028d0:	f240 8205 	bls.w	8002cde <RI_SetRegCommandParser+0x4d2>
 80028d4:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 80028d8:	f040 821e 	bne.w	8002d18 <RI_SetRegCommandParser+0x50c>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 80028dc:	8922      	ldrh	r2, [r4, #8]
 80028de:	48c3      	ldr	r0, [pc, #780]	; (8002bec <RI_SetRegCommandParser+0x3e0>)
 80028e0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80028e4:	f7fe fe82 	bl	80015ec <MCI_ExecTorqueRamp>
        if ((1U == number_of_item) && (0 == rxLength))
 80028e8:	eb06 0209 	add.w	r2, r6, r9
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	eba8 030a 	sub.w	r3, r8, sl
 80028f2:	2a01      	cmp	r2, #1
 80028f4:	4455      	add	r5, sl
 80028f6:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 80028f8:	f04f 0000 	mov.w	r0, #0
        if ((1U == number_of_item) && (0 == rxLength))
 80028fc:	d1c3      	bne.n	8002886 <RI_SetRegCommandParser+0x7a>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1c1      	bne.n	8002886 <RI_SetRegCommandParser+0x7a>
      if (MCP_CMD_OK == retVal)
 8002902:	2800      	cmp	r0, #0
 8002904:	d175      	bne.n	80029f2 <RI_SetRegCommandParser+0x1e6>
      pHandle->txLength = 0;
 8002906:	2000      	movs	r0, #0
 8002908:	81f8      	strh	r0, [r7, #14]
}
 800290a:	b009      	add	sp, #36	; 0x24
 800290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002910:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8002914:	2a00      	cmp	r2, #0
 8002916:	f000 82b3 	beq.w	8002e80 <RI_SetRegCommandParser+0x674>
 800291a:	2b01      	cmp	r3, #1
 800291c:	f340 82b4 	ble.w	8002e88 <RI_SetRegCommandParser+0x67c>
 8002920:	1ce1      	adds	r1, r4, #3
 8002922:	ea6f 0c04 	mvn.w	ip, r4
 8002926:	e002      	b.n	800292e <RI_SetRegCommandParser+0x122>
 8002928:	4293      	cmp	r3, r2
 800292a:	f340 8201 	ble.w	8002d30 <RI_SetRegCommandParser+0x524>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 800292e:	eb0c 0201 	add.w	r2, ip, r1
 8002932:	4608      	mov	r0, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002934:	f911 4b01 	ldrsb.w	r4, [r1], #1
 8002938:	b292      	uxth	r2, r2
 800293a:	2c00      	cmp	r4, #0
 800293c:	d1f4      	bne.n	8002928 <RI_SetRegCommandParser+0x11c>
 800293e:	4611      	mov	r1, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002940:	eba8 0a02 	sub.w	sl, r8, r2
 8002944:	2200      	movs	r2, #0
 8002946:	7002      	strb	r2, [r0, #0]
 8002948:	fa0f f38a 	sxth.w	r3, sl
 800294c:	440d      	add	r5, r1
        retVal = MCP_ERROR_RO_REG;
 800294e:	2004      	movs	r0, #4
 8002950:	e794      	b.n	800287c <RI_SetRegCommandParser+0x70>
        uint32_t regdata32 = *(uint32_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002952:	f5b2 7fec 	cmp.w	r2, #472	; 0x1d8
 8002956:	f8d4 1002 	ldr.w	r1, [r4, #2]
        switch (regID)
 800295a:	f000 81ff 	beq.w	8002d5c <RI_SetRegCommandParser+0x550>
 800295e:	d85d      	bhi.n	8002a1c <RI_SetRegCommandParser+0x210>
 8002960:	2a98      	cmp	r2, #152	; 0x98
 8002962:	f000 8205 	beq.w	8002d70 <RI_SetRegCommandParser+0x564>
 8002966:	d94e      	bls.n	8002a06 <RI_SetRegCommandParser+0x1fa>
 8002968:	2ad8      	cmp	r2, #216	; 0xd8
 800296a:	d002      	beq.n	8002972 <RI_SetRegCommandParser+0x166>
 800296c:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 8002970:	d14d      	bne.n	8002a0e <RI_SetRegCommandParser+0x202>
 8002972:	f1aa 0a06 	sub.w	sl, sl, #6
 8002976:	fa0f f38a 	sxth.w	r3, sl
 800297a:	1da5      	adds	r5, r4, #6
            retVal = MCP_ERROR_RO_REG;
 800297c:	2004      	movs	r0, #4
 800297e:	e77d      	b.n	800287c <RI_SetRegCommandParser+0x70>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002980:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8002984:	8865      	ldrh	r5, [r4, #2]
        switch (regID)
 8002986:	f000 82af 	beq.w	8002ee8 <RI_SetRegCommandParser+0x6dc>
 800298a:	f200 8089 	bhi.w	8002aa0 <RI_SetRegCommandParser+0x294>
 800298e:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8002992:	f000 82a5 	beq.w	8002ee0 <RI_SetRegCommandParser+0x6d4>
 8002996:	d96c      	bls.n	8002a72 <RI_SetRegCommandParser+0x266>
 8002998:	f5b2 6f92 	cmp.w	r2, #1168	; 0x490
 800299c:	f000 829d 	beq.w	8002eda <RI_SetRegCommandParser+0x6ce>
 80029a0:	f240 8130 	bls.w	8002c04 <RI_SetRegCommandParser+0x3f8>
 80029a4:	f5b2 6f09 	cmp.w	r2, #2192	; 0x890
 80029a8:	d05d      	beq.n	8002a66 <RI_SetRegCommandParser+0x25a>
 80029aa:	d94f      	bls.n	8002a4c <RI_SetRegCommandParser+0x240>
 80029ac:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 80029b0:	d145      	bne.n	8002a3e <RI_SetRegCommandParser+0x232>
            currComp = MCI_GetIqdref(pMCIN);
 80029b2:	488e      	ldr	r0, [pc, #568]	; (8002bec <RI_SetRegCommandParser+0x3e0>)
 80029b4:	f7fe ff32 	bl	800181c <MCI_GetIqdref>
 80029b8:	9005      	str	r0, [sp, #20]
            currComp.q = (int16_t)regdata16;
 80029ba:	f8ad 5014 	strh.w	r5, [sp, #20]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80029be:	488b      	ldr	r0, [pc, #556]	; (8002bec <RI_SetRegCommandParser+0x3e0>)
 80029c0:	9905      	ldr	r1, [sp, #20]
 80029c2:	f7fe fe1f 	bl	8001604 <MCI_SetCurrentReferences>
            break;
 80029c6:	f1aa 0304 	sub.w	r3, sl, #4
 80029ca:	1d25      	adds	r5, r4, #4
 80029cc:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 80029ce:	2000      	movs	r0, #0
 80029d0:	e754      	b.n	800287c <RI_SetRegCommandParser+0x70>
        switch (regID)
 80029d2:	2a88      	cmp	r2, #136	; 0x88
 80029d4:	f000 81b5 	beq.w	8002d42 <RI_SetRegCommandParser+0x536>
 80029d8:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 80029dc:	f1aa 0a03 	sub.w	sl, sl, #3
 80029e0:	2848      	cmp	r0, #72	; 0x48
 80029e2:	fa0f f38a 	sxth.w	r3, sl
 80029e6:	f104 0503 	add.w	r5, r4, #3
 80029ea:	d0c7      	beq.n	800297c <RI_SetRegCommandParser+0x170>
            retVal = MCP_ERROR_UNKNOWN_REG;
 80029ec:	2005      	movs	r0, #5
            break;
 80029ee:	e745      	b.n	800287c <RI_SetRegCommandParser+0x70>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80029f0:	2008      	movs	r0, #8
}
 80029f2:	b009      	add	sp, #36	; 0x24
 80029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80029f8:	2807      	cmp	r0, #7
 80029fa:	f040 8193 	bne.w	8002d24 <RI_SetRegCommandParser+0x518>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	b009      	add	sp, #36	; 0x24
 8002a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a06:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002a0a:	2818      	cmp	r0, #24
 8002a0c:	d0b1      	beq.n	8002972 <RI_SetRegCommandParser+0x166>
            break;
 8002a0e:	f1aa 0a06 	sub.w	sl, sl, #6
 8002a12:	fa0f f38a 	sxth.w	r3, sl
 8002a16:	1da5      	adds	r5, r4, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a18:	2005      	movs	r0, #5
            break;
 8002a1a:	e72f      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002a1c:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 8002a20:	f000 81b8 	beq.w	8002d94 <RI_SetRegCommandParser+0x588>
 8002a24:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8002a28:	d1f1      	bne.n	8002a0e <RI_SetRegCommandParser+0x202>
            pFF[motorID]->wConstant_2 = (int32_t)regdata32;
 8002a2a:	4b71      	ldr	r3, [pc, #452]	; (8002bf0 <RI_SetRegCommandParser+0x3e4>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f1aa 0a06 	sub.w	sl, sl, #6
 8002a32:	fa0f f38a 	sxth.w	r3, sl
 8002a36:	1da5      	adds	r5, r4, #6
 8002a38:	6151      	str	r1, [r2, #20]
  uint8_t retVal = MCP_CMD_OK;
 8002a3a:	2000      	movs	r0, #0
            break;
 8002a3c:	e71e      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002a3e:	f240 80ed 	bls.w	8002c1c <RI_SetRegCommandParser+0x410>
            break;
 8002a42:	f1aa 0304 	sub.w	r3, sl, #4
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	1d25      	adds	r5, r4, #4
 8002a4a:	e7cf      	b.n	80029ec <RI_SetRegCommandParser+0x1e0>
 8002a4c:	f5b2 6fba 	cmp.w	r2, #1488	; 0x5d0
 8002a50:	d009      	beq.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002a52:	f240 8113 	bls.w	8002c7c <RI_SetRegCommandParser+0x470>
 8002a56:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002a5a:	d004      	beq.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002a5c:	f240 80ee 	bls.w	8002c3c <RI_SetRegCommandParser+0x430>
 8002a60:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002a64:	d1ed      	bne.n	8002a42 <RI_SetRegCommandParser+0x236>
            break;
 8002a66:	f1aa 0304 	sub.w	r3, sl, #4
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	1d25      	adds	r5, r4, #4
            retVal = MCP_ERROR_RO_REG;
 8002a6e:	2004      	movs	r0, #4
            break;
 8002a70:	e704      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002a72:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8002a76:	f000 822c 	beq.w	8002ed2 <RI_SetRegCommandParser+0x6c6>
 8002a7a:	d93f      	bls.n	8002afc <RI_SetRegCommandParser+0x2f0>
 8002a7c:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8002a80:	f000 8225 	beq.w	8002ece <RI_SetRegCommandParser+0x6c2>
 8002a84:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002a88:	d12a      	bne.n	8002ae0 <RI_SetRegCommandParser+0x2d4>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <RI_SetRegCommandParser+0x3e8>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	b229      	sxth	r1, r5
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002a90:	f002 fa78 	bl	8004f84 <PID_SetKP>
            break;
 8002a94:	f1aa 0304 	sub.w	r3, sl, #4
 8002a98:	1d25      	adds	r5, r4, #4
 8002a9a:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002a9c:	2000      	movs	r0, #0
            break;
 8002a9e:	e6ed      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002aa0:	f241 5310 	movw	r3, #5392	; 0x1510
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f000 81f8 	beq.w	8002e9a <RI_SetRegCommandParser+0x68e>
 8002aaa:	d949      	bls.n	8002b40 <RI_SetRegCommandParser+0x334>
 8002aac:	f241 6310 	movw	r3, #5648	; 0x1610
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f000 81f9 	beq.w	8002ea8 <RI_SetRegCommandParser+0x69c>
 8002ab6:	d936      	bls.n	8002b26 <RI_SetRegCommandParser+0x31a>
 8002ab8:	f641 03d0 	movw	r3, #6352	; 0x18d0
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f000 81f0 	beq.w	8002ea2 <RI_SetRegCommandParser+0x696>
 8002ac2:	d957      	bls.n	8002b74 <RI_SetRegCommandParser+0x368>
 8002ac4:	f641 1310 	movw	r3, #6416	; 0x1910
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d127      	bne.n	8002b1c <RI_SetRegCommandParser+0x310>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002acc:	484a      	ldr	r0, [pc, #296]	; (8002bf8 <RI_SetRegCommandParser+0x3ec>)
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f002 fa68 	bl	8004fa4 <PID_SetKPDivisorPOW2>
            break;
 8002ad4:	f1aa 0304 	sub.w	r3, sl, #4
 8002ad8:	1d25      	adds	r5, r4, #4
 8002ada:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002adc:	2000      	movs	r0, #0
            break;
 8002ade:	e6cd      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002ae0:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002ae4:	d1ad      	bne.n	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <RI_SetRegCommandParser+0x3f0>)
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	b229      	sxth	r1, r5
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002aec:	f002 fa4c 	bl	8004f88 <PID_SetKI>
            break;
 8002af0:	f1aa 0304 	sub.w	r3, sl, #4
 8002af4:	1d25      	adds	r5, r4, #4
 8002af6:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002af8:	2000      	movs	r0, #0
            break;
 8002afa:	e6bf      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002afc:	2ad0      	cmp	r2, #208	; 0xd0
 8002afe:	f000 81c9 	beq.w	8002e94 <RI_SetRegCommandParser+0x688>
 8002b02:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8002b06:	d13e      	bne.n	8002b86 <RI_SetRegCommandParser+0x37a>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b08:	483d      	ldr	r0, [pc, #244]	; (8002c00 <RI_SetRegCommandParser+0x3f4>)
 8002b0a:	b229      	sxth	r1, r5
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002b0c:	f002 fa6c 	bl	8004fe8 <PID_SetKD>
            break;
 8002b10:	f1aa 0304 	sub.w	r3, sl, #4
 8002b14:	1d25      	adds	r5, r4, #4
 8002b16:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002b18:	2000      	movs	r0, #0
            break;
 8002b1a:	e6af      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002b1c:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d0a0      	beq.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002b24:	e78d      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002b26:	f241 5390 	movw	r3, #5520	; 0x1590
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	f000 81c3 	beq.w	8002eb6 <RI_SetRegCommandParser+0x6aa>
 8002b30:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d12c      	bne.n	8002b92 <RI_SetRegCommandParser+0x386>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <RI_SetRegCommandParser+0x3f0>)
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	e7c7      	b.n	8002ad0 <RI_SetRegCommandParser+0x2c4>
 8002b40:	f241 0310 	movw	r3, #4112	; 0x1010
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d08e      	beq.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002b48:	d940      	bls.n	8002bcc <RI_SetRegCommandParser+0x3c0>
 8002b4a:	f241 4390 	movw	r3, #5264	; 0x1490
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	f000 81ae 	beq.w	8002eb0 <RI_SetRegCommandParser+0x6a4>
 8002b54:	d92d      	bls.n	8002bb2 <RI_SetRegCommandParser+0x3a6>
 8002b56:	f241 43d0 	movw	r3, #5328	; 0x14d0
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f47f af71 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002b60:	4827      	ldr	r0, [pc, #156]	; (8002c00 <RI_SetRegCommandParser+0x3f4>)
 8002b62:	4629      	mov	r1, r5
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b64:	f002 fa48 	bl	8004ff8 <PID_SetKDDivisorPOW2>
            break;
 8002b68:	f1aa 0304 	sub.w	r3, sl, #4
 8002b6c:	1d25      	adds	r5, r4, #4
 8002b6e:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002b70:	2000      	movs	r0, #0
            break;
 8002b72:	e683      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002b74:	f241 6350 	movw	r3, #5712	; 0x1650
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f47f af62 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <RI_SetRegCommandParser+0x3f0>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	4629      	mov	r1, r5
 8002b84:	e7ee      	b.n	8002b64 <RI_SetRegCommandParser+0x358>
 8002b86:	2a90      	cmp	r2, #144	; 0x90
 8002b88:	f47f af5b 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b8c:	481c      	ldr	r0, [pc, #112]	; (8002c00 <RI_SetRegCommandParser+0x3f4>)
 8002b8e:	b229      	sxth	r1, r5
 8002b90:	e77e      	b.n	8002a90 <RI_SetRegCommandParser+0x284>
 8002b92:	f241 5350 	movw	r3, #5456	; 0x1550
 8002b96:	429a      	cmp	r2, r3
 8002b98:	f47f af53 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <RI_SetRegCommandParser+0x3e8>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4629      	mov	r1, r5
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002ba2:	f002 fa0d 	bl	8004fc0 <PID_SetKIDivisorPOW2>
            break;
 8002ba6:	f1aa 0304 	sub.w	r3, sl, #4
 8002baa:	1d25      	adds	r5, r4, #4
 8002bac:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002bae:	2000      	movs	r0, #0
            break;
 8002bb0:	e664      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002bb2:	f241 0350 	movw	r3, #4176	; 0x1050
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f43f af55 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002bbc:	f241 4350 	movw	r3, #5200	; 0x1450
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f47f af3e 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002bc6:	480e      	ldr	r0, [pc, #56]	; (8002c00 <RI_SetRegCommandParser+0x3f4>)
 8002bc8:	4629      	mov	r1, r5
 8002bca:	e781      	b.n	8002ad0 <RI_SetRegCommandParser+0x2c4>
 8002bcc:	f5b2 6f49 	cmp.w	r2, #3216	; 0xc90
 8002bd0:	f43f af49 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002bd4:	d943      	bls.n	8002c5e <RI_SetRegCommandParser+0x452>
 8002bd6:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8002bda:	d03a      	beq.n	8002c52 <RI_SetRegCommandParser+0x446>
 8002bdc:	d935      	bls.n	8002c4a <RI_SetRegCommandParser+0x43e>
 8002bde:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002be2:	f5b0 6f79 	cmp.w	r0, #3984	; 0xf90
 8002be6:	f47f af2c 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
 8002bea:	e73c      	b.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002bec:	20001778 	.word	0x20001778
 8002bf0:	200004bc 	.word	0x200004bc
 8002bf4:	200004c4 	.word	0x200004c4
 8002bf8:	20000334 	.word	0x20000334
 8002bfc:	200004c8 	.word	0x200004c8
 8002c00:	20000190 	.word	0x20000190
 8002c04:	f5b2 7f64 	cmp.w	r2, #912	; 0x390
 8002c08:	f000 8157 	beq.w	8002eba <RI_SetRegCommandParser+0x6ae>
 8002c0c:	d90f      	bls.n	8002c2e <RI_SetRegCommandParser+0x422>
 8002c0e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002c12:	f47f af16 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002c16:	48ba      	ldr	r0, [pc, #744]	; (8002f00 <RI_SetRegCommandParser+0x6f4>)
 8002c18:	b229      	sxth	r1, r5
 8002c1a:	e767      	b.n	8002aec <RI_SetRegCommandParser+0x2e0>
 8002c1c:	f5b2 6f0d 	cmp.w	r2, #2256	; 0x8d0
 8002c20:	f43f af21 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c24:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8002c28:	f43f af1d 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c2c:	e709      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002c2e:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002c32:	d128      	bne.n	8002c86 <RI_SetRegCommandParser+0x47a>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002c34:	4bb3      	ldr	r3, [pc, #716]	; (8002f04 <RI_SetRegCommandParser+0x6f8>)
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	b229      	sxth	r1, r5
 8002c3a:	e767      	b.n	8002b0c <RI_SetRegCommandParser+0x300>
 8002c3c:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002c40:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8002c44:	f47f aefd 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
 8002c48:	e70d      	b.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c4a:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8002c4e:	f47f aef8 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
 8002c52:	f1aa 0304 	sub.w	r3, sl, #4
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	1d25      	adds	r5, r4, #4
  uint8_t retVal = MCP_CMD_OK;
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e60e      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002c5e:	f5b2 6f35 	cmp.w	r2, #2896	; 0xb50
 8002c62:	f43f af00 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c66:	d92b      	bls.n	8002cc0 <RI_SetRegCommandParser+0x4b4>
 8002c68:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8002c6c:	f43f aefb 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c70:	d91f      	bls.n	8002cb2 <RI_SetRegCommandParser+0x4a6>
 8002c72:	f5b2 6f45 	cmp.w	r2, #3152	; 0xc50
 8002c76:	f43f aef6 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c7a:	e6e2      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002c7c:	f5b2 6fb2 	cmp.w	r2, #1424	; 0x590
 8002c80:	f43f aef1 	beq.w	8002a66 <RI_SetRegCommandParser+0x25a>
 8002c84:	e6dd      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002c86:	f5b2 7f54 	cmp.w	r2, #848	; 0x350
 8002c8a:	f47f aeda 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002c8e:	aa05      	add	r2, sp, #20
 8002c90:	f10d 0112 	add.w	r1, sp, #18
 8002c94:	489c      	ldr	r0, [pc, #624]	; (8002f08 <RI_SetRegCommandParser+0x6fc>)
 8002c96:	f003 fce3 	bl	8006660 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8002c9a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8002c9e:	b229      	sxth	r1, r5
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002ca0:	4899      	ldr	r0, [pc, #612]	; (8002f08 <RI_SetRegCommandParser+0x6fc>)
 8002ca2:	f003 fce5 	bl	8006670 <STO_PLL_SetObserverGains>
            break;
 8002ca6:	f1aa 0304 	sub.w	r3, sl, #4
 8002caa:	1d25      	adds	r5, r4, #4
 8002cac:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e5e4      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002cb2:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002cb6:	f5b0 6f39 	cmp.w	r0, #2960	; 0xb90
 8002cba:	f47f aec2 	bne.w	8002a42 <RI_SetRegCommandParser+0x236>
 8002cbe:	e6d2      	b.n	8002a66 <RI_SetRegCommandParser+0x25a>
 8002cc0:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 8002cc4:	d0e3      	beq.n	8002c8e <RI_SetRegCommandParser+0x482>
 8002cc6:	d903      	bls.n	8002cd0 <RI_SetRegCommandParser+0x4c4>
 8002cc8:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002ccc:	d0df      	beq.n	8002c8e <RI_SetRegCommandParser+0x482>
 8002cce:	e6b8      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002cd0:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 8002cd4:	d0db      	beq.n	8002c8e <RI_SetRegCommandParser+0x482>
 8002cd6:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 8002cda:	d0d8      	beq.n	8002c8e <RI_SetRegCommandParser+0x482>
 8002cdc:	e6b1      	b.n	8002a42 <RI_SetRegCommandParser+0x236>
 8002cde:	2aa8      	cmp	r2, #168	; 0xa8
 8002ce0:	d002      	beq.n	8002ce8 <RI_SetRegCommandParser+0x4dc>
 8002ce2:	d915      	bls.n	8002d10 <RI_SetRegCommandParser+0x504>
 8002ce4:	2ae8      	cmp	r2, #232	; 0xe8
 8002ce6:	d117      	bne.n	8002d18 <RI_SetRegCommandParser+0x50c>
 8002ce8:	eba8 030a 	sub.w	r3, r8, sl
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	4455      	add	r5, sl
              retVal = MCP_ERROR_RO_REG;
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	e5c3      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002cf4:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 8002cf8:	d056      	beq.n	8002da8 <RI_SetRegCommandParser+0x59c>
 8002cfa:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 8002cfe:	d10b      	bne.n	8002d18 <RI_SetRegCommandParser+0x50c>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002d00:	4882      	ldr	r0, [pc, #520]	; (8002f0c <RI_SetRegCommandParser+0x700>)
 8002d02:	f002 f871 	bl	8004de8 <MCPA_cfgLog>
 8002d06:	eba8 030a 	sub.w	r3, r8, sl
 8002d0a:	4455      	add	r5, sl
              break;
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	e5b5      	b.n	800287c <RI_SetRegCommandParser+0x70>
 8002d10:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002d14:	2828      	cmp	r0, #40	; 0x28
 8002d16:	d0e7      	beq.n	8002ce8 <RI_SetRegCommandParser+0x4dc>
              break;
 8002d18:	eba8 030a 	sub.w	r3, r8, sl
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	4455      	add	r5, sl
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002d20:	2005      	movs	r0, #5
              break;
 8002d22:	e5ab      	b.n	800287c <RI_SetRegCommandParser+0x70>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002d24:	280a      	cmp	r0, #10
 8002d26:	f43f ae6a 	beq.w	80029fe <RI_SetRegCommandParser+0x1f2>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	9201      	str	r2, [sp, #4]
 8002d2e:	e5b5      	b.n	800289c <RI_SetRegCommandParser+0x90>
 8002d30:	eba8 0a02 	sub.w	sl, r8, r2
 8002d34:	fa0f f38a 	sxth.w	r3, sl
 8002d38:	4415      	add	r5, r2
        retVal = MCP_ERROR_RO_REG;
 8002d3a:	2004      	movs	r0, #4
 8002d3c:	e59e      	b.n	800287c <RI_SetRegCommandParser+0x70>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002d3e:	200a      	movs	r0, #10
 8002d40:	e59c      	b.n	800287c <RI_SetRegCommandParser+0x70>
            uint8_t regdata8 = *data;
 8002d42:	78a3      	ldrb	r3, [r4, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d07f      	beq.n	8002e48 <RI_SetRegCommandParser+0x63c>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	f000 808b 	beq.w	8002e64 <RI_SetRegCommandParser+0x658>
 8002d4e:	f1aa 0a03 	sub.w	sl, sl, #3
 8002d52:	fa0f f38a 	sxth.w	r3, sl
 8002d56:	1ce5      	adds	r5, r4, #3
  uint8_t retVal = MCP_CMD_OK;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e58f      	b.n	800287c <RI_SetRegCommandParser+0x70>
            pFF[motorID]->wConstant_1Q = (int32_t)regdata32;
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <RI_SetRegCommandParser+0x704>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f1aa 0a06 	sub.w	sl, sl, #6
 8002d64:	fa0f f38a 	sxth.w	r3, sl
 8002d68:	1da5      	adds	r5, r4, #6
 8002d6a:	6111      	str	r1, [r2, #16]
  uint8_t retVal = MCP_CMD_OK;
 8002d6c:	2000      	movs	r0, #0
            break;
 8002d6e:	e585      	b.n	800287c <RI_SetRegCommandParser+0x70>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d70:	4a68      	ldr	r2, [pc, #416]	; (8002f14 <RI_SetRegCommandParser+0x708>)
 8002d72:	4869      	ldr	r0, [pc, #420]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002d74:	b20b      	sxth	r3, r1
 8002d76:	fb82 2103 	smull	r2, r1, r2, r3
 8002d7a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002d7e:	b209      	sxth	r1, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	f1aa 0a06 	sub.w	sl, sl, #6
 8002d86:	f7fe fc25 	bl	80015d4 <MCI_ExecSpeedRamp>
            break;
 8002d8a:	1da5      	adds	r5, r4, #6
 8002d8c:	fa0f f38a 	sxth.w	r3, sl
  uint8_t retVal = MCP_CMD_OK;
 8002d90:	2000      	movs	r0, #0
            break;
 8002d92:	e573      	b.n	800287c <RI_SetRegCommandParser+0x70>
            pFF[motorID]->wConstant_1D = (int32_t)regdata32;
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <RI_SetRegCommandParser+0x704>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	f1aa 0a06 	sub.w	sl, sl, #6
 8002d9c:	fa0f f38a 	sxth.w	r3, sl
 8002da0:	1da5      	adds	r5, r4, #6
 8002da2:	60d1      	str	r1, [r2, #12]
  uint8_t retVal = MCP_CMD_OK;
 8002da4:	2000      	movs	r0, #0
            break;
 8002da6:	e569      	b.n	800287c <RI_SetRegCommandParser+0x70>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002da8:	6861      	ldr	r1, [r4, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002daa:	485b      	ldr	r0, [pc, #364]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002dac:	9105      	str	r1, [sp, #20]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002dae:	f7fe fc29 	bl	8001604 <MCI_SetCurrentReferences>
              break;
 8002db2:	eba8 030a 	sub.w	r3, r8, sl
 8002db6:	4455      	add	r5, sl
 8002db8:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002dba:	2000      	movs	r0, #0
 8002dbc:	e55e      	b.n	800287c <RI_SetRegCommandParser+0x70>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002dbe:	f01c 0307 	ands.w	r3, ip, #7
 8002dc2:	d12a      	bne.n	8002e1a <RI_SetRegCommandParser+0x60e>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002dc4:	fa5f fc8c 	uxtb.w	ip, ip
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002dc8:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 8002dcc:	d825      	bhi.n	8002e1a <RI_SetRegCommandParser+0x60e>
                for (i = 0; i <nbrOfPhase; i++)
 8002dce:	ea5f 02dc 	movs.w	r2, ip, lsr #3
 8002dd2:	d020      	beq.n	8002e16 <RI_SetRegCommandParser+0x60a>
 8002dd4:	e9cd 8502 	strd	r8, r5, [sp, #8]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4690      	mov	r8, r2
 8002ddc:	461d      	mov	r5, r3
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002dde:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8002de2:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <RI_SetRegCommandParser+0x708>)
 8002de4:	fb83 3200 	smull	r3, r2, r3, r0
 8002de8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8002dec:	f8ad 2016 	strh.w	r2, [sp, #22]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002df0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8002df4:	f8ad 2018 	strh.w	r2, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002df8:	8962      	ldrh	r2, [r4, #10]
 8002dfa:	f8ad 2014 	strh.w	r2, [sp, #20]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002dfe:	4847      	ldr	r0, [pc, #284]	; (8002f1c <RI_SetRegCommandParser+0x710>)
 8002e00:	3501      	adds	r5, #1
 8002e02:	aa05      	add	r2, sp, #20
 8002e04:	f003 f858 	bl	8005eb8 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8002e08:	b2e9      	uxtb	r1, r5
 8002e0a:	4541      	cmp	r1, r8
 8002e0c:	f104 0408 	add.w	r4, r4, #8
 8002e10:	d3e5      	bcc.n	8002dde <RI_SetRegCommandParser+0x5d2>
 8002e12:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
  uint8_t retVal = MCP_CMD_OK;
 8002e16:	2000      	movs	r0, #0
 8002e18:	e000      	b.n	8002e1c <RI_SetRegCommandParser+0x610>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002e1a:	200a      	movs	r0, #10
              break;
 8002e1c:	eba8 030a 	sub.w	r3, r8, sl
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4455      	add	r5, sl
 8002e24:	e52a      	b.n	800287c <RI_SetRegCommandParser+0x70>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002e26:	6863      	ldr	r3, [r4, #4]
 8002e28:	493a      	ldr	r1, [pc, #232]	; (8002f14 <RI_SetRegCommandParser+0x708>)
 8002e2a:	8922      	ldrh	r2, [r4, #8]
 8002e2c:	fb81 0103 	smull	r0, r1, r1, r3
 8002e30:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002e34:	4838      	ldr	r0, [pc, #224]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002e36:	b209      	sxth	r1, r1
 8002e38:	f7fe fbcc 	bl	80015d4 <MCI_ExecSpeedRamp>
              break;
 8002e3c:	eba8 030a 	sub.w	r3, r8, sl
 8002e40:	4455      	add	r5, sl
 8002e42:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002e44:	2000      	movs	r0, #0
              break;
 8002e46:	e519      	b.n	800287c <RI_SetRegCommandParser+0x70>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002e48:	4833      	ldr	r0, [pc, #204]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002e4a:	f7fe fd11 	bl	8001870 <MCI_GetTeref>
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4601      	mov	r1, r0
 8002e52:	4831      	ldr	r0, [pc, #196]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002e54:	f7fe fbca 	bl	80015ec <MCI_ExecTorqueRamp>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002e58:	f1aa 0303 	sub.w	r3, sl, #3
 8002e5c:	1ce5      	adds	r5, r4, #3
 8002e5e:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002e60:	2000      	movs	r0, #0
 8002e62:	e50b      	b.n	800287c <RI_SetRegCommandParser+0x70>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002e64:	482c      	ldr	r0, [pc, #176]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002e66:	f7fe fcab 	bl	80017c0 <MCI_GetMecSpeedRefUnit>
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	482a      	ldr	r0, [pc, #168]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002e70:	f7fe fbb0 	bl	80015d4 <MCI_ExecSpeedRamp>
 8002e74:	f1aa 0303 	sub.w	r3, sl, #3
 8002e78:	1ce5      	adds	r5, r4, #3
 8002e7a:	b21b      	sxth	r3, r3
  uint8_t retVal = MCP_CMD_OK;
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e4fd      	b.n	800287c <RI_SetRegCommandParser+0x70>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e80:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 8002e82:	460a      	mov	r2, r1
  const char_t *tempsrcString = srcString;
 8002e84:	4628      	mov	r0, r5
 8002e86:	e55b      	b.n	8002940 <RI_SetRegCommandParser+0x134>
 8002e88:	f1aa 0303 	sub.w	r3, sl, #3
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	1ce5      	adds	r5, r4, #3
        retVal = MCP_ERROR_RO_REG;
 8002e90:	2004      	movs	r0, #4
 8002e92:	e4f3      	b.n	800287c <RI_SetRegCommandParser+0x70>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e94:	4822      	ldr	r0, [pc, #136]	; (8002f20 <RI_SetRegCommandParser+0x714>)
 8002e96:	b229      	sxth	r1, r5
 8002e98:	e628      	b.n	8002aec <RI_SetRegCommandParser+0x2e0>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <RI_SetRegCommandParser+0x6f8>)
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	e616      	b.n	8002ad0 <RI_SetRegCommandParser+0x2c4>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002ea2:	4817      	ldr	r0, [pc, #92]	; (8002f00 <RI_SetRegCommandParser+0x6f4>)
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	e67c      	b.n	8002ba2 <RI_SetRegCommandParser+0x396>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <RI_SetRegCommandParser+0x718>)
 8002eaa:	4629      	mov	r1, r5
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	e678      	b.n	8002ba2 <RI_SetRegCommandParser+0x396>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002eb0:	481b      	ldr	r0, [pc, #108]	; (8002f20 <RI_SetRegCommandParser+0x714>)
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	e675      	b.n	8002ba2 <RI_SetRegCommandParser+0x396>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <RI_SetRegCommandParser+0x6f8>)
 8002eb8:	e662      	b.n	8002b80 <RI_SetRegCommandParser+0x374>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002eba:	aa05      	add	r2, sp, #20
 8002ebc:	f10d 0112 	add.w	r1, sp, #18
 8002ec0:	4811      	ldr	r0, [pc, #68]	; (8002f08 <RI_SetRegCommandParser+0x6fc>)
 8002ec2:	f003 fbcd 	bl	8006660 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002ec6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002eca:	b22a      	sxth	r2, r5
 8002ecc:	e6e8      	b.n	8002ca0 <RI_SetRegCommandParser+0x494>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <RI_SetRegCommandParser+0x718>)
 8002ed0:	e6b1      	b.n	8002c36 <RI_SetRegCommandParser+0x42a>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <RI_SetRegCommandParser+0x718>)
 8002ed4:	b229      	sxth	r1, r5
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	e5da      	b.n	8002a90 <RI_SetRegCommandParser+0x284>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002eda:	4809      	ldr	r0, [pc, #36]	; (8002f00 <RI_SetRegCommandParser+0x6f4>)
 8002edc:	b229      	sxth	r1, r5
 8002ede:	e5d7      	b.n	8002a90 <RI_SetRegCommandParser+0x284>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <RI_SetRegCommandParser+0x6f8>)
 8002ee2:	b229      	sxth	r1, r5
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	e601      	b.n	8002aec <RI_SetRegCommandParser+0x2e0>
            currComp = MCI_GetIqdref(pMCIN);
 8002ee8:	480b      	ldr	r0, [pc, #44]	; (8002f18 <RI_SetRegCommandParser+0x70c>)
 8002eea:	f7fe fc97 	bl	800181c <MCI_GetIqdref>
 8002eee:	9005      	str	r0, [sp, #20]
            currComp.d = (int16_t)regdata16;
 8002ef0:	f8ad 5016 	strh.w	r5, [sp, #22]
 8002ef4:	e563      	b.n	80029be <RI_SetRegCommandParser+0x1b2>
 8002ef6:	9801      	ldr	r0, [sp, #4]
      if (MCP_CMD_OK == retVal)
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f43f ad04 	beq.w	8002906 <RI_SetRegCommandParser+0xfa>
 8002efe:	e578      	b.n	80029f2 <RI_SetRegCommandParser+0x1e6>
 8002f00:	20000334 	.word	0x20000334
 8002f04:	200004c4 	.word	0x200004c4
 8002f08:	20000300 	.word	0x20000300
 8002f0c:	200004e8 	.word	0x200004e8
 8002f10:	200004bc 	.word	0x200004bc
 8002f14:	2aaaaaab 	.word	0x2aaaaaab
 8002f18:	20001778 	.word	0x20001778
 8002f1c:	20000274 	.word	0x20000274
 8002f20:	20000190 	.word	0x20000190
 8002f24:	200004c8 	.word	0x200004c8

08002f28 <RI_GetRegCommandParser>:
{
 8002f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002f2c:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    pHandle->txLength = 0;
 8002f30:	2300      	movs	r3, #0
    uint8_t * txData = pHandle->txBuffer;
 8002f32:	e9d0 9601 	ldrd	r9, r6, [r0, #4]
{
 8002f36:	b09d      	sub	sp, #116	; 0x74
    pHandle->txLength = 0;
 8002f38:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002f3a:	f1b8 0f00 	cmp.w	r8, #0
 8002f3e:	f000 83ae 	beq.w	800369e <RI_GetRegCommandParser+0x776>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002f42:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 8003310 <RI_GetRegCommandParser+0x3e8>
 8002f46:	4607      	mov	r7, r0
 8002f48:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002f4a:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002f4c:	f835 3b02 	ldrh.w	r3, [r5], #2
    uint16_t regID = dataID & REG_MASK;
 8002f50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f54:	3a08      	subs	r2, #8
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	b29b      	uxth	r3, r3
    switch (typeID)
 8002f5c:	2a20      	cmp	r2, #32
 8002f5e:	d812      	bhi.n	8002f86 <RI_GetRegCommandParser+0x5e>
 8002f60:	e8df f002 	tbb	[pc, r2]
 8002f64:	111111ce 	.word	0x111111ce
 8002f68:	11111111 	.word	0x11111111
 8002f6c:	11111167 	.word	0x11111167
 8002f70:	11111111 	.word	0x11111111
 8002f74:	111111dc 	.word	0x111111dc
 8002f78:	11111111 	.word	0x11111111
 8002f7c:	11111131 	.word	0x11111131
 8002f80:	11111111 	.word	0x11111111
 8002f84:	15          	.byte	0x15
 8002f85:	00          	.byte	0x00
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8002f86:	2007      	movs	r0, #7
}
 8002f88:	b01d      	add	sp, #116	; 0x74
 8002f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002f8e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002f92:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8002f96:	f000 8326 	beq.w	80035e6 <RI_GetRegCommandParser+0x6be>
 8002f9a:	f200 812d 	bhi.w	80031f8 <RI_GetRegCommandParser+0x2d0>
 8002f9e:	2ba8      	cmp	r3, #168	; 0xa8
 8002fa0:	f000 82e4 	beq.w	800356c <RI_GetRegCommandParser+0x644>
 8002fa4:	f200 811f 	bhi.w	80031e6 <RI_GetRegCommandParser+0x2be>
 8002fa8:	2b28      	cmp	r3, #40	; 0x28
 8002faa:	f000 82cf 	beq.w	800354c <RI_GetRegCommandParser+0x624>
 8002fae:	2b68      	cmp	r3, #104	; 0x68
 8002fb0:	f040 80b2 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002fb4:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8002fb6:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002fb8:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002fba:	f200 834f 	bhi.w	800365c <RI_GetRegCommandParser+0x734>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002fbe:	2008      	movs	r0, #8
}
 8002fc0:	b01d      	add	sp, #116	; 0x74
 8002fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc8:	f000 8267 	beq.w	800349a <RI_GetRegCommandParser+0x572>
 8002fcc:	f200 80ed 	bhi.w	80031aa <RI_GetRegCommandParser+0x282>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	f000 827a 	beq.w	80034ca <RI_GetRegCommandParser+0x5a2>
 8002fd6:	2b60      	cmp	r3, #96	; 0x60
 8002fd8:	f040 809e 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002fdc:	4bc3      	ldr	r3, [pc, #780]	; (80032ec <RI_GetRegCommandParser+0x3c4>)
 8002fde:	f993 1000 	ldrsb.w	r1, [r3]
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	f000 82ae 	beq.w	8003544 <RI_GetRegCommandParser+0x61c>
 8002fe8:	2c01      	cmp	r4, #1
 8002fea:	f340 8254 	ble.w	8003496 <RI_GetRegCommandParser+0x56e>
 8002fee:	469c      	mov	ip, r3
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f1c6 0201 	rsb	r2, r6, #1
 8002ff6:	e002      	b.n	8002ffe <RI_GetRegCommandParser+0xd6>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	f280 824c 	bge.w	8003496 <RI_GetRegCommandParser+0x56e>
    *tempdestString = *tempsrcString;
 8002ffe:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003002:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003006:	1883      	adds	r3, r0, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2900      	cmp	r1, #0
 800300c:	d1f4      	bne.n	8002ff8 <RI_GetRegCommandParser+0xd0>
 800300e:	4619      	mov	r1, r3
    *tempdestString = (int8_t)0;
 8003010:	2200      	movs	r2, #0
 8003012:	b2a4      	uxth	r4, r4
 8003014:	7002      	strb	r2, [r0, #0]
        pHandle->txLength += size;
 8003016:	89f8      	ldrh	r0, [r7, #14]
    while (rxLength > 0U)
 8003018:	eb09 0208 	add.w	r2, r9, r8
        freeSpaceS16 = freeSpaceS16-size;
 800301c:	1ae4      	subs	r4, r4, r3
        pHandle->txLength += size;
 800301e:	4418      	add	r0, r3
    while (rxLength > 0U)
 8003020:	b292      	uxth	r2, r2
 8003022:	b2ab      	uxth	r3, r5
 8003024:	4293      	cmp	r3, r2
        freeSpaceS16 = freeSpaceS16-size;
 8003026:	b224      	sxth	r4, r4
        txData = txData+size;
 8003028:	440e      	add	r6, r1
        pHandle->txLength += size;
 800302a:	81f8      	strh	r0, [r7, #14]
    while (rxLength > 0U)
 800302c:	d18e      	bne.n	8002f4c <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800302e:	2000      	movs	r0, #0
 8003030:	e7aa      	b.n	8002f88 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 2U)
 8003032:	b2a4      	uxth	r4, r4
 8003034:	2c01      	cmp	r4, #1
 8003036:	d9c2      	bls.n	8002fbe <RI_GetRegCommandParser+0x96>
          switch (regID)
 8003038:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 800303c:	f000 835a 	beq.w	80036f4 <RI_GetRegCommandParser+0x7cc>
 8003040:	d924      	bls.n	800308c <RI_GetRegCommandParser+0x164>
 8003042:	f241 0210 	movw	r2, #4112	; 0x1010
 8003046:	4293      	cmp	r3, r2
 8003048:	f000 8366 	beq.w	8003718 <RI_GetRegCommandParser+0x7f0>
 800304c:	f240 8128 	bls.w	80032a0 <RI_GetRegCommandParser+0x378>
 8003050:	f241 5290 	movw	r2, #5520	; 0x1590
 8003054:	4293      	cmp	r3, r2
 8003056:	f000 8357 	beq.w	8003708 <RI_GetRegCommandParser+0x7e0>
 800305a:	f240 810f 	bls.w	800327c <RI_GetRegCommandParser+0x354>
 800305e:	f241 6250 	movw	r2, #5712	; 0x1650
 8003062:	4293      	cmp	r3, r2
 8003064:	f000 8379 	beq.w	800375a <RI_GetRegCommandParser+0x832>
 8003068:	f240 80f6 	bls.w	8003258 <RI_GetRegCommandParser+0x330>
 800306c:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8003070:	4293      	cmp	r3, r2
 8003072:	f000 836b 	beq.w	800374c <RI_GetRegCommandParser+0x824>
 8003076:	f641 1210 	movw	r2, #6416	; 0x1910
 800307a:	4293      	cmp	r3, r2
 800307c:	d14c      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800307e:	489c      	ldr	r0, [pc, #624]	; (80032f0 <RI_GetRegCommandParser+0x3c8>)
 8003080:	f001 ff8e 	bl	8004fa0 <PID_GetKPDivisorPOW2>
 8003084:	2102      	movs	r1, #2
 8003086:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003088:	460b      	mov	r3, r1
 800308a:	e7c4      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 800308c:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8003090:	f000 8355 	beq.w	800373e <RI_GetRegCommandParser+0x816>
 8003094:	d91a      	bls.n	80030cc <RI_GetRegCommandParser+0x1a4>
 8003096:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800309a:	f000 8346 	beq.w	800372a <RI_GetRegCommandParser+0x802>
 800309e:	f240 819d 	bls.w	80033dc <RI_GetRegCommandParser+0x4b4>
 80030a2:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80030a6:	f000 83ce 	beq.w	8003846 <RI_GetRegCommandParser+0x91e>
 80030aa:	f240 8185 	bls.w	80033b8 <RI_GetRegCommandParser+0x490>
 80030ae:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80030b2:	f000 83bd 	beq.w	8003830 <RI_GetRegCommandParser+0x908>
 80030b6:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80030ba:	d12d      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80030bc:	4650      	mov	r0, sl
 80030be:	f7fe fbbb 	bl	8001838 <MCI_GetVqd>
              break;
 80030c2:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80030c4:	9010      	str	r0, [sp, #64]	; 0x40
          *size = 2;
 80030c6:	460b      	mov	r3, r1
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80030c8:	8030      	strh	r0, [r6, #0]
              break;
 80030ca:	e7a4      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80030cc:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80030d0:	f000 83ac 	beq.w	800382c <RI_GetRegCommandParser+0x904>
 80030d4:	f240 8197 	bls.w	8003406 <RI_GetRegCommandParser+0x4de>
 80030d8:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80030dc:	f000 8399 	beq.w	8003812 <RI_GetRegCommandParser+0x8ea>
 80030e0:	f240 812e 	bls.w	8003340 <RI_GetRegCommandParser+0x418>
 80030e4:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 80030e8:	f000 8341 	beq.w	800376e <RI_GetRegCommandParser+0x846>
 80030ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80030f0:	d112      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 80030f2:	487f      	ldr	r0, [pc, #508]	; (80032f0 <RI_GetRegCommandParser+0x3c8>)
 80030f4:	f001 ff4e 	bl	8004f94 <PID_GetKI>
              break;
 80030f8:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 80030fa:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80030fc:	460b      	mov	r3, r1
              break;
 80030fe:	e78a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
        if (freeSpace > 0U)
 8003100:	2c00      	cmp	r4, #0
 8003102:	f43f af5c 	beq.w	8002fbe <RI_GetRegCommandParser+0x96>
          switch (regID)
 8003106:	2b88      	cmp	r3, #136	; 0x88
 8003108:	f000 8206 	beq.w	8003518 <RI_GetRegCommandParser+0x5f0>
 800310c:	2bc8      	cmp	r3, #200	; 0xc8
 800310e:	f000 81fb 	beq.w	8003508 <RI_GetRegCommandParser+0x5e0>
 8003112:	2b48      	cmp	r3, #72	; 0x48
 8003114:	f000 81f0 	beq.w	80034f8 <RI_GetRegCommandParser+0x5d0>
 8003118:	2005      	movs	r0, #5
  return (retVal);
 800311a:	e735      	b.n	8002f88 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 4U)
 800311c:	b2a4      	uxth	r4, r4
 800311e:	2c03      	cmp	r4, #3
 8003120:	f67f af4d 	bls.w	8002fbe <RI_GetRegCommandParser+0x96>
          switch (regID)
 8003124:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003128:	f000 8273 	beq.w	8003612 <RI_GetRegCommandParser+0x6ea>
 800312c:	d913      	bls.n	8003156 <RI_GetRegCommandParser+0x22e>
 800312e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003132:	f000 8275 	beq.w	8003620 <RI_GetRegCommandParser+0x6f8>
 8003136:	d92a      	bls.n	800318e <RI_GetRegCommandParser+0x266>
 8003138:	f641 3258 	movw	r2, #7000	; 0x1b58
 800313c:	4293      	cmp	r3, r2
 800313e:	d1eb      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003140:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <RI_GetRegCommandParser+0x3cc>)
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f001 ffc0 	bl	80050c8 <PQD_GetAvrgElMotorPowerW>
 8003148:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	6033      	str	r3, [r6, #0]
 8003150:	2104      	movs	r1, #4
          *size = 4;
 8003152:	460b      	mov	r3, r1
 8003154:	e75f      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003156:	2b98      	cmp	r3, #152	; 0x98
 8003158:	f000 8257 	beq.w	800360a <RI_GetRegCommandParser+0x6e2>
 800315c:	d908      	bls.n	8003170 <RI_GetRegCommandParser+0x248>
 800315e:	2bd8      	cmp	r3, #216	; 0xd8
 8003160:	d1da      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8003162:	4865      	ldr	r0, [pc, #404]	; (80032f8 <RI_GetRegCommandParser+0x3d0>)
 8003164:	f003 fa92 	bl	800668c <STO_PLL_GetEstimatedBemfLevel>
 8003168:	2104      	movs	r1, #4
 800316a:	6030      	str	r0, [r6, #0]
          *size = 4;
 800316c:	460b      	mov	r3, r1
 800316e:	e752      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003170:	2b18      	cmp	r3, #24
 8003172:	f000 81e0 	beq.w	8003536 <RI_GetRegCommandParser+0x60e>
 8003176:	2b58      	cmp	r3, #88	; 0x58
 8003178:	d1ce      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800317a:	4650      	mov	r0, sl
 800317c:	f7fe fb18 	bl	80017b0 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003180:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003184:	0040      	lsls	r0, r0, #1
 8003186:	2104      	movs	r1, #4
 8003188:	6030      	str	r0, [r6, #0]
          *size = 4;
 800318a:	460b      	mov	r3, r1
 800318c:	e743      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 800318e:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8003192:	f000 81c9 	beq.w	8003528 <RI_GetRegCommandParser+0x600>
 8003196:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800319a:	d1bd      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata32 = pFF[motorID]->wConstant_1D;
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <RI_GetRegCommandParser+0x3d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2104      	movs	r1, #4
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	6033      	str	r3, [r6, #0]
          *size = 4;
 80031a6:	460b      	mov	r3, r1
 80031a8:	e735      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80031aa:	2be0      	cmp	r3, #224	; 0xe0
 80031ac:	d1b4      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <RI_GetRegCommandParser+0x3d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80031b2:	f993 1024 	ldrsb.w	r1, [r3, #36]	; 0x24
 80031b6:	2900      	cmp	r1, #0
 80031b8:	f000 81c4 	beq.w	8003544 <RI_GetRegCommandParser+0x61c>
 80031bc:	2c01      	cmp	r4, #1
 80031be:	f340 816a 	ble.w	8003496 <RI_GetRegCommandParser+0x56e>
 80031c2:	f103 0c24 	add.w	ip, r3, #36	; 0x24
 80031c6:	4630      	mov	r0, r6
 80031c8:	f1c6 0201 	rsb	r2, r6, #1
 80031cc:	e002      	b.n	80031d4 <RI_GetRegCommandParser+0x2ac>
 80031ce:	42a3      	cmp	r3, r4
 80031d0:	f280 8161 	bge.w	8003496 <RI_GetRegCommandParser+0x56e>
    *tempdestString = *tempsrcString;
 80031d4:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80031d8:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80031dc:	1883      	adds	r3, r0, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d1f4      	bne.n	80031ce <RI_GetRegCommandParser+0x2a6>
 80031e4:	e713      	b.n	800300e <RI_GetRegCommandParser+0xe6>
 80031e6:	2be8      	cmp	r3, #232	; 0xe8
 80031e8:	d196      	bne.n	8003118 <RI_GetRegCommandParser+0x1f0>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80031ea:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 80031ec:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80031ee:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80031f0:	f67f aee5 	bls.w	8002fbe <RI_GetRegCommandParser+0x96>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <RI_GetRegCommandParser+0x3dc>)
 80031f6:	e1bf      	b.n	8003578 <RI_GetRegCommandParser+0x650>
 80031f8:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 80031fc:	f000 81cb 	beq.w	8003596 <RI_GetRegCommandParser+0x66e>
 8003200:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003204:	d114      	bne.n	8003230 <RI_GetRegCommandParser+0x308>
            *rawSize = 4;
 8003206:	2304      	movs	r3, #4
 8003208:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800320a:	4650      	mov	r0, sl
 800320c:	f7fe fb06 	bl	800181c <MCI_GetIqdref>
 8003210:	4603      	mov	r3, r0
 8003212:	8070      	strh	r0, [r6, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003214:	4650      	mov	r0, sl
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003216:	9304      	str	r3, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003218:	f7fe fb00 	bl	800181c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 800321c:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800321e:	9003      	str	r0, [sp, #12]
        *size = (*rawSize) + 2U;
 8003220:	3302      	adds	r3, #2
 8003222:	b29b      	uxth	r3, r3
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003224:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8003228:	b2a4      	uxth	r4, r4
 800322a:	80b2      	strh	r2, [r6, #4]
      if (retVal == MCP_CMD_OK )
 800322c:	4619      	mov	r1, r3
 800322e:	e6f2      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003230:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8003234:	f47f af70 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
            *rawSize = 4;
 8003238:	2304      	movs	r3, #4
 800323a:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 800323c:	4650      	mov	r0, sl
 800323e:	f7fe faad 	bl	800179c <MCI_GetLastRampFinalTorque>
 8003242:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003244:	4650      	mov	r0, sl
 8003246:	f7fe faad 	bl	80017a4 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 800324a:	8833      	ldrh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800324c:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 800324e:	3302      	adds	r3, #2
 8003250:	b29b      	uxth	r3, r3
      if (retVal == MCP_CMD_OK )
 8003252:	b2a4      	uxth	r4, r4
 8003254:	4619      	mov	r1, r3
 8003256:	e6de      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003258:	f241 52d0 	movw	r2, #5584	; 0x15d0
 800325c:	4293      	cmp	r3, r2
 800325e:	f000 827e 	beq.w	800375e <RI_GetRegCommandParser+0x836>
 8003262:	f241 6210 	movw	r2, #5648	; 0x1610
 8003266:	4293      	cmp	r3, r2
 8003268:	f47f af56 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <RI_GetRegCommandParser+0x3e0>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	f001 fea0 	bl	8004fb4 <PID_GetKIDivisorPOW2>
 8003274:	2102      	movs	r1, #2
 8003276:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003278:	460b      	mov	r3, r1
 800327a:	e6cc      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 800327c:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8003280:	4293      	cmp	r3, r2
 8003282:	f000 82bf 	beq.w	8003804 <RI_GetRegCommandParser+0x8dc>
 8003286:	d96b      	bls.n	8003360 <RI_GetRegCommandParser+0x438>
 8003288:	f241 5210 	movw	r2, #5392	; 0x1510
 800328c:	4293      	cmp	r3, r2
 800328e:	f000 82b7 	beq.w	8003800 <RI_GetRegCommandParser+0x8d8>
 8003292:	f241 5250 	movw	r2, #5456	; 0x1550
 8003296:	4293      	cmp	r3, r2
 8003298:	f47f af3e 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <RI_GetRegCommandParser+0x3e4>)
 800329e:	e7e6      	b.n	800326e <RI_GetRegCommandParser+0x346>
 80032a0:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 80032a4:	f000 8214 	beq.w	80036d0 <RI_GetRegCommandParser+0x7a8>
 80032a8:	d934      	bls.n	8003314 <RI_GetRegCommandParser+0x3ec>
 80032aa:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 80032ae:	d01a      	beq.n	80032e6 <RI_GetRegCommandParser+0x3be>
 80032b0:	d912      	bls.n	80032d8 <RI_GetRegCommandParser+0x3b0>
 80032b2:	f5b3 6f79 	cmp.w	r3, #3984	; 0xf90
 80032b6:	f000 8202 	beq.w	80036be <RI_GetRegCommandParser+0x796>
 80032ba:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 80032be:	f47f af2b 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = FF_GetVqdff(pFF[motorID]).d;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <RI_GetRegCommandParser+0x3d4>)
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f001 fb7f 	bl	80049c8 <FF_GetVqdff>
              break;
 80032ca:	2102      	movs	r1, #2
              *regdata16 = FF_GetVqdff(pFF[motorID]).d;
 80032cc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80032d0:	9007      	str	r0, [sp, #28]
 80032d2:	8033      	strh	r3, [r6, #0]
          *size = 2;
 80032d4:	460b      	mov	r3, r1
              break;
 80032d6:	e69e      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80032d8:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 80032dc:	f000 826a 	beq.w	80037b4 <RI_GetRegCommandParser+0x88c>
 80032e0:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80032e4:	d15c      	bne.n	80033a0 <RI_GetRegCommandParser+0x478>
 80032e6:	2102      	movs	r1, #2
 80032e8:	460b      	mov	r3, r1
 80032ea:	e694      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80032ec:	08006a68 	.word	0x08006a68
 80032f0:	20000334 	.word	0x20000334
 80032f4:	200004c0 	.word	0x200004c0
 80032f8:	20000300 	.word	0x20000300
 80032fc:	200004bc 	.word	0x200004bc
 8003300:	200004dc 	.word	0x200004dc
 8003304:	200004d8 	.word	0x200004d8
 8003308:	200004c8 	.word	0x200004c8
 800330c:	200004c4 	.word	0x200004c4
 8003310:	20001778 	.word	0x20001778
 8003314:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003318:	f000 81ca 	beq.w	80036b0 <RI_GetRegCommandParser+0x788>
 800331c:	f240 8082 	bls.w	8003424 <RI_GetRegCommandParser+0x4fc>
 8003320:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003324:	f000 81bd 	beq.w	80036a2 <RI_GetRegCommandParser+0x77a>
 8003328:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 800332c:	f47f aef4 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003330:	48bf      	ldr	r0, [pc, #764]	; (8003630 <RI_GetRegCommandParser+0x708>)
 8003332:	f003 f981 	bl	8006638 <STO_PLL_GetEstimatedCurrent>
              break;
 8003336:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003338:	900c      	str	r0, [sp, #48]	; 0x30
          *size = 2;
 800333a:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800333c:	8030      	strh	r0, [r6, #0]
              break;
 800333e:	e66a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003340:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003344:	f000 81ce 	beq.w	80036e4 <RI_GetRegCommandParser+0x7bc>
 8003348:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800334c:	f47f aee4 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003350:	4bb8      	ldr	r3, [pc, #736]	; (8003634 <RI_GetRegCommandParser+0x70c>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	f001 fe4a 	bl	8004fec <PID_GetKD>
              break;
 8003358:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800335a:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800335c:	460b      	mov	r3, r1
              break;
 800335e:	e65a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003360:	f241 4250 	movw	r2, #5200	; 0x1450
 8003364:	4293      	cmp	r3, r2
 8003366:	f000 820e 	beq.w	8003786 <RI_GetRegCommandParser+0x85e>
 800336a:	f241 4290 	movw	r2, #5264	; 0x1490
 800336e:	4293      	cmp	r3, r2
 8003370:	d106      	bne.n	8003380 <RI_GetRegCommandParser+0x458>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003372:	48b1      	ldr	r0, [pc, #708]	; (8003638 <RI_GetRegCommandParser+0x710>)
 8003374:	f001 fe1e 	bl	8004fb4 <PID_GetKIDivisorPOW2>
 8003378:	2102      	movs	r1, #2
 800337a:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800337c:	460b      	mov	r3, r1
 800337e:	e64a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003380:	f241 0250 	movw	r2, #4176	; 0x1050
 8003384:	4293      	cmp	r3, r2
 8003386:	f47f aec7 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).d;
 800338a:	4bac      	ldr	r3, [pc, #688]	; (800363c <RI_GetRegCommandParser+0x714>)
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	f001 fb27 	bl	80049e0 <FF_GetVqdAvPIout>
              break;
 8003392:	2102      	movs	r1, #2
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).d;
 8003394:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003398:	9005      	str	r0, [sp, #20]
 800339a:	8033      	strh	r3, [r6, #0]
          *size = 2;
 800339c:	460b      	mov	r3, r1
              break;
 800339e:	e63a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80033a0:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 80033a4:	f47f aeb8 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 80033a8:	48a1      	ldr	r0, [pc, #644]	; (8003630 <RI_GetRegCommandParser+0x708>)
 80033aa:	f003 f939 	bl	8006620 <STO_PLL_GetEstimatedBemf>
              break;
 80033ae:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 80033b0:	900a      	str	r0, [sp, #40]	; 0x28
          *size = 2;
 80033b2:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 80033b4:	8030      	strh	r0, [r6, #0]
              break;
 80033b6:	e62e      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80033b8:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80033bc:	f000 81ea 	beq.w	8003794 <RI_GetRegCommandParser+0x86c>
 80033c0:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80033c4:	f47f aea8 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80033c8:	4650      	mov	r0, sl
 80033ca:	f7fe fa19 	bl	8001800 <MCI_GetIqd>
              break;
 80033ce:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80033d0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80033d4:	9013      	str	r0, [sp, #76]	; 0x4c
 80033d6:	8033      	strh	r3, [r6, #0]
          *size = 2;
 80033d8:	460b      	mov	r3, r1
              break;
 80033da:	e61c      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 80033dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033e0:	f000 81e0 	beq.w	80037a4 <RI_GetRegCommandParser+0x87c>
 80033e4:	d930      	bls.n	8003448 <RI_GetRegCommandParser+0x520>
 80033e6:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80033ea:	f000 81ff 	beq.w	80037ec <RI_GetRegCommandParser+0x8c4>
 80033ee:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80033f2:	f47f ae91 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80033f6:	4650      	mov	r0, sl
 80033f8:	f7fe f9f4 	bl	80017e4 <MCI_GetIalphabeta>
              break;
 80033fc:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80033fe:	9016      	str	r0, [sp, #88]	; 0x58
          *size = 2;
 8003400:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003402:	8030      	strh	r0, [r6, #0]
              break;
 8003404:	e607      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003406:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800340a:	f000 81e7 	beq.w	80037dc <RI_GetRegCommandParser+0x8b4>
 800340e:	d92b      	bls.n	8003468 <RI_GetRegCommandParser+0x540>
 8003410:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003414:	f000 81e0 	beq.w	80037d8 <RI_GetRegCommandParser+0x8b0>
 8003418:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800341c:	f47f ae7c 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003420:	4b87      	ldr	r3, [pc, #540]	; (8003640 <RI_GetRegCommandParser+0x718>)
 8003422:	e796      	b.n	8003352 <RI_GetRegCommandParser+0x42a>
 8003424:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003428:	f000 81ce 	beq.w	80037c8 <RI_GetRegCommandParser+0x8a0>
 800342c:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003430:	f47f ae72 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003434:	4650      	mov	r0, sl
 8003436:	f7fe fa0d 	bl	8001854 <MCI_GetValphabeta>
              break;
 800343a:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800343c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003440:	900d      	str	r0, [sp, #52]	; 0x34
 8003442:	8033      	strh	r3, [r6, #0]
          *size = 2;
 8003444:	460b      	mov	r3, r1
              break;
 8003446:	e5e6      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003448:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 800344c:	f000 820c 	beq.w	8003868 <RI_GetRegCommandParser+0x940>
 8003450:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8003454:	f47f ae60 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003458:	4b7a      	ldr	r3, [pc, #488]	; (8003644 <RI_GetRegCommandParser+0x71c>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	f001 fd78 	bl	8004f50 <NTC_GetAvTemp_C>
              break;
 8003460:	2102      	movs	r1, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003462:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003464:	460b      	mov	r3, r1
              break;
 8003466:	e5d6      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003468:	2bd0      	cmp	r3, #208	; 0xd0
 800346a:	f000 81f5 	beq.w	8003858 <RI_GetRegCommandParser+0x930>
 800346e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003472:	d106      	bne.n	8003482 <RI_GetRegCommandParser+0x55a>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003474:	4870      	ldr	r0, [pc, #448]	; (8003638 <RI_GetRegCommandParser+0x710>)
 8003476:	f001 fdb9 	bl	8004fec <PID_GetKD>
              break;
 800347a:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800347c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800347e:	460b      	mov	r3, r1
              break;
 8003480:	e5c9      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 8003482:	2b90      	cmp	r3, #144	; 0x90
 8003484:	f47f ae48 	bne.w	8003118 <RI_GetRegCommandParser+0x1f0>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003488:	486b      	ldr	r0, [pc, #428]	; (8003638 <RI_GetRegCommandParser+0x710>)
 800348a:	f001 fd7f 	bl	8004f8c <PID_GetKP>
 800348e:	2102      	movs	r1, #2
 8003490:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003492:	460b      	mov	r3, r1
 8003494:	e5bf      	b.n	8003016 <RI_GetRegCommandParser+0xee>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003496:	2006      	movs	r0, #6
 8003498:	e576      	b.n	8002f88 <RI_GetRegCommandParser+0x60>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800349a:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <RI_GetRegCommandParser+0x720>)
 800349c:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800349e:	f993 1000 	ldrsb.w	r1, [r3]
 80034a2:	2900      	cmp	r1, #0
 80034a4:	d04e      	beq.n	8003544 <RI_GetRegCommandParser+0x61c>
 80034a6:	2c01      	cmp	r4, #1
 80034a8:	ddf5      	ble.n	8003496 <RI_GetRegCommandParser+0x56e>
 80034aa:	469c      	mov	ip, r3
 80034ac:	4630      	mov	r0, r6
 80034ae:	f1c6 0201 	rsb	r2, r6, #1
 80034b2:	e001      	b.n	80034b8 <RI_GetRegCommandParser+0x590>
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	daee      	bge.n	8003496 <RI_GetRegCommandParser+0x56e>
    *tempdestString = *tempsrcString;
 80034b8:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80034bc:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80034c0:	1883      	adds	r3, r0, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d1f5      	bne.n	80034b4 <RI_GetRegCommandParser+0x58c>
 80034c8:	e5a1      	b.n	800300e <RI_GetRegCommandParser+0xe6>
 80034ca:	4b60      	ldr	r3, [pc, #384]	; (800364c <RI_GetRegCommandParser+0x724>)
 80034cc:	f993 1000 	ldrsb.w	r1, [r3]
 80034d0:	2900      	cmp	r1, #0
 80034d2:	d037      	beq.n	8003544 <RI_GetRegCommandParser+0x61c>
 80034d4:	2c01      	cmp	r4, #1
 80034d6:	ddde      	ble.n	8003496 <RI_GetRegCommandParser+0x56e>
 80034d8:	469c      	mov	ip, r3
 80034da:	4630      	mov	r0, r6
 80034dc:	f1c6 0201 	rsb	r2, r6, #1
 80034e0:	e001      	b.n	80034e6 <RI_GetRegCommandParser+0x5be>
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	dad7      	bge.n	8003496 <RI_GetRegCommandParser+0x56e>
    *tempdestString = *tempsrcString;
 80034e6:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80034ea:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80034ee:	1883      	adds	r3, r0, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2900      	cmp	r1, #0
 80034f4:	d1f5      	bne.n	80034e2 <RI_GetRegCommandParser+0x5ba>
 80034f6:	e58a      	b.n	800300e <RI_GetRegCommandParser+0xe6>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80034f8:	4650      	mov	r0, sl
 80034fa:	f7fe f8d3 	bl	80016a4 <MCI_GetSTMState>
 80034fe:	2101      	movs	r1, #1
 8003500:	b2a4      	uxth	r4, r4
 8003502:	7030      	strb	r0, [r6, #0]
          *size = 1;
 8003504:	460b      	mov	r3, r1
 8003506:	e586      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003508:	4851      	ldr	r0, [pc, #324]	; (8003650 <RI_GetRegCommandParser+0x728>)
 800350a:	f002 fce5 	bl	8005ed8 <RUC_GetNumberOfPhases>
              break;
 800350e:	2101      	movs	r1, #1
 8003510:	b2a4      	uxth	r4, r4
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003512:	7030      	strb	r0, [r6, #0]
          *size = 1;
 8003514:	460b      	mov	r3, r1
              break;
 8003516:	e57e      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003518:	4650      	mov	r0, sl
 800351a:	f7fe f917 	bl	800174c <MCI_GetControlMode>
              break;
 800351e:	2101      	movs	r1, #1
 8003520:	b2a4      	uxth	r4, r4
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003522:	7030      	strb	r0, [r6, #0]
          *size = 1;
 8003524:	460b      	mov	r3, r1
              break;
 8003526:	e576      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata32 = pFF[motorID]->wConstant_1Q;
 8003528:	4b44      	ldr	r3, [pc, #272]	; (800363c <RI_GetRegCommandParser+0x714>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2104      	movs	r1, #4
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	6033      	str	r3, [r6, #0]
          *size = 4;
 8003532:	460b      	mov	r3, r1
 8003534:	e56f      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003536:	4650      	mov	r0, sl
 8003538:	f7fe f902 	bl	8001740 <MCI_GetFaultState>
 800353c:	2104      	movs	r1, #4
 800353e:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003540:	460b      	mov	r3, r1
 8003542:	e568      	b.n	8003016 <RI_GetRegCommandParser+0xee>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003544:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 8003546:	460b      	mov	r3, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003548:	4630      	mov	r0, r6
 800354a:	e561      	b.n	8003010 <RI_GetRegCommandParser+0xe8>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800354c:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 800354e:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003550:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003552:	f67f ad34 	bls.w	8002fbe <RI_GetRegCommandParser+0x96>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <RI_GetRegCommandParser+0x72c>)
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	6858      	ldr	r0, [r3, #4]
 800355c:	6011      	str	r1, [r2, #0]
 800355e:	891b      	ldrh	r3, [r3, #8]
 8003560:	8113      	strh	r3, [r2, #8]
 8003562:	210c      	movs	r1, #12
 8003564:	b2a4      	uxth	r4, r4
 8003566:	6050      	str	r0, [r2, #4]
        *size = (*rawSize) + 2U;
 8003568:	460b      	mov	r3, r1
 800356a:	e554      	b.n	8003016 <RI_GetRegCommandParser+0xee>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 800356c:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 800356e:	2c0f      	cmp	r4, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003570:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 8003572:	f77f ad24 	ble.w	8002fbe <RI_GetRegCommandParser+0x96>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <RI_GetRegCommandParser+0x730>)
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8003582:	f8c2 c008 	str.w	ip, [r2, #8]
 8003586:	6051      	str	r1, [r2, #4]
 8003588:	6010      	str	r0, [r2, #0]
 800358a:	899b      	ldrh	r3, [r3, #12]
 800358c:	8193      	strh	r3, [r2, #12]
 800358e:	2110      	movs	r1, #16
 8003590:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003592:	460b      	mov	r3, r1
 8003594:	e53f      	b.n	8003016 <RI_GetRegCommandParser+0xee>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003596:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > freeSpace)
 8003598:	2c29      	cmp	r4, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800359a:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800359c:	f67f ad0f 	bls.w	8002fbe <RI_GetRegCommandParser+0x96>
 80035a0:	f04f 0b00 	mov.w	fp, #0
 80035a4:	9401      	str	r4, [sp, #4]
 80035a6:	465c      	mov	r4, fp
 80035a8:	46b3      	mov	fp, r6
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80035aa:	b2e1      	uxtb	r1, r4
 80035ac:	aa19      	add	r2, sp, #100	; 0x64
 80035ae:	4828      	ldr	r0, [pc, #160]	; (8003650 <RI_GetRegCommandParser+0x728>)
 80035b0:	f002 fc96 	bl	8005ee0 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035b4:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80035b8:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 80035bc:	f8ab 1006 	strh.w	r1, [fp, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035c4:	3401      	adds	r4, #1
                *durationms  = revUpPhase.hDurationms;
 80035c6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035ca:	0052      	lsls	r2, r2, #1
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80035cc:	2c05      	cmp	r4, #5
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80035ce:	f8cb 2002 	str.w	r2, [fp, #2]
                *durationms  = revUpPhase.hDurationms;
 80035d2:	f82b 1f08 	strh.w	r1, [fp, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80035d6:	d1e8      	bne.n	80035aa <RI_GetRegCommandParser+0x682>
        *size = (*rawSize) + 2U;
 80035d8:	8833      	ldrh	r3, [r6, #0]
 80035da:	9c01      	ldr	r4, [sp, #4]
 80035dc:	3302      	adds	r3, #2
 80035de:	b29b      	uxth	r3, r3
        break;
 80035e0:	b2a4      	uxth	r4, r4
 80035e2:	4619      	mov	r1, r3
 80035e4:	e517      	b.n	8003016 <RI_GetRegCommandParser+0xee>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80035e6:	4650      	mov	r0, sl
 80035e8:	f7fe f8d4 	bl	8001794 <MCI_GetLastRampFinalSpeed>
 80035ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80035f0:	0040      	lsls	r0, r0, #1
 80035f2:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80035f6:	4650      	mov	r0, sl
 80035f8:	f7fe f8d4 	bl	80017a4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80035fc:	2306      	movs	r3, #6
 80035fe:	2108      	movs	r1, #8
 8003600:	8033      	strh	r3, [r6, #0]
 8003602:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003604:	80f0      	strh	r0, [r6, #6]
        *size = (*rawSize) + 2U;
 8003606:	460b      	mov	r3, r1
 8003608:	e505      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800360a:	4650      	mov	r0, sl
 800360c:	f7fe f8d8 	bl	80017c0 <MCI_GetMecSpeedRefUnit>
 8003610:	e5b6      	b.n	8003180 <RI_GetRegCommandParser+0x258>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8003612:	4807      	ldr	r0, [pc, #28]	; (8003630 <RI_GetRegCommandParser+0x708>)
 8003614:	f003 f83e 	bl	8006694 <STO_PLL_GetObservedBemfLevel>
 8003618:	2104      	movs	r1, #4
 800361a:	6030      	str	r0, [r6, #0]
          *size = 4;
 800361c:	460b      	mov	r3, r1
 800361e:	e4fa      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata32 = pFF[motorID]->wConstant_2;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <RI_GetRegCommandParser+0x714>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2104      	movs	r1, #4
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	6033      	str	r3, [r6, #0]
          *size = 4;
 800362a:	460b      	mov	r3, r1
 800362c:	e4f3      	b.n	8003016 <RI_GetRegCommandParser+0xee>
 800362e:	bf00      	nop
 8003630:	20000300 	.word	0x20000300
 8003634:	200004c4 	.word	0x200004c4
 8003638:	20000190 	.word	0x20000190
 800363c:	200004bc 	.word	0x200004bc
 8003640:	200004c8 	.word	0x200004c8
 8003644:	200004d0 	.word	0x200004d0
 8003648:	200004e0 	.word	0x200004e0
 800364c:	08006a78 	.word	0x08006a78
 8003650:	20000274 	.word	0x20000274
 8003654:	08006af8 	.word	0x08006af8
 8003658:	200004d4 	.word	0x200004d4
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800365c:	4b86      	ldr	r3, [pc, #536]	; (8003878 <RI_GetRegCommandParser+0x950>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8003664:	f8d3 c000 	ldr.w	ip, [r3]
 8003668:	6858      	ldr	r0, [r3, #4]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003670:	f8c2 e00c 	str.w	lr, [r2, #12]
 8003674:	3310      	adds	r3, #16
 8003676:	455b      	cmp	r3, fp
 8003678:	f8c2 c000 	str.w	ip, [r2]
 800367c:	6050      	str	r0, [r2, #4]
 800367e:	6091      	str	r1, [r2, #8]
 8003680:	f102 0210 	add.w	r2, r2, #16
 8003684:	d1ee      	bne.n	8003664 <RI_GetRegCommandParser+0x73c>
 8003686:	f8d3 c000 	ldr.w	ip, [r3]
 800368a:	6858      	ldr	r0, [r3, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	213e      	movs	r1, #62	; 0x3e
 8003692:	b2a4      	uxth	r4, r4
 8003694:	f8c2 c000 	str.w	ip, [r2]
 8003698:	6050      	str	r0, [r2, #4]
        *size = (*rawSize) + 2U;
 800369a:	460b      	mov	r3, r1
 800369c:	e4bb      	b.n	8003016 <RI_GetRegCommandParser+0xee>
  uint8_t retVal = MCP_CMD_NOK;
 800369e:	2001      	movs	r0, #1
 80036a0:	e472      	b.n	8002f88 <RI_GetRegCommandParser+0x60>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80036a2:	4876      	ldr	r0, [pc, #472]	; (800387c <RI_GetRegCommandParser+0x954>)
 80036a4:	f002 fc68 	bl	8005f78 <SPD_GetS16Speed>
              break;
 80036a8:	2102      	movs	r1, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80036aa:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036ac:	460b      	mov	r3, r1
              break;
 80036ae:	e4b2      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80036b0:	4872      	ldr	r0, [pc, #456]	; (800387c <RI_GetRegCommandParser+0x954>)
 80036b2:	f002 fc25 	bl	8005f00 <SPD_GetElAngle>
              break;
 80036b6:	2102      	movs	r1, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80036b8:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036ba:	460b      	mov	r3, r1
              break;
 80036bc:	e4ab      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = FF_GetVqdff(pFF[motorID]).q;
 80036be:	4b70      	ldr	r3, [pc, #448]	; (8003880 <RI_GetRegCommandParser+0x958>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	f001 f981 	bl	80049c8 <FF_GetVqdff>
              break;
 80036c6:	2102      	movs	r1, #2
              *regdata16 = FF_GetVqdff(pFF[motorID]).q;
 80036c8:	9008      	str	r0, [sp, #32]
          *size = 2;
 80036ca:	460b      	mov	r3, r1
              *regdata16 = FF_GetVqdff(pFF[motorID]).q;
 80036cc:	8030      	strh	r0, [r6, #0]
              break;
 80036ce:	e4a2      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80036d0:	486a      	ldr	r0, [pc, #424]	; (800387c <RI_GetRegCommandParser+0x954>)
 80036d2:	f002 ffb1 	bl	8006638 <STO_PLL_GetEstimatedCurrent>
              break;
 80036d6:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80036d8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80036dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80036de:	8033      	strh	r3, [r6, #0]
          *size = 2;
 80036e0:	460b      	mov	r3, r1
              break;
 80036e2:	e498      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 80036e4:	4b67      	ldr	r3, [pc, #412]	; (8003884 <RI_GetRegCommandParser+0x95c>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f001 fc54 	bl	8004f94 <PID_GetKI>
              break;
 80036ec:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 80036ee:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036f0:	460b      	mov	r3, r1
              break;
 80036f2:	e490      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80036f4:	4650      	mov	r0, sl
 80036f6:	f7fe f89f 	bl	8001838 <MCI_GetVqd>
              break;
 80036fa:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80036fc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003700:	900f      	str	r0, [sp, #60]	; 0x3c
 8003702:	8033      	strh	r3, [r6, #0]
          *size = 2;
 8003704:	460b      	mov	r3, r1
              break;
 8003706:	e486      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003708:	4b5e      	ldr	r3, [pc, #376]	; (8003884 <RI_GetRegCommandParser+0x95c>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	f001 fc72 	bl	8004ff4 <PID_GetKDDivisorPOW2>
 8003710:	2102      	movs	r1, #2
 8003712:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003714:	460b      	mov	r3, r1
 8003716:	e47e      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).q;
 8003718:	4b59      	ldr	r3, [pc, #356]	; (8003880 <RI_GetRegCommandParser+0x958>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	f001 f960 	bl	80049e0 <FF_GetVqdAvPIout>
              break;
 8003720:	2102      	movs	r1, #2
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).q;
 8003722:	9006      	str	r0, [sp, #24]
          *size = 2;
 8003724:	460b      	mov	r3, r1
              *regdata16 = FF_GetVqdAvPIout(pFF[motorID]).q;
 8003726:	8030      	strh	r0, [r6, #0]
              break;
 8003728:	e475      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800372a:	4650      	mov	r0, sl
 800372c:	f7fe f85a 	bl	80017e4 <MCI_GetIalphabeta>
              break;
 8003730:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003732:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003736:	9015      	str	r0, [sp, #84]	; 0x54
 8003738:	8033      	strh	r3, [r6, #0]
          *size = 2;
 800373a:	460b      	mov	r3, r1
              break;
 800373c:	e46b      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 800373e:	4852      	ldr	r0, [pc, #328]	; (8003888 <RI_GetRegCommandParser+0x960>)
 8003740:	f001 fc24 	bl	8004f8c <PID_GetKP>
              break;
 8003744:	2102      	movs	r1, #2
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003746:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003748:	460b      	mov	r3, r1
              break;
 800374a:	e464      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800374c:	484e      	ldr	r0, [pc, #312]	; (8003888 <RI_GetRegCommandParser+0x960>)
 800374e:	f001 fc31 	bl	8004fb4 <PID_GetKIDivisorPOW2>
 8003752:	2102      	movs	r1, #2
 8003754:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003756:	460b      	mov	r3, r1
 8003758:	e45d      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <RI_GetRegCommandParser+0x964>)
 800375c:	e7d5      	b.n	800370a <RI_GetRegCommandParser+0x7e2>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800375e:	4b4b      	ldr	r3, [pc, #300]	; (800388c <RI_GetRegCommandParser+0x964>)
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	f001 fc1d 	bl	8004fa0 <PID_GetKPDivisorPOW2>
 8003766:	2102      	movs	r1, #2
 8003768:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800376a:	460b      	mov	r3, r1
 800376c:	e453      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800376e:	f10d 010a 	add.w	r1, sp, #10
 8003772:	4842      	ldr	r0, [pc, #264]	; (800387c <RI_GetRegCommandParser+0x954>)
 8003774:	aa19      	add	r2, sp, #100	; 0x64
 8003776:	f002 ff73 	bl	8006660 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 800377a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800377e:	8033      	strh	r3, [r6, #0]
              break;
 8003780:	2102      	movs	r1, #2
          *size = 2;
 8003782:	460b      	mov	r3, r1
 8003784:	e447      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003786:	4842      	ldr	r0, [pc, #264]	; (8003890 <RI_GetRegCommandParser+0x968>)
 8003788:	f001 fc0a 	bl	8004fa0 <PID_GetKPDivisorPOW2>
              break;
 800378c:	2102      	movs	r1, #2
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 800378e:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003790:	460b      	mov	r3, r1
              break;
 8003792:	e440      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003794:	4650      	mov	r0, sl
 8003796:	f7fe f833 	bl	8001800 <MCI_GetIqd>
              break;
 800379a:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800379c:	9014      	str	r0, [sp, #80]	; 0x50
          *size = 2;
 800379e:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80037a0:	8030      	strh	r0, [r6, #0]
              break;
 80037a2:	e438      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80037a4:	4650      	mov	r0, sl
 80037a6:	f7fe f80f 	bl	80017c8 <MCI_GetIab>
              break;
 80037aa:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 80037ac:	9018      	str	r0, [sp, #96]	; 0x60
          *size = 2;
 80037ae:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIab(pMCIN).a;
 80037b0:	8030      	strh	r0, [r6, #0]
              break;
 80037b2:	e430      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80037b4:	4831      	ldr	r0, [pc, #196]	; (800387c <RI_GetRegCommandParser+0x954>)
 80037b6:	f002 ff33 	bl	8006620 <STO_PLL_GetEstimatedBemf>
              break;
 80037ba:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80037bc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80037c0:	9009      	str	r0, [sp, #36]	; 0x24
 80037c2:	8033      	strh	r3, [r6, #0]
          *size = 2;
 80037c4:	460b      	mov	r3, r1
              break;
 80037c6:	e426      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80037c8:	4650      	mov	r0, sl
 80037ca:	f7fe f843 	bl	8001854 <MCI_GetValphabeta>
              break;
 80037ce:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80037d0:	900e      	str	r0, [sp, #56]	; 0x38
          *size = 2;
 80037d2:	460b      	mov	r3, r1
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80037d4:	8030      	strh	r0, [r6, #0]
              break;
 80037d6:	e41e      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <RI_GetRegCommandParser+0x964>)
 80037da:	e784      	b.n	80036e6 <RI_GetRegCommandParser+0x7be>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <RI_GetRegCommandParser+0x964>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	f001 fbd4 	bl	8004f8c <PID_GetKP>
              break;
 80037e4:	2102      	movs	r1, #2
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80037e6:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80037e8:	460b      	mov	r3, r1
              break;
 80037ea:	e414      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80037ec:	4650      	mov	r0, sl
 80037ee:	f7fd ffeb 	bl	80017c8 <MCI_GetIab>
              break;
 80037f2:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).b;
 80037f4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80037f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80037fa:	8033      	strh	r3, [r6, #0]
          *size = 2;
 80037fc:	460b      	mov	r3, r1
              break;
 80037fe:	e40a      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <RI_GetRegCommandParser+0x95c>)
 8003802:	e7ad      	b.n	8003760 <RI_GetRegCommandParser+0x838>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003804:	4822      	ldr	r0, [pc, #136]	; (8003890 <RI_GetRegCommandParser+0x968>)
 8003806:	f001 fbf5 	bl	8004ff4 <PID_GetKDDivisorPOW2>
 800380a:	2102      	movs	r1, #2
 800380c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800380e:	460b      	mov	r3, r1
 8003810:	e401      	b.n	8003016 <RI_GetRegCommandParser+0xee>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003812:	f10d 010a 	add.w	r1, sp, #10
 8003816:	4819      	ldr	r0, [pc, #100]	; (800387c <RI_GetRegCommandParser+0x954>)
 8003818:	aa19      	add	r2, sp, #100	; 0x64
 800381a:	f002 ff21 	bl	8006660 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 800381e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003822:	8033      	strh	r3, [r6, #0]
              break;
 8003824:	2102      	movs	r1, #2
          *size = 2;
 8003826:	460b      	mov	r3, r1
 8003828:	f7ff bbf5 	b.w	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <RI_GetRegCommandParser+0x95c>)
 800382e:	e7d6      	b.n	80037de <RI_GetRegCommandParser+0x8b6>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003830:	4650      	mov	r0, sl
 8003832:	f7fd fff3 	bl	800181c <MCI_GetIqdref>
              break;
 8003836:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003838:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800383c:	9011      	str	r0, [sp, #68]	; 0x44
 800383e:	8033      	strh	r3, [r6, #0]
          *size = 2;
 8003840:	460b      	mov	r3, r1
              break;
 8003842:	f7ff bbe8 	b.w	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003846:	4650      	mov	r0, sl
 8003848:	f7fd ffe8 	bl	800181c <MCI_GetIqdref>
              break;
 800384c:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800384e:	9012      	str	r0, [sp, #72]	; 0x48
          *size = 2;
 8003850:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003852:	8030      	strh	r0, [r6, #0]
              break;
 8003854:	f7ff bbdf 	b.w	8003016 <RI_GetRegCommandParser+0xee>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003858:	480d      	ldr	r0, [pc, #52]	; (8003890 <RI_GetRegCommandParser+0x968>)
 800385a:	f001 fb9b 	bl	8004f94 <PID_GetKI>
              break;
 800385e:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003860:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003862:	460b      	mov	r3, r1
              break;
 8003864:	f7ff bbd7 	b.w	8003016 <RI_GetRegCommandParser+0xee>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003868:	480a      	ldr	r0, [pc, #40]	; (8003894 <RI_GetRegCommandParser+0x96c>)
 800386a:	f000 ffab 	bl	80047c4 <VBS_GetAvBusVoltage_V>
              break;
 800386e:	2102      	movs	r1, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003870:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003872:	460b      	mov	r3, r1
              break;
 8003874:	f7ff bbcf 	b.w	8003016 <RI_GetRegCommandParser+0xee>
 8003878:	200004dc 	.word	0x200004dc
 800387c:	20000300 	.word	0x20000300
 8003880:	200004bc 	.word	0x200004bc
 8003884:	200004c4 	.word	0x200004c4
 8003888:	20000334 	.word	0x20000334
 800388c:	200004c8 	.word	0x200004c8
 8003890:	20000190 	.word	0x20000190
 8003894:	20000000 	.word	0x20000000

08003898 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003898:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800389c:	3808      	subs	r0, #8
 800389e:	b2c0      	uxtb	r0, r0
 80038a0:	2810      	cmp	r0, #16
 80038a2:	bf9a      	itte	ls
 80038a4:	4b01      	ldrls	r3, [pc, #4]	; (80038ac <RI_GetIDSize+0x14>)
 80038a6:	5c18      	ldrbls	r0, [r3, r0]
 80038a8:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80038aa:	4770      	bx	lr
 80038ac:	08006d4c 	.word	0x08006d4c

080038b0 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80038b0:	f000 0338 	and.w	r3, r0, #56	; 0x38
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d003      	beq.n	80038c0 <RI_GetPtrReg+0x10>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
            break;
          }
          default:
          {
            *dataPtr = &nullData16;
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <RI_GetPtrReg+0x12c>)
 80038ba:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80038bc:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 80038be:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80038c0:	f020 0007 	bic.w	r0, r0, #7
 80038c4:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 80038c8:	b283      	uxth	r3, r0
 80038ca:	d05c      	beq.n	8003986 <RI_GetPtrReg+0xd6>
 80038cc:	d810      	bhi.n	80038f0 <RI_GetPtrReg+0x40>
 80038ce:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80038d2:	d05e      	beq.n	8003992 <RI_GetPtrReg+0xe2>
 80038d4:	d826      	bhi.n	8003924 <RI_GetPtrReg+0x74>
 80038d6:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80038da:	d060      	beq.n	800399e <RI_GetPtrReg+0xee>
 80038dc:	d916      	bls.n	800390c <RI_GetPtrReg+0x5c>
 80038de:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80038e2:	d1e9      	bne.n	80038b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80038e4:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <RI_GetPtrReg+0x130>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	3306      	adds	r3, #6
 80038ea:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80038ec:	2000      	movs	r0, #0
            break;
 80038ee:	4770      	bx	lr
 80038f0:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 80038f4:	d059      	beq.n	80039aa <RI_GetPtrReg+0xfa>
 80038f6:	d928      	bls.n	800394a <RI_GetPtrReg+0x9a>
 80038f8:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 80038fc:	d059      	beq.n	80039b2 <RI_GetPtrReg+0x102>
 80038fe:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003902:	d11b      	bne.n	800393c <RI_GetPtrReg+0x8c>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <RI_GetPtrReg+0x134>)
 8003906:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003908:	2000      	movs	r0, #0
            break;
 800390a:	4770      	bx	lr
 800390c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003910:	d05f      	beq.n	80039d2 <RI_GetPtrReg+0x122>
 8003912:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003916:	d1cf      	bne.n	80038b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <RI_GetPtrReg+0x130>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	3302      	adds	r3, #2
 800391e:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003920:	2000      	movs	r0, #0
            break;
 8003922:	4770      	bx	lr
 8003924:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003928:	d047      	beq.n	80039ba <RI_GetPtrReg+0x10a>
 800392a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800392e:	d118      	bne.n	8003962 <RI_GetPtrReg+0xb2>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <RI_GetPtrReg+0x130>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	3312      	adds	r3, #18
 8003936:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003938:	2000      	movs	r0, #0
            break;
 800393a:	4770      	bx	lr
 800393c:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003940:	d1ba      	bne.n	80038b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <RI_GetPtrReg+0x138>)
 8003944:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003946:	2000      	movs	r0, #0
            break;
 8003948:	4770      	bx	lr
 800394a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800394e:	d03a      	beq.n	80039c6 <RI_GetPtrReg+0x116>
 8003950:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003954:	d10e      	bne.n	8003974 <RI_GetPtrReg+0xc4>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <RI_GetPtrReg+0x130>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	331c      	adds	r3, #28
 800395c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800395e:	2000      	movs	r0, #0
            break;
 8003960:	4770      	bx	lr
 8003962:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003966:	d1a7      	bne.n	80038b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <RI_GetPtrReg+0x130>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	330e      	adds	r3, #14
 800396e:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003970:	2000      	movs	r0, #0
            break;
 8003972:	4770      	bx	lr
 8003974:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003978:	d19e      	bne.n	80038b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <RI_GetPtrReg+0x130>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	3318      	adds	r3, #24
 8003980:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003982:	2000      	movs	r0, #0
            break;
 8003984:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <RI_GetPtrReg+0x130>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3316      	adds	r3, #22
 800398c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800398e:	2000      	movs	r0, #0
            break;
 8003990:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <RI_GetPtrReg+0x130>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	330c      	adds	r3, #12
 8003998:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800399a:	2000      	movs	r0, #0
            break;
 800399c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <RI_GetPtrReg+0x130>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039a6:	2000      	movs	r0, #0
            break;
 80039a8:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hElAngle);
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <RI_GetPtrReg+0x13c>)
 80039ac:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039ae:	2000      	movs	r0, #0
            break;
 80039b0:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_alfa_est);
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <RI_GetPtrReg+0x140>)
 80039b4:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039b6:	2000      	movs	r0, #0
            break;
 80039b8:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <RI_GetPtrReg+0x130>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	3310      	adds	r3, #16
 80039c0:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039c2:	2000      	movs	r0, #0
            break;
 80039c4:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <RI_GetPtrReg+0x130>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	331a      	adds	r3, #26
 80039cc:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039ce:	2000      	movs	r0, #0
            break;
 80039d0:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80039d2:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <RI_GetPtrReg+0x130>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80039d8:	2000      	movs	r0, #0
             break;
 80039da:	4770      	bx	lr
 80039dc:	2000173e 	.word	0x2000173e
 80039e0:	20001778 	.word	0x20001778
 80039e4:	20000372 	.word	0x20000372
 80039e8:	2000030c 	.word	0x2000030c
 80039ec:	20000304 	.word	0x20000304
 80039f0:	20000370 	.word	0x20000370

080039f4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039f4:	4b66      	ldr	r3, [pc, #408]	; (8003b90 <RCM_RegisterRegConv+0x19c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
{
 80039f8:	b4f0      	push	{r4, r5, r6, r7}
 80039fa:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	f000 808f 	beq.w	8003b20 <RCM_RegisterRegConv+0x12c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a02:	7904      	ldrb	r4, [r0, #4]
 8003a04:	7910      	ldrb	r0, [r2, #4]
 8003a06:	4284      	cmp	r4, r0
 8003a08:	d01e      	beq.n	8003a48 <RCM_RegisterRegConv+0x54>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a0a:	685d      	ldr	r5, [r3, #4]
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	f000 80ad 	beq.w	8003b6c <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a12:	792a      	ldrb	r2, [r5, #4]
 8003a14:	42a2      	cmp	r2, r4
  uint8_t handle = 255U;
 8003a16:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a1a:	f000 8089 	beq.w	8003b30 <RCM_RegisterRegConv+0x13c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a1e:	689e      	ldr	r6, [r3, #8]
 8003a20:	b1fe      	cbz	r6, 8003a62 <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a22:	7932      	ldrb	r2, [r6, #4]
 8003a24:	42a2      	cmp	r2, r4
 8003a26:	f000 8094 	beq.w	8003b52 <RCM_RegisterRegConv+0x15e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a2a:	68dd      	ldr	r5, [r3, #12]
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	f000 8099 	beq.w	8003b64 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a32:	792a      	ldrb	r2, [r5, #4]
 8003a34:	42a2      	cmp	r2, r4
 8003a36:	f000 80a8 	beq.w	8003b8a <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003a3a:	2803      	cmp	r0, #3
 8003a3c:	bf98      	it	ls
 8003a3e:	680a      	ldrls	r2, [r1, #0]
 8003a40:	d91e      	bls.n	8003a80 <RCM_RegisterRegConv+0x8c>
 8003a42:	20ff      	movs	r0, #255	; 0xff
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003a44:	bcf0      	pop	{r4, r5, r6, r7}
 8003a46:	4770      	bx	lr
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003a48:	6810      	ldr	r0, [r2, #0]
 8003a4a:	680a      	ldr	r2, [r1, #0]
 8003a4c:	4290      	cmp	r0, r2
 8003a4e:	f000 8087 	beq.w	8003b60 <RCM_RegisterRegConv+0x16c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a52:	685d      	ldr	r5, [r3, #4]
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	d1dc      	bne.n	8003a12 <RCM_RegisterRegConv+0x1e>
 8003a58:	689e      	ldr	r6, [r3, #8]
      i++;
 8003a5a:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a5c:	2e00      	cmp	r6, #0
 8003a5e:	d1e0      	bne.n	8003a22 <RCM_RegisterRegConv+0x2e>
 8003a60:	e004      	b.n	8003a6c <RCM_RegisterRegConv+0x78>
 8003a62:	2804      	cmp	r0, #4
 8003a64:	f240 808e 	bls.w	8003b84 <RCM_RegisterRegConv+0x190>
 8003a68:	680a      	ldr	r2, [r1, #0]
      i++;
 8003a6a:	2002      	movs	r0, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003a6c:	68dd      	ldr	r5, [r3, #12]
 8003a6e:	b13d      	cbz	r5, 8003a80 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003a70:	792e      	ldrb	r6, [r5, #4]
 8003a72:	790c      	ldrb	r4, [r1, #4]
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d103      	bne.n	8003a80 <RCM_RegisterRegConv+0x8c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003a78:	682c      	ldr	r4, [r5, #0]
 8003a7a:	4294      	cmp	r4, r2
 8003a7c:	d1dd      	bne.n	8003a3a <RCM_RegisterRegConv+0x46>
      i++;
 8003a7e:	2003      	movs	r0, #3
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003a80:	4d44      	ldr	r5, [pc, #272]	; (8003b94 <RCM_RegisterRegConv+0x1a0>)
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003a82:	6894      	ldr	r4, [r2, #8]
      RCM_handle_array [handle] = regConv;
 8003a84:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003a8e:	07e3      	lsls	r3, r4, #31
 8003a90:	d411      	bmi.n	8003ab6 <RCM_RegisterRegConv+0xc2>
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003a92:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003a94:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003a98:	f023 0320 	bic.w	r3, r3, #32
 8003a9c:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003a9e:	6014      	str	r4, [r2, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003aa0:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003aa2:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003aac:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003aae:	6893      	ldr	r3, [r2, #8]
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003ab6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ab8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003abc:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003abe:	790b      	ldrb	r3, [r1, #4]
 8003ac0:	2b09      	cmp	r3, #9
 8003ac2:	d83c      	bhi.n	8003b3e <RCM_RegisterRegConv+0x14a>
 8003ac4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003ac8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8003ad4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003ad8:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003adc:	fab4 f484 	clz	r4, r4
 8003ae0:	40e6      	lsrs	r6, r4
 8003ae2:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003ae4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003ae8:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8003aec:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8003af0:	fa94 f7a4 	rbit	r7, r4
 8003af4:	fab7 f787 	clz	r7, r7
 8003af8:	fa94 f4a4 	rbit	r4, r4
 8003afc:	f04f 0c07 	mov.w	ip, #7
 8003b00:	6889      	ldr	r1, [r1, #8]
 8003b02:	fab4 f484 	clz	r4, r4
 8003b06:	fa23 f707 	lsr.w	r7, r3, r7
 8003b0a:	fa0c f707 	lsl.w	r7, ip, r7
 8003b0e:	40e3      	lsrs	r3, r4
 8003b10:	4099      	lsls	r1, r3
 8003b12:	ea25 0307 	bic.w	r3, r5, r7
 8003b16:	430b      	orrs	r3, r1
 8003b18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 8003b1c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b1e:	4770      	bx	lr
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b20:	685d      	ldr	r5, [r3, #4]
 8003b22:	b355      	cbz	r5, 8003b7a <RCM_RegisterRegConv+0x186>
 8003b24:	790c      	ldrb	r4, [r1, #4]
    uint8_t i = 0;
 8003b26:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003b28:	792a      	ldrb	r2, [r5, #4]
 8003b2a:	42a2      	cmp	r2, r4
 8003b2c:	f47f af77 	bne.w	8003a1e <RCM_RegisterRegConv+0x2a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003b30:	682d      	ldr	r5, [r5, #0]
 8003b32:	680a      	ldr	r2, [r1, #0]
 8003b34:	4295      	cmp	r5, r2
 8003b36:	f47f af72 	bne.w	8003a1e <RCM_RegisterRegConv+0x2a>
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	e7a0      	b.n	8003a80 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003b3e:	2403      	movs	r4, #3
 8003b40:	f06f 051d 	mvn.w	r5, #29
 8003b44:	fb14 5403 	smlabb	r4, r4, r3, r5
 8003b48:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003b4c:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8003b50:	e7c0      	b.n	8003ad4 <RCM_RegisterRegConv+0xe0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003b52:	6835      	ldr	r5, [r6, #0]
 8003b54:	680a      	ldr	r2, [r1, #0]
 8003b56:	4295      	cmp	r5, r2
 8003b58:	f47f af67 	bne.w	8003a2a <RCM_RegisterRegConv+0x36>
      i++;
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	e78f      	b.n	8003a80 <RCM_RegisterRegConv+0x8c>
    uint8_t i = 0;
 8003b60:	2000      	movs	r0, #0
 8003b62:	e78d      	b.n	8003a80 <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b64:	2804      	cmp	r0, #4
 8003b66:	680a      	ldr	r2, [r1, #0]
 8003b68:	d889      	bhi.n	8003a7e <RCM_RegisterRegConv+0x8a>
 8003b6a:	e789      	b.n	8003a80 <RCM_RegisterRegConv+0x8c>
 8003b6c:	689e      	ldr	r6, [r3, #8]
      i++;
 8003b6e:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	f47f af56 	bne.w	8003a22 <RCM_RegisterRegConv+0x2e>
 8003b76:	680a      	ldr	r2, [r1, #0]
 8003b78:	e778      	b.n	8003a6c <RCM_RegisterRegConv+0x78>
 8003b7a:	689e      	ldr	r6, [r3, #8]
 8003b7c:	b116      	cbz	r6, 8003b84 <RCM_RegisterRegConv+0x190>
 8003b7e:	790c      	ldrb	r4, [r1, #4]
    uint8_t i = 0;
 8003b80:	4628      	mov	r0, r5
 8003b82:	e74e      	b.n	8003a22 <RCM_RegisterRegConv+0x2e>
 8003b84:	680a      	ldr	r2, [r1, #0]
 8003b86:	4630      	mov	r0, r6
 8003b88:	e770      	b.n	8003a6c <RCM_RegisterRegConv+0x78>
 8003b8a:	680a      	ldr	r2, [r1, #0]
 8003b8c:	e774      	b.n	8003a78 <RCM_RegisterRegConv+0x84>
 8003b8e:	bf00      	nop
 8003b90:	20001764 	.word	0x20001764
 8003b94:	20001740 	.word	0x20001740

08003b98 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003b98:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <RCM_ExecRegularConv+0x70>)
 8003b9c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003ba0:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	2b09      	cmp	r3, #9
 8003ba6:	d827      	bhi.n	8003bf8 <RCM_ExecRegularConv+0x60>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003ba8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003bac:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003bb8:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003bbc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003bc0:	fab1 f181 	clz	r1, r1
 8003bc4:	40cd      	lsrs	r5, r1
 8003bc6:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003bd2:	f020 001f 	bic.w	r0, r0, #31
 8003bd6:	4303      	orrs	r3, r0

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8003bde:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8003be2:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003be4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003be6:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003bea:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 8003bec:	079b      	lsls	r3, r3, #30
 8003bee:	d5fc      	bpl.n	8003bea <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003bf0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 8003bf2:	bc30      	pop	{r4, r5}
 8003bf4:	b280      	uxth	r0, r0
 8003bf6:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003bf8:	2103      	movs	r1, #3
 8003bfa:	f06f 001d 	mvn.w	r0, #29
 8003bfe:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003c02:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003c06:	e7d5      	b.n	8003bb4 <RCM_ExecRegularConv+0x1c>
 8003c08:	20001764 	.word	0x20001764

08003c0c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003c0c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003c0e:	4c0f      	ldr	r4, [pc, #60]	; (8003c4c <RCM_ExecUserConv+0x40>)
 8003c10:	7823      	ldrb	r3, [r4, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d000      	beq.n	8003c18 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <RCM_ExecUserConv+0x44>)
 8003c1a:	781d      	ldrb	r5, [r3, #0]
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f7ff ffbb 	bl	8003b98 <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003c26:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003c2a:	8008      	strh	r0, [r1, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	d0f0      	beq.n	8003c16 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003c34:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003c38:	4601      	mov	r1, r0
 8003c3a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003c40:	4628      	mov	r0, r5
 8003c42:	4633      	mov	r3, r6
}
 8003c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003c48:	4718      	bx	r3
 8003c4a:	bf00      	nop
 8003c4c:	20001761 	.word	0x20001761
 8003c50:	20001760 	.word	0x20001760
 8003c54:	20001740 	.word	0x20001740
 8003c58:	20001762 	.word	0x20001762

08003c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c5c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_MspInit+0x38>)
 8003c60:	2100      	movs	r1, #0
 8003c62:	9100      	str	r1, [sp, #0]
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003c72:	9200      	str	r2, [sp, #0]
 8003c74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	9101      	str	r1, [sp, #4]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003c8a:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003c8e:	f000 b9eb 	b.w	8004068 <HAL_NVIC_SetPriorityGrouping>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <ADC_IRQHandler+0x18>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003c9c:	0752      	lsls	r2, r2, #29
 8003c9e:	d400      	bmi.n	8003ca2 <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ca0:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	f022 020c 	bic.w	r2, r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003caa:	f7fe ba43 	b.w	8002134 <TSK_HighFrequencyTask>
 8003cae:	bf00      	nop
 8003cb0:	40012000 	.word	0x40012000

08003cb4 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003cb6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003cba:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003cbc:	f06f 0201 	mvn.w	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003cc2:	f001 bde5 	b.w	8005890 <R3_1_TIMx_UP_IRQHandler>
 8003cc6:	bf00      	nop
 8003cc8:	200001cc 	.word	0x200001cc

08003ccc <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003ccc:	4808      	ldr	r0, [pc, #32]	; (8003cf0 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 8003cce:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003cd0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8003cd4:	685b      	ldr	r3, [r3, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	0612      	lsls	r2, r2, #24
 8003cda:	d504      	bpl.n	8003ce6 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce0:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8003ce2:	f001 fdf7 	bl	80058d4 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003cea:	f7fe b9dd 	b.w	80020a8 <MC_Scheduler>
 8003cee:	bf00      	nop
 8003cf0:	200001cc 	.word	0x200001cc

08003cf4 <DMA1_Stream5_IRQHandler>:
  {
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <DMA1_Stream5_IRQHandler+0x18>)
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	d400      	bmi.n	8003cfe <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8003cfc:	4770      	bx	lr
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <DMA1_Stream5_IRQHandler+0x1c>)
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <DMA1_Stream5_IRQHandler+0x20>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	f7fc bf04 	b.w	8000b14 <ASPEP_HWDataReceivedIT>
 8003d0c:	40026000 	.word	0x40026000
 8003d10:	40026008 	.word	0x40026008
 8003d14:	20000538 	.word	0x20000538

08003d18 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8003d18:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003d1e:	0651      	lsls	r1, r2, #25
{
 8003d20:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003d22:	d46d      	bmi.n	8003e00 <USART2_IRQHandler+0xe8>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003d24:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003d26:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003d28:	0712      	lsls	r2, r2, #28
 8003d2a:	d402      	bmi.n	8003d32 <USART2_IRQHandler+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	0794      	lsls	r4, r2, #30
 8003d30:	d55e      	bpl.n	8003df0 <USART2_IRQHandler+0xd8>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003d34:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003d36:	07d2      	lsls	r2, r2, #31
 8003d38:	d523      	bpl.n	8003d82 <USART2_IRQHandler+0x6a>
  tmpreg = USARTx->SR;
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003d3e:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003d44:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003d4a:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003d50:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003d56:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003d5c:	9b01      	ldr	r3, [sp, #4]
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <USART2_IRQHandler+0x104>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	e842 3100 	strex	r1, r3, [r2]
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d1f7      	bne.n	8003d60 <USART2_IRQHandler+0x48>
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <USART2_IRQHandler+0x108>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d76:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	e842 3100 	strex	r1, r3, [r2]
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	d1f7      	bne.n	8003d72 <USART2_IRQHandler+0x5a>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003d84:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003d86:	06d1      	lsls	r1, r2, #27
 8003d88:	d530      	bpl.n	8003dec <USART2_IRQHandler+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	06db      	lsls	r3, r3, #27
 8003d8e:	d52d      	bpl.n	8003dec <USART2_IRQHandler+0xd4>
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <USART2_IRQHandler+0x108>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d96:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	e842 3100 	strex	r1, r3, [r2]
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	d1f7      	bne.n	8003d92 <USART2_IRQHandler+0x7a>
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <USART2_IRQHandler+0x104>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003da8:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	e843 2100 	strex	r1, r2, [r3]
 8003db0:	2900      	cmp	r1, #0
 8003db2:	d1f7      	bne.n	8003da4 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	e843 2100 	strex	r1, r2, [r3]
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	d1f7      	bne.n	8003db4 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003dc6:	6852      	ldr	r2, [r2, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	e843 2100 	strex	r1, r2, [r3]
 8003dd4:	2900      	cmp	r1, #0
 8003dd6:	d1f7      	bne.n	8003dc8 <USART2_IRQHandler+0xb0>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <USART2_IRQHandler+0x10c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003dda:	4813      	ldr	r0, [pc, #76]	; (8003e28 <USART2_IRQHandler+0x110>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8003ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003de2:	b004      	add	sp, #16
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003de8:	f7fc bee2 	b.w	8000bb0 <ASPEP_HWDMAReset>
}
 8003dec:	b004      	add	sp, #16
 8003dee:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003df0:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003df2:	0758      	lsls	r0, r3, #29
 8003df4:	d5c5      	bpl.n	8003d82 <USART2_IRQHandler+0x6a>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <USART2_IRQHandler+0x100>)
 8003df8:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003dfa:	07d2      	lsls	r2, r2, #31
 8003dfc:	d5c1      	bpl.n	8003d82 <USART2_IRQHandler+0x6a>
 8003dfe:	e79c      	b.n	8003d3a <USART2_IRQHandler+0x22>
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003e00:	490a      	ldr	r1, [pc, #40]	; (8003e2c <USART2_IRQHandler+0x114>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003e02:	4809      	ldr	r0, [pc, #36]	; (8003e28 <USART2_IRQHandler+0x110>)
 8003e04:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003e06:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	600a      	str	r2, [r1, #0]
 8003e10:	601c      	str	r4, [r3, #0]
 8003e12:	f7fc fcdd 	bl	80007d0 <ASPEP_HWDataTransmittedIT>
 8003e16:	e785      	b.n	8003d24 <USART2_IRQHandler+0xc>
 8003e18:	40004400 	.word	0x40004400
 8003e1c:	40004414 	.word	0x40004414
 8003e20:	4000440c 	.word	0x4000440c
 8003e24:	40026008 	.word	0x40026008
 8003e28:	20000538 	.word	0x20000538
 8003e2c:	400260a0 	.word	0x400260a0

08003e30 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003e30:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003e32:	f7fe fad7 	bl	80023e4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x6>

08003e38 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003e38:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003e3a:	4c0a      	ldr	r4, [pc, #40]	; (8003e64 <SysTick_Handler+0x2c>)
 8003e3c:	7823      	ldrb	r3, [r4, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d006      	beq.n	8003e50 <SysTick_Handler+0x18>
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003e46:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003e4c:	f7fe babe 	b.w	80023cc <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003e50:	f000 f8fe 	bl	8004050 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003e54:	f000 f970 	bl	8004138 <HAL_SYSTICK_IRQHandler>
 8003e58:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003e5a:	7023      	strb	r3, [r4, #0]
}
 8003e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003e60:	f7fe bab4 	b.w	80023cc <MC_RunMotorControlTasks>
 8003e64:	200005ac 	.word	0x200005ac

08003e68 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003e68:	6803      	ldr	r3, [r0, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f06f 0140 	mvn.w	r1, #64	; 0x40
{
 8003e70:	b4f0      	push	{r4, r5, r6, r7}
 8003e72:	f842 1b0c 	str.w	r1, [r2], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	e852 1f00 	ldrex	r1, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003e7a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	e842 1400 	strex	r4, r1, [r2]
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	d1f7      	bne.n	8003e76 <UASPEP_INIT+0xe>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8003e86:	f103 0114 	add.w	r1, r3, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	e851 2f00 	ldrex	r2, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	e841 2400 	strex	r4, r2, [r1]
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d1f7      	bne.n	8003e8a <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003e9a:	6902      	ldr	r2, [r0, #16]
 8003e9c:	4d16      	ldr	r5, [pc, #88]	; (8003ef8 <UASPEP_INIT+0x90>)
 8003e9e:	6881      	ldr	r1, [r0, #8]
 8003ea0:	5cac      	ldrb	r4, [r5, r2]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003ea2:	68c6      	ldr	r6, [r0, #12]
 8003ea4:	6842      	ldr	r2, [r0, #4]
 8003ea6:	5dae      	ldrb	r6, [r5, r6]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003ea8:	440c      	add	r4, r1
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003eaa:	1d1f      	adds	r7, r3, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003eac:	4619      	mov	r1, r3
 8003eae:	60a7      	str	r7, [r4, #8]
 8003eb0:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003eb4:	f841 4b14 	str.w	r4, [r1], #20
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003eb8:	5994      	ldr	r4, [r2, r6]
 8003eba:	f044 0410 	orr.w	r4, r4, #16
 8003ebe:	5194      	str	r4, [r2, r6]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	e851 4f00 	ldrex	r4, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ec4:	f044 0401 	orr.w	r4, r4, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	e841 4600 	strex	r6, r4, [r1]
 8003ecc:	2e00      	cmp	r6, #0
 8003ece:	d1f7      	bne.n	8003ec0 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003ed0:	68c1      	ldr	r1, [r0, #12]
 8003ed2:	5c68      	ldrb	r0, [r5, r1]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4402      	add	r2, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003ed8:	3304      	adds	r3, #4
 8003eda:	f06f 0040 	mvn.w	r0, #64	; 0x40
 8003ede:	6093      	str	r3, [r2, #8]
 8003ee0:	f841 0b14 	str.w	r0, [r1], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	e841 3200 	strex	r2, r3, [r1]
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	d1f7      	bne.n	8003ee4 <UASPEP_INIT+0x7c>
}
 8003ef4:	bcf0      	pop	{r4, r5, r6, r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	08006d60 	.word	0x08006d60

08003efc <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003efc:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003efe:	4f1b      	ldr	r7, [pc, #108]	; (8003f6c <UASPEP_SEND_PACKET+0x70>)
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003f00:	6906      	ldr	r6, [r0, #16]
 8003f02:	6884      	ldr	r4, [r0, #8]
 8003f04:	5dbb      	ldrb	r3, [r7, r6]
 8003f06:	58e5      	ldr	r5, [r4, r3]
 8003f08:	07ed      	lsls	r5, r5, #31
 8003f0a:	4423      	add	r3, r4
 8003f0c:	d422      	bmi.n	8003f54 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003f0e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	0c09      	lsrs	r1, r1, #16
 8003f14:	0409      	lsls	r1, r1, #16
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8003f1a:	b1a4      	cbz	r4, 8003f46 <UASPEP_SEND_PACKET+0x4a>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003f1c:	2e03      	cmp	r6, #3
 8003f1e:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003f22:	bf88      	it	hi
 8003f24:	f104 030c 	addhi.w	r3, r4, #12
 8003f28:	f016 0603 	ands.w	r6, r6, #3
 8003f2c:	d015      	beq.n	8003f5a <UASPEP_SEND_PACKET+0x5e>
 8003f2e:	2e01      	cmp	r6, #1
 8003f30:	d019      	beq.n	8003f66 <UASPEP_SEND_PACKET+0x6a>
 8003f32:	2e02      	cmp	r6, #2
 8003f34:	bf0c      	ite	eq
 8003f36:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8003f3a:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	6903      	ldr	r3, [r0, #16]
 8003f42:	5cfb      	ldrb	r3, [r7, r3]
 8003f44:	4423      	add	r3, r4
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003f4c:	2001      	movs	r0, #1
  else
  {
    result = false;
  }
  return result;
}
 8003f4e:	bcf0      	pop	{r4, r5, r6, r7}
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	4770      	bx	lr
    result = false;
 8003f54:	2000      	movs	r0, #0
}
 8003f56:	bcf0      	pop	{r4, r5, r6, r7}
 8003f58:	4770      	bx	lr
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	6903      	ldr	r3, [r0, #16]
 8003f60:	5cfb      	ldrb	r3, [r7, r3]
 8003f62:	4423      	add	r3, r4
 8003f64:	e7ef      	b.n	8003f46 <UASPEP_SEND_PACKET+0x4a>
 8003f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6a:	e7f7      	b.n	8003f5c <UASPEP_SEND_PACKET+0x60>
 8003f6c:	08006d60 	.word	0x08006d60

08003f70 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003f70:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003f72:	68c3      	ldr	r3, [r0, #12]
 8003f74:	4d07      	ldr	r5, [pc, #28]	; (8003f94 <UASPEP_RECEIVE_BUFFER+0x24>)
 8003f76:	6844      	ldr	r4, [r0, #4]
 8003f78:	5ce8      	ldrb	r0, [r5, r3]
 8003f7a:	1825      	adds	r5, r4, r0
 8003f7c:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003f7e:	686b      	ldr	r3, [r5, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003f88:	5823      	ldr	r3, [r4, r0]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8003f90:	bc30      	pop	{r4, r5}
 8003f92:	4770      	bx	lr
 8003f94:	08006d60 	.word	0x08006d60

08003f98 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003f98:	6802      	ldr	r2, [r0, #0]
{
 8003f9a:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003fa0:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003fa2:	6853      	ldr	r3, [r2, #4]
 8003fa4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003fa6:	9b01      	ldr	r3, [sp, #4]
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
 8003fa8:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003fae:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	e842 3100 	strex	r1, r3, [r2]
 8003fb6:	2900      	cmp	r1, #0
 8003fb8:	d1f7      	bne.n	8003faa <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop

08003fc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc0:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <SystemInit+0x10>)
 8003fc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fce:	4770      	bx	lr
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_InitTick+0x3c>)
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <HAL_InitTick+0x40>)
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
{
 8003fde:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fe4:	fbb0 f0f2 	udiv	r0, r0, r2
 8003fe8:	fbb3 f0f0 	udiv	r0, r3, r0
 8003fec:	f000 f888 	bl	8004100 <HAL_SYSTICK_Config>
 8003ff0:	b908      	cbnz	r0, 8003ff6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff2:	2d0f      	cmp	r5, #15
 8003ff4:	d901      	bls.n	8003ffa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003ff6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4629      	mov	r1, r5
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f000 f844 	bl	8004090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_InitTick+0x44>)
 800400a:	4620      	mov	r0, r4
 800400c:	601d      	str	r5, [r3, #0]
}
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	200005b4 	.word	0x200005b4
 8004014:	200005b0 	.word	0x200005b0
 8004018:	200005b8 	.word	0x200005b8

0800401c <HAL_Init>:
{
 800401c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_Init+0x30>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004038:	2003      	movs	r0, #3
 800403a:	f000 f815 	bl	8004068 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800403e:	2004      	movs	r0, #4
 8004040:	f7ff ffc8 	bl	8003fd4 <HAL_InitTick>
  HAL_MspInit();
 8004044:	f7ff fe0a 	bl	8003c5c <HAL_MspInit>
}
 8004048:	2000      	movs	r0, #0
 800404a:	bd08      	pop	{r3, pc}
 800404c:	40023c00 	.word	0x40023c00

08004050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004050:	4a03      	ldr	r2, [pc, #12]	; (8004060 <HAL_IncTick+0x10>)
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_IncTick+0x14>)
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	440b      	add	r3, r1
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000180c 	.word	0x2000180c
 8004064:	200005b4 	.word	0x200005b4

08004068 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004068:	4908      	ldr	r1, [pc, #32]	; (800408c <HAL_NVIC_SetPriorityGrouping+0x24>)
 800406a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800406e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004070:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004074:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004076:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800407a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800407c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004084:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004088:	60cb      	str	r3, [r1, #12]
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_NVIC_SetPriority+0x68>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800409a:	f1c3 0507 	rsb	r5, r3, #7
 800409e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	bf28      	it	cs
 80040a6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a8:	2c06      	cmp	r4, #6
 80040aa:	d919      	bls.n	80040e0 <HAL_NVIC_SetPriority+0x50>
 80040ac:	3b03      	subs	r3, #3
 80040ae:	f04f 34ff 	mov.w	r4, #4294967295
 80040b2:	409c      	lsls	r4, r3
 80040b4:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	f04f 34ff 	mov.w	r4, #4294967295
 80040bc:	40ac      	lsls	r4, r5
 80040be:	ea21 0104 	bic.w	r1, r1, r4
 80040c2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80040c4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80040ca:	db0c      	blt.n	80040e6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80040d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80040d4:	0109      	lsls	r1, r1, #4
 80040d6:	b2c9      	uxtb	r1, r1
 80040d8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80040dc:	bc30      	pop	{r4, r5}
 80040de:	4770      	bx	lr
 80040e0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	4613      	mov	r3, r2
 80040e4:	e7e8      	b.n	80040b8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_NVIC_SetPriority+0x6c>)
 80040e8:	f000 000f 	and.w	r0, r0, #15
 80040ec:	0109      	lsls	r1, r1, #4
 80040ee:	4403      	add	r3, r0
 80040f0:	b2c9      	uxtb	r1, r1
 80040f2:	7619      	strb	r1, [r3, #24]
 80040f4:	bc30      	pop	{r4, r5}
 80040f6:	4770      	bx	lr
 80040f8:	e000ed00 	.word	0xe000ed00
 80040fc:	e000ecfc 	.word	0xe000ecfc

08004100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004100:	3801      	subs	r0, #1
 8004102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004106:	d20e      	bcs.n	8004126 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410c:	4c08      	ldr	r4, [pc, #32]	; (8004130 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	20f0      	movs	r0, #240	; 0xf0
 8004112:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004116:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004118:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800411a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800411e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004122:	6019      	str	r1, [r3, #0]
 8004124:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2001      	movs	r0, #1
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e010 	.word	0xe000e010
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop

08004138 <HAL_SYSTICK_IRQHandler>:
{
 8004138:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800413a:	f7ff fffb 	bl	8004134 <HAL_SYSTICK_Callback>
}
 800413e:	bd08      	pop	{r3, pc}

08004140 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004140:	4b01      	ldr	r3, [pc, #4]	; (8004148 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	200005b0 	.word	0x200005b0

0800414c <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <LL_ADC_CommonInit+0x28>)
 800414e:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004150:	f013 0301 	ands.w	r3, r3, #1
 8004154:	d10b      	bne.n	800416e <LL_ADC_CommonInit+0x22>
 8004156:	4602      	mov	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8004158:	6840      	ldr	r0, [r0, #4]
{
 800415a:	b410      	push	{r4}
 800415c:	680c      	ldr	r4, [r1, #0]
 800415e:	f420 3140 	bic.w	r1, r0, #196608	; 0x30000
 8004162:	4321      	orrs	r1, r4
  ErrorStatus status = SUCCESS;
 8004164:	4618      	mov	r0, r3
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
  }
  
  return status;
}
 8004166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800416a:	6051      	str	r1, [r2, #4]
 800416c:	4770      	bx	lr
    status = ERROR;
 800416e:	2001      	movs	r0, #1
}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40012000 	.word	0x40012000

08004178 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004178:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800417a:	f013 0301 	ands.w	r3, r3, #1
 800417e:	d113      	bne.n	80041a8 <LL_ADC_Init+0x30>
{
 8004180:	b470      	push	{r4, r5, r6}
 8004182:	4602      	mov	r2, r0
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004184:	6844      	ldr	r4, [r0, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004186:	e891 0061 	ldmia.w	r1, {r0, r5, r6}
    MODIFY_REG(ADCx->CR1,
 800418a:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 800418e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8004192:	4330      	orrs	r0, r6
 8004194:	4320      	orrs	r0, r4
 8004196:	6050      	str	r0, [r2, #4]
    MODIFY_REG(ADCx->CR2,
 8004198:	6891      	ldr	r1, [r2, #8]
 800419a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800419e:	4329      	orrs	r1, r5
  ErrorStatus status = SUCCESS;
 80041a0:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80041a2:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(ADCx->CR2,
 80041a4:	6091      	str	r1, [r2, #8]
}
 80041a6:	4770      	bx	lr
    status = ERROR;
 80041a8:	2001      	movs	r0, #1
}
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_REG_Init>:
 80041ac:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80041ae:	07db      	lsls	r3, r3, #31
 80041b0:	d41a      	bmi.n	80041e8 <LL_ADC_REG_Init+0x3c>
{
 80041b2:	b470      	push	{r4, r5, r6}
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80041b4:	684c      	ldr	r4, [r1, #4]
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 80041b6:	6843      	ldr	r3, [r0, #4]
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80041b8:	b9c4      	cbnz	r4, 80041ec <LL_ADC_REG_Init+0x40>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80041ba:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 80041be:	6043      	str	r3, [r0, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80041c0:	6882      	ldr	r2, [r0, #8]
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <LL_ADC_REG_Init+0x4c>)
 80041c4:	68ce      	ldr	r6, [r1, #12]
 80041c6:	690d      	ldr	r5, [r1, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	680a      	ldr	r2, [r1, #0]
 80041cc:	4333      	orrs	r3, r6
 80041ce:	432b      	orrs	r3, r5
 80041d0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80041d4:	4313      	orrs	r3, r2
 80041d6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80041d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80041da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041de:	4323      	orrs	r3, r4
 80041e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80041e2:	bc70      	pop	{r4, r5, r6}
  ErrorStatus status = SUCCESS;
 80041e4:	2000      	movs	r0, #0
}
 80041e6:	4770      	bx	lr
    status = ERROR;
 80041e8:	2001      	movs	r0, #1
}
 80041ea:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 80041ec:	688a      	ldr	r2, [r1, #8]
 80041ee:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 80041f2:	4313      	orrs	r3, r2
 80041f4:	6043      	str	r3, [r0, #4]
 80041f6:	e7e3      	b.n	80041c0 <LL_ADC_REG_Init+0x14>
 80041f8:	c0fffcfd 	.word	0xc0fffcfd

080041fc <LL_ADC_INJ_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80041fc:	6883      	ldr	r3, [r0, #8]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80041fe:	07db      	lsls	r3, r3, #31
 8004200:	d418      	bmi.n	8004234 <LL_ADC_INJ_Init+0x38>
{
 8004202:	b430      	push	{r4, r5}
  if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_INJ_SEQ_SCAN_DISABLE)
 8004204:	684c      	ldr	r4, [r1, #4]
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004206:	b9bc      	cbnz	r4, 8004238 <LL_ADC_INJ_Init+0x3c>
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004208:	6843      	ldr	r3, [r0, #4]
 800420a:	68ca      	ldr	r2, [r1, #12]
 800420c:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8004210:	4313      	orrs	r3, r2
 8004212:	6043      	str	r3, [r0, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004214:	680a      	ldr	r2, [r1, #0]
 8004216:	6881      	ldr	r1, [r0, #8]
 8004218:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800421c:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8004220:	430a      	orrs	r2, r1
 8004222:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8004224:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004226:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800422a:	4323      	orrs	r3, r4
 800422c:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800422e:	bc30      	pop	{r4, r5}
  ErrorStatus status = SUCCESS;
 8004230:	2000      	movs	r0, #0
}
 8004232:	4770      	bx	lr
    status = ERROR;
 8004234:	2001      	movs	r0, #1
}
 8004236:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 8004238:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800423c:	6842      	ldr	r2, [r0, #4]
 800423e:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8004242:	432a      	orrs	r2, r5
 8004244:	431a      	orrs	r2, r3
 8004246:	6042      	str	r2, [r0, #4]
 8004248:	e7e4      	b.n	8004214 <LL_ADC_INJ_Init+0x18>
 800424a:	bf00      	nop

0800424c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004250:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	fa94 f2a4 	rbit	r2, r4
 8004256:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800425a:	fa34 f302 	lsrs.w	r3, r4, r2
 800425e:	d07d      	beq.n	800435c <LL_GPIO_Init+0x110>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004260:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004264:	2703      	movs	r7, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004266:	f04f 0e0f 	mov.w	lr, #15
 800426a:	e016      	b.n	800429a <LL_GPIO_Init+0x4e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800426c:	f8d0 8000 	ldr.w	r8, [r0]
 8004270:	fa93 f6a3 	rbit	r6, r3
 8004274:	fab6 f686 	clz	r6, r6
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	0076      	lsls	r6, r6, #1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa07 f606 	lsl.w	r6, r7, r6
 8004288:	409d      	lsls	r5, r3
 800428a:	ea28 0606 	bic.w	r6, r8, r6
 800428e:	4335      	orrs	r5, r6
 8004290:	6005      	str	r5, [r0, #0]
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8004292:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004294:	fa34 f302 	lsrs.w	r3, r4, r2
 8004298:	d060      	beq.n	800435c <LL_GPIO_Init+0x110>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800429a:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin)
 800429e:	4023      	ands	r3, r4
 80042a0:	d0f7      	beq.n	8004292 <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80042a2:	684d      	ldr	r5, [r1, #4]
 80042a4:	1e6e      	subs	r6, r5, #1
 80042a6:	2e01      	cmp	r6, #1
 80042a8:	d81f      	bhi.n	80042ea <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80042aa:	6886      	ldr	r6, [r0, #8]
 80042ac:	fa93 f8a3 	rbit	r8, r3
 80042b0:	fab8 f888 	clz	r8, r8
 80042b4:	fa93 faa3 	rbit	sl, r3
 80042b8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80042bc:	fa07 f808 	lsl.w	r8, r7, r8
 80042c0:	ea26 0808 	bic.w	r8, r6, r8
 80042c4:	faba fa8a 	clz	sl, sl
 80042c8:	688e      	ldr	r6, [r1, #8]
 80042ca:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80042ce:	fa06 f60a 	lsl.w	r6, r6, sl
 80042d2:	ea48 0606 	orr.w	r6, r8, r6
 80042d6:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80042d8:	6846      	ldr	r6, [r0, #4]
 80042da:	ea26 0803 	bic.w	r8, r6, r3
 80042de:	68ce      	ldr	r6, [r1, #12]
 80042e0:	fb06 f603 	mul.w	r6, r6, r3
 80042e4:	ea48 0606 	orr.w	r6, r8, r6
 80042e8:	6046      	str	r6, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80042ea:	68c6      	ldr	r6, [r0, #12]
 80042ec:	fa93 f8a3 	rbit	r8, r3
 80042f0:	fab8 f888 	clz	r8, r8
 80042f4:	fa93 faa3 	rbit	sl, r3
 80042f8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80042fc:	fa07 f808 	lsl.w	r8, r7, r8
 8004300:	ea26 0808 	bic.w	r8, r6, r8
 8004304:	faba fa8a 	clz	sl, sl
 8004308:	690e      	ldr	r6, [r1, #16]
 800430a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800430e:	fa06 f60a 	lsl.w	r6, r6, sl
 8004312:	ea48 0606 	orr.w	r6, r8, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004316:	2d02      	cmp	r5, #2
 8004318:	60c6      	str	r6, [r0, #12]
 800431a:	d1a7      	bne.n	800426c <LL_GPIO_Init+0x20>
 800431c:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004320:	fab6 f686 	clz	r6, r6
 8004324:	2e07      	cmp	r6, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004326:	ea4f 2813 	mov.w	r8, r3, lsr #8
 800432a:	dc1a      	bgt.n	8004362 <LL_GPIO_Init+0x116>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800432c:	6a06      	ldr	r6, [r0, #32]
 800432e:	fa93 f8a3 	rbit	r8, r3
 8004332:	fab8 f888 	clz	r8, r8
 8004336:	fa93 faa3 	rbit	sl, r3
 800433a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800433e:	fa0e f808 	lsl.w	r8, lr, r8
 8004342:	ea26 0808 	bic.w	r8, r6, r8
 8004346:	faba fa8a 	clz	sl, sl
 800434a:	694e      	ldr	r6, [r1, #20]
 800434c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004350:	fa06 f60a 	lsl.w	r6, r6, sl
 8004354:	ea48 0606 	orr.w	r6, r8, r6
 8004358:	6206      	str	r6, [r0, #32]
}
 800435a:	e787      	b.n	800426c <LL_GPIO_Init+0x20>
  }

  return (SUCCESS);
}
 800435c:	2000      	movs	r0, #0
 800435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004364:	fa98 faa8 	rbit	sl, r8
 8004368:	faba fa8a 	clz	sl, sl
 800436c:	fa98 f8a8 	rbit	r8, r8
 8004370:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004374:	fa0e fa0a 	lsl.w	sl, lr, sl
 8004378:	ea26 090a 	bic.w	r9, r6, sl
 800437c:	fab8 f888 	clz	r8, r8
 8004380:	694e      	ldr	r6, [r1, #20]
 8004382:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004386:	fa06 f608 	lsl.w	r6, r6, r8
 800438a:	ea49 0606 	orr.w	r6, r9, r6
 800438e:	6246      	str	r6, [r0, #36]	; 0x24
}
 8004390:	e76c      	b.n	800426c <LL_GPIO_Init+0x20>
 8004392:	bf00      	nop

08004394 <LL_RCC_GetSystemClocksFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <LL_RCC_GetSystemClocksFreq+0x80>)
 8004396:	6893      	ldr	r3, [r2, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800439c:	2b04      	cmp	r3, #4
{
 800439e:	b4f0      	push	{r4, r5, r6, r7}
  switch (LL_RCC_GetSysClkSource())
 80043a0:	d036      	beq.n	8004410 <LL_RCC_GetSystemClocksFreq+0x7c>
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d132      	bne.n	800440c <LL_RCC_GetSystemClocksFreq+0x78>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043a6:	6857      	ldr	r7, [r2, #4]
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043a8:	6855      	ldr	r5, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043aa:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80043ac:	6851      	ldr	r1, [r2, #4]
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80043ae:	4c1a      	ldr	r4, [pc, #104]	; (8004418 <LL_RCC_GetSystemClocksFreq+0x84>)
 80043b0:	4e1a      	ldr	r6, [pc, #104]	; (800441c <LL_RCC_GetSystemClocksFreq+0x88>)
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043b2:	f3c1 4101 	ubfx	r1, r1, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043b6:	f3c3 1288 	ubfx	r2, r3, #6, #9
  switch (pllsource)
 80043ba:	f417 0f80 	tst.w	r7, #4194304	; 0x400000
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043be:	f101 0101 	add.w	r1, r1, #1
      pllinputfreq = HSE_VALUE;
 80043c2:	bf0c      	ite	eq
 80043c4:	4623      	moveq	r3, r4
 80043c6:	4633      	movne	r3, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043c8:	f005 043f 	and.w	r4, r5, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043cc:	0049      	lsls	r1, r1, #1
 80043ce:	fbb3 f3f4 	udiv	r3, r3, r4
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	fbb3 f3f1 	udiv	r3, r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <LL_RCC_GetSystemClocksFreq+0x80>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80043dc:	6003      	str	r3, [r0, #0]
 80043de:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80043e0:	4d0f      	ldr	r5, [pc, #60]	; (8004420 <LL_RCC_GetSystemClocksFreq+0x8c>)
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80043e2:	4c10      	ldr	r4, [pc, #64]	; (8004424 <LL_RCC_GetSystemClocksFreq+0x90>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80043e4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80043e8:	5c69      	ldrb	r1, [r5, r1]
 80043ea:	40cb      	lsrs	r3, r1
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80043ec:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043ee:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80043f0:	f3c1 2182 	ubfx	r1, r1, #10, #3
 80043f4:	5c61      	ldrb	r1, [r4, r1]
 80043f6:	fa23 f101 	lsr.w	r1, r3, r1
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80043fa:	6081      	str	r1, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043fc:	6892      	ldr	r2, [r2, #8]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80043fe:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8004402:	5ca2      	ldrb	r2, [r4, r2]
 8004404:	40d3      	lsrs	r3, r2
}
 8004406:	bcf0      	pop	{r4, r5, r6, r7}
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004408:	60c3      	str	r3, [r0, #12]
}
 800440a:	4770      	bx	lr
      frequency = HSI_VALUE;
 800440c:	4b02      	ldr	r3, [pc, #8]	; (8004418 <LL_RCC_GetSystemClocksFreq+0x84>)
 800440e:	e7e4      	b.n	80043da <LL_RCC_GetSystemClocksFreq+0x46>
  switch (LL_RCC_GetSysClkSource())
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <LL_RCC_GetSystemClocksFreq+0x88>)
 8004412:	e7e2      	b.n	80043da <LL_RCC_GetSystemClocksFreq+0x46>
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400
 800441c:	007a1200 	.word	0x007a1200
 8004420:	08006d68 	.word	0x08006d68
 8004424:	08006d78 	.word	0x08006d78

08004428 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	4a24      	ldr	r2, [pc, #144]	; (80044bc <LL_TIM_Init+0x94>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800442a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	4290      	cmp	r0, r2
{
 800442e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004430:	d034      	beq.n	800449c <LL_TIM_Init+0x74>
 8004432:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004436:	d01d      	beq.n	8004474 <LL_TIM_Init+0x4c>
 8004438:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800443c:	4290      	cmp	r0, r2
 800443e:	d019      	beq.n	8004474 <LL_TIM_Init+0x4c>
 8004440:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004444:	4290      	cmp	r0, r2
 8004446:	d015      	beq.n	8004474 <LL_TIM_Init+0x4c>
 8004448:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800444c:	4290      	cmp	r0, r2
 800444e:	d011      	beq.n	8004474 <LL_TIM_Init+0x4c>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004450:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004454:	4290      	cmp	r0, r2
 8004456:	d011      	beq.n	800447c <LL_TIM_Init+0x54>
 8004458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800445c:	4290      	cmp	r0, r2
 800445e:	d00d      	beq.n	800447c <LL_TIM_Init+0x54>
 8004460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004464:	4290      	cmp	r0, r2
 8004466:	d009      	beq.n	800447c <LL_TIM_Init+0x54>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004468:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800446a:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800446c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800446e:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8004470:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004472:	e00c      	b.n	800448e <LL_TIM_Init+0x66>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004474:	684a      	ldr	r2, [r1, #4]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	4313      	orrs	r3, r2
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800447c:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004484:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004486:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004488:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800448a:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800448c:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800448e:	6943      	ldr	r3, [r0, #20]
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004496:	bc30      	pop	{r4, r5}
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800449c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800449e:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80044a0:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	4323      	orrs	r3, r4
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80044ae:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80044b0:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80044b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80044b4:	6282      	str	r2, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80044b6:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80044b8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80044ba:	e7e8      	b.n	800448e <LL_TIM_Init+0x66>
 80044bc:	40010000 	.word	0x40010000

080044c0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80044c0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80044c4:	b4f0      	push	{r4, r5, r6, r7}
  switch (Channel)
 80044c6:	d06b      	beq.n	80045a0 <LL_TIM_OC_Init+0xe0>
 80044c8:	d826      	bhi.n	8004518 <LL_TIM_OC_Init+0x58>
 80044ca:	2901      	cmp	r1, #1
 80044cc:	f000 808a 	beq.w	80045e4 <LL_TIM_OC_Init+0x124>
 80044d0:	2910      	cmp	r1, #16
 80044d2:	d146      	bne.n	8004562 <LL_TIM_OC_Init+0xa2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044d4:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80044d6:	6911      	ldr	r1, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	4d67      	ldr	r5, [pc, #412]	; (8004678 <LL_TIM_OC_Init+0x1b8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044da:	f024 0410 	bic.w	r4, r4, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80044de:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044e2:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80044e4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044e6:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80044e8:	f023 0320 	bic.w	r3, r3, #32
 80044ec:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80044f0:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80044f2:	f023 0310 	bic.w	r3, r3, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80044f6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80044fc:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004500:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	d037      	beq.n	8004576 <LL_TIM_OC_Init+0xb6>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004506:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004508:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800450a:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800450c:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800450e:	6385      	str	r5, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004510:	6203      	str	r3, [r0, #32]
}
 8004512:	bcf0      	pop	{r4, r5, r6, r7}
 8004514:	4610      	mov	r0, r2
 8004516:	4770      	bx	lr
  switch (Channel)
 8004518:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800451c:	d121      	bne.n	8004562 <LL_TIM_OC_Init+0xa2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800451e:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004520:	6911      	ldr	r1, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004522:	4d55      	ldr	r5, [pc, #340]	; (8004678 <LL_TIM_OC_Init+0x1b8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004524:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004528:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800452c:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800452e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004530:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004536:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800453a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800453c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004540:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004546:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800454a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454e:	d00c      	beq.n	800456a <LL_TIM_OC_Init+0xaa>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004550:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004552:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004554:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004556:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004558:	6405      	str	r5, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800455a:	6203      	str	r3, [r0, #32]
}
 800455c:	bcf0      	pop	{r4, r5, r6, r7}
 800455e:	4610      	mov	r0, r2
 8004560:	4770      	bx	lr
  switch (Channel)
 8004562:	2201      	movs	r2, #1
}
 8004564:	4610      	mov	r0, r2
 8004566:	bcf0      	pop	{r4, r5, r6, r7}
 8004568:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800456a:	6995      	ldr	r5, [r2, #24]
 800456c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8004570:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004574:	e7ec      	b.n	8004550 <LL_TIM_OC_Init+0x90>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004576:	e9d2 6505 	ldrd	r6, r5, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800457a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800457e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004582:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004586:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800458a:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800458c:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004592:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004596:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800459a:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 800459e:	e7b2      	b.n	8004506 <LL_TIM_OC_Init+0x46>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80045a0:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80045a2:	6911      	ldr	r1, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a4:	4d34      	ldr	r5, [pc, #208]	; (8004678 <LL_TIM_OC_Init+0x1b8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80045a6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80045aa:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80045ae:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80045b0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045b2:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80045b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045bc:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80045be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80045c2:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c6:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80045c8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80045cc:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	d029      	beq.n	8004626 <LL_TIM_OC_Init+0x166>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045d2:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045d4:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80045d6:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045d8:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045da:	63c5      	str	r5, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045dc:	6203      	str	r3, [r0, #32]
}
 80045de:	bcf0      	pop	{r4, r5, r6, r7}
 80045e0:	4610      	mov	r0, r2
 80045e2:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80045e4:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80045e6:	6911      	ldr	r1, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	4d23      	ldr	r5, [pc, #140]	; (8004678 <LL_TIM_OC_Init+0x1b8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80045ea:	f024 0401 	bic.w	r4, r4, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80045ee:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80045f2:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045f4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045f6:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	430b      	orrs	r3, r1
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80045fe:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004600:	f023 0301 	bic.w	r3, r3, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004604:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800460a:	ea43 0307 	orr.w	r3, r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800460e:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004612:	d01d      	beq.n	8004650 <LL_TIM_OC_Init+0x190>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004614:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004616:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004618:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800461a:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800461c:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800461e:	6203      	str	r3, [r0, #32]
}
 8004620:	bcf0      	pop	{r4, r5, r6, r7}
 8004622:	4610      	mov	r0, r2
 8004624:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004626:	e9d2 6505 	ldrd	r6, r5, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800462a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800462e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004632:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004636:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800463a:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800463c:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800463e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004642:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004646:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800464a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 800464e:	e7c0      	b.n	80045d2 <LL_TIM_OC_Init+0x112>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004650:	e9d2 6505 	ldrd	r6, r5, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004654:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004658:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800465c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004660:	432c      	orrs	r4, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004662:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004664:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004666:	f023 0304 	bic.w	r3, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800466a:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800466e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004672:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8004676:	e7cd      	b.n	8004614 <LL_TIM_OC_Init+0x154>
 8004678:	40010000 	.word	0x40010000

0800467c <LL_TIM_BDTR_Init>:
{
 800467c:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800467e:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004682:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004684:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004686:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800468c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800468e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004692:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004694:	89ca      	ldrh	r2, [r1, #14]
 8004696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800469a:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800469e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80046a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80046a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046aa:	430b      	orrs	r3, r1
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80046ac:	6443      	str	r3, [r0, #68]	; 0x44
}
 80046ae:	bc30      	pop	{r4, r5}
 80046b0:	2000      	movs	r0, #0
 80046b2:	4770      	bx	lr

080046b4 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80046b4:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046b6:	049b      	lsls	r3, r3, #18
 80046b8:	d501      	bpl.n	80046be <LL_USART_Init+0xa>
  ErrorStatus status = ERROR;
 80046ba:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80046bc:	4770      	bx	lr
{
 80046be:	b530      	push	{r4, r5, lr}
    MODIFY_REG(USARTx->CR1,
 80046c0:	684b      	ldr	r3, [r1, #4]
 80046c2:	4604      	mov	r4, r0
 80046c4:	460d      	mov	r5, r1
 80046c6:	e9d1 1003 	ldrd	r1, r0, [r1, #12]
 80046ca:	68e2      	ldr	r2, [r4, #12]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	69a9      	ldr	r1, [r5, #24]
 80046d0:	4303      	orrs	r3, r0
 80046d2:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80046d6:	430b      	orrs	r3, r1
 80046d8:	f022 020c 	bic.w	r2, r2, #12
 80046dc:	4313      	orrs	r3, r2
 80046de:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046e4:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80046e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046ea:	431a      	orrs	r2, r3
 80046ec:	6122      	str	r2, [r4, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046ee:	6963      	ldr	r3, [r4, #20]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	430b      	orrs	r3, r1
{
 80046f6:	b085      	sub	sp, #20
 80046f8:	6163      	str	r3, [r4, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046fa:	4668      	mov	r0, sp
 80046fc:	f7ff fe4a 	bl	8004394 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <LL_USART_Init+0xf0>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d02b      	beq.n	800475e <LL_USART_Init+0xaa>
    else if (USARTx == USART2)
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <LL_USART_Init+0xf4>)
 8004708:	429c      	cmp	r4, r3
 800470a:	d005      	beq.n	8004718 <LL_USART_Init+0x64>
    else if (USARTx == USART6)
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <LL_USART_Init+0xf8>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d025      	beq.n	800475e <LL_USART_Init+0xaa>
  ErrorStatus status = ERROR;
 8004712:	2001      	movs	r0, #1
}
 8004714:	b005      	add	sp, #20
 8004716:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004718:	9902      	ldr	r1, [sp, #8]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800471a:	2900      	cmp	r1, #0
 800471c:	d0f9      	beq.n	8004712 <LL_USART_Init+0x5e>
        && (USART_InitStruct->BaudRate != 0U))
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f6      	beq.n	8004712 <LL_USART_Init+0x5e>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004724:	69aa      	ldr	r2, [r5, #24]
 8004726:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800472a:	d01a      	beq.n	8004762 <LL_USART_Init+0xae>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800472c:	2019      	movs	r0, #25
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	fba1 0100 	umull	r0, r1, r1, r0
 8004734:	0f9b      	lsrs	r3, r3, #30
 8004736:	f7fb fd4d 	bl	80001d4 <__aeabi_uldivmod>
 800473a:	4d1d      	ldr	r5, [pc, #116]	; (80047b0 <LL_USART_Init+0xfc>)
 800473c:	fba5 2300 	umull	r2, r3, r5, r0
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	fb01 0213 	mls	r2, r1, r3, r0
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	3232      	adds	r2, #50	; 0x32
 800474c:	fba5 1202 	umull	r1, r2, r5, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 8004756:	b29b      	uxth	r3, r3
 8004758:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 800475a:	2000      	movs	r0, #0
 800475c:	e7da      	b.n	8004714 <LL_USART_Init+0x60>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800475e:	9903      	ldr	r1, [sp, #12]
 8004760:	e7db      	b.n	800471a <LL_USART_Init+0x66>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004762:	18da      	adds	r2, r3, r3
 8004764:	f04f 0019 	mov.w	r0, #25
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	415b      	adcs	r3, r3
 800476e:	fba1 0100 	umull	r0, r1, r1, r0
 8004772:	f7fb fd2f 	bl	80001d4 <__aeabi_uldivmod>
 8004776:	4d0e      	ldr	r5, [pc, #56]	; (80047b0 <LL_USART_Init+0xfc>)
 8004778:	fba5 3200 	umull	r3, r2, r5, r0
 800477c:	0951      	lsrs	r1, r2, #5
 800477e:	2264      	movs	r2, #100	; 0x64
 8004780:	fb02 0311 	mls	r3, r2, r1, r0
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	3332      	adds	r3, #50	; 0x32
 8004788:	fba5 2303 	umull	r2, r3, r5, r3
 800478c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004796:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800479a:	4413      	add	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80047a0:	2000      	movs	r0, #0
 80047a2:	e7b7      	b.n	8004714 <LL_USART_Init+0x60>
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40004400 	.word	0x40004400
 80047ac:	40011400 	.word	0x40011400
 80047b0:	51eb851f 	.word	0x51eb851f

080047b4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <LL_SetSystemCoreClock+0x8>)
 80047b6:	6018      	str	r0, [r3, #0]
}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	200005b0 	.word	0x200005b0

080047c0 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 80047c0:	88c0      	ldrh	r0, [r0, #6]
 80047c2:	4770      	bx	lr

080047c4 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80047c4:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80047c6:	8840      	ldrh	r0, [r0, #2]
 80047c8:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80047cc:	0c00      	lsrs	r0, r0, #16
 80047ce:	4770      	bx	lr

080047d0 <VBS_CheckVbus>:
  }
  return (temp_faultState);
#else
  return (pHandle->FaultState);
#endif
}
 80047d0:	8900      	ldrh	r0, [r0, #8]
 80047d2:	4770      	bx	lr

080047d4 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80047d4:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80047d6:	8803      	ldrh	r3, [r0, #0]
 80047d8:	140c      	asrs	r4, r1, #16
{
 80047da:	b084      	sub	sp, #16
 80047dc:	b20d      	sxth	r5, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80047de:	fb04 f204 	mul.w	r2, r4, r4
{
 80047e2:	9101      	str	r1, [sp, #4]
    square_limit = maxModule * maxModule;
 80047e4:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80047e8:	fb05 2105 	mla	r1, r5, r5, r2

    if (square_sum > square_limit)
 80047ec:	428b      	cmp	r3, r1
 80047ee:	da10      	bge.n	8004812 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80047f0:	8846      	ldrh	r6, [r0, #2]
 80047f2:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80047f6:	4282      	cmp	r2, r0
 80047f8:	dd14      	ble.n	8004824 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80047fa:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80047fc:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8004800:	bfb8      	it	lt
 8004802:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8004804:	f7fd f91a 	bl	8001a3c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8004808:	2d00      	cmp	r5, #0
        {
          new_q = - new_q;
 800480a:	bfb8      	it	lt
 800480c:	4240      	neglt	r0, r0
 800480e:	b234      	sxth	r4, r6
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 8004810:	b205      	sxth	r5, r0
      Local_Vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8004812:	b2ad      	uxth	r5, r5
 8004814:	2000      	movs	r0, #0
 8004816:	b2a4      	uxth	r4, r4
 8004818:	f365 000f 	bfi	r0, r5, #0, #16
 800481c:	f364 401f 	bfi	r0, r4, #16, #16
}
 8004820:	b004      	add	sp, #16
 8004822:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8004824:	1a98      	subs	r0, r3, r2
 8004826:	f7fd f909 	bl	8001a3c <MCM_Sqrt>
        if (Vqd.q < 0)
 800482a:	2d00      	cmp	r5, #0
 800482c:	daf0      	bge.n	8004810 <Circle_Limitation+0x3c>
          new_q = -new_q;
 800482e:	4240      	negs	r0, r0
 8004830:	e7ee      	b.n	8004810 <Circle_Limitation+0x3c>
 8004832:	bf00      	nop

08004834 <DOUT_SetOutputState>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (ACTIVE == State)
 8004834:	2901      	cmp	r1, #1
    {
      if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 8004836:	7a83      	ldrb	r3, [r0, #10]
    if (ACTIVE == State)
 8004838:	d006      	beq.n	8004848 <DOUT_SetOutputState+0x14>
      else
      {
        LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
      }
    }
    else if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 800483a:	2b01      	cmp	r3, #1
 800483c:	d006      	beq.n	800484c <DOUT_SetOutputState+0x18>
    {
      LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
    }
    else
    {
      LL_GPIO_SetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 800483e:	6843      	ldr	r3, [r0, #4]
 8004840:	8902      	ldrh	r2, [r0, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004842:	619a      	str	r2, [r3, #24]
    }
    pHandle->OutputState = State;
 8004844:	7001      	strb	r1, [r0, #0]
#ifdef NULL_PTR_CHECK_DIG_OUT
  }
#endif
}
 8004846:	4770      	bx	lr
      if (pHandle->bDOutputPolarity == DOutputActiveHigh)
 8004848:	2b01      	cmp	r3, #1
 800484a:	d0f8      	beq.n	800483e <DOUT_SetOutputState+0xa>
      LL_GPIO_ResetOutputPin(pHandle->hDOutputPort, pHandle->hDOutputPin);
 800484c:	8903      	ldrh	r3, [r0, #8]
 800484e:	6842      	ldr	r2, [r0, #4]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	6193      	str	r3, [r2, #24]
    pHandle->OutputState = State;
 8004854:	7001      	strb	r1, [r0, #0]
}
 8004856:	4770      	bx	lr

08004858 <FF_Init>:
  * @param  pPIDId Id PID structure.
  * @param  pPIDIq Iq PID structure.
  */
__weak void FF_Init(FF_Handle_t *pHandle, BusVoltageSensor_Handle_t *pBusSensor, PID_Handle_t *pPIDId,
                    PID_Handle_t *pPIDIq)
{
 8004858:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    pHandle->wConstant_1D = pHandle->wDefConstant_1D;
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
 800485a:	e9d0 540a 	ldrd	r5, r4, [r0, #40]	; 0x28
    pHandle->wConstant_2  = pHandle->wDefConstant_2;

    pHandle->pBus_Sensor = pBusSensor;
 800485e:	6181      	str	r1, [r0, #24]
    pHandle->wConstant_2  = pHandle->wDefConstant_2;
 8004860:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004862:	6141      	str	r1, [r0, #20]
    pHandle->wConstant_1Q = pHandle->wDefConstant_1Q;
 8004864:	e9c0 5403 	strd	r5, r4, [r0, #12]

    pHandle->pPID_d = pPIDId;

    pHandle->pPID_q = pPIDIq;
 8004868:	e9c0 3207 	strd	r3, r2, [r0, #28]
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 800486c:	bc30      	pop	{r4, r5}
 800486e:	4770      	bx	lr

08004870 <FF_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Vqdff.q = (int16_t)0;
 8004870:	2300      	movs	r3, #0
 8004872:	6003      	str	r3, [r0, #0]
    pHandle->Vqdff.d = (int16_t)0;
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <FF_VqdffComputation>:
  * @param  Iqdref Iqd reference components used to calculate the Feed-forward
  *         action.
  * @param  pSTC Pointer on speed and torque controller structure.
  */
__weak void FF_VqdffComputation(FF_Handle_t *pHandle, qd_t Iqdref, SpeednTorqCtrl_Handle_t *pSTC)
{
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	4604      	mov	r4, r0
    int32_t wtemp1, wtemp2;
    int16_t hSpeed_dpp;
    uint16_t hAvBusVoltage_d;
    SpeednPosFdbk_Handle_t *SpeedSensor;

    SpeedSensor = STC_GetSpeedSensor(pSTC);
 800487e:	4610      	mov	r0, r2
{
 8004880:	9101      	str	r1, [sp, #4]
    SpeedSensor = STC_GetSpeedSensor(pSTC);
 8004882:	f001 fb99 	bl	8005fb8 <STC_GetSpeedSensor>
    hSpeed_dpp = SPD_GetElSpeedDpp(SpeedSensor);
 8004886:	f001 fb43 	bl	8005f10 <SPD_GetElSpeedDpp>
 800488a:	4606      	mov	r6, r0
    hAvBusVoltage_d = VBS_GetAvBusVoltage_d(pHandle->pBus_Sensor) / 2U;
 800488c:	69a0      	ldr	r0, [r4, #24]
 800488e:	f7ff ff97 	bl	80047c0 <VBS_GetAvBusVoltage_d>

    if (hAvBusVoltage_d != (uint16_t)0)
 8004892:	2801      	cmp	r0, #1
 8004894:	d944      	bls.n	8004920 <FF_VqdffComputation+0xa8>
    {
      /*q-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 8004896:	f8bd 1006 	ldrh.w	r1, [sp, #6]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 800489a:	68e3      	ldr	r3, [r4, #12]
      wtemp2 *= (int32_t)2;

      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 800489c:	6965      	ldr	r5, [r4, #20]
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.d) / (int32_t)32768);
 800489e:	fb11 f106 	smulbb	r1, r1, r6
 80048a2:	2900      	cmp	r1, #0
 80048a4:	bfbc      	itt	lt
 80048a6:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80048aa:	317f      	addlt	r1, #127	; 0x7f
 80048ac:	13c9      	asrs	r1, r1, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 80048ae:	f3c0 024f 	ubfx	r2, r0, #1, #16
 80048b2:	fb03 f301 	mul.w	r3, r3, r1

      wtemp2 = wtemp1 + wtemp2 + pHandle->VqdAvPIout.q;
 80048b6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
      wtemp2 = (wtemp1 * pHandle->wConstant_1D) / (int32_t)(hAvBusVoltage_d);
 80048ba:	fb93 f3f2 	sdiv	r3, r3, r2
      wtemp2 *= (int32_t)2;
 80048be:	005b      	lsls	r3, r3, #1
      wtemp1 = ((pHandle->wConstant_2 * hSpeed_dpp) / (int32_t)hAvBusVoltage_d) * (int32_t)16;
 80048c0:	fb05 f506 	mul.w	r5, r5, r6
 80048c4:	fb95 f5f2 	sdiv	r5, r5, r2
      wtemp2 = wtemp1 + wtemp2 + pHandle->VqdAvPIout.q;
 80048c8:	eb03 1305 	add.w	r3, r3, r5, lsl #4

      SATURATION_TO_S16(wtemp2)
 80048cc:	4d17      	ldr	r5, [pc, #92]	; (800492c <FF_VqdffComputation+0xb4>)

      pHandle->Vqdff.q = (int16_t)(wtemp2);

      /* d-axes ff voltage calculation */
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80048ce:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      wtemp2 = wtemp1 + wtemp2 + pHandle->VqdAvPIout.q;
 80048d2:	4403      	add	r3, r0
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	bfb8      	it	lt
 80048d8:	462b      	movlt	r3, r5
      pHandle->Vqdff.q = (int16_t)(wtemp2);
 80048da:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80048de:	4283      	cmp	r3, r0
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80048e0:	fb11 f606 	smulbb	r6, r1, r6
      pHandle->Vqdff.q = (int16_t)(wtemp2);
 80048e4:	bfa8      	it	ge
 80048e6:	4603      	movge	r3, r0
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80048e8:	2e00      	cmp	r6, #0
      pHandle->Vqdff.q = (int16_t)(wtemp2);
 80048ea:	b219      	sxth	r1, r3
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80048ec:	bfb8      	it	lt
 80048ee:	1836      	addlt	r6, r6, r0
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
      wtemp2 *= (int32_t)2;

      wtemp2 = (int32_t)pHandle->VqdAvPIout.d - wtemp2;
 80048f0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 80048f4:	6920      	ldr	r0, [r4, #16]
 80048f6:	4d0d      	ldr	r5, [pc, #52]	; (800492c <FF_VqdffComputation+0xb4>)
 80048f8:	8021      	strh	r1, [r4, #0]
      wtemp1 = (((int32_t)(hSpeed_dpp) * Iqdref.q) / (int32_t)32768);
 80048fa:	13f6      	asrs	r6, r6, #15
      wtemp2 = (wtemp1 * pHandle->wConstant_1Q) / (int32_t)(hAvBusVoltage_d);
 80048fc:	fb00 f606 	mul.w	r6, r0, r6
 8004900:	fb96 f2f2 	sdiv	r2, r6, r2
      wtemp2 = (int32_t)pHandle->VqdAvPIout.d - wtemp2;
 8004904:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8004908:	42ab      	cmp	r3, r5
 800490a:	bfb8      	it	lt
 800490c:	462b      	movlt	r3, r5

      SATURATION_TO_S16(wtemp2)

      pHandle->Vqdff.d = (int16_t)(wtemp2);
 800490e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004912:	4293      	cmp	r3, r2
 8004914:	bfa8      	it	ge
 8004916:	4613      	movge	r3, r2
 8004918:	b21b      	sxth	r3, r3
 800491a:	8063      	strh	r3, [r4, #2]
      pHandle->Vqdff.d = (int16_t)0;
    }
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 800491c:	b002      	add	sp, #8
 800491e:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->Vqdff.d = (int16_t)0;
 8004920:	2300      	movs	r3, #0
      pHandle->Vqdff.q = (int16_t)0;
 8004922:	4619      	mov	r1, r3
 8004924:	8063      	strh	r3, [r4, #2]
 8004926:	8021      	strh	r1, [r4, #0]
}
 8004928:	b002      	add	sp, #8
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	ffff8001 	.word	0xffff8001

08004930 <FF_VqdConditioning>:
#endif
    int32_t wtemp;

    pHandle->VqdPIout = Vqd;

    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 8004930:	f9b0 2000 	ldrsh.w	r2, [r0]

    SATURATION_TO_S16(wtemp)

    lVqd.q = (int16_t)wtemp;

    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 8004934:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
{
 8004938:	b430      	push	{r4, r5}
 800493a:	4d10      	ldr	r5, [pc, #64]	; (800497c <FF_VqdConditioning+0x4c>)
    pHandle->VqdPIout = Vqd;
 800493c:	6041      	str	r1, [r0, #4]
    wtemp = (int32_t)(Vqd.q) + pHandle->Vqdff.q;
 800493e:	fa02 f281 	sxtah	r2, r2, r1
    wtemp = (int32_t)(Vqd.d) + pHandle->Vqdff.d;
 8004942:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004946:	42aa      	cmp	r2, r5
    lVqd.q = (int16_t)wtemp;
 8004948:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800494c:	bfb8      	it	lt
 800494e:	462a      	movlt	r2, r5
 8004950:	42ab      	cmp	r3, r5
 8004952:	bfb8      	it	lt
 8004954:	462b      	movlt	r3, r5
 8004956:	42a2      	cmp	r2, r4
 8004958:	bfa8      	it	ge
 800495a:	4622      	movge	r2, r4

    SATURATION_TO_S16(wtemp)

    lVqd.d = (int16_t)wtemp;
 800495c:	42a3      	cmp	r3, r4
 800495e:	bfa8      	it	ge
 8004960:	4623      	movge	r3, r4
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
  return (lVqd);
 8004962:	b292      	uxth	r2, r2
 8004964:	2400      	movs	r4, #0
 8004966:	b29b      	uxth	r3, r3
 8004968:	f362 040f 	bfi	r4, r2, #0, #16
 800496c:	f363 441f 	bfi	r4, r3, #16, #16
{
 8004970:	b084      	sub	sp, #16
}
 8004972:	4620      	mov	r0, r4
 8004974:	b004      	add	sp, #16
 8004976:	bc30      	pop	{r4, r5}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	ffff8001 	.word	0xffff8001

08004980 <FF_DataProcess>:
  * @brief  It low-pass filters the Vqd voltage coming from the speed PI. Filter
  *         bandwidth depends on hVqdLowPassFilterBW parameter.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_DataProcess(FF_Handle_t *pHandle)
{
 8004980:	b470      	push	{r4, r5, r6}
  }
  else
  {
#endif
    int32_t wAux;
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 8004982:	8c81      	ldrh	r1, [r0, #36]	; 0x24

#ifndef FULL_MISRA_C_COMPLIANCY_FWD_FDB
    /* Computation of average Vqd as output by PI(D) current controllers, used by
       Feed-forward controller algorithm */
    wAux = (int32_t)(pHandle->VqdAvPIout.q) * lowPassFilterBW;
 8004984:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
    wAux += pHandle->VqdPIout.q;
 8004988:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);

    wAux = (int32_t)(pHandle->VqdAvPIout.d) * lowPassFilterBW;
 800498c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    wAux += pHandle->VqdPIout.d;
 8004990:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 8004994:	8e84      	ldrh	r4, [r0, #52]	; 0x34
    int32_t lowPassFilterBW = (int32_t) pHandle->hVqdLowPassFilterBW - (int32_t)1;
 8004996:	3901      	subs	r1, #1
    wAux += pHandle->VqdPIout.q;
 8004998:	fb01 6202 	mla	r2, r1, r2, r6
    wAux += pHandle->VqdPIout.d;
 800499c:	fb01 5303 	mla	r3, r1, r3, r5
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 80049a0:	4122      	asrs	r2, r4
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    pHandle->VqdAvPIout.d = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 80049a2:	4123      	asrs	r3, r4
    pHandle->VqdAvPIout.q = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 80049a4:	8102      	strh	r2, [r0, #8]
    pHandle->VqdAvPIout.d = (int16_t)(wAux / (int32_t)(pHandle->hVqdLowPassFilterBW));
#endif
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80049a6:	bc70      	pop	{r4, r5, r6}
    pHandle->VqdAvPIout.d = (int16_t)(wAux >> pHandle->hVqdLowPassFilterBWLOG);
 80049a8:	8143      	strh	r3, [r0, #10]
}
 80049aa:	4770      	bx	lr

080049ac <FF_InitFOCAdditionalMethods>:
/**
  * @brief  Use this method to initialize FF variables in START_TO_RUN state.
  * @param  pHandle Feed-forward structure.
  */
__weak void FF_InitFOCAdditionalMethods(FF_Handle_t *pHandle)
{
 80049ac:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->VqdAvPIout.q = 0;
 80049ae:	2100      	movs	r1, #0
{
 80049b0:	4604      	mov	r4, r0
    pHandle->VqdAvPIout.q = 0;
 80049b2:	6081      	str	r1, [r0, #8]
    pHandle->VqdAvPIout.d = 0;
    PID_SetIntegralTerm(pHandle->pPID_q, 0);
 80049b4:	69c0      	ldr	r0, [r0, #28]
 80049b6:	f000 faf1 	bl	8004f9c <PID_SetIntegralTerm>
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 80049ba:	6a20      	ldr	r0, [r4, #32]
 80049bc:	2100      	movs	r1, #0
#ifdef NULL_PTR_CHECK_FEED_FWD_CTRL
  }
#endif
}
 80049be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(pHandle->pPID_d, 0);
 80049c2:	f000 baeb 	b.w	8004f9c <PID_SetIntegralTerm>
 80049c6:	bf00      	nop

080049c8 <FF_GetVqdff>:
  {
    retqt = pHandle->Vqdff;
  }
  return (retqt);
#else
  return (pHandle->Vqdff);
 80049c8:	6803      	ldr	r3, [r0, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	b299      	uxth	r1, r3
 80049ce:	f361 020f 	bfi	r2, r1, #0, #16
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f363 421f 	bfi	r2, r3, #16, #16
{
 80049d8:	b082      	sub	sp, #8
#endif
}
 80049da:	4610      	mov	r0, r2
 80049dc:	b002      	add	sp, #8
 80049de:	4770      	bx	lr

080049e0 <FF_GetVqdAvPIout>:
  {
    retqt = pHandle->VqdAvPIout;
  }
  return (retqt);
#else
  return (pHandle->VqdAvPIout);
 80049e0:	6883      	ldr	r3, [r0, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	b299      	uxth	r1, r3
 80049e6:	f361 020f 	bfi	r2, r1, #0, #16
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f363 421f 	bfi	r2, r3, #16, #16
{
 80049f0:	b082      	sub	sp, #8
#endif
}
 80049f2:	4610      	mov	r0, r2
 80049f4:	b002      	add	sp, #8
 80049f6:	4770      	bx	lr

080049f8 <ICL_Init>:
  * @param  pHandle: handler of the current instance of the ICL component
  * @param  pVBS the bus voltage sensor used by the ICL.
  * @param  pDOUT the digital output used by the ICL.
  */
__weak void ICL_Init(ICL_Handle_t *pHandle, BusVoltageSensor_Handle_t *pVBS, DOUT_handle_t *pDOUT)
{
 80049f8:	4603      	mov	r3, r0
  pHandle->pVBS = pVBS;
 80049fa:	e9c3 1200 	strd	r1, r2, [r3]
{
 80049fe:	4610      	mov	r0, r2
  pHandle->pDOUT = pDOUT;
  DOUT_SetOutputState(pDOUT, ACTIVE);
 8004a00:	2101      	movs	r1, #1
 8004a02:	f7ff bf17 	b.w	8004834 <DOUT_SetOutputState>
 8004a06:	bf00      	nop

08004a08 <ICL_Exec>:
  *         called during background task.
  * @param  pHandle handler of the current instance of the ICL component
  * @retval ICLState_t returns the current ICL state machine
  */
__weak ICL_State_t ICL_Exec(ICL_Handle_t *pHandle)
{
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4604      	mov	r4, r0
  /* ICL actions.*/
  switch (pHandle->ICLstate)
 8004a0c:	7a00      	ldrb	r0, [r0, #8]
 8004a0e:	1e43      	subs	r3, r0, #1
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d809      	bhi.n	8004a28 <ICL_Exec+0x20>
 8004a14:	e8df f003 	tbb	[pc, r3]
 8004a18:	09101502 	.word	0x09101502
  {
    case ICL_ACTIVATION:
    {
      /* ICL activation: counting the step before pass in ICL_ACTIVE */
      if (pHandle->hICLTicksCounter == 0u)
 8004a1c:	8963      	ldrh	r3, [r4, #10]
 8004a1e:	b9ab      	cbnz	r3, 8004a4c <ICL_Exec+0x44>
      {
        pHandle->ICLstate = ICL_ACTIVE;
        pHandle->hICLTicksCounter = pHandle->hICLChargingDelayTicks;        
 8004a20:	89e3      	ldrh	r3, [r4, #14]
 8004a22:	8163      	strh	r3, [r4, #10]
        pHandle->ICLstate = ICL_ACTIVE;
 8004a24:	2002      	movs	r0, #2
 8004a26:	7220      	strb	r0, [r4, #8]
    }
    break;
  }

  return pHandle->ICLstate;
}
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
      if (VBS_CheckVbus(pHandle->pVBS) == MC_UNDER_VOLT)
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	f7ff fed0 	bl	80047d0 <VBS_CheckVbus>
 8004a30:	2804      	cmp	r0, #4
 8004a32:	d01d      	beq.n	8004a70 <ICL_Exec+0x68>
 8004a34:	7a20      	ldrb	r0, [r4, #8]
}
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
      if (pHandle->hICLTicksCounter == 0u)
 8004a38:	8963      	ldrh	r3, [r4, #10]
 8004a3a:	b93b      	cbnz	r3, 8004a4c <ICL_Exec+0x44>
        pHandle->ICLstate = ICL_INACTIVE;
 8004a3c:	2004      	movs	r0, #4
 8004a3e:	7220      	strb	r0, [r4, #8]
}
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
      if (pHandle->hICLTicksCounter == 0u)
 8004a42:	8965      	ldrh	r5, [r4, #10]
 8004a44:	b12d      	cbz	r5, 8004a52 <ICL_Exec+0x4a>
          pHandle->hICLTicksCounter--;
 8004a46:	3d01      	subs	r5, #1
 8004a48:	8165      	strh	r5, [r4, #10]
}
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->hICLTicksCounter--;
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	8163      	strh	r3, [r4, #10]
}
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
        if (VBS_GetAvBusVoltage_d(pHandle->pVBS) > pHandle->hICLVoltageThreshold){
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	f7ff feb4 	bl	80047c0 <VBS_GetAvBusVoltage_d>
 8004a58:	8a23      	ldrh	r3, [r4, #16]
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	d2ea      	bcs.n	8004a34 <ICL_Exec+0x2c>
          DOUT_SetOutputState(pHandle->pDOUT, INACTIVE);
 8004a5e:	6860      	ldr	r0, [r4, #4]
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7ff fee7 	bl	8004834 <DOUT_SetOutputState>
          pHandle->ICLstate = ICL_DEACTIVATION;
 8004a66:	2003      	movs	r0, #3
          pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8004a68:	89a3      	ldrh	r3, [r4, #12]
          pHandle->ICLstate = ICL_DEACTIVATION;
 8004a6a:	7220      	strb	r0, [r4, #8]
          pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8004a6c:	8163      	strh	r3, [r4, #10]
}
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
        DOUT_SetOutputState(pHandle->pDOUT, ACTIVE);
 8004a70:	6860      	ldr	r0, [r4, #4]
 8004a72:	2101      	movs	r1, #1
 8004a74:	f7ff fede 	bl	8004834 <DOUT_SetOutputState>
        pHandle->ICLstate = ICL_ACTIVATION;
 8004a78:	2001      	movs	r0, #1
        pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
        pHandle->ICLstate = ICL_ACTIVATION;
 8004a7c:	7220      	strb	r0, [r4, #8]
        pHandle->hICLTicksCounter = pHandle->hICLSwitchDelayTicks;
 8004a7e:	8163      	strh	r3, [r4, #10]
}
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	bf00      	nop

08004a84 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8004a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8004a86:	6847      	ldr	r7, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004a88:	883d      	ldrh	r5, [r7, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004a8a:	f405 427f 	and.w	r2, r5, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004a8e:	f025 0307 	bic.w	r3, r5, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004a92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8004a96:	b083      	sub	sp, #12
 8004a98:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004a9a:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8004a9c:	d04b      	beq.n	8004b36 <MCP_ReceivedPacket+0xb2>
    MCI_Handle_t *pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004a9e:	6802      	ldr	r2, [r0, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004aa0:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004aa2:	8992      	ldrh	r2, [r2, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004aa4:	4955      	ldr	r1, [pc, #340]	; (8004bfc <MCP_ReceivedPacket+0x178>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8004aa6:	3d01      	subs	r5, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004aa8:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004aaa:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004aac:	f005 0507 	and.w	r5, r5, #7
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004ab0:	3702      	adds	r7, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004ab2:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8004ab4:	2600      	movs	r6, #0

    switch (command)
 8004ab6:	2b38      	cmp	r3, #56	; 0x38
    MCI_Handle_t *pMCI = &Mci[motorID];
 8004ab8:	eb01 1545 	add.w	r5, r1, r5, lsl #5
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004abc:	6067      	str	r7, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004abe:	b291      	uxth	r1, r2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004ac0:	81a0      	strh	r0, [r4, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004ac2:	b212      	sxth	r2, r2
    pHandle->txLength = 0;
 8004ac4:	81e6      	strh	r6, [r4, #14]
    switch (command)
 8004ac6:	d829      	bhi.n	8004b1c <MCP_ReceivedPacket+0x98>
 8004ac8:	2b38      	cmp	r3, #56	; 0x38
 8004aca:	d81e      	bhi.n	8004b0a <MCP_ReceivedPacket+0x86>
 8004acc:	e8df f003 	tbb	[pc, r3]
 8004ad0:	1d1d1d5c 	.word	0x1d1d1d5c
 8004ad4:	1d1d1d1d 	.word	0x1d1d1d1d
 8004ad8:	1d1d1d64 	.word	0x1d1d1d64
 8004adc:	1d1d1d1d 	.word	0x1d1d1d1d
 8004ae0:	1d1d1d57 	.word	0x1d1d1d57
 8004ae4:	1d1d1d1d 	.word	0x1d1d1d1d
 8004ae8:	1d1d1d4f 	.word	0x1d1d1d4f
 8004aec:	1d1d1d1d 	.word	0x1d1d1d1d
 8004af0:	1d1d1d49 	.word	0x1d1d1d49
 8004af4:	1d1d1d1d 	.word	0x1d1d1d1d
 8004af8:	1d1d1d69 	.word	0x1d1d1d69
 8004afc:	1d1d1d1d 	.word	0x1d1d1d1d
 8004b00:	1d1d1d45 	.word	0x1d1d1d45
 8004b04:	1d1d1d1d 	.word	0x1d1d1d1d
 8004b08:	74          	.byte	0x74
 8004b09:	00          	.byte	0x00
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004b0e:	68a2      	ldr	r2, [r4, #8]
 8004b10:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8004b12:	89e3      	ldrh	r3, [r4, #14]
 8004b14:	3301      	adds	r3, #1
 8004b16:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8004b18:	b003      	add	sp, #12
 8004b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8004b1c:	2b68      	cmp	r3, #104	; 0x68
 8004b1e:	d062      	beq.n	8004be6 <MCP_ReceivedPacket+0x162>
 8004b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b24:	d068      	beq.n	8004bf8 <MCP_ReceivedPacket+0x174>
 8004b26:	2b48      	cmp	r3, #72	; 0x48
 8004b28:	d1ef      	bne.n	8004b0a <MCP_ReceivedPacket+0x86>
        MCI_Clear_Iqdref(pMCI);
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f7fc fea4 	bl	8001878 <MCI_Clear_Iqdref>
        break;
 8004b30:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004b32:	4630      	mov	r0, r6
        break;
 8004b34:	e7eb      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004b36:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004b38:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004b3a:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8004b3c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004b40:	3702      	adds	r7, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004b42:	b280      	uxth	r0, r0
    pHandle->txLength = 0;
 8004b44:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8004b46:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004b4a:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004b4c:	6067      	str	r7, [r4, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004b4e:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8004b50:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8004b52:	d037      	beq.n	8004bc4 <MCP_ReceivedPacket+0x140>
        MCPResponse = MCP_CMD_OK;
 8004b54:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8004b56:	200d      	movs	r0, #13
 8004b58:	e7d9      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        if (IDLE == MCI_GetSTMState(pMCI))
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7fc fda2 	bl	80016a4 <MCI_GetSTMState>
 8004b60:	b128      	cbz	r0, 8004b6e <MCP_ReceivedPacket+0xea>
          (void)MCI_StopMotor(pMCI);
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7fc fdba 	bl	80016dc <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8004b68:	89e3      	ldrh	r3, [r4, #14]
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e7cf      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f7fc fd9e 	bl	80016b0 <MCI_StartMotor>
 8004b74:	f080 0001 	eor.w	r0, r0, #1
 8004b78:	89e3      	ldrh	r3, [r4, #14]
 8004b7a:	b2c0      	uxtb	r0, r0
 8004b7c:	e7c7      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7fe f9d2 	bl	8002f28 <RI_GetRegCommandParser>
        break;
 8004b84:	89e3      	ldrh	r3, [r4, #14]
 8004b86:	e7c2      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8004b88:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 8004b8a:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8004b8c:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8004b8e:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8004b90:	701a      	strb	r2, [r3, #0]
      break;
 8004b92:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004b94:	2000      	movs	r0, #0
      break;
 8004b96:	e7ba      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f7fd fe37 	bl	800280c <RI_SetRegCommandParser>
        break;
 8004b9e:	89e3      	ldrh	r3, [r4, #14]
 8004ba0:	e7b5      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        if (RUN == MCI_GetSTMState(pMCI))
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7fc fd7e 	bl	80016a4 <MCI_GetSTMState>
 8004ba8:	2806      	cmp	r0, #6
 8004baa:	d1dd      	bne.n	8004b68 <MCP_ReceivedPacket+0xe4>
          MCI_StopRamp(pMCI);
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7fc fdfb 	bl	80017a8 <MCI_StopRamp>
 8004bb2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e7aa      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
        (void)MCI_FaultAcknowledged(pMCI);
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f7fc fdaf 	bl	800171c <MCI_FaultAcknowledged>
        break;
 8004bbe:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8004bc0:	2000      	movs	r0, #0
        break;
 8004bc2:	e7a4      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	b212      	sxth	r2, r2
      userCommand = (command >> 3) & 0x1f;
 8004bc8:	f003 031f 	and.w	r3, r3, #31
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8004bcc:	490c      	ldr	r1, [pc, #48]	; (8004c00 <MCP_ReceivedPacket+0x17c>)
 8004bce:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	d0be      	beq.n	8004b54 <MCP_ReceivedPacket+0xd0>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f104 030e 	add.w	r3, r4, #14
 8004be0:	47a8      	blx	r5
 8004be2:	89e3      	ldrh	r3, [r4, #14]
 8004be4:	e793      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8004be6:	68a3      	ldr	r3, [r4, #8]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4639      	mov	r1, r7
 8004bec:	f104 030e 	add.w	r3, r4, #14
 8004bf0:	f7fc fcda 	bl	80015a8 <MC_ProfilerCommand>
        break;
 8004bf4:	89e3      	ldrh	r3, [r4, #14]
 8004bf6:	e78a      	b.n	8004b0e <MCP_ReceivedPacket+0x8a>
    switch (command)
 8004bf8:	4633      	mov	r3, r6
 8004bfa:	e7e7      	b.n	8004bcc <MCP_ReceivedPacket+0x148>
 8004bfc:	20001778 	.word	0x20001778
 8004c00:	200017c0 	.word	0x200017c0

08004c04 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8004c06:	7fc3      	ldrb	r3, [r0, #31]
 8004c08:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004c0c:	429a      	cmp	r2, r3
{
 8004c0e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8004c10:	d002      	beq.n	8004c18 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8004c12:	3301      	adds	r3, #1
 8004c14:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8004c18:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8004c1e:	b1a5      	cbz	r5, 8004c4a <MCPA_dataLog+0x46>
 8004c20:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8004c22:	8ba0      	ldrh	r0, [r4, #28]
 8004c24:	42a8      	cmp	r0, r5
 8004c26:	d24d      	bcs.n	8004cc4 <MCPA_dataLog+0xc0>
 8004c28:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8004c2c:	2afe      	cmp	r2, #254	; 0xfe
 8004c2e:	d068      	beq.n	8004d02 <MCPA_dataLog+0xfe>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8004c30:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8004c34:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8004c36:	8b22      	ldrh	r2, [r4, #24]
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	3202      	adds	r2, #2
 8004c3c:	2309      	movs	r3, #9
 8004c3e:	6845      	ldr	r5, [r0, #4]
 8004c40:	b292      	uxth	r2, r2
 8004c42:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	8323      	strh	r3, [r4, #24]
}
 8004c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	2209      	movs	r2, #9
 8004c4e:	f851 0b14 	ldr.w	r0, [r1], #20
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	4798      	blx	r3
 8004c56:	b388      	cbz	r0, 8004cbc <MCPA_dataLog+0xb8>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <MCPA_dataLog+0x184>)
          logValue = (uint32_t *) pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8004c5a:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8004c60:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004c64:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8004c68:	f884 5020 	strb.w	r5, [r4, #32]
          if (pHandle->Mark == pHandle->MarkBuff)
 8004c6c:	429a      	cmp	r2, r3
          pHandle->bufferIndex = 4U;
 8004c6e:	f04f 0504 	mov.w	r5, #4
 8004c72:	8325      	strh	r5, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8004c74:	d0d5      	beq.n	8004c22 <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 8004c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 8004c7a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 8004c7e:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
            pHandle->MFRateBuff = pHandle->MFRate;
 8004c82:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
            pHandle->MarkBuff = pHandle->Mark;
 8004c86:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8004c8a:	1842      	adds	r2, r0, r1
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8004c8c:	8b63      	ldrh	r3, [r4, #26]
            pHandle->HFNumBuff = pHandle->HFNum;
 8004c8e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
            pHandle->MFNumBuff = pHandle->MFNum;
 8004c92:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8004c96:	0092      	lsls	r2, r2, #2
 8004c98:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8004c9c:	83a3      	strh	r3, [r4, #28]
            pHandle->HFRateBuff = pHandle->HFRate;
 8004c9e:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
            pHandle->MFRateBuff = pHandle->MFRate;
 8004ca2:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8004ca6:	f001 fe35 	bl	8006914 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8004caa:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8004cae:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8004cb2:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	f001 fe2c 	bl	8006914 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8004cbc:	8b25      	ldrh	r5, [r4, #24]
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	d1ae      	bne.n	8004c20 <MCPA_dataLog+0x1c>
}
 8004cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004cc4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8004cc8:	194e      	adds	r6, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d055      	beq.n	8004d7a <MCPA_dataLog+0x176>
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004cce:	2200      	movs	r2, #0
 8004cd0:	68a7      	ldr	r7, [r4, #8]
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	f826 3b02 	strh.w	r3, [r6], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8004cde:	8b25      	ldrh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004ce0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004ce4:	3201      	adds	r2, #1
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8004ce6:	3502      	adds	r5, #2
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004ce8:	b2d0      	uxtb	r0, r2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8004cea:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004cec:	4283      	cmp	r3, r0
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8004cee:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004cf0:	d8f0      	bhi.n	8004cd4 <MCPA_dataLog+0xd0>
        if (pHandle->MFRateBuff < 254U)
 8004cf2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8004cf6:	2afd      	cmp	r2, #253	; 0xfd
 8004cf8:	d919      	bls.n	8004d2e <MCPA_dataLog+0x12a>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8004cfa:	8ba3      	ldrh	r3, [r4, #28]
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	d395      	bcc.n	8004c2c <MCPA_dataLog+0x28>
}
 8004d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d02:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d06:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8004d0a:	4418      	add	r0, r3
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	dd8f      	ble.n	8004c30 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004d10:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8004d12:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004d14:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	514a      	str	r2, [r1, r5]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8004d1c:	5cf2      	ldrb	r2, [r6, r3]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d1e:	3301      	adds	r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8004d20:	4415      	add	r5, r2
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d22:	b2db      	uxtb	r3, r3
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8004d24:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d26:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8004d28:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d2a:	dbf3      	blt.n	8004d14 <MCPA_dataLog+0x110>
 8004d2c:	e780      	b.n	8004c30 <MCPA_dataLog+0x2c>
 8004d2e:	8ba0      	ldrh	r0, [r4, #28]
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8004d30:	f894 5020 	ldrb.w	r5, [r4, #32]
 8004d34:	4295      	cmp	r5, r2
 8004d36:	d007      	beq.n	8004d48 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8004d38:	3501      	adds	r5, #1
 8004d3a:	f884 5020 	strb.w	r5, [r4, #32]
 8004d3e:	8b25      	ldrh	r5, [r4, #24]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8004d40:	42a8      	cmp	r0, r5
 8004d42:	f4ff af75 	bcc.w	8004c30 <MCPA_dataLog+0x2c>
}
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d48:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 8004d4c:	441e      	add	r6, r3
            pHandle->MFIndex = 0U;
 8004d4e:	2200      	movs	r2, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d50:	429e      	cmp	r6, r3
            pHandle->MFIndex = 0U;
 8004d52:	f884 2020 	strb.w	r2, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d56:	dd15      	ble.n	8004d84 <MCPA_dataLog+0x180>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8004d58:	f8d4 c008 	ldr.w	ip, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004d5c:	6927      	ldr	r7, [r4, #16]
 8004d5e:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8004d60:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	514a      	str	r2, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004d68:	5cfa      	ldrb	r2, [r7, r3]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d6a:	3301      	adds	r3, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004d6c:	4415      	add	r5, r2
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d6e:	b2db      	uxtb	r3, r3
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004d70:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d72:	42b3      	cmp	r3, r6
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004d74:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004d76:	dbf3      	blt.n	8004d60 <MCPA_dataLog+0x15c>
 8004d78:	e7e2      	b.n	8004d40 <MCPA_dataLog+0x13c>
        if (pHandle->MFRateBuff < 254U)
 8004d7a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8004d7e:	2afd      	cmp	r2, #253	; 0xfd
 8004d80:	d9d6      	bls.n	8004d30 <MCPA_dataLog+0x12c>
}
 8004d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d84:	8b25      	ldrh	r5, [r4, #24]
 8004d86:	e7db      	b.n	8004d40 <MCPA_dataLog+0x13c>
 8004d88:	20001774 	.word	0x20001774

08004d8c <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8004d8e:	8b03      	ldrh	r3, [r0, #24]
 8004d90:	b18b      	cbz	r3, 8004db6 <MCPA_flushDataLog+0x2a>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8004d92:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8004d96:	2afe      	cmp	r2, #254	; 0xfe
 8004d98:	4604      	mov	r4, r0
 8004d9a:	d00d      	beq.n	8004db8 <MCPA_flushDataLog+0x2c>
 8004d9c:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8004d9e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8004da2:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8004da4:	8b22      	ldrh	r2, [r4, #24]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	3202      	adds	r2, #2
 8004daa:	2309      	movs	r3, #9
 8004dac:	6845      	ldr	r5, [r0, #4]
 8004dae:	b292      	uxth	r2, r2
 8004db0:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	8323      	strh	r3, [r4, #24]
  }   
}
 8004db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004db8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004dbc:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8004dc0:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004dc2:	4415      	add	r5, r2
 8004dc4:	42aa      	cmp	r2, r5
 8004dc6:	daea      	bge.n	8004d9e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8004dc8:	6887      	ldr	r7, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004dca:	6906      	ldr	r6, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8004dcc:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8004dd0:	6800      	ldr	r0, [r0, #0]
 8004dd2:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004dd4:	5cb0      	ldrb	r0, [r6, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004dd6:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004dd8:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004dda:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004ddc:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004dde:	42aa      	cmp	r2, r5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004de0:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8004de2:	dbf3      	blt.n	8004dcc <MCPA_flushDataLog+0x40>
 8004de4:	e7db      	b.n	8004d9e <MCPA_flushDataLog+0x12>
 8004de6:	bf00      	nop

08004de8 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8004de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8004dec:	880e      	ldrh	r6, [r1, #0]
{
 8004dee:	4604      	mov	r4, r0

    if (buffSize == 0)
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	d041      	beq.n	8004e78 <MCPA_cfgLog+0x90>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8004df4:	6803      	ldr	r3, [r0, #0]
 8004df6:	89db      	ldrh	r3, [r3, #14]
 8004df8:	42b3      	cmp	r3, r6
 8004dfa:	d33a      	bcc.n	8004e72 <MCPA_cfgLog+0x8a>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8004dfc:	788b      	ldrb	r3, [r1, #2]
 8004dfe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8004e02:	78cf      	ldrb	r7, [r1, #3]
 8004e04:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8004e08:	790b      	ldrb	r3, [r1, #4]
 8004e0a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8004e0e:	794a      	ldrb	r2, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8004e10:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8004e12:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8004e16:	4417      	add	r7, r2
 8004e18:	429f      	cmp	r7, r3
 8004e1a:	dc4f      	bgt.n	8004ebc <MCPA_cfgLog+0xd4>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8004e1c:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	d053      	beq.n	8004eca <MCPA_cfgLog+0xe2>
 8004e22:	2500      	movs	r5, #0
 8004e24:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8004e26:	462f      	mov	r7, r5
 8004e28:	e010      	b.n	8004e4c <MCPA_cfgLog+0x64>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8004e2a:	2002      	movs	r0, #2
 8004e2c:	68e3      	ldr	r3, [r4, #12]
 8004e2e:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8004e30:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004e32:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8004e36:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
         logSize = logSize+pHandle->dataSizeTable[i];
 8004e3a:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	440b      	add	r3, r1
 8004e40:	b2ed      	uxtb	r5, r5
         logSize = logSize+pHandle->dataSizeTable[i];
 8004e42:	443a      	add	r2, r7
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004e44:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 8004e46:	b297      	uxth	r7, r2
        pCfgData++;
 8004e48:	4641      	mov	r1, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004e4a:	da0f      	bge.n	8004e6c <MCPA_cfgLog+0x84>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8004e4c:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4648      	mov	r0, r9
 8004e54:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8004e58:	f7fe fd2a 	bl	80038b0 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8004e5c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004e60:	42ab      	cmp	r3, r5
 8004e62:	d8e2      	bhi.n	8004e2a <MCPA_cfgLog+0x42>
 8004e64:	4648      	mov	r0, r9
 8004e66:	f7fe fd17 	bl	8003898 <RI_GetIDSize>
 8004e6a:	e7df      	b.n	8004e2c <MCPA_cfgLog+0x44>
 8004e6c:	1dbb      	adds	r3, r7, #6
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8004e6e:	429e      	cmp	r6, r3
 8004e70:	d21a      	bcs.n	8004ea8 <MCPA_cfgLog+0xc0>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8004e72:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8004e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8004e78:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8004e7a:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8004e7e:	b153      	cbz	r3, 8004e96 <MCPA_cfgLog+0xae>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8004e80:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8004e82:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8004e86:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8004e88:	8b22      	ldrh	r2, [r4, #24]
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	3202      	adds	r2, #2
 8004e8e:	6845      	ldr	r5, [r0, #4]
 8004e90:	b292      	uxth	r2, r2
 8004e92:	2309      	movs	r3, #9
 8004e94:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8004e96:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8004e98:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8004e9c:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8004e9e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8004ea2:	8320      	strh	r0, [r4, #24]
}
 8004ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8004ea8:	1eb2      	subs	r2, r6, #2
 8004eaa:	1bd2      	subs	r2, r2, r7
 8004eac:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8004eae:	780b      	ldrb	r3, [r1, #0]
 8004eb0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8004eb4:	b12b      	cbz	r3, 8004ec2 <MCPA_cfgLog+0xda>
  uint8_t result = MCP_CMD_OK;
 8004eb6:	2000      	movs	r0, #0
}
 8004eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8004ebc:	200a      	movs	r0, #10
}
 8004ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8004ec2:	8b23      	ldrh	r3, [r4, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0e6      	beq.n	8004e96 <MCPA_cfgLog+0xae>
 8004ec8:	e7da      	b.n	8004e80 <MCPA_cfgLog+0x98>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8004eca:	2306      	movs	r3, #6
 8004ecc:	e7cf      	b.n	8004e6e <MCPA_cfgLog+0x86>
 8004ece:	bf00      	nop

08004ed0 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8004ed0:	8a03      	ldrh	r3, [r0, #16]
 8004ed2:	8b42      	ldrh	r2, [r0, #26]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d306      	bcc.n	8004ee6 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8004ed8:	8b82      	ldrh	r2, [r0, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d901      	bls.n	8004ee2 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8004ede:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8004ee0:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8004ee2:	8ac0      	ldrh	r0, [r0, #22]
 8004ee4:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8004ee6:	2008      	movs	r0, #8
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <NTC_Init>:
{
 8004ef4:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8004ef6:	7803      	ldrb	r3, [r0, #0]
{
 8004ef8:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8004efa:	b123      	cbz	r3, 8004f06 <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004efc:	8a43      	ldrh	r3, [r0, #18]
 8004efe:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8004f00:	2200      	movs	r2, #0
 8004f02:	82c2      	strh	r2, [r0, #22]
}
 8004f04:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004f06:	3004      	adds	r0, #4
 8004f08:	f7fe fd74 	bl	80039f4 <RCM_RegisterRegConv>
 8004f0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7ff ffeb 	bl	8004eec <NTC_Clear>
}
 8004f16:	bd10      	pop	{r4, pc}

08004f18 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8004f18:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8004f1a:	7803      	ldrb	r3, [r0, #0]
{
 8004f1c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8004f1e:	b113      	cbz	r3, 8004f26 <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8004f20:	2000      	movs	r0, #0
 8004f22:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8004f24:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004f26:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004f2a:	f7fe fe35 	bl	8003b98 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8004f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f32:	4298      	cmp	r0, r3
 8004f34:	d007      	beq.n	8004f46 <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8004f36:	8b22      	ldrh	r2, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8004f38:	8a23      	ldrh	r3, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8004f3a:	1e51      	subs	r1, r2, #1
        wtemp += hAux;
 8004f3c:	fb01 0003 	mla	r0, r1, r3, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8004f40:	fbb0 f0f2 	udiv	r0, r0, r2
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8004f44:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7ff ffc2 	bl	8004ed0 <NTC_SetFaultState>
 8004f4c:	82e0      	strh	r0, [r4, #22]
}
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8004f50:	7803      	ldrb	r3, [r0, #0]
 8004f52:	b95b      	cbnz	r3, 8004f6c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8004f54:	8a03      	ldrh	r3, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8004f56:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8004f58:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004f5c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8004f5e:	1a5b      	subs	r3, r3, r1
      wTemp *= pHandle->hSensitivity;
 8004f60:	fb03 f302 	mul.w	r3, r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004f64:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8004f68:	b200      	sxth	r0, r0
 8004f6a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8004f6c:	8a80      	ldrh	r0, [r0, #20]
}
 8004f6e:	b200      	sxth	r0, r0
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8004f74:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004f76:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004f78:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004f7a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004f7c:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8004f7e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004f80:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004f82:	4770      	bx	lr

08004f84 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8004f84:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004f86:	4770      	bx	lr

08004f88 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8004f88:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004f8a:	4770      	bx	lr

08004f8c <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8004f8c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop

08004f94 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8004f94:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004f9c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8004f9e:	4770      	bx	lr

08004fa0 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8004fa0:	8b80      	ldrh	r0, [r0, #28]
 8004fa2:	4770      	bx	lr

08004fa4 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8004fa8:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8004faa:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8004fb0:	8b40      	ldrh	r0, [r0, #26]
 8004fb2:	4770      	bx	lr

08004fb4 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8004fb4:	8bc0      	ldrh	r0, [r0, #30]
 8004fb6:	4770      	bx	lr

08004fb8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8004fb8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fba:	4770      	bx	lr

08004fbc <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8004fbc:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fbe:	4770      	bx	lr

08004fc0 <PID_SetKIDivisorPOW2>:
{
 8004fc0:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8004fc2:	2301      	movs	r3, #1
{
 8004fc4:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8004fc6:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8004fc8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8004fcc:	8343      	strh	r3, [r0, #26]
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8004fce:	83c4      	strh	r4, [r0, #30]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8004fd0:	40a1      	lsls	r1, r4
{
 8004fd2:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8004fd4:	f7ff fff2 	bl	8004fbc <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8004fd8:	4902      	ldr	r1, [pc, #8]	; (8004fe4 <PID_SetKIDivisorPOW2+0x24>)
 8004fda:	4628      	mov	r0, r5
 8004fdc:	40a1      	lsls	r1, r4
 8004fde:	f7ff ffeb 	bl	8004fb8 <PID_SetLowerIntegralTermLimit>
}
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	ffff8001 	.word	0xffff8001

08004fe8 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8004fe8:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004fea:	4770      	bx	lr

08004fec <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8004fec:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop

08004ff4 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8004ff4:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8004ff6:	4770      	bx	lr

08004ff8 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8004ffc:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8004ffe:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005004:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005008:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 800500c:	b470      	push	{r4, r5, r6}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800500e:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005012:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005016:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
    if (0 == pHandle->hKiGain)
 800501a:	b162      	cbz	r2, 8005036 <PI_Controller+0x32>
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800501c:	6886      	ldr	r6, [r0, #8]
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800501e:	fb01 f102 	mul.w	r1, r1, r2

      if (wIntegral_sum_temp < 0)
 8005022:	1872      	adds	r2, r6, r1
 8005024:	d420      	bmi.n	8005068 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8005026:	2e00      	cmp	r6, #0
 8005028:	db29      	blt.n	800507e <PI_Controller+0x7a>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800502a:	68c1      	ldr	r1, [r0, #12]
 800502c:	4291      	cmp	r1, r2
 800502e:	db03      	blt.n	8005038 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005030:	6901      	ldr	r1, [r0, #16]
 8005032:	4291      	cmp	r1, r2
 8005034:	dc00      	bgt.n	8005038 <PI_Controller+0x34>
 8005036:	4611      	mov	r1, r2
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005038:	8b86      	ldrh	r6, [r0, #28]
 800503a:	8bc2      	ldrh	r2, [r0, #30]
 800503c:	4133      	asrs	r3, r6
 800503e:	fa41 f202 	asr.w	r2, r1, r2
 8005042:	4413      	add	r3, r2
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005044:	429c      	cmp	r4, r3
 8005046:	da05      	bge.n	8005054 <PI_Controller+0x50>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005048:	1ae3      	subs	r3, r4, r3
 800504a:	4419      	add	r1, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800504c:	6081      	str	r1, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800504e:	4620      	mov	r0, r4
 8005050:	bc70      	pop	{r4, r5, r6}
 8005052:	4770      	bx	lr
    else if (wOutput_32 < hLowerOutputLimit)
 8005054:	429d      	cmp	r5, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005056:	bfc9      	itett	gt
 8005058:	1aeb      	subgt	r3, r5, r3
 800505a:	b21c      	sxthle	r4, r3
      wOutput_32 = hLowerOutputLimit;
 800505c:	462c      	movgt	r4, r5
    pHandle->wIntegralTerm += wDischarge;
 800505e:	18c9      	addgt	r1, r1, r3
 8005060:	6081      	str	r1, [r0, #8]
}
 8005062:	4620      	mov	r0, r4
 8005064:	bc70      	pop	{r4, r5, r6}
 8005066:	4770      	bx	lr
        if (pHandle->wIntegralTerm > 0)
 8005068:	2e00      	cmp	r6, #0
 800506a:	ddde      	ble.n	800502a <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 800506c:	2900      	cmp	r1, #0
 800506e:	dddc      	ble.n	800502a <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005070:	68c1      	ldr	r1, [r0, #12]
 8005072:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005076:	4291      	cmp	r1, r2
 8005078:	d1de      	bne.n	8005038 <PI_Controller+0x34>
            wIntegral_sum_temp = INT32_MAX;
 800507a:	460a      	mov	r2, r1
 800507c:	e7db      	b.n	8005036 <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 800507e:	4e03      	ldr	r6, [pc, #12]	; (800508c <PI_Controller+0x88>)
 8005080:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8005084:	bf28      	it	cs
 8005086:	4632      	movcs	r2, r6
 8005088:	e7cf      	b.n	800502a <PI_Controller+0x26>
 800508a:	bf00      	nop
 800508c:	80000001 	.word	0x80000001

08005090 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005090:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005092:	6884      	ldr	r4, [r0, #8]

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
    wAux /= 65536;

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8005094:	f9b0 1000 	ldrsh.w	r1, [r0]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005098:	8b25      	ldrh	r5, [r4, #24]
 800509a:	89e3      	ldrh	r3, [r4, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800509c:	89a2      	ldrh	r2, [r4, #12]
 800509e:	8ae4      	ldrh	r4, [r4, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80050a0:	fb13 f305 	smulbb	r3, r3, r5
    wAux /= 65536;
 80050a4:	fb12 3304 	smlabb	r3, r2, r4, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfbc      	itt	lt
 80050ac:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80050b0:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 80050b2:	ebc1 4323 	rsb	r3, r1, r3, asr #16
 80050b6:	eb01 1323 	add.w	r3, r1, r3, asr #4

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 80050ba:	bc30      	pop	{r4, r5}
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 80050bc:	8003      	strh	r3, [r0, #0]
}
 80050be:	4770      	bx	lr

080050c0 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop

080050c8 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80050c8:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80050ca:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 80050ce:	4605      	mov	r5, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80050d0:	68c0      	ldr	r0, [r0, #12]
 80050d2:	f7ff fb77 	bl	80047c4 <VBS_GetAvBusVoltage_V>
 80050d6:	fb04 f300 	mul.w	r3, r4, r0
 80050da:	ee00 3a10 	vmov	s0, r3
 80050de:	edd5 7a01 	vldr	s15, [r5, #4]
 80050e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80050e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050ea:	bd38      	pop	{r3, r4, r5, pc}

080050ec <startTimers>:
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80050ec:	4b17      	ldr	r3, [pc, #92]	; (800514c <startTimers+0x60>)
 80050ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 80050f0:	07d2      	lsls	r2, r2, #31
 80050f2:	d415      	bmi.n	8005120 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80050fe:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005100:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005104:	f002 0201 	and.w	r2, r2, #1
 8005108:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800510a:	9a01      	ldr	r2, [sp, #4]
 800510c:	694a      	ldr	r2, [r1, #20]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	614a      	str	r2, [r1, #20]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800511c:	b002      	add	sp, #8
 800511e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8005120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005124:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800512c:	f041 0120 	orr.w	r1, r1, #32
 8005130:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005132:	6959      	ldr	r1, [r3, #20]
 8005134:	f041 0101 	orr.w	r1, r1, #1
 8005138:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005140:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800

08005150 <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 8005150:	b4f0      	push	{r4, r5, r6, r7}
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005152:	1c56      	adds	r6, r2, #1
 8005154:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005156:	f06f 0702 	mvn.w	r7, #2
 800515a:	0176      	lsls	r6, r6, #5
 800515c:	6107      	str	r7, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800515e:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8005160:	781c      	ldrb	r4, [r3, #0]
 8005162:	2c0f      	cmp	r4, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005164:	f102 0501 	add.w	r5, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8005168:	d80b      	bhi.n	8005182 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800516a:	6904      	ldr	r4, [r0, #16]
 800516c:	07a4      	lsls	r4, r4, #30
 800516e:	d5f7      	bpl.n	8005160 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8005170:	b2aa      	uxth	r2, r5
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005172:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005174:	6107      	str	r7, [r0, #16]
 8005176:	d8f3      	bhi.n	8005160 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8005178:	781c      	ldrb	r4, [r3, #0]
 800517a:	2c0f      	cmp	r4, #15
 800517c:	d8f0      	bhi.n	8005160 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 800517e:	2301      	movs	r3, #1
 8005180:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8005182:	bcf0      	pop	{r4, r5, r6, r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005188:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 800518c:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800518e:	e9d3 4200 	ldrd	r4, r2, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005192:	6a13      	ldr	r3, [r2, #32]
 8005194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005198:	6213      	str	r3, [r2, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 800519a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 800519c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800519e:	f890 506a 	ldrb.w	r5, [r0, #106]	; 0x6a
  hReg1 =  (ADCx->JDR1)*2;
 80051a2:	0052      	lsls	r2, r2, #1
  hReg2 =  (ADCx->JDR2)*2;
 80051a4:	005b      	lsls	r3, r3, #1
  hReg1 =  (ADCx->JDR1)*2;
 80051a6:	b292      	uxth	r2, r2
  hReg2 =  (ADCx->JDR2)*2;
 80051a8:	b29e      	uxth	r6, r3

  switch ( bSector )
 80051aa:	2d05      	cmp	r5, #5
 80051ac:	f200 809e 	bhi.w	80052ec <R3_1_GetPhaseCurrents+0x164>
 80051b0:	e8df f005 	tbb	[pc, r5]
 80051b4:	031d1d36 	.word	0x031d1d36
 80051b8:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80051bc:	4c4f      	ldr	r4, [pc, #316]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051be:	1a9a      	subs	r2, r3, r2
      if ( wAux < -INT16_MAX )
 80051c0:	42a2      	cmp	r2, r4
 80051c2:	db5c      	blt.n	800527e <R3_1_GetPhaseCurrents+0xf6>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051c4:	6f44      	ldr	r4, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 80051c6:	4f4d      	ldr	r7, [pc, #308]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
      else  if ( wAux > INT16_MAX )
 80051c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        pStator_Currents->a = INT16_MAX;
 80051cc:	bfa8      	it	ge
 80051ce:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 80051d2:	eba4 0406 	sub.w	r4, r4, r6
        pStator_Currents->a = INT16_MAX;
 80051d6:	bfac      	ite	ge
 80051d8:	800b      	strhge	r3, [r1, #0]
        pStator_Currents->a = ( int16_t )wAux;
 80051da:	800a      	strhlt	r2, [r1, #0]
      if ( wAux < -INT16_MAX )
 80051dc:	42bc      	cmp	r4, r7
 80051de:	da54      	bge.n	800528a <R3_1_GetPhaseCurrents+0x102>
      {
        pStator_Currents->b = -INT16_MAX;
 80051e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80051e4:	804f      	strh	r7, [r1, #2]
 80051e6:	b2ab      	uxth	r3, r5
 80051e8:	f248 0401 	movw	r4, #32769	; 0x8001
 80051ec:	e031      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
    case SECTOR_2:
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051ee:	6f05      	ldr	r5, [r0, #112]	; 0x70
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80051f2:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 80051f4:	429a      	cmp	r2, r3
 80051f6:	db3c      	blt.n	8005272 <R3_1_GetPhaseCurrents+0xea>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 80051f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051fc:	db6a      	blt.n	80052d4 <R3_1_GetPhaseCurrents+0x14c>
      {
        pStator_Currents->a = INT16_MAX;
 80051fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005202:	4613      	mov	r3, r2
 8005204:	800a      	strh	r2, [r1, #0]
 8005206:	4615      	mov	r5, r2
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8005208:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800520a:	1b34      	subs	r4, r6, r4
 800520c:	1aa2      	subs	r2, r4, r2

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 800520e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005212:	db4d      	blt.n	80052b0 <R3_1_GetPhaseCurrents+0x128>
      {
        pStator_Currents->b = INT16_MAX;
 8005214:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005218:	4614      	mov	r4, r2
 800521a:	804a      	strh	r2, [r1, #2]
 800521c:	4617      	mov	r7, r2
 800521e:	e018      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005220:	6f45      	ldr	r5, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005224:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8005226:	429a      	cmp	r2, r3
 8005228:	db1d      	blt.n	8005266 <R3_1_GetPhaseCurrents+0xde>
      else  if ( wAux > INT16_MAX )
 800522a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800522e:	db46      	blt.n	80052be <R3_1_GetPhaseCurrents+0x136>
        pStator_Currents->b = INT16_MAX;
 8005230:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005234:	461c      	mov	r4, r3
 8005236:	804b      	strh	r3, [r1, #2]
 8005238:	461a      	mov	r2, r3
 800523a:	461f      	mov	r7, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 800523c:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800523e:	1b73      	subs	r3, r6, r5
 8005240:	1a9a      	subs	r2, r3, r2
      if ( wAux > INT16_MAX )
 8005242:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005246:	db2c      	blt.n	80052a2 <R3_1_GetPhaseCurrents+0x11a>
        pStator_Currents->a = INT16_MAX;
 8005248:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800524c:	4613      	mov	r3, r2
 800524e:	800a      	strh	r2, [r1, #0]
 8005250:	4615      	mov	r5, r2
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005252:	4423      	add	r3, r4
 8005254:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8005256:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
  pHandle->_Super.Ib = pStator_Currents->b;
 800525a:	f8a0 7052 	strh.w	r7, [r0, #82]	; 0x52
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800525e:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8005262:	bcf0      	pop	{r4, r5, r6, r7}
 8005264:	4770      	bx	lr
        pStator_Currents->b = -INT16_MAX;
 8005266:	461a      	mov	r2, r3
 8005268:	804b      	strh	r3, [r1, #2]
 800526a:	461f      	mov	r7, r3
 800526c:	f248 0401 	movw	r4, #32769	; 0x8001
 8005270:	e7e4      	b.n	800523c <R3_1_GetPhaseCurrents+0xb4>
        pStator_Currents->a = -INT16_MAX;
 8005272:	461a      	mov	r2, r3
 8005274:	800b      	strh	r3, [r1, #0]
 8005276:	461d      	mov	r5, r3
 8005278:	f248 0301 	movw	r3, #32769	; 0x8001
 800527c:	e7c4      	b.n	8005208 <R3_1_GetPhaseCurrents+0x80>
        pStator_Currents->a = -INT16_MAX;
 800527e:	800c      	strh	r4, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005280:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8005282:	4f1e      	ldr	r7, [pc, #120]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005284:	1ba4      	subs	r4, r4, r6
      if ( wAux < -INT16_MAX )
 8005286:	42bc      	cmp	r4, r7
 8005288:	dbaa      	blt.n	80051e0 <R3_1_GetPhaseCurrents+0x58>
      else  if ( wAux > INT16_MAX )
 800528a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800528e:	db1a      	blt.n	80052c6 <R3_1_GetPhaseCurrents+0x13e>
        pStator_Currents->b = INT16_MAX;
 8005290:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005294:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005298:	804b      	strh	r3, [r1, #2]
 800529a:	461c      	mov	r4, r3
 800529c:	461f      	mov	r7, r3
 800529e:	b2ab      	uxth	r3, r5
 80052a0:	e7d7      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
      else  if ( wAux < -INT16_MAX )
 80052a2:	4d16      	ldr	r5, [pc, #88]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
 80052a4:	42aa      	cmp	r2, r5
 80052a6:	da19      	bge.n	80052dc <R3_1_GetPhaseCurrents+0x154>
        pStator_Currents->a = -INT16_MAX;
 80052a8:	800d      	strh	r5, [r1, #0]
 80052aa:	f248 0301 	movw	r3, #32769	; 0x8001
 80052ae:	e7d0      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
      else  if ( wAux < -INT16_MAX )
 80052b0:	4f12      	ldr	r7, [pc, #72]	; (80052fc <R3_1_GetPhaseCurrents+0x174>)
 80052b2:	42ba      	cmp	r2, r7
 80052b4:	da16      	bge.n	80052e4 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->b = -INT16_MAX;
 80052b6:	804f      	strh	r7, [r1, #2]
 80052b8:	f248 0401 	movw	r4, #32769	; 0x8001
 80052bc:	e7c9      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
        pStator_Currents->b = ( int16_t )wAux;
 80052be:	b217      	sxth	r7, r2
 80052c0:	804f      	strh	r7, [r1, #2]
 80052c2:	b294      	uxth	r4, r2
 80052c4:	e7ba      	b.n	800523c <R3_1_GetPhaseCurrents+0xb4>
        pStator_Currents->b = ( int16_t )wAux;
 80052c6:	f9b1 5000 	ldrsh.w	r5, [r1]
 80052ca:	b227      	sxth	r7, r4
 80052cc:	b2ab      	uxth	r3, r5
 80052ce:	804f      	strh	r7, [r1, #2]
 80052d0:	b2a4      	uxth	r4, r4
 80052d2:	e7be      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
        pStator_Currents->a = ( int16_t )wAux;
 80052d4:	b215      	sxth	r5, r2
 80052d6:	800d      	strh	r5, [r1, #0]
 80052d8:	b293      	uxth	r3, r2
 80052da:	e795      	b.n	8005208 <R3_1_GetPhaseCurrents+0x80>
        pStator_Currents->a = ( int16_t )wAux;
 80052dc:	b215      	sxth	r5, r2
 80052de:	800d      	strh	r5, [r1, #0]
 80052e0:	b293      	uxth	r3, r2
 80052e2:	e7b6      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
        pStator_Currents->b = ( int16_t )wAux;
 80052e4:	b217      	sxth	r7, r2
 80052e6:	804f      	strh	r7, [r1, #2]
 80052e8:	b294      	uxth	r4, r2
 80052ea:	e7b2      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
 80052ec:	f9b1 5000 	ldrsh.w	r5, [r1]
 80052f0:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 80052f4:	880b      	ldrh	r3, [r1, #0]
 80052f6:	884c      	ldrh	r4, [r1, #2]
 80052f8:	e7ab      	b.n	8005252 <R3_1_GetPhaseCurrents+0xca>
 80052fa:	bf00      	nop
 80052fc:	ffff8001 	.word	0xffff8001

08005300 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005300:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8005304:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005306:	e9d3 5200 	ldrd	r5, r2, [r3]
 800530a:	6a13      	ldr	r3, [r2, #32]
 800530c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005310:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005312:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d80d      	bhi.n	8005336 <R3_1_HFCurrentsCalibrationAB+0x36>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
    pHandle->PhaseBOffset += ADCx->JDR2;
 800531a:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PhaseAOffset += ADCx->JDR1;
 800531e:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005320:	6c2d      	ldr	r5, [r5, #64]	; 0x40
    pHandle->PolarizationCounter++;
 8005322:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseAOffset += ADCx->JDR1;
 8005326:	4434      	add	r4, r6
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005328:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800532a:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 800532c:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005336:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005338:	bc70      	pop	{r4, r5, r6}
  pStator_Currents->a = 0;
 800533a:	600b      	str	r3, [r1, #0]
}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005340:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8005344:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005346:	e9d3 4200 	ldrd	r4, r2, [r3]
 800534a:	6a13      	ldr	r3, [r2, #32]
 800534c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005350:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005352:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d809      	bhi.n	800536e <R3_1_HFCurrentsCalibrationC+0x2e>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 800535a:	6c24      	ldr	r4, [r4, #64]	; 0x40
    pHandle->PolarizationCounter++;
 800535c:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005360:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 8005362:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005364:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005366:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005368:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800536a:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800536e:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005370:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005374:	600b      	str	r3, [r1, #0]
}
 8005376:	4770      	bx	lr

08005378 <R3_1_TurnOnLowSides>:
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005378:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = true;
 800537c:	2301      	movs	r3, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800537e:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005380:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005384:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005386:	f06f 0001 	mvn.w	r0, #1
 800538a:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800538c:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800538e:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005390:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005392:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005394:	07db      	lsls	r3, r3, #31
 8005396:	d5fc      	bpl.n	8005392 <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005398:	f06f 0301 	mvn.w	r3, #1
 800539c:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800539e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a4:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80053a6:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d000      	beq.n	80053b0 <R3_1_TurnOnLowSides+0x38>
 80053ae:	4770      	bx	lr
{
 80053b0:	b470      	push	{r4, r5, r6}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80053b2:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80053b6:	e9d1 3604 	ldrd	r3, r6, [r1, #16]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80053ba:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80053be:	61ae      	str	r6, [r5, #24]
 80053c0:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 80053c2:	bc70      	pop	{r4, r5, r6}
 80053c4:	619a      	str	r2, [r3, #24]
 80053c6:	4770      	bx	lr

080053c8 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80053c8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80053cc:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80053d0:	684b      	ldr	r3, [r1, #4]
{  
 80053d2:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80053d4:	2400      	movs	r4, #0
 80053d6:	f880 406b 	strb.w	r4, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80053da:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053dc:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80053e0:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80053e2:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80053e4:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80053e6:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053ea:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80053ec:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 80053ee:	07d2      	lsls	r2, r2, #31
 80053f0:	d5fc      	bpl.n	80053ec <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053f2:	f06f 0201 	mvn.w	r2, #1
 80053f6:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80053f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005408:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 800540c:	2a02      	cmp	r2, #2
 800540e:	d008      	beq.n	8005422 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005410:	f06f 0201 	mvn.w	r2, #1
 8005414:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800541c:	bcf0      	pop	{r4, r5, r6, r7}
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8005422:	6a18      	ldr	r0, [r3, #32]
 8005424:	f240 5255 	movw	r2, #1365	; 0x555
 8005428:	4210      	tst	r0, r2
 800542a:	d009      	beq.n	8005440 <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800542c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005430:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8005434:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005436:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 800543a:	6184      	str	r4, [r0, #24]
 800543c:	6191      	str	r1, [r2, #24]
}
 800543e:	e7e7      	b.n	8005410 <R3_1_SwitchOnPWM+0x48>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005440:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 8005444:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005446:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005448:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 800544c:	0424      	lsls	r4, r4, #16
 800544e:	0400      	lsls	r0, r0, #16
 8005450:	0412      	lsls	r2, r2, #16
 8005452:	61bc      	str	r4, [r7, #24]
 8005454:	61b0      	str	r0, [r6, #24]
 8005456:	61aa      	str	r2, [r5, #24]
}
 8005458:	e7da      	b.n	8005410 <R3_1_SwitchOnPWM+0x48>
 800545a:	bf00      	nop

0800545c <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800545c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8005460:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005462:	68d3      	ldr	r3, [r2, #12]
 8005464:	f023 0301 	bic.w	r3, r3, #1
{
 8005468:	b4f0      	push	{r4, r5, r6, r7}

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 800546a:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
 800546e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005470:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005472:	2500      	movs	r5, #0
 8005474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005478:	f880 506b 	strb.w	r5, [r0, #107]	; 0x6b
 800547c:	6453      	str	r3, [r2, #68]	; 0x44
  if (pHandle->BrakeActionLock == true)
 800547e:	b91c      	cbnz	r4, 8005488 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005480:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
 8005484:	2b02      	cmp	r3, #2
 8005486:	d00a      	beq.n	800549e <R3_1_SwitchOffPWM+0x42>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005488:	f06f 0301 	mvn.w	r3, #1
 800548c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800548e:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005490:	07db      	lsls	r3, r3, #31
 8005492:	d5fc      	bpl.n	800548e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005494:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8005498:	bcf0      	pop	{r4, r5, r6, r7}
 800549a:	6113      	str	r3, [r2, #16]
 800549c:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800549e:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 80054a2:	69cb      	ldr	r3, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80054a4:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80054a6:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 80054aa:	0424      	lsls	r4, r4, #16
 80054ac:	0400      	lsls	r0, r0, #16
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	61bc      	str	r4, [r7, #24]
 80054b2:	61b0      	str	r0, [r6, #24]
 80054b4:	61ab      	str	r3, [r5, #24]
}
 80054b6:	e7e7      	b.n	8005488 <R3_1_SwitchOffPWM+0x2c>

080054b8 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80054b8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 80054bc:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80054be:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80054c0:	e9d2 5000 	ldrd	r5, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 80054c4:	6a02      	ldr	r2, [r0, #32]
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 80054c6:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <R3_1_RLGetPhaseCurrents+0x44>)
 80054c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054cc:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 80054ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80054d0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	db05      	blt.n	80054e4 <R3_1_RLGetPhaseCurrents+0x2c>
  {
    if (wAux < INT16_MAX)
 80054d8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80054dc:	4293      	cmp	r3, r2
 80054de:	dc0a      	bgt.n	80054f6 <R3_1_RLGetPhaseCurrents+0x3e>
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	e000      	b.n	80054e6 <R3_1_RLGetPhaseCurrents+0x2e>
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <R3_1_RLGetPhaseCurrents+0x48>)
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 80054e6:	2200      	movs	r2, #0
 80054e8:	f363 020f 	bfi	r2, r3, #0, #16
 80054ec:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = ( int16_t )( wAux );

}
 80054f0:	bc30      	pop	{r4, r5}
  pStator_Currents->a = ( int16_t )( wAux );
 80054f2:	600a      	str	r2, [r1, #0]
}
 80054f4:	4770      	bx	lr
 80054f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80054fa:	e7f4      	b.n	80054e6 <R3_1_RLGetPhaseCurrents+0x2e>
 80054fc:	ffff8002 	.word	0xffff8002
 8005500:	ffff8001 	.word	0xffff8001

08005504 <R3_1_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005504:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8005508:	684a      	ldr	r2, [r1, #4]
{  
 800550a:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800550c:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005510:	2400      	movs	r4, #0
 8005512:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005514:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005516:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d5fc      	bpl.n	8005516 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800551c:	f06f 0301 	mvn.w	r3, #1
 8005520:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005522:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005528:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800552a:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
 800552e:	2b02      	cmp	r3, #2
 8005530:	d10a      	bne.n	8005548 <R3_1_RLTurnOnLowSides+0x44>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005532:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005536:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800553a:	e9d1 1504 	ldrd	r1, r5, [r1, #16]
 800553e:	0412      	lsls	r2, r2, #16
 8005540:	041b      	lsls	r3, r3, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005542:	61a5      	str	r5, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005544:	6182      	str	r2, [r0, #24]
 8005546:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8005548:	bc30      	pop	{r4, r5}
 800554a:	4770      	bx	lr

0800554c <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800554c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005550:	2200      	movs	r2, #0
{
 8005552:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005554:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005558:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	06d6      	lsls	r6, r2, #27
 8005560:	d4fc      	bmi.n	800555c <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	06d5      	lsls	r5, r2, #27
 8005566:	d5fc      	bpl.n	8005562 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8005568:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  WRITE_REG(TIMx->CCR1, CompareValue);
 800556c:	2501      	movs	r5, #1
 800556e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005570:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005574:	635d      	str	r5, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005578:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800557a:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800557c:	07d2      	lsls	r2, r2, #31
 800557e:	d5fc      	bpl.n	800557a <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005580:	f06f 0201 	mvn.w	r2, #1
 8005584:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800558e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005596:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 800559a:	2a02      	cmp	r2, #2
 800559c:	d00b      	beq.n	80055b6 <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800559e:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055a2:	f06f 0104 	mvn.w	r1, #4
 80055a6:	6021      	str	r1, [r4, #0]
 80055a8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80055b0:	bcf0      	pop	{r4, r5, r6, r7}
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80055b6:	6a18      	ldr	r0, [r3, #32]
 80055b8:	f240 5255 	movw	r2, #1365	; 0x555
 80055bc:	4210      	tst	r0, r2
 80055be:	d00a      	beq.n	80055d6 <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80055c0:	e9d1 0502 	ldrd	r0, r5, [r1, #8]
 80055c4:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80055c6:	694e      	ldr	r6, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80055c8:	6186      	str	r6, [r0, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80055ca:	6908      	ldr	r0, [r1, #16]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80055cc:	6989      	ldr	r1, [r1, #24]
 80055ce:	61a9      	str	r1, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80055d0:	0412      	lsls	r2, r2, #16
 80055d2:	6182      	str	r2, [r0, #24]
}
 80055d4:	e7e3      	b.n	800559e <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80055d6:	e9d1 5005 	ldrd	r5, r0, [r1, #20]
 80055da:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80055dc:	f8d1 c008 	ldr.w	ip, [r1, #8]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80055e0:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80055e4:	042d      	lsls	r5, r5, #16
 80055e6:	0400      	lsls	r0, r0, #16
 80055e8:	0412      	lsls	r2, r2, #16
 80055ea:	f8cc 5018 	str.w	r5, [ip, #24]
 80055ee:	61b8      	str	r0, [r7, #24]
 80055f0:	61b2      	str	r2, [r6, #24]
}
 80055f2:	e7d4      	b.n	800559e <R3_1_RLSwitchOnPWM+0x52>

080055f4 <R3_1_Init>:
{
 80055f4:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80055f6:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 80055fa:	e9d4 3200 	ldrd	r3, r2, [r4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80055fe:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8005600:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8005604:	f021 0120 	bic.w	r1, r1, #32
 8005608:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800560a:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800560c:	6859      	ldr	r1, [r3, #4]
    if ( TIMx == TIM1 )
 800560e:	4d20      	ldr	r5, [pc, #128]	; (8005690 <R3_1_Init+0x9c>)
 8005610:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005614:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005616:	f06f 0104 	mvn.w	r1, #4
 800561a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800561c:	6811      	ldr	r1, [r2, #0]
 800561e:	42aa      	cmp	r2, r5
 8005620:	f021 0101 	bic.w	r1, r1, #1
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	d02d      	beq.n	8005684 <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005628:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800562c:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800562e:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8005632:	b119      	cbz	r1, 800563c <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8005634:	68d1      	ldr	r1, [r2, #12]
 8005636:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800563a:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 800563c:	6a11      	ldr	r1, [r2, #32]
 800563e:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8005642:	f041 0105 	orr.w	r1, r1, #5
 8005646:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005652:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800565c:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005664:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8005666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005668:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    pHandle->OverCurrentFlag = false;
 800566c:	2100      	movs	r1, #0
 800566e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005672:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005678:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800567a:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    pHandle->_Super.DTTest = 0u;
 800567e:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
}
 8005682:	4770      	bx	lr
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005684:	4d03      	ldr	r5, [pc, #12]	; (8005694 <R3_1_Init+0xa0>)
 8005686:	68e9      	ldr	r1, [r5, #12]
 8005688:	f041 0101 	orr.w	r1, r1, #1
 800568c:	60e9      	str	r1, [r5, #12]
}
 800568e:	e7cb      	b.n	8005628 <R3_1_Init+0x34>
 8005690:	40010000 	.word	0x40010000
 8005694:	e0042000 	.word	0xe0042000

08005698 <R3_1_SetOffsetCalib>:
{
 8005698:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800569a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 80056a2:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80056a4:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 80056a8:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80056ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop

080056b4 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80056b4:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 80056b8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80056ba:	608b      	str	r3, [r1, #8]
 80056bc:	e9c1 0200 	strd	r0, r2, [r1]
}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <R3_1_CurrentReadingCalibration>:
{
 80056c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80056c6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  if (false == pHandle->_Super.offsetCalibStatus)
 80056ca:	f890 606e 	ldrb.w	r6, [r0, #110]	; 0x6e
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80056ce:	685c      	ldr	r4, [r3, #4]
{
 80056d0:	b085      	sub	sp, #20
 80056d2:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80056d4:	b356      	cbz	r6, 800572c <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056d6:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80056d8:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056dc:	f022 0208 	bic.w	r2, r2, #8
 80056e0:	61a2      	str	r2, [r4, #24]
 80056e2:	69a2      	ldr	r2, [r4, #24]
 80056e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e8:	61a2      	str	r2, [r4, #24]
 80056ea:	69e2      	ldr	r2, [r4, #28]
 80056ec:	f022 0208 	bic.w	r2, r2, #8
 80056f0:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80056f2:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80056f4:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80056f6:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056f8:	69a3      	ldr	r3, [r4, #24]
 80056fa:	f043 0308 	orr.w	r3, r3, #8
 80056fe:	61a3      	str	r3, [r4, #24]
 8005700:	69a3      	ldr	r3, [r4, #24]
 8005702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005706:	61a3      	str	r3, [r4, #24]
 8005708:	69e3      	ldr	r3, [r4, #28]
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005710:	6a23      	ldr	r3, [r4, #32]
 8005712:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8005716:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector = SECTOR_5;
 800571a:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 800571c:	2200      	movs	r2, #0
 800571e:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8005720:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8005724:	f885 208a 	strb.w	r2, [r5, #138]	; 0x8a
}
 8005728:	b005      	add	sp, #20
 800572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800572c:	6802      	ldr	r2, [r0, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800572e:	6943      	ldr	r3, [r0, #20]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8005730:	9202      	str	r2, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8005732:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 8005734:	f880 6087 	strb.w	r6, [r0, #135]	; 0x87
  CLEAR_BIT(TIMx->CCER, Channels);
 8005738:	6a23      	ldr	r3, [r4, #32]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800573a:	4925      	ldr	r1, [pc, #148]	; (80057d0 <R3_1_CurrentReadingCalibration+0x10c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800573c:	4f25      	ldr	r7, [pc, #148]	; (80057d4 <R3_1_CurrentReadingCalibration+0x110>)
    pHandle->PhaseAOffset = 0u;
 800573e:	6706      	str	r6, [r0, #112]	; 0x70
 8005740:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
    pHandle->CalibSector = SECTOR_5;
 8005744:	2204      	movs	r2, #4
 8005746:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 800574a:	e9c0 661d 	strd	r6, r6, [r0, #116]	; 0x74
 800574e:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005750:	6141      	str	r1, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8005752:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    pHandle->_Super.Sector = SECTOR_5;
 8005756:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800575a:	6007      	str	r7, [r0, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800575c:	f7ff fe34 	bl	80053c8 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8005760:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8005764:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8005768:	f105 0387 	add.w	r3, r5, #135	; 0x87
 800576c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8005770:	4620      	mov	r0, r4
 8005772:	e9cd 3100 	strd	r3, r1, [sp]
 8005776:	f7ff fceb 	bl	8005150 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800577a:	4628      	mov	r0, r5
 800577c:	f7ff fe6e 	bl	800545c <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <R3_1_CurrentReadingCalibration+0x114>)
    pHandle->PolarizationCounter = 0u;
 8005782:	f885 6087 	strb.w	r6, [r5, #135]	; 0x87
    pHandle->CalibSector = SECTOR_1;
 8005786:	f885 6086 	strb.w	r6, [r5, #134]	; 0x86
    pHandle->_Super.Sector = SECTOR_1;
 800578a:	f885 606a 	strb.w	r6, [r5, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 800578e:	602a      	str	r2, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8005790:	4628      	mov	r0, r5
 8005792:	f7ff fe19 	bl	80053c8 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8005796:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800579a:	e9dd 3100 	ldrd	r3, r1, [sp]
 800579e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff fcd4 	bl	8005150 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80057a8:	4628      	mov	r0, r5
 80057aa:	f7ff fe57 	bl	800545c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 80057ae:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset >>= 3;
 80057b2:	6fab      	ldr	r3, [r5, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80057b4:	9e02      	ldr	r6, [sp, #8]
 80057b6:	602e      	str	r6, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80057b8:	9803      	ldr	r0, [sp, #12]
 80057ba:	6168      	str	r0, [r5, #20]
    pHandle->PhaseAOffset >>= 3;
 80057bc:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 80057be:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseCOffset >>= 3;
 80057c0:	08db      	lsrs	r3, r3, #3
    pHandle->_Super.offsetCalibStatus = true;
 80057c2:	2601      	movs	r6, #1
    pHandle->PhaseBOffset >>= 3;
 80057c4:	e9c5 121c 	strd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset >>= 3;
 80057c8:	67ab      	str	r3, [r5, #120]	; 0x78
    pHandle->_Super.offsetCalibStatus = true;
 80057ca:	f885 606e 	strb.w	r6, [r5, #110]	; 0x6e
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80057ce:	e782      	b.n	80056d6 <R3_1_CurrentReadingCalibration+0x12>
 80057d0:	08005811 	.word	0x08005811
 80057d4:	08005301 	.word	0x08005301
 80057d8:	08005341 	.word	0x08005341

080057dc <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80057dc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80057e0:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80057e2:	685b      	ldr	r3, [r3, #4]
{
 80057e4:	b430      	push	{r4, r5}
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80057e6:	f8b0 5040 	ldrh.w	r5, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80057ea:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80057ee:	635a      	str	r2, [r3, #52]	; 0x34
  if ( pHandle->_Super.SWerror == 1u )
 80057f0:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  WRITE_REG(TIMx->CCR2, CompareValue);
 80057f4:	639d      	str	r5, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80057f6:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80057f8:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	2a01      	cmp	r2, #1
    hAux = MC_DURATION;
 80057fe:	bf12      	itee	ne
 8005800:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005804:	2300      	moveq	r3, #0
 8005806:	f8a0 3044 	strheq.w	r3, [r0, #68]	; 0x44
}
 800580a:	bc30      	pop	{r4, r5}
 800580c:	4610      	mov	r0, r2
 800580e:	4770      	bx	lr

08005810 <R3_1_SetADCSampPointCalibration>:
{
 8005810:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8005812:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
  pHandle->_Super.Sector = pHandle->CalibSector;
 8005816:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 800581a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800581e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8005822:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005824:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8005828:	b289      	uxth	r1, r1
 800582a:	f7ff ffd7 	bl	80057dc <R3_1_WriteTIMRegisters>
}
 800582e:	bd10      	pop	{r4, pc}

08005830 <R3_1_SetADCSampPointSectX>:
{
 8005830:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8005832:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8005836:	f8b0 4084 	ldrh.w	r4, [r0, #132]	; 0x84
 800583a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 800583e:	1a62      	subs	r2, r4, r1
 8005840:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8005842:	b292      	uxth	r2, r2
 8005844:	429a      	cmp	r2, r3
 8005846:	d907      	bls.n	8005858 <R3_1_SetADCSampPointSectX+0x28>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005848:	1e61      	subs	r1, r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 800584a:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800584c:	b289      	uxth	r1, r1
    pHandle->_Super.Sector = SECTOR_5;
 800584e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8005852:	f7ff ffc3 	bl	80057dc <R3_1_WriteTIMRegisters>
}
 8005856:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8005858:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
 800585c:	1b4d      	subs	r5, r1, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800585e:	b2ad      	uxth	r5, r5
 8005860:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8005864:	d905      	bls.n	8005872 <R3_1_SetADCSampPointSectX+0x42>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8005866:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 8005868:	1ac9      	subs	r1, r1, r3
 800586a:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800586c:	f7ff ffb6 	bl	80057dc <R3_1_WriteTIMRegisters>
}
 8005870:	bd70      	pop	{r4, r5, r6, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8005872:	4419      	add	r1, r3
 8005874:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8005876:	428c      	cmp	r4, r1
 8005878:	d8eb      	bhi.n	8005852 <R3_1_SetADCSampPointSectX+0x22>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800587a:	43c9      	mvns	r1, r1
 800587c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8005884:	b289      	uxth	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8005886:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800588a:	f7ff ffa7 	bl	80057dc <R3_1_WriteTIMRegisters>
}
 800588e:	bd70      	pop	{r4, r5, r6, pc}

08005890 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005890:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
{
 8005894:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005896:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800589a:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800589c:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800589e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80058a2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80058a6:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80058a8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 80058ac:	3008      	adds	r0, #8
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80058ae:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80058b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80058b6:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80058b8:	6a20      	ldr	r0, [r4, #32]
 80058ba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80058be:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80058c0:	6891      	ldr	r1, [r2, #8]
 80058c2:	4331      	orrs	r1, r6
 80058c4:	6091      	str	r1, [r2, #8]
}
 80058c6:	f103 0068 	add.w	r0, r3, #104	; 0x68
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80058ca:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
}
 80058ce:	bc70      	pop	{r4, r5, r6}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop

080058d4 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80058d4:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
 80058d8:	b92b      	cbnz	r3, 80058e6 <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80058da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80058de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80058e2:	2a02      	cmp	r2, #2
 80058e4:	d004      	beq.n	80058f0 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 80058ec:	3068      	adds	r0, #104	; 0x68
 80058ee:	4770      	bx	lr
{
 80058f0:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80058f2:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80058f6:	e9d3 7602 	ldrd	r7, r6, [r3, #8]
 80058fa:	69da      	ldr	r2, [r3, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80058fc:	691d      	ldr	r5, [r3, #16]
 80058fe:	0424      	lsls	r4, r4, #16
 8005900:	0409      	lsls	r1, r1, #16
 8005902:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005904:	2301      	movs	r3, #1
 8005906:	61bc      	str	r4, [r7, #24]
}
 8005908:	3068      	adds	r0, #104	; 0x68
 800590a:	61b1      	str	r1, [r6, #24]
 800590c:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 800590e:	f880 3020 	strb.w	r3, [r0, #32]
}
 8005912:	bcf0      	pop	{r4, r5, r6, r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop

08005918 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8005918:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800591c:	b90b      	cbnz	r3, 8005922 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 800591e:	4618      	mov	r0, r3
}
 8005920:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8005922:	2300      	movs	r3, #0
 8005924:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
    retVal |= MC_BREAK_IN;
 8005928:	2040      	movs	r0, #64	; 0x40
 800592a:	4770      	bx	lr

0800592c <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 800592c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8005930:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8005932:	2900      	cmp	r1, #0
 8005934:	d135      	bne.n	80059a2 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005936:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 800593a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005942:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005946:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005948:	6a1a      	ldr	r2, [r3, #32]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f022 0204 	bic.w	r2, r2, #4
 8005956:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005958:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 800595a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800595e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005960:	f103 0118 	add.w	r1, r3, #24
 8005964:	d02b      	beq.n	80059be <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005966:	2a02      	cmp	r2, #2
 8005968:	d10d      	bne.n	8005986 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	f042 0210 	orr.w	r2, r2, #16
 800597c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005984:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005986:	684a      	ldr	r2, [r1, #4]
 8005988:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800598c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8005990:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005998:	621a      	str	r2, [r3, #32]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a0:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80059a4:	490e      	ldr	r1, [pc, #56]	; (80059e0 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059a6:	4a0f      	ldr	r2, [pc, #60]	; (80059e4 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80059a8:	4c0f      	ldr	r4, [pc, #60]	; (80059e8 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80059aa:	6003      	str	r3, [r0, #0]
  pHandle->_Super.RLDetectionMode = true;
 80059ac:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80059ae:	6104      	str	r4, [r0, #16]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80059b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 80059b8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 80059bc:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80059c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	f022 0210 	bic.w	r2, r2, #16
 80059d0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	e7d4      	b.n	8005986 <R3_1_RLDetectionModeEnable+0x5a>
 80059dc:	080054b9 	.word	0x080054b9
 80059e0:	0800554d 	.word	0x0800554d
 80059e4:	0800545d 	.word	0x0800545d
 80059e8:	08005505 	.word	0x08005505

080059ec <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 80059ec:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d062      	beq.n	8005aba <R3_1_RLDetectionModeDisable+0xce>
{
 80059f4:	b470      	push	{r4, r5, r6}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80059f6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80059fa:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	06d4      	lsls	r4, r2, #27
 8005a00:	d5fc      	bpl.n	80059fc <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	06d2      	lsls	r2, r2, #27
 8005a06:	d4fc      	bmi.n	8005a02 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8005a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005a14:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005a18:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8005a22:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 8005a26:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005a28:	f103 0518 	add.w	r5, r3, #24
 8005a2c:	d046      	beq.n	8005abc <R3_1_RLDetectionModeDisable+0xd0>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005a2e:	2a02      	cmp	r2, #2
 8005a30:	d103      	bne.n	8005a3a <R3_1_RLDetectionModeDisable+0x4e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	f022 0204 	bic.w	r2, r2, #4
 8005a38:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8005a3a:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 8005a3e:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a42:	699c      	ldr	r4, [r3, #24]
 8005a44:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8005a48:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8005a4c:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005a4e:	6a1c      	ldr	r4, [r3, #32]
 8005a50:	f044 0410 	orr.w	r4, r4, #16
 8005a54:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8005a56:	f891 4044 	ldrb.w	r4, [r1, #68]	; 0x44
 8005a5a:	2c01      	cmp	r4, #1
 8005a5c:	d038      	beq.n	8005ad0 <R3_1_RLDetectionModeDisable+0xe4>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005a5e:	2c02      	cmp	r4, #2
 8005a60:	d103      	bne.n	8005a6a <R3_1_RLDetectionModeDisable+0x7e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a62:	6a1c      	ldr	r4, [r3, #32]
 8005a64:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8005a68:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8005a6c:	686c      	ldr	r4, [r5, #4]
 8005a6e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8005a72:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8005a76:	606c      	str	r4, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8005a78:	6a1c      	ldr	r4, [r3, #32]
 8005a7a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005a7e:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8005a80:	f891 4044 	ldrb.w	r4, [r1, #68]	; 0x44
 8005a84:	2c01      	cmp	r4, #1
 8005a86:	d01e      	beq.n	8005ac6 <R3_1_RLDetectionModeDisable+0xda>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005a88:	2c02      	cmp	r4, #2
 8005a8a:	d103      	bne.n	8005a94 <R3_1_RLDetectionModeDisable+0xa8>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005a8c:	6a1c      	ldr	r4, [r3, #32]
 8005a8e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005a92:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8005a94:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a96:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8005a98:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8005a9a:	4c10      	ldr	r4, [pc, #64]	; (8005adc <R3_1_RLDetectionModeDisable+0xf0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8005a9c:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <R3_1_RLDetectionModeDisable+0xf4>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8005a9e:	4e11      	ldr	r6, [pc, #68]	; (8005ae4 <R3_1_RLDetectionModeDisable+0xf8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8005aa0:	4d11      	ldr	r5, [pc, #68]	; (8005ae8 <R3_1_RLDetectionModeDisable+0xfc>)
 8005aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa6:	604b      	str	r3, [r1, #4]
    pHandle->_Super.RLDetectionMode = false;
 8005aa8:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8005aaa:	e9c0 2401 	strd	r2, r4, [r0, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8005aae:	6006      	str	r6, [r0, #0]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8005ab0:	6105      	str	r5, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8005ab2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8005ab6:	bc70      	pop	{r4, r5, r6}
 8005ab8:	4770      	bx	lr
 8005aba:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	f042 0204 	orr.w	r2, r2, #4
 8005ac2:	621a      	str	r2, [r3, #32]
}
 8005ac4:	e7b9      	b.n	8005a3a <R3_1_RLDetectionModeDisable+0x4e>
  SET_BIT(TIMx->CCER, Channels);
 8005ac6:	6a1c      	ldr	r4, [r3, #32]
 8005ac8:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8005acc:	621c      	str	r4, [r3, #32]
}
 8005ace:	e7e1      	b.n	8005a94 <R3_1_RLDetectionModeDisable+0xa8>
  SET_BIT(TIMx->CCER, Channels);
 8005ad0:	6a1c      	ldr	r4, [r3, #32]
 8005ad2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8005ad6:	621c      	str	r4, [r3, #32]
}
 8005ad8:	e7c7      	b.n	8005a6a <R3_1_RLDetectionModeDisable+0x7e>
 8005ada:	bf00      	nop
 8005adc:	080053c9 	.word	0x080053c9
 8005ae0:	0800545d 	.word	0x0800545d
 8005ae4:	08005189 	.word	0x08005189
 8005ae8:	08005379 	.word	0x08005379

08005aec <R3_1_RLDetectionModeSetDuty>:
{
 8005aec:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005aee:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005af2:	f8b0 4084 	ldrh.w	r4, [r0, #132]	; 0x84
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005af6:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8005af8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005afc:	fb01 f104 	mul.w	r1, r1, r4
 8005b00:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8005b02:	2403      	movs	r4, #3
 8005b04:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8005b08:	87c1      	strh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b0a:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005b0c:	6a12      	ldr	r2, [r2, #32]
}
 8005b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8005b12:	2b01      	cmp	r3, #1
    hAux = MC_DURATION;
 8005b14:	bf12      	itee	ne
 8005b16:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005b1a:	2200      	moveq	r2, #0
 8005b1c:	f8a0 2044 	strheq.w	r2, [r0, #68]	; 0x44
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	4770      	bx	lr

08005b24 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 8005b24:	b430      	push	{r4, r5}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005b26:	8c02      	ldrh	r2, [r0, #32]
 8005b28:	8b44      	ldrh	r4, [r0, #26]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005b2a:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005b2c:	4414      	add	r4, r2
 8005b2e:	0864      	lsrs	r4, r4, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005b30:	b14b      	cbz	r3, 8005b46 <RVBS_Clear+0x22>
    {
      pHandle->aBuffer[index] = aux;
 8005b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b34:	2300      	movs	r3, #0
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005b3e:	8b01      	ldrh	r1, [r0, #24]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	4291      	cmp	r1, r2
 8005b44:	d8f7      	bhi.n	8005b36 <RVBS_Clear+0x12>
    }
    pHandle->_Super.LatestConv = aux;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f364 030f 	bfi	r3, r4, #0, #16
 8005b4c:	f364 431f 	bfi	r3, r4, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8005b50:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005b52:	bc30      	pop	{r4, r5}
    pHandle->_Super.LatestConv = aux;
 8005b54:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8005b56:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 8005b5a:	4770      	bx	lr

08005b5c <RVBS_Init>:
{
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005b60:	300c      	adds	r0, #12
 8005b62:	f7fd ff47 	bl	80039f4 <RCM_RegisterRegConv>
 8005b66:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff ffda 	bl	8005b24 <RVBS_Clear>
}
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop

08005b74 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005b74:	8b42      	ldrh	r2, [r0, #26]
 8005b76:	8b81      	ldrh	r1, [r0, #28]
 8005b78:	428a      	cmp	r2, r1
{
 8005b7a:	4603      	mov	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005b7c:	d011      	beq.n	8005ba2 <RVBS_CheckFaultState+0x2e>
{
 8005b7e:	b410      	push	{r4}
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005b80:	88c4      	ldrh	r4, [r0, #6]
 8005b82:	8c00      	ldrh	r0, [r0, #32]
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	d808      	bhi.n	8005b9a <RVBS_CheckFaultState+0x26>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005b88:	7f98      	ldrb	r0, [r3, #30]
 8005b8a:	b998      	cbnz	r0, 8005bb4 <RVBS_CheckFaultState+0x40>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005b8c:	42a1      	cmp	r1, r4
 8005b8e:	d917      	bls.n	8005bc0 <RVBS_CheckFaultState+0x4c>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8005b90:	2201      	movs	r2, #1
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005b92:	f85d 4b04 	ldr.w	r4, [sp], #4
          pHandle->OverVoltageHysteresisUpDir = true;
 8005b96:	779a      	strb	r2, [r3, #30]
}
 8005b98:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8005b9a:	2004      	movs	r0, #4
}
 8005b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba0:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005ba2:	88c1      	ldrh	r1, [r0, #6]
 8005ba4:	428a      	cmp	r2, r1
 8005ba6:	d311      	bcc.n	8005bcc <RVBS_CheckFaultState+0x58>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005ba8:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 8005baa:	4288      	cmp	r0, r1
 8005bac:	bf8c      	ite	hi
 8005bae:	2004      	movhi	r0, #4
 8005bb0:	2000      	movls	r0, #0
 8005bb2:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005bb4:	42a2      	cmp	r2, r4
 8005bb6:	d305      	bcc.n	8005bc4 <RVBS_CheckFaultState+0x50>
        fault = MC_NO_ERROR;
 8005bb8:	2000      	movs	r0, #0
}
 8005bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bbe:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8005bc0:	2002      	movs	r0, #2
 8005bc2:	e7eb      	b.n	8005b9c <RVBS_CheckFaultState+0x28>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	779a      	strb	r2, [r3, #30]
          fault = MC_OVER_VOLT;
 8005bc8:	2002      	movs	r0, #2
 8005bca:	e7e7      	b.n	8005b9c <RVBS_CheckFaultState+0x28>
        fault = MC_OVER_VOLT;
 8005bcc:	2002      	movs	r0, #2
}
 8005bce:	4770      	bx	lr

08005bd0 <RVBS_CalcAvVbus>:
{
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005bd4:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005bd8:	f7fd ffde 	bl	8003b98 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8005bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005be0:	4298      	cmp	r0, r3
 8005be2:	d021      	beq.n	8005c28 <RVBS_CalcAvVbus+0x58>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005be4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bea:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005bee:	8b26      	ldrh	r6, [r4, #24]
 8005bf0:	f016 02ff 	ands.w	r2, r6, #255	; 0xff
 8005bf4:	d00d      	beq.n	8005c12 <RVBS_CalcAvVbus+0x42>
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8005bfe:	3b02      	subs	r3, #2
      wtemp = 0u;
 8005c00:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8005c02:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005c06:	429d      	cmp	r5, r3
        wtemp += pHandle->aBuffer[i];
 8005c08:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005c0a:	d1fa      	bne.n	8005c02 <RVBS_CalcAvVbus+0x32>
 8005c0c:	fbb2 f2f6 	udiv	r2, r2, r6
 8005c10:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005c12:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005c16:	80e2      	strh	r2, [r4, #6]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005c18:	3e01      	subs	r6, #1
 8005c1a:	42b3      	cmp	r3, r6
        pHandle->index++;
 8005c1c:	bf34      	ite	cc
 8005c1e:	3301      	addcc	r3, #1
        pHandle->index = 0U;
 8005c20:	2300      	movcs	r3, #0
      pHandle->_Super.LatestConv = hAux;
 8005c22:	80a0      	strh	r0, [r4, #4]
        pHandle->index = 0U;
 8005c24:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff ffa3 	bl	8005b74 <RVBS_CheckFaultState>
 8005c2e:	8120      	strh	r0, [r4, #8]
}
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	bf00      	nop

08005c34 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8005c34:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8005c36:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8005c38:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8005c3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8005c40:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8005c42:	4770      	bx	lr

08005c44 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8005c44:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8005c48:	2901      	cmp	r1, #1
 8005c4a:	d90c      	bls.n	8005c66 <REMNG_Calc+0x22>
{
 8005c4c:	b410      	push	{r4}
 8005c4e:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8005c52:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8005c54:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 8005c56:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 8005c58:	6083      	str	r3, [r0, #8]
 8005c5a:	fb93 f2f2 	sdiv	r2, r3, r2
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8005c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c62:	4610      	mov	r0, r2
 8005c64:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8005c66:	d005      	beq.n	8005c74 <REMNG_Calc+0x30>
 8005c68:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 8005c6a:	6083      	str	r3, [r0, #8]
 8005c6c:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8005c70:	4610      	mov	r0, r2
 8005c72:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005c74:	6842      	ldr	r2, [r0, #4]
 8005c76:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 8005c78:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005c7a:	fb03 f302 	mul.w	r3, r3, r2
      pHandle->RampRemainingStep = 0U;
 8005c7e:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8005c80:	6083      	str	r3, [r0, #8]
}
 8005c82:	4610      	mov	r0, r2
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop

08005c88 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8005c88:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8005c8a:	fab0 f080 	clz	r0, r0
 8005c8e:	0940      	lsrs	r0, r0, #5
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8005c94:	2800      	cmp	r0, #0
 8005c96:	bfb8      	it	lt
 8005c98:	4240      	neglt	r0, r0
{
 8005c9a:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005c9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ca0:	e002      	b.n	8005ca8 <getScalingFactor+0x14>
 8005ca2:	3301      	adds	r3, #1
  for (i = 1U; i < 32U; i++)
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d007      	beq.n	8005cb8 <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005ca8:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 8005cac:	4290      	cmp	r0, r2
 8005cae:	d3f8      	bcc.n	8005ca2 <getScalingFactor+0xe>
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	4098      	lsls	r0, r3
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
}
 8005cb6:	4770      	bx	lr
 8005cb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <REMNG_ExecRamp>:
{
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
    if (0U == Durationms)
 8005cc8:	4690      	mov	r8, r2
 8005cca:	b95a      	cbnz	r2, 8005ce4 <REMNG_ExecRamp+0x24>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8005ccc:	4608      	mov	r0, r1
 8005cce:	f7ff ffe1 	bl	8005c94 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005cd2:	fb05 f500 	mul.w	r5, r5, r0
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8005cd6:	6160      	str	r0, [r4, #20]
      pHandle->IncDecAmount = 0;
 8005cd8:	e9c4 8803 	strd	r8, r8, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005cdc:	60a5      	str	r5, [r4, #8]
}
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005ce4:	6943      	ldr	r3, [r0, #20]
 8005ce6:	6887      	ldr	r7, [r0, #8]
 8005ce8:	fb97 f7f3 	sdiv	r7, r7, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8005cec:	1bce      	subs	r6, r1, r7
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ffd0 	bl	8005c94 <getScalingFactor>
 8005cf4:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7ff ffcc 	bl	8005c94 <getScalingFactor>
 8005cfc:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f7ff ffc8 	bl	8005c94 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8005d04:	45ca      	cmp	sl, r9
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8005d06:	4603      	mov	r3, r0
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8005d08:	6821      	ldr	r1, [r4, #0]
      pHandle->TargetFinal = TargetFinal;
 8005d0a:	6065      	str	r5, [r4, #4]
 8005d0c:	bf2c      	ite	cs
 8005d0e:	4648      	movcs	r0, r9
 8005d10:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 8005d12:	4298      	cmp	r0, r3
 8005d14:	bf28      	it	cs
 8005d16:	4618      	movcs	r0, r3
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8005d18:	fb01 f308 	mul.w	r3, r1, r8
      aux /= 1000U;
 8005d1c:	4908      	ldr	r1, [pc, #32]	; (8005d40 <REMNG_ExecRamp+0x80>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8005d1e:	6160      	str	r0, [r4, #20]
      aux /= 1000U;
 8005d20:	fba1 2303 	umull	r2, r3, r1, r3
 8005d24:	099b      	lsrs	r3, r3, #6
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005d26:	fb07 f700 	mul.w	r7, r7, r0
      pHandle->RampRemainingStep++;
 8005d2a:	3301      	adds	r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8005d2c:	fb00 f006 	mul.w	r0, r0, r6
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005d30:	60a7      	str	r7, [r4, #8]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005d32:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = aux1;
 8005d36:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d40:	10624dd3 	.word	0x10624dd3

08005d44 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8005d44:	b430      	push	{r4, r5}
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005d46:	6944      	ldr	r4, [r0, #20]
{
 8005d48:	9d02      	ldr	r5, [sp, #8]
    pHandle->pSTC = pSTC;
 8005d4a:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->OTFSCLowside = false;
 8005d4c:	2100      	movs	r1, #0
    pHandle->pSNSL = pSNSL;
 8005d4e:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->pPWM = pPWM;
 8005d52:	6745      	str	r5, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 8005d54:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005d58:	b30c      	cbz	r4, 8005d9e <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005d5a:	68a3      	ldr	r3, [r4, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005d5c:	b30b      	cbz	r3, 8005da2 <RUC_Init+0x5e>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005d5e:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005d60:	b30b      	cbz	r3, 8005da6 <RUC_Init+0x62>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005d62:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005d64:	b1c3      	cbz	r3, 8005d98 <RUC_Init+0x54>
 8005d66:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8005d68:	2105      	movs	r1, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005d6a:	b1b3      	cbz	r3, 8005d9a <RUC_Init+0x56>
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	2105      	movs	r1, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005d70:	8805      	ldrh	r5, [r0, #0]
 8005d72:	4c0e      	ldr	r4, [pc, #56]	; (8005dac <RUC_Init+0x68>)
 8005d74:	2364      	movs	r3, #100	; 0x64
 8005d76:	fb03 f305 	mul.w	r3, r3, r5
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005d7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005d7e:	fba4 4303 	umull	r4, r3, r4, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005d82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d86:	2400      	movs	r4, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005d88:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005d8a:	6154      	str	r4, [r2, #20]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8005d8c:	bc30      	pop	{r4, r5}
      pHandle->bPhaseNbr = bPhase;
 8005d8e:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005d92:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8005d96:	4770      	bx	lr
      bPhase++;
 8005d98:	2104      	movs	r1, #4
 8005d9a:	1e4a      	subs	r2, r1, #1
 8005d9c:	e7e8      	b.n	8005d70 <RUC_Init+0x2c>
 8005d9e:	2101      	movs	r1, #1
 8005da0:	e7fb      	b.n	8005d9a <RUC_Init+0x56>
 8005da2:	2102      	movs	r1, #2
 8005da4:	e7f9      	b.n	8005d9a <RUC_Init+0x56>
 8005da6:	2103      	movs	r1, #3
 8005da8:	e7f7      	b.n	8005d9a <RUC_Init+0x56>
 8005daa:	bf00      	nop
 8005dac:	10624dd3 	.word	0x10624dd3

08005db0 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8005db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8005db4:	e9d0 871a 	ldrd	r8, r7, [r0, #104]	; 0x68
{
 8005db8:	4604      	mov	r4, r0

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8005dba:	2600      	movs	r6, #0
    pHandle->hDirection = hMotorDirection;
 8005dbc:	80c1      	strh	r1, [r0, #6]
    pHandle->bOTFRelCounter = 0U;
    pHandle->OTFSCLowside = false;

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8005dbe:	4638      	mov	r0, r7
    pHandle->bStageCnt = 0U;
 8005dc0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 8005dc4:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 8005dc8:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
{
 8005dcc:	460d      	mov	r5, r1
    VSS_Clear(pVSS);
 8005dce:	f000 fc79 	bl	80066c4 <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	f000 f901 	bl	8005fdc <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8005dda:	8861      	ldrh	r1, [r4, #2]
 8005ddc:	b2ad      	uxth	r5, r5
 8005dde:	fb11 f105 	smulbb	r1, r1, r5
 8005de2:	b209      	sxth	r1, r1
 8005de4:	4638      	mov	r0, r7
 8005de6:	f000 fd13 	bl	8006810 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8005dea:	4632      	mov	r2, r6
 8005dec:	4631      	mov	r1, r6
 8005dee:	4640      	mov	r0, r8
 8005df0:	f000 f8f8 	bl	8005fe4 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8005df4:	8a21      	ldrh	r1, [r4, #16]
 8005df6:	89a2      	ldrh	r2, [r4, #12]
 8005df8:	fb11 f105 	smulbb	r1, r1, r5
 8005dfc:	b209      	sxth	r1, r1
 8005dfe:	4640      	mov	r0, r8
 8005e00:	f000 f8f0 	bl	8005fe4 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8005e04:	89e1      	ldrh	r1, [r4, #14]
 8005e06:	89a2      	ldrh	r2, [r4, #12]
 8005e08:	fb11 f105 	smulbb	r1, r1, r5
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	b209      	sxth	r1, r1
 8005e10:	f000 fd06 	bl	8006820 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8005e14:	89a0      	ldrh	r0, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005e16:	8823      	ldrh	r3, [r4, #0]
                                              / 1000U );
 8005e18:	4906      	ldr	r1, [pc, #24]	; (8005e34 <RUC_Clear+0x84>)

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005e1a:	6962      	ldr	r2, [r4, #20]

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8005e1c:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005e20:	fb03 f300 	mul.w	r3, r3, r0
                                              / 1000U );
 8005e24:	fba1 1303 	umull	r1, r3, r1, r3
 8005e28:	099b      	lsrs	r3, r3, #6
    pHandle->hPhaseRemainingTicks++;
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	80a3      	strh	r3, [r4, #4]
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005e2e:	60a2      	str	r2, [r4, #8]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8005e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e34:	10624dd3 	.word	0x10624dd3

08005e38 <RUC_Exec>:
  * @brief  FOC Main Rev-Up controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 8005e38:	b538      	push	{r3, r4, r5, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005e3a:	8883      	ldrh	r3, [r0, #4]
{
 8005e3c:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005e3e:	bb43      	cbnz	r3, 8005e92 <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005e40:	68a0      	ldr	r0, [r4, #8]
 8005e42:	b328      	cbz	r0, 8005e90 <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005e44:	8881      	ldrh	r1, [r0, #4]
 8005e46:	88e3      	ldrh	r3, [r4, #6]
 8005e48:	8802      	ldrh	r2, [r0, #0]
 8005e4a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005e4c:	fb11 f103 	smulbb	r1, r1, r3
 8005e50:	b209      	sxth	r1, r1
 8005e52:	f000 f8c7 	bl	8005fe4 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	88e5      	ldrh	r5, [r4, #6]
 8005e5a:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005e60:	fb11 f105 	smulbb	r1, r1, r5
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005e64:	b209      	sxth	r1, r1
 8005e66:	f000 fcdb 	bl	8006820 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005e6a:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005e6c:	8823      	ldrh	r3, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8005e6e:	8810      	ldrh	r0, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005e70:	490b      	ldr	r1, [pc, #44]	; (8005ea0 <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005e72:	6892      	ldr	r2, [r2, #8]
 8005e74:	60a2      	str	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005e76:	fb03 f300 	mul.w	r3, r3, r0
 8005e7a:	fba1 2303 	umull	r2, r3, r1, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 8005e7e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005e82:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8005e84:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8005e86:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8005e88:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8005e8a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8005e8e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->hPhaseRemainingTicks--;
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0d1      	beq.n	8005e40 <RUC_Exec+0x8>
  bool retVal = true;
 8005e9c:	2001      	movs	r0, #1
}
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	10624dd3 	.word	0x10624dd3

08005ea4 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8005ea4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005ea8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8005eac:	4282      	cmp	r2, r0
 8005eae:	bf34      	ite	cc
 8005eb0:	2000      	movcc	r0, #0
 8005eb2:	2001      	movcs	r0, #1
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005eb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005ebc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
{
 8005ec0:	b410      	push	{r4}
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8005ec2:	f8d2 4002 	ldr.w	r4, [r2, #2]
 8005ec6:	f8c3 400e 	str.w	r4, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8005eca:	4618      	mov	r0, r3
 8005ecc:	8813      	ldrh	r3, [r2, #0]
 8005ece:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8005ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	4770      	bx	lr

08005ed8 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8005ed8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop

08005ee0 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8005ee0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005ee4:	0089      	lsls	r1, r1, #2
 8005ee6:	f101 0308 	add.w	r3, r1, #8
 8005eea:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8005eec:	4401      	add	r1, r0
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8005eee:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8005ef2:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8005ef6:	898b      	ldrh	r3, [r1, #12]
 8005ef8:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8005efa:	2001      	movs	r0, #1
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8005f00:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8005f08:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop

08005f10 <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 8005f10:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8005f18:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005f20:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005f24:	8a81      	ldrh	r1, [r0, #20]
{
 8005f26:	b430      	push	{r4, r5}
    if (*pMecSpeedUnit < 0)
 8005f28:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8005f2a:	bfb8      	it	lt
 8005f2c:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005f2e:	8ac5      	ldrh	r5, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005f30:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005f32:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8005f34:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005f36:	429d      	cmp	r5, r3
 8005f38:	d817      	bhi.n	8005f6a <SPD_IsMecSpeedReliable+0x4a>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	bf2c      	ite	cs
 8005f3e:	2300      	movcs	r3, #0
 8005f40:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005f42:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005f46:	8b05      	ldrh	r5, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8005f48:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8005f4a:	bfb8      	it	lt
 8005f4c:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8005f4e:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005f50:	428d      	cmp	r5, r1
 8005f52:	d300      	bcc.n	8005f56 <SPD_IsMecSpeedReliable+0x36>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8005f54:	b15b      	cbz	r3, 8005f6e <SPD_IsMecSpeedReliable+0x4e>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005f56:	4294      	cmp	r4, r2
 8005f58:	d901      	bls.n	8005f5e <SPD_IsMecSpeedReliable+0x3e>
      {
        bSpeedErrorNumber++;
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005f5e:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8005f60:	1b10      	subs	r0, r2, r4
 8005f62:	bf18      	it	ne
 8005f64:	2001      	movne	r0, #1
 8005f66:	bc30      	pop	{r4, r5}
 8005f68:	4770      	bx	lr
      SpeedError = true;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e7e9      	b.n	8005f42 <SPD_IsMecSpeedReliable+0x22>
        bSpeedErrorNumber = 0u;
 8005f6e:	4294      	cmp	r4, r2
 8005f70:	bf88      	it	hi
 8005f72:	2200      	movhi	r2, #0
 8005f74:	e7f3      	b.n	8005f5e <SPD_IsMecSpeedReliable+0x3e>
 8005f76:	bf00      	nop

08005f78 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8005f78:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005f7c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8005f80:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005f84:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8005f88:	b200      	sxth	r0, r0
 8005f8a:	4770      	bx	lr

08005f8c <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 8005f8c:	b430      	push	{r4, r5}
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005f8e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005f92:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
    pHandle->Mode = pHandle->ModeDefault;
 8005f96:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
    pHandle->PISpeed = pPI;
 8005f9a:	6101      	str	r1, [r0, #16]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005f9c:	0424      	lsls	r4, r4, #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005f9e:	0419      	lsls	r1, r3, #16
    pHandle->TargetFinal = 0;
 8005fa0:	2300      	movs	r3, #0
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005fa2:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->Mode = pHandle->ModeDefault;
 8005fa6:	7005      	strb	r5, [r0, #0]
    pHandle->SPD = SPD_Handle;
 8005fa8:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005faa:	bc30      	pop	{r4, r5}
    pHandle->TargetFinal = 0;
 8005fac:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005fae:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005fb0:	6183      	str	r3, [r0, #24]
}
 8005fb2:	4770      	bx	lr

08005fb4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005fb4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005fb6:	4770      	bx	lr

08005fb8 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8005fb8:	6940      	ldr	r0, [r0, #20]
 8005fba:	4770      	bx	lr

08005fbc <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005fbc:	7803      	ldrb	r3, [r0, #0]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d000      	beq.n	8005fc4 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005fc2:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005fc4:	6900      	ldr	r0, [r0, #16]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	f7fe bfe8 	b.w	8004f9c <PID_SetIntegralTerm>

08005fcc <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8005fcc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop

08005fd4 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8005fd4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop

08005fdc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005fdc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005fde:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005fe0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005fe2:	4770      	bx	lr

08005fe4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005fe6:	7805      	ldrb	r5, [r0, #0]
 8005fe8:	2d04      	cmp	r5, #4
{
 8005fea:	4604      	mov	r4, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005ff0:	d01e      	beq.n	8006030 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005ff2:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005ff4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	dd01      	ble.n	8006000 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8005ffc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006000:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006004:	428b      	cmp	r3, r1
 8006006:	dcf9      	bgt.n	8005ffc <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8006008:	8c23      	ldrh	r3, [r4, #32]
 800600a:	4299      	cmp	r1, r3
 800600c:	da03      	bge.n	8006016 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800600e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006012:	428b      	cmp	r3, r1
 8006014:	dbf2      	blt.n	8005ffc <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8006016:	b9ae      	cbnz	r6, 8006044 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006018:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800601a:	043f      	lsls	r7, r7, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800601c:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800601e:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006022:	bf0c      	ite	eq
 8006024:	6067      	streq	r7, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8006026:	60a7      	strne	r7, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8006028:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800602a:	61a3      	str	r3, [r4, #24]
 800602c:	2001      	movs	r0, #1
}
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8006030:	f7ff ffd0 	bl	8005fd4 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006034:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006036:	429f      	cmp	r7, r3
 8006038:	dce0      	bgt.n	8005ffc <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800603a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800603e:	42bb      	cmp	r3, r7
 8006040:	dcdc      	bgt.n	8005ffc <STC_ExecRamp+0x18>
 8006042:	e7e8      	b.n	8006016 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006044:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8006046:	4a08      	ldr	r2, [pc, #32]	; (8006068 <STC_ExecRamp+0x84>)
        pHandle->TargetFinal = hTargetFinal;
 8006048:	8067      	strh	r7, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800604a:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	099b      	lsrs	r3, r3, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006054:	1a39      	subs	r1, r7, r0
        pHandle->RampRemainingStep++;
 8006056:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006058:	0409      	lsls	r1, r1, #16
        pHandle->RampRemainingStep++;
 800605a:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800605c:	fb91 f1f3 	sdiv	r1, r1, r3
        pHandle->IncDecAmount = wAux1;
 8006060:	2001      	movs	r0, #1
 8006062:	61a1      	str	r1, [r4, #24]
}
 8006064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006066:	bf00      	nop
 8006068:	10624dd3 	.word	0x10624dd3

0800606c <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006070:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006072:	4770      	bx	lr

08006074 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006074:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8006076:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800607a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800607c:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 800607e:	2a04      	cmp	r2, #4
 8006080:	bf08      	it	eq
 8006082:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8006084:	2b01      	cmp	r3, #1
{
 8006086:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8006088:	d908      	bls.n	800609c <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800608a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800608c:	3b01      	subs	r3, #1
 800608e:	60c3      	str	r3, [r0, #12]
      wCurrentReference += pHandle->IncDecAmount;
 8006090:	440d      	add	r5, r1
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8006092:	2a03      	cmp	r2, #3
 8006094:	d00b      	beq.n	80060ae <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8006096:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8006098:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800609a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800609c:	d1f9      	bne.n	8006092 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800609e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80060a2:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 80060a4:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80060a6:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 80060aa:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80060ac:	d1f3      	bne.n	8006096 <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80060ae:	6960      	ldr	r0, [r4, #20]
 80060b0:	f7ff ff2a 	bl	8005f08 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80060b4:	ebc0 4025 	rsb	r0, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80060b8:	b201      	sxth	r1, r0
 80060ba:	6920      	ldr	r0, [r4, #16]
 80060bc:	f7fe ffa2 	bl	8005004 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80060c0:	0403      	lsls	r3, r0, #16
 80060c2:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80060c6:	bd38      	pop	{r3, r4, r5, pc}

080060c8 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80060c8:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80060cc:	2200      	movs	r2, #0
 80060ce:	b299      	uxth	r1, r3
 80060d0:	f361 020f 	bfi	r2, r1, #0, #16
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f363 421f 	bfi	r2, r3, #16, #16
{
 80060da:	b082      	sub	sp, #8
}
 80060dc:	4610      	mov	r0, r2
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop

080060e4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80060e8:	6940      	ldr	r0, [r0, #20]
 80060ea:	f7ff ff0d 	bl	8005f08 <SPD_GetAvrgMecSpeedUnit>
 80060ee:	0400      	lsls	r0, r0, #16
 80060f0:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80060f2:	bd10      	pop	{r4, pc}

080060f4 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 80060f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80060f8:	4604      	mov	r4, r0
{
 80060fa:	b089      	sub	sp, #36	; 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f000 80ce 	beq.w	800629e <STO_PLL_CalcElAngle+0x1aa>
 8006102:	2900      	cmp	r1, #0
 8006104:	f000 80ce 	beq.w	80062a4 <STO_PLL_CalcElAngle+0x1b0>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8006108:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800610c:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8006110:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8006114:	4596      	cmp	lr, r2
 8006116:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 800611a:	f340 80dc 	ble.w	80062d6 <STO_PLL_CalcElAngle+0x1e2>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800611e:	66a2      	str	r2, [r4, #104]	; 0x68
 8006120:	4696      	mov	lr, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006122:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8006126:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800612a:	fa4e f605 	asr.w	r6, lr, r5
 800612e:	9603      	str	r6, [sp, #12]
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8006130:	4562      	cmp	r2, ip
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006132:	b236      	sxth	r6, r6
 8006134:	9601      	str	r6, [sp, #4]
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8006136:	f280 80c8 	bge.w	80062ca <STO_PLL_CalcElAngle+0x1d6>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800613a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800613c:	4694      	mov	ip, r2
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800613e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8006142:	6e20      	ldr	r0, [r4, #96]	; 0x60
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006144:	fa4c f205 	asr.w	r2, ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006148:	ebc3 35c3 	rsb	r5, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800614c:	9204      	str	r2, [sp, #16]
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800614e:	42a8      	cmp	r0, r5
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006150:	b212      	sxth	r2, r2
 8006152:	9202      	str	r2, [sp, #8]
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006154:	ea4f 36c3 	mov.w	r6, r3, lsl #15
 8006158:	f340 80b1 	ble.w	80062be <STO_PLL_CalcElAngle+0x1ca>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800615c:	6625      	str	r5, [r4, #96]	; 0x60
 800615e:	4628      	mov	r0, r5
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006160:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006162:	4295      	cmp	r5, r2
 8006164:	f280 80a5 	bge.w	80062b2 <STO_PLL_CalcElAngle+0x1be>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8006168:	6665      	str	r5, [r4, #100]	; 0x64
 800616a:	462a      	mov	r2, r5
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800616c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006170:	f8b1 a006 	ldrh.w	sl, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006174:	890d      	ldrh	r5, [r1, #8]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8006176:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800617a:	888e      	ldrh	r6, [r1, #4]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800617c:	f9b1 7000 	ldrsh.w	r7, [r1]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006180:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8006184:	9901      	ldr	r1, [sp, #4]
 8006186:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800618a:	fa40 f103 	asr.w	r1, r0, r3
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800618e:	fa42 f303 	asr.w	r3, r2, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006192:	1b8e      	subs	r6, r1, r6
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006194:	fb11 f109 	smulbb	r1, r1, r9
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006198:	fb13 f909 	smulbb	r9, r3, r9
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800619c:	eba3 030a 	sub.w	r3, r3, sl
 80061a0:	9305      	str	r3, [sp, #20]
    pHandle->hBemf_beta_est = hAux_Beta;
 80061a2:	9b02      	ldr	r3, [sp, #8]
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 80061a4:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
    pHandle->hBemf_beta_est = hAux_Beta;
 80061a8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80061ac:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 80061b0:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80061b4:	eba2 0209 	sub.w	r2, r2, r9
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80061b8:	b236      	sxth	r6, r6
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80061ba:	1a41      	subs	r1, r0, r1
    wIalfa_est_Next += wAux;
 80061bc:	fb0b 1106 	mla	r1, fp, r6, r1
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061c0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 80061c2:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
    wIbeta_est_Next += wAux;
 80061c6:	fb0b 2b03 	mla	fp, fp, r3, r2
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80061ca:	fb05 f707 	mul.w	r7, r5, r7
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061ce:	9a02      	ldr	r2, [sp, #8]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061d0:	143f      	asrs	r7, r7, #16
    wIalfa_est_Next += wAux;
 80061d2:	fb0a 1707 	mla	r7, sl, r7, r1
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80061d6:	fb05 f508 	mul.w	r5, r5, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061da:	fa42 f100 	asr.w	r1, r2, r0
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061de:	9a01      	ldr	r2, [sp, #4]
    wAux = wAux * pHandle->hC6;
 80061e0:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061e4:	142d      	asrs	r5, r5, #16
    wIbeta_est_Next += wAux;
 80061e6:	fb0a b505 	mla	r5, sl, r5, fp
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80061ea:	fa42 f000 	asr.w	r0, r2, r0
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80061ee:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 80061f2:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24

    if (0 == pHandle->hForcedDirection)
 80061f6:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80061fa:	fb09 c303 	mla	r3, r9, r3, ip
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80061fe:	fb06 e609 	mla	r6, r6, r9, lr
    wAux = wAux * pHandle->hC6;
 8006202:	fb01 f108 	mul.w	r1, r1, r8
    wAux = wAux * pHandle->hC6;
 8006206:	fb00 f008 	mul.w	r0, r0, r8
    wBemf_alfa_est_Next += wAux;
 800620a:	fb01 690a 	mla	r9, r1, sl, r6
    wIalfa_est_Next -= wAux;
 800620e:	9901      	ldr	r1, [sp, #4]
    wBemf_beta_est_Next -= wAux;
 8006210:	fb00 361a 	mls	r6, r0, sl, r3
    wIbeta_est_Next -= wAux;
 8006214:	9b02      	ldr	r3, [sp, #8]
    wIalfa_est_Next -= wAux;
 8006216:	fb0b 7711 	mls	r7, fp, r1, r7
    wIbeta_est_Next -= wAux;
 800621a:	fb0b 5513 	mls	r5, fp, r3, r5
    if (0 == pHandle->hForcedDirection)
 800621e:	2a00      	cmp	r2, #0
 8006220:	d144      	bne.n	80062ac <STO_PLL_CalcElAngle+0x1b8>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8006222:	f1ba 0f00 	cmp.w	sl, #0
 8006226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800622a:	bfac      	ite	ge
 800622c:	f04f 0801 	movge.w	r8, #1
 8006230:	4690      	movlt	r8, r2
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8006232:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8006236:	f7fb fb53 	bl	80018e0 <MCM_Trig_Functions>
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800623a:	9b04      	ldr	r3, [sp, #16]
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800623c:	9a03      	ldr	r2, [sp, #12]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800623e:	fb13 f308 	smulbb	r3, r3, r8
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8006242:	fb12 f108 	smulbb	r1, r2, r8
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8006246:	425b      	negs	r3, r3

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8006248:	fb10 f303 	smulbb	r3, r0, r3
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800624c:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8006250:	f343 33cf 	sbfx	r3, r3, #15, #16
 8006254:	f340 31cf 	sbfx	r1, r0, #15, #16
 8006258:	1a59      	subs	r1, r3, r1
 800625a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800625e:	f7fe fed1 	bl	8005004 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8006262:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006266:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800626a:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800626c:	3301      	adds	r3, #1
 800626e:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006270:	429a      	cmp	r2, r3
 8006272:	bf0a      	itet	eq
 8006274:	2200      	moveq	r2, #0
 8006276:	461a      	movne	r2, r3
    bBuffer_index = 0U;
 8006278:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800627a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800627e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8006282:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8006286:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
    pHandle->_Super.hElAngle += hRotor_Speed;
 800628a:	88a1      	ldrh	r1, [r4, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800628c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006290:	4408      	add	r0, r1
    pHandle->Ibeta_est = wIbeta_est_Next;
 8006292:	e9c4 5919 	strd	r5, r9, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006296:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 8006298:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800629a:	66e6      	str	r6, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800629c:	80a0      	strh	r0, [r4, #4]
}
 800629e:	b009      	add	sp, #36	; 0x24
 80062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 80062a4:	4608      	mov	r0, r1
}
 80062a6:	b009      	add	sp, #36	; 0x24
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      wDirection = pHandle->hForcedDirection;
 80062ac:	fa1f f882 	uxth.w	r8, r2
 80062b0:	e7bf      	b.n	8006232 <STO_PLL_CalcElAngle+0x13e>
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80062b2:	1b9b      	subs	r3, r3, r6
 80062b4:	429a      	cmp	r2, r3
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80062b6:	bfdc      	itt	le
 80062b8:	6663      	strle	r3, [r4, #100]	; 0x64
 80062ba:	461a      	movle	r2, r3
 80062bc:	e756      	b.n	800616c <STO_PLL_CalcElAngle+0x78>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80062be:	1b9a      	subs	r2, r3, r6
 80062c0:	4290      	cmp	r0, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80062c2:	bfdc      	itt	le
 80062c4:	6622      	strle	r2, [r4, #96]	; 0x60
 80062c6:	4610      	movle	r0, r2
 80062c8:	e74a      	b.n	8006160 <STO_PLL_CalcElAngle+0x6c>
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80062ca:	1a1b      	subs	r3, r3, r0
 80062cc:	459c      	cmp	ip, r3
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 80062ce:	bfdc      	itt	le
 80062d0:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80062d2:	469c      	movle	ip, r3
 80062d4:	e733      	b.n	800613e <STO_PLL_CalcElAngle+0x4a>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80062d6:	1a1d      	subs	r5, r3, r0
 80062d8:	45ae      	cmp	lr, r5
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 80062da:	bfdc      	itt	le
 80062dc:	66a5      	strle	r5, [r4, #104]	; 0x68
 80062de:	46ae      	movle	lr, r5
 80062e0:	e71f      	b.n	8006122 <STO_PLL_CalcElAngle+0x2e>
 80062e2:	bf00      	nop

080062e4 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80062e8:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80062ec:	f1bc 0f00 	cmp.w	ip, #0
 80062f0:	f000 80a0 	beq.w	8006434 <STO_PLL_CalcAvrgMecSpeedUnit+0x150>
 80062f4:	f10c 36ff 	add.w	r6, ip, #4294967295
 80062f8:	b2f3      	uxtb	r3, r6
 80062fa:	f100 0472 	add.w	r4, r0, #114	; 0x72
 80062fe:	f100 0674 	add.w	r6, r0, #116	; 0x74
 8006302:	eb06 0643 	add.w	r6, r6, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8006306:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006308:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800630a:	f933 7f02 	ldrsh.w	r7, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800630e:	429e      	cmp	r6, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006310:	443a      	add	r2, r7
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006312:	d1fa      	bne.n	800630a <STO_PLL_CalcAvrgMecSpeedUnit+0x26>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8006314:	fb92 f2fc 	sdiv	r2, r2, ip
 8006318:	2500      	movs	r5, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800631a:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800631e:	1a9b      	subs	r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006320:	42b4      	cmp	r4, r6
      wAvrQuadraticError += wError;
 8006322:	fb03 5503 	mla	r5, r3, r3, r5
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006326:	d1f8      	bne.n	800631a <STO_PLL_CalcAvrgMecSpeedUnit+0x36>
 8006328:	fbb5 f3fc 	udiv	r3, r5, ip
 800632c:	fb02 f602 	mul.w	r6, r2, r2
 8006330:	17f7      	asrs	r7, r6, #31
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8006332:	f8b0 8110 	ldrh.w	r8, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006336:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800633a:	f890 e001 	ldrb.w	lr, [r0, #1]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800633e:	fba8 ab06 	umull	sl, fp, r8, r6
 8006342:	fb08 bb07 	mla	fp, r8, r7, fp
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8006346:	ea4f 14da 	mov.w	r4, sl, lsr #7
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800634a:	f890 8002 	ldrb.w	r8, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800634e:	f890 7104 	ldrb.w	r7, [r0, #260]	; 0x104
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8006352:	69c6      	ldr	r6, [r0, #28]
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8006354:	ea44 644b 	orr.w	r4, r4, fp, lsl #25
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006358:	fb02 f20c 	mul.w	r2, r2, ip
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800635c:	429c      	cmp	r4, r3
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800635e:	fb02 f208 	mul.w	r2, r2, r8
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006362:	bfd4      	ite	le
 8006364:	f04f 0c00 	movle.w	ip, #0
 8006368:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800636c:	fb92 f2f6 	sdiv	r2, r2, r6
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006370:	fb92 f2fe 	sdiv	r2, r2, lr
    *pMecSpeedUnit = (int16_t)wAux;
 8006374:	b215      	sxth	r5, r2
 8006376:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8006378:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800637a:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 800637e:	b9b7      	cbnz	r7, 80063ae <STO_PLL_CalcAvrgMecSpeedUnit+0xca>
    if (false == pHandle->IsAlgorithmConverged)
 8006380:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
 8006384:	b35a      	cbz	r2, 80063de <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006386:	429c      	cmp	r4, r3
 8006388:	dc26      	bgt.n	80063d8 <STO_PLL_CalcAvrgMecSpeedUnit+0xf4>
        pHandle->ReliabilityCounter++;
 800638a:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800638e:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 8006392:	3301      	adds	r3, #1
 8006394:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006396:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8006398:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800639c:	d81f      	bhi.n	80063de <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800639e:	78c2      	ldrb	r2, [r0, #3]
 80063a0:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80063ae:	2a00      	cmp	r2, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80063b0:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80063b4:	bfb8      	it	lt
 80063b6:	4252      	neglt	r2, r2
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80063b8:	4295      	cmp	r5, r2
 80063ba:	dc14      	bgt.n	80063e6 <STO_PLL_CalcAvrgMecSpeedUnit+0x102>
    bool bIs_Bemf_Consistent = false;
 80063bc:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 80063be:	462a      	mov	r2, r5
    int32_t wObsBemfSq = 0;
 80063c0:	462e      	mov	r6, r5
    if (false == pHandle->IsAlgorithmConverged)
 80063c2:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80063c6:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
      pHandle->Est_Bemf_Level = wEstBemfSq;
 80063ca:	e9c0 623f 	strd	r6, r2, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 80063ce:	b137      	cbz	r7, 80063de <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80063d0:	429c      	cmp	r4, r3
 80063d2:	ddda      	ble.n	800638a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 80063d4:	2d00      	cmp	r5, #0
 80063d6:	d0d8      	beq.n	800638a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
        pHandle->ReliabilityCounter = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80063de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 80063e2:	f7ff bd9d 	b.w	8005f20 <SPD_IsMecSpeedReliable>
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 80063e6:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 80063ea:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 80063ee:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 80063f2:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 80063f6:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 80063fa:	fb92 f2fc 	sdiv	r2, r2, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 80063fe:	fb02 f505 	mul.w	r5, r2, r5
 8006402:	2d00      	cmp	r5, #0
 8006404:	bfb8      	it	lt
 8006406:	353f      	addlt	r5, #63	; 0x3f
 8006408:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800640a:	fb05 f202 	mul.w	r2, r5, r2
        wObsBemfSq = wObsBemf * wObsBemf;
 800640e:	fb07 f707 	mul.w	r7, r7, r7
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8006412:	2a00      	cmp	r2, #0
        wObsBemfSq += wObsBemf * wObsBemf;
 8006414:	fb06 7606 	mla	r6, r6, r6, r7
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8006418:	4615      	mov	r5, r2
 800641a:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800641e:	bfb8      	it	lt
 8006420:	f102 053f 	addlt.w	r5, r2, #63	; 0x3f
 8006424:	11ad      	asrs	r5, r5, #6
 8006426:	fb07 2515 	mls	r5, r7, r5, r2
        if (wObsBemfSq > wEstBemfSqLo)
 800642a:	42ae      	cmp	r6, r5
 800642c:	bfd4      	ite	le
 800642e:	2500      	movle	r5, #0
 8006430:	2501      	movgt	r5, #1
 8006432:	e7c6      	b.n	80063c2 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006434:	4663      	mov	r3, ip
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8006436:	4662      	mov	r2, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006438:	2600      	movs	r6, #0
 800643a:	2700      	movs	r7, #0
 800643c:	e779      	b.n	8006332 <STO_PLL_CalcAvrgMecSpeedUnit+0x4e>
 800643e:	bf00      	nop

08006440 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8006440:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8006444:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8006448:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800644c:	1acb      	subs	r3, r1, r3
 800644e:	b29b      	uxth	r3, r3
{
 8006450:	b470      	push	{r4, r5, r6}
    int32_t wSum = pHandle->DppBufferSum;
 8006452:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 8006456:	b97b      	cbnz	r3, 8006478 <STO_PLL_CalcAvrgElSpeedDpp+0x38>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8006458:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800645c:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 8006460:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8006464:	4423      	add	r3, r4
 8006466:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8006468:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 800646c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8006470:	4113      	asrs	r3, r2
}
 8006472:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8006474:	81c3      	strh	r3, [r0, #14]
}
 8006476:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8006478:	4413      	add	r3, r2
 800647a:	b21d      	sxth	r5, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800647c:	42a9      	cmp	r1, r5
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800647e:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8006480:	dc02      	bgt.n	8006488 <STO_PLL_CalcAvrgElSpeedDpp+0x48>
 8006482:	b28e      	uxth	r6, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8006484:	1b9b      	subs	r3, r3, r6
 8006486:	b21d      	sxth	r5, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8006488:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800648c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006490:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8006494:	f9b5 2074 	ldrsh.w	r2, [r5, #116]	; 0x74
 8006498:	4423      	add	r3, r4
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	e7e4      	b.n	8006468 <STO_PLL_CalcAvrgElSpeedDpp+0x28>
 800649e:	bf00      	nop

080064a0 <STO_PLL_Clear>:
{
 80064a0:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 80064a2:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 80064a6:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 80064a8:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 80064ac:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 80064b0:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 80064b4:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80064b6:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80064b8:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 80064ba:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 80064be:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 80064c2:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 80064c6:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80064ca:	b132      	cbz	r2, 80064da <STO_PLL_Clear+0x3a>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80064cc:	3a01      	subs	r2, #1
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	3201      	adds	r2, #1
 80064d2:	0052      	lsls	r2, r2, #1
 80064d4:	3074      	adds	r0, #116	; 0x74
 80064d6:	f000 fa2b 	bl	8006930 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 80064da:	2100      	movs	r1, #0
 80064dc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80064e0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80064e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80064ec:	f7fe bd56 	b.w	8004f9c <PID_SetIntegralTerm>

080064f0 <STO_PLL_Init>:
{
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4605      	mov	r5, r0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80064f4:	f9b0 602e 	ldrsh.w	r6, [r0, #46]	; 0x2e
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <STO_PLL_Init+0x68>)
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80064fa:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80064fe:	fb93 f3f6 	sdiv	r3, r3, r6
    pHandle->F3POW2 = 0U;
 8006502:	2100      	movs	r1, #0
    pHandle->EnableDualCheck = true;
 8006504:	2201      	movs	r2, #1
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8006506:	b21b      	sxth	r3, r3
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8006508:	f885 00f6 	strb.w	r0, [r5, #246]	; 0xf6
    pHandle->F3POW2 = 0U;
 800650c:	8669      	strh	r1, [r5, #50]	; 0x32
    pHandle->EnableDualCheck = true;
 800650e:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
    while (htempk != 0)
 8006512:	b1fb      	cbz	r3, 8006554 <STO_PLL_Init+0x64>
    wAux = ((int32_t)1);
 8006514:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8006516:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
      wAux *= ((int32_t)2);
 800651a:	1c54      	adds	r4, r2, #1
    while (htempk != 0)
 800651c:	105b      	asrs	r3, r3, #1
 800651e:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8006520:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8006524:	b2a2      	uxth	r2, r4
 8006526:	d1f6      	bne.n	8006516 <STO_PLL_Init+0x26>
 8006528:	b20a      	sxth	r2, r1
 800652a:	fb06 f102 	mul.w	r1, r6, r2
 800652e:	8668      	strh	r0, [r5, #50]	; 0x32
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <STO_PLL_Init+0x6c>)
    pHandle->hF3 = (int16_t)wAux;
 8006532:	862a      	strh	r2, [r5, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8006534:	fb83 2301 	smull	r2, r3, r3, r1
 8006538:	17c9      	asrs	r1, r1, #31
 800653a:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800653e:	8569      	strh	r1, [r5, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8006540:	4628      	mov	r0, r5
 8006542:	f7ff ffad 	bl	80064a0 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8006546:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800654a:	f7fe fd13 	bl	8004f74 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	826b      	strh	r3, [r5, #18]
}
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	4631      	mov	r1, r6
 8006556:	e7eb      	b.n	8006530 <STO_PLL_Init+0x40>
 8006558:	000fea5e 	.word	0x000fea5e
 800655c:	06488dc5 	.word	0x06488dc5

08006560 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8006560:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 8006564:	b113      	cbz	r3, 800656c <STO_PLL_IsObserverConverged+0xc>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006566:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800656a:	800b      	strh	r3, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 800656c:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8006570:	b133      	cbz	r3, 8006580 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8006572:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8006574:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8006576:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800657a:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800657c:	4618      	mov	r0, r3
 800657e:	4770      	bx	lr
{
 8006580:	b470      	push	{r4, r5, r6}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8006582:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8006586:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800658a:	fb04 f502 	mul.w	r5, r4, r2
      if (wtemp > 0)
 800658e:	2d00      	cmp	r5, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8006590:	4616      	mov	r6, r2
      if (wtemp > 0)
 8006592:	dd32      	ble.n	80065fa <STO_PLL_IsObserverConverged+0x9a>
        if (hEstimatedSpeedUnit < 0)
 8006594:	2c00      	cmp	r4, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8006596:	bfbc      	itt	lt
 8006598:	4264      	neglt	r4, r4
 800659a:	b224      	sxthlt	r4, r4
        if (*phForcedMecSpeedUnit < 0)
 800659c:	2a00      	cmp	r2, #0
 800659e:	db35      	blt.n	800660c <STO_PLL_IsObserverConverged+0xac>
        if (true == pHandle->IsSpeedReliable)
 80065a0:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 80065a4:	b362      	cbz	r2, 8006600 <STO_PLL_IsObserverConverged+0xa0>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 80065a6:	f8b0 1114 	ldrh.w	r1, [r0, #276]	; 0x114
 80065aa:	b2a2      	uxth	r2, r4
 80065ac:	4291      	cmp	r1, r2
 80065ae:	d227      	bcs.n	8006600 <STO_PLL_IsObserverConverged+0xa0>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80065b0:	f890 2113 	ldrb.w	r2, [r0, #275]	; 0x113
 80065b4:	fb06 f202 	mul.w	r2, r6, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	bfb8      	it	lt
 80065bc:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80065be:	f342 120f 	sbfx	r2, r2, #4, #16
 80065c2:	4294      	cmp	r4, r2
 80065c4:	db1c      	blt.n	8006600 <STO_PLL_IsObserverConverged+0xa0>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80065c6:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80065ca:	fb06 f202 	mul.w	r2, r6, r2
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	bfb8      	it	lt
 80065d2:	320f      	addlt	r2, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 80065d4:	f342 120f 	sbfx	r2, r2, #4, #16
 80065d8:	4294      	cmp	r4, r2
 80065da:	dc11      	bgt.n	8006600 <STO_PLL_IsObserverConverged+0xa0>
                pHandle->ConsistencyCounter++;
 80065dc:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80065e0:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 80065e4:	3201      	adds	r2, #1
 80065e6:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80065e8:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 80065ea:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80065ee:	d804      	bhi.n	80065fa <STO_PLL_IsObserverConverged+0x9a>
      pHandle->IsAlgorithmConverged = true;
 80065f0:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80065f2:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 80065f4:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80065f8:	7002      	strb	r2, [r0, #0]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	bc70      	pop	{r4, r5, r6}
 80065fe:	4770      	bx	lr
                pHandle->ConsistencyCounter = 0U;
 8006600:	2200      	movs	r2, #0
 8006602:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 8006606:	bc70      	pop	{r4, r5, r6}
 8006608:	4618      	mov	r0, r3
 800660a:	4770      	bx	lr
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800660c:	4252      	negs	r2, r2
 800660e:	b212      	sxth	r2, r2
 8006610:	800a      	strh	r2, [r1, #0]
 8006612:	4616      	mov	r6, r2
        if (true == pHandle->IsSpeedReliable)
 8006614:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 8006618:	2a00      	cmp	r2, #0
 800661a:	d0f1      	beq.n	8006600 <STO_PLL_IsObserverConverged+0xa0>
 800661c:	e7c3      	b.n	80065a6 <STO_PLL_IsObserverConverged+0x46>
 800661e:	bf00      	nop

08006620 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8006620:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006622:	2200      	movs	r2, #0
 8006624:	b299      	uxth	r1, r3
 8006626:	f361 020f 	bfi	r2, r1, #0, #16
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006630:	b082      	sub	sp, #8
}
 8006632:	4610      	mov	r0, r2
 8006634:	b002      	add	sp, #8
 8006636:	4770      	bx	lr

08006638 <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8006638:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
{
 800663c:	b410      	push	{r4}
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800663e:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 8006642:	4122      	asrs	r2, r4
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8006644:	b292      	uxth	r2, r2
 8006646:	4123      	asrs	r3, r4
 8006648:	2100      	movs	r1, #0
 800664a:	b29b      	uxth	r3, r3
 800664c:	f362 010f 	bfi	r1, r2, #0, #16
 8006650:	f363 411f 	bfi	r1, r3, #16, #16
{
 8006654:	b083      	sub	sp, #12
}
 8006656:	4608      	mov	r0, r1
 8006658:	b003      	add	sp, #12
 800665a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800665e:	4770      	bx	lr

08006660 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8006660:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8006664:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8006666:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800666a:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8006670:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 8006672:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop

08006678 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8006678:	6800      	ldr	r0, [r0, #0]
 800667a:	2100      	movs	r1, #0
 800667c:	3034      	adds	r0, #52	; 0x34
 800667e:	f7fe bc8d 	b.w	8004f9c <PID_SetIntegralTerm>
 8006682:	bf00      	nop

08006684 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8006684:	3034      	adds	r0, #52	; 0x34
 8006686:	2100      	movs	r1, #0
 8006688:	f7fe bc88 	b.w	8004f9c <PID_SetIntegralTerm>

0800668c <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 800668c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8006694:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop

0800669c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800669c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800669e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80066a2:	4770      	bx	lr

080066a4 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 80066a4:	6803      	ldr	r3, [r0, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop

080066b0 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 80066b0:	6803      	ldr	r3, [r0, #0]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop

080066bc <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 80066bc:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop

080066c4 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80066c4:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80066c6:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80066c8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->wElSpeedDpp32 = 0;
 80066ca:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80066ce:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80066d0:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80066d2:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80066d4:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 80066d6:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 80066d8:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hElAngleAccu = 0;
 80066da:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <VSS_Init>:
{
 80066e0:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80066e2:	f7ff ffef 	bl	80066c4 <VSS_Clear>
}
 80066e6:	bd08      	pop	{r3, pc}

080066e8 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 80066e8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80066ec:	b123      	cbz	r3, 80066f8 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 80066ee:	f9b1 2000 	ldrsh.w	r2, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 80066f2:	8082      	strh	r2, [r0, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 80066f4:	4610      	mov	r0, r2
 80066f6:	4770      	bx	lr
{
 80066f8:	b4f0      	push	{r4, r5, r6, r7}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80066fa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80066fc:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006700:	88c7      	ldrh	r7, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 8006702:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006706:	7844      	ldrb	r4, [r0, #1]
 8006708:	fb95 f4f4 	sdiv	r4, r5, r4
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800670c:	442b      	add	r3, r5
 800670e:	b21a      	sxth	r2, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006710:	443c      	add	r4, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8006712:	8602      	strh	r2, [r0, #48]	; 0x30
 8006714:	b29b      	uxth	r3, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8006716:	80c4      	strh	r4, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 8006718:	b1de      	cbz	r6, 8006752 <VSS_CalcElAngle+0x6a>
        if (0 == pHandle->hTransitionRemainingSteps)
 800671a:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 800671e:	b1e4      	cbz	r4, 800675a <VSS_CalcElAngle+0x72>
          pHandle->hTransitionRemainingSteps--;
 8006720:	3c01      	subs	r4, #1
 8006722:	b224      	sxth	r4, r4
 8006724:	85c4      	strh	r4, [r0, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8006726:	2d00      	cmp	r5, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8006728:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800672a:	db27      	blt.n	800677c <VSS_CalcElAngle+0x94>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800672c:	1acb      	subs	r3, r1, r3
 800672e:	b21b      	sxth	r3, r3
 8006730:	2601      	movs	r6, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8006732:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8006736:	fb03 f404 	mul.w	r4, r3, r4
          if (hAngleDiff >= 0)
 800673a:	2b00      	cmp	r3, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800673c:	fb94 f4f5 	sdiv	r4, r4, r5
          hAngleCorr *= hSignCorr;
 8006740:	fb14 f406 	smulbb	r4, r4, r6
 8006744:	b2a4      	uxth	r4, r4
          if (hAngleDiff >= 0)
 8006746:	db12      	blt.n	800676e <VSS_CalcElAngle+0x86>
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8006748:	1b0c      	subs	r4, r1, r4
            pHandle->bTransitionLocked = true;
 800674a:	2301      	movs	r3, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800674c:	b222      	sxth	r2, r4
            pHandle->bTransitionLocked = true;
 800674e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    pHandle->_Super.hElAngle = hRetAngle;
 8006752:	8082      	strh	r2, [r0, #4]
}
 8006754:	bcf0      	pop	{r4, r5, r6, r7}
 8006756:	4610      	mov	r0, r2
 8006758:	4770      	bx	lr
          hRetAngle = *(int16_t *)pInputVars_str;
 800675a:	f9b1 2000 	ldrsh.w	r2, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800675e:	7004      	strb	r4, [r0, #0]
          pHandle->bTransitionEnded = true;
 8006760:	2301      	movs	r3, #1
 8006762:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8006766:	8082      	strh	r2, [r0, #4]
}
 8006768:	bcf0      	pop	{r4, r5, r6, r7}
 800676a:	4610      	mov	r0, r2
 800676c:	4770      	bx	lr
            if (false == pHandle->bTransitionLocked)
 800676e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ed      	beq.n	8006752 <VSS_CalcElAngle+0x6a>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8006776:	440c      	add	r4, r1
 8006778:	b222      	sxth	r2, r4
 800677a:	e7ea      	b.n	8006752 <VSS_CalcElAngle+0x6a>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800677c:	1a5b      	subs	r3, r3, r1
 800677e:	b21b      	sxth	r3, r3
 8006780:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006784:	e7d5      	b.n	8006732 <VSS_CalcElAngle+0x4a>
 8006786:	bf00      	nop

08006788 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8006788:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800678a:	2b01      	cmp	r3, #1
{
 800678c:	b470      	push	{r4, r5, r6}
    if (pHandle->hRemainingStep > 1u)
 800678e:	d91f      	bls.n	80067d0 <VSS_CalcAvrgMecSpeedUnit+0x48>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006790:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8006794:	8b43      	ldrh	r3, [r0, #26]
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8006796:	7846      	ldrb	r6, [r0, #1]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006798:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800679a:	1415      	asrs	r5, r2, #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800679c:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800679e:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80067a0:	fb05 f303 	mul.w	r3, r5, r3
 80067a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067a8:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80067aa:	fb04 f406 	mul.w	r4, r4, r6
 80067ae:	fb93 f3f4 	sdiv	r3, r3, r4
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80067b2:	b21b      	sxth	r3, r3
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80067b4:	81c5      	strh	r5, [r0, #14]
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80067b6:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80067b8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80067ba:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 80067bc:	1e53      	subs	r3, r2, #1
 80067be:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80067c0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80067c4:	b963      	cbnz	r3, 80067e0 <VSS_CalcAvrgMecSpeedUnit+0x58>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80067c6:	78c2      	ldrb	r2, [r0, #3]
 80067c8:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80067ca:	bc70      	pop	{r4, r5, r6}
 80067cc:	4618      	mov	r0, r3
 80067ce:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 80067d0:	d009      	beq.n	80067e6 <VSS_CalcAvrgMecSpeedUnit+0x5e>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80067d2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80067d6:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 80067d8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f2      	beq.n	80067c6 <VSS_CalcAvrgMecSpeedUnit+0x3e>
}
 80067e0:	bc70      	pop	{r4, r5, r6}
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80067e2:	f7ff bb9d 	b.w	8005f20 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80067e6:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 80067ea:	800d      	strh	r5, [r1, #0]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80067ec:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80067ee:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80067f0:	7844      	ldrb	r4, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80067f2:	8185      	strh	r5, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80067f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80067f8:	fb02 f205 	mul.w	r2, r2, r5
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->hRemainingStep = 0U;
 8006802:	2200      	movs	r2, #0
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006804:	fb14 f303 	smulbb	r3, r4, r3
 8006808:	81c3      	strh	r3, [r0, #14]
      pHandle->hRemainingStep = 0U;
 800680a:	8502      	strh	r2, [r0, #40]	; 0x28
 800680c:	e7d8      	b.n	80067c0 <VSS_CalcAvrgMecSpeedUnit+0x38>
 800680e:	bf00      	nop

08006810 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006810:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8006812:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8006814:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006816:	fb91 f1f3 	sdiv	r1, r1, r3
 800681a:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8006820:	b4f0      	push	{r4, r5, r6, r7}
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8006822:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8006826:	b984      	cbnz	r4, 800684a <VSS_SetMecAcceleration+0x2a>
    {
      if (0U == hDurationms)
 8006828:	b98a      	cbnz	r2, 800684e <VSS_SetMecAcceleration+0x2e>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800682a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800682c:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800682e:	7845      	ldrb	r5, [r0, #1]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006830:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006836:	005b      	lsls	r3, r3, #1
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006838:	fb04 f401 	mul.w	r4, r4, r1
                                              / (((int32_t)SPEED_UNIT)
 800683c:	fb94 f3f3 	sdiv	r3, r4, r3
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006840:	fb15 f303 	smulbb	r3, r5, r3

        pHandle->hRemainingStep = 0U;
 8006844:	8502      	strh	r2, [r0, #40]	; 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006846:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006848:	81c3      	strh	r3, [r0, #14]
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800684a:	bcf0      	pop	{r4, r5, r6, r7}
 800684c:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800684e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8006850:	4d14      	ldr	r5, [pc, #80]	; (80068a4 <VSS_SetMecAcceleration+0x84>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006852:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	fba5 2303 	umull	r2, r3, r5, r3
 800685e:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8006862:	3301      	adds	r3, #1
 8006864:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 8006866:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 8006868:	b923      	cbnz	r3, 8006874 <VSS_SetMecAcceleration+0x54>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800686a:	0424      	lsls	r4, r4, #16
 800686c:	6244      	str	r4, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800686e:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 8006870:	bcf0      	pop	{r4, r5, r6, r7}
 8006872:	4770      	bx	lr
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006874:	8b45      	ldrh	r5, [r0, #26]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006876:	69c2      	ldr	r2, [r0, #28]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006878:	7846      	ldrb	r6, [r0, #1]
 800687a:	fb94 f7f6 	sdiv	r7, r4, r6
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800687e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006882:	006d      	lsls	r5, r5, #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006884:	fb02 f201 	mul.w	r2, r2, r1
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006888:	fb92 f2f5 	sdiv	r2, r2, r5
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800688c:	1bd2      	subs	r2, r2, r7
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800688e:	0412      	lsls	r2, r2, #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8006890:	0424      	lsls	r4, r4, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8006892:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8006896:	fb06 f303 	mul.w	r3, r6, r3
 800689a:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800689c:	6244      	str	r4, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800689e:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80068a0:	e7e6      	b.n	8006870 <VSS_SetMecAcceleration+0x50>
 80068a2:	bf00      	nop
 80068a4:	10624dd3 	.word	0x10624dd3

080068a8 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80068a8:	b151      	cbz	r1, 80068c0 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 80068aa:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 80068ae:	2201      	movs	r2, #1
 80068b0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 80068b4:	b923      	cbnz	r3, 80068c0 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 80068b6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80068ba:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80068bc:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80068be:	4770      	bx	lr
  bool bAux = true;
 80068c0:	2001      	movs	r0, #1
 80068c2:	4770      	bx	lr

080068c4 <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 80068c4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop

080068cc <__libc_init_array>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4d0d      	ldr	r5, [pc, #52]	; (8006904 <__libc_init_array+0x38>)
 80068d0:	4c0d      	ldr	r4, [pc, #52]	; (8006908 <__libc_init_array+0x3c>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	2600      	movs	r6, #0
 80068d8:	42a6      	cmp	r6, r4
 80068da:	d109      	bne.n	80068f0 <__libc_init_array+0x24>
 80068dc:	4d0b      	ldr	r5, [pc, #44]	; (800690c <__libc_init_array+0x40>)
 80068de:	4c0c      	ldr	r4, [pc, #48]	; (8006910 <__libc_init_array+0x44>)
 80068e0:	f000 f82e 	bl	8006940 <_init>
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	2600      	movs	r6, #0
 80068ea:	42a6      	cmp	r6, r4
 80068ec:	d105      	bne.n	80068fa <__libc_init_array+0x2e>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f4:	4798      	blx	r3
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7ee      	b.n	80068d8 <__libc_init_array+0xc>
 80068fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fe:	4798      	blx	r3
 8006900:	3601      	adds	r6, #1
 8006902:	e7f2      	b.n	80068ea <__libc_init_array+0x1e>
 8006904:	08006d88 	.word	0x08006d88
 8006908:	08006d88 	.word	0x08006d88
 800690c:	08006d88 	.word	0x08006d88
 8006910:	08006d8c 	.word	0x08006d8c

08006914 <memcpy>:
 8006914:	440a      	add	r2, r1
 8006916:	4291      	cmp	r1, r2
 8006918:	f100 33ff 	add.w	r3, r0, #4294967295
 800691c:	d100      	bne.n	8006920 <memcpy+0xc>
 800691e:	4770      	bx	lr
 8006920:	b510      	push	{r4, lr}
 8006922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692a:	4291      	cmp	r1, r2
 800692c:	d1f9      	bne.n	8006922 <memcpy+0xe>
 800692e:	bd10      	pop	{r4, pc}

08006930 <memset>:
 8006930:	4402      	add	r2, r0
 8006932:	4603      	mov	r3, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
